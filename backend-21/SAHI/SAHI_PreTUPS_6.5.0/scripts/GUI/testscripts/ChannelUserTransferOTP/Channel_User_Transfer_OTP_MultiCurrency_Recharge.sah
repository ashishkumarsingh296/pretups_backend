/**
 * Script Name : Channel User Transfer using OTP Multi Currency Recharge
 * 
 * Author : Rahul Rana (rahu.rana@mahindracomviva.com)
 * Date   : 06/09/2016
 * 
 */

/**
 * Include
 */
_includeOnce("../../../../utility/Users.sah");
_includeOnce("../../../../utility/Datastructure.sah");

// Assets
_includeOnce("../../../../utility/OracleDBConnection.sah");

/**
 * Variables
 */

//Object Owner Type Distributer
var $typeDIST = new ChannelUserType($GEO_DOMAIN.MUNICIPALITY, "Distribution Channel"
		, $CATEGORY.DISTRIBUTER, null, null, null);

//Object Distributor User
var $userDIST_A   = new User("SAHUserDISTAA", "Com@1357"
		, "SAHFirstDISTAA", "SAHDISTAA"
		, "sahuser@comviva.com", $CONFIG.OUTLET
		, $CONFIG.LANGUAGE, $typeDIST
		, $DIST_GRADE);

//Object Owner Type for Sub Distributor
var $typeSubDIST = new ChannelUserType($GEO_DOMAIN.MUNICIPALITY, "Distribution Channel"
		, $CATEGORY.SUB_DISTRIBUTER, $SUB_DIST_PARENT_CATEGORY.DISTRIBUTER
		, $userDIST_A, null);

//Object Distributor User
var $userSubDIST_A   = new User("SAHUserSubDISTAA", "Com@1357"
		, "SAHFirstSubDISTAA", "SAHSubDISTAA"
		, "sahuser@comviva.com", $CONFIG.OUTLET
		, $CONFIG.LANGUAGE, $typeSubDIST
		, $SUB_DIST_GRADE);

//Object Owner Type Distributer POS
var $typeDISTPOS = new ChannelUserType($GEO_DOMAIN.MUNICIPALITY, "Distribution Channel"
		, $CATEGORY.DIS_POS, $IVR_POS_PARENT_CATEGORY.SUB_DISTRIBUTER
		, $userDIST_A, $userSubDIST_A);

//Object Sub Distributor User
var $userDISTPOS_A = new User("SAHUserDISTPOSAA", "Com@1357"
		, "SAHFirstDISTPOSAA", "SAHDISTPOSAA"
		, "sahuser@comviva.com", $CONFIG.OUTLET
		, $CONFIG.LANGUAGE, $typeDISTPOS
		, $DIST_POS_GRADE);

//Object Sub Distributor User
var $userDISTPOS_B = new User("SAHUserDISTPOSBB", "Com@1357"
		, "SAHFirstDISTPOSBB", "SAHDISTPOSBB"
		, "sahuser@comviva.com", $CONFIG.OUTLET
		, $CONFIG.LANGUAGE, $typeDISTPOS
		, $DIST_POS_GRADE);

//Object Owner Type Distributer POS
var $typeDISTIVR = new ChannelUserType($GEO_DOMAIN.MUNICIPALITY, "Distribution Channel"
		, $CATEGORY.IVR_POS, $IVR_POS_PARENT_CATEGORY.DIST_POS
		, $userDIST_A, $userDISTPOS_A);

//Object Sub Distributor User under Sub Distributer A
var $userIVR_A = new User("SAHUserIVRPOSAA", "Com@1357"
		,"SAHFirstIVRPOSAA", "SAHIVRPOSAA"
		,"sahuser@comviva.com", $CONFIG.OUTLET
		, $CONFIG.LANGUAGE, $typeDISTIVR
		, $IVR_POS_GRADE);

//Object Sub Distributor User under Sub Distributer A
var $userIVR_B = new User("SAHUserIVRPOSBB", "Com@1357"
		,"SAHFirstIVRPOSBB", "SAHIVRPOSBB"
		,"sahuser@comviva.com", $CONFIG.OUTLET
		, $CONFIG.LANGUAGE, $typeDISTIVR
		, $IVR_POS_GRADE);

/**
 * EXECUTION
 */
Setup();

TC_USR_MIGRATION_08();
TC_USR_MIGRATION_10();
TC_USR_MIGRATION_19();
TC_USR_MIGRATION_13_18();
TC_USR_MIGRATION_14_18();
TC_USR_MIGRATION_20();

TC_MULTI_CURRENCY_TX_01();
TC_MULTI_CURRENCY_TX_02();

/**
 * Setup required to run this test
 * Create user only if it's required
 */
function Setup(){
	var $t1 = _testcase("SETUP", "SETUP: Specific to run this Suite");
	$t1.start();
	// Create DIST User
	createChannelUser($userDIST_A);	

	// Create SDIST User
	createChannelUser($userSubDIST_A);

	// Create DIST POS users
	createChannelUser($userDISTPOS_A);
	createChannelUser($userDISTPOS_B); 

	// Create IVR POS users
	createChannelUser($userIVR_A);
	createChannelUser($userIVR_B);
	
	// Script Tear-down
	ScriptTearDown();
	$t1.end();
}

/**
 * Script Tear-down
 * Make sure that the user $userIVR_A and $userIVR_B are under $userDISTPOS_A
 */
function ScriptTearDown(){
	try{
		if($userIVR_A.getCurrentParentUserName() != $userDISTPOS_A.UserName){			
			_log("Setup need to be corrected for "+ $userIVR_A.UserName, "CUSTOM1");
			initiateUserMigration($userDISTPOS_A, $userIVR_A, false, "initiated");
			if (_condition(_isVisible(_span(/expirado/))) || _isVisible(_span(/expired/))){
				initiateUserMigration($userDISTPOS_A, $userIVR_A, false, "initiated");
			}		
			confirmUserMigration($userDISTPOS_A, $userIVR_A, true, true);
		}
		if($userIVR_B.getCurrentParentUserName() != $userDISTPOS_A.UserName){
			_log("Setup need to be corrected for " + $userIVR_B.UserName, "CUSTOM1");
			initiateUserMigration($userDISTPOS_A, $userIVR_B, false, "initiated");
			if (_condition(_isVisible(_span(/expirado/))) || _isVisible(_span(/expired/))){
				initiateUserMigration($userDISTPOS_A, $userIVR_B, false, "initiated");
			}
			confirmUserMigration($userDISTPOS_A, $userIVR_B, true, true);
		}
	}catch(e){
		_logException(e);
		_log("Script teardown Failed", "error");
	}	
}

/**
 * To check validation  on User Transfer Using OTP -initiate
 *
 * TC_USR_MIGRATION_08
 */
function TC_USR_MIGRATION_08(){
	var $t1 = _testcase("TC_USR_MIGRATION_08", "To check validation  on User Transfer Using OTP INITIATE");
	$t1.start();
	try{
		// initiate using details
		initiateUserMigration($userDISTPOS_B, $userIVR_A, false, "initiated");
		
	}catch (e) {
		_logException(e);
		_log("TESTCASE FAILED -- TC_USR_MIGRATION_08", "error");
	}
	$t1.end();
}

/**
 * To check message on User Transfer Initiation using MSISDN
 *
 * TC_USR_MIGRATION_10
 */
function TC_USR_MIGRATION_10(){
	var $t1 = _testcase("TC_USR_MIGRATION_10", "To check message on User Transfer Initiation using MSISDN");
	$t1.start();
	try{				
		// Initiate using MSISDN, should be initiated
		initiateUserMigration($userDISTPOS_B, $userIVR_B, true, "initiated");
	}catch (e) {
		_logException(e);
		_log("TESTCASE FAILED -- TC_USR_MIGRATION_10", "error");
	}
	$t1.end();
}

/**
 * Validate user transfer confirmation with already transferred user
 *
 * TC_USR_MIGRATION_19
 */
function TC_USR_MIGRATION_19(){
	var $t1 = _testcase("TC_USR_MIGRATION_19", "Validate user transfer confirmation with already transferred user");
	$t1.start();
	try{
		// initiate using Details
		initiateUserMigration($userDISTPOS_B, $userIVR_A, false, "already initiated");
		initiateUserMigration($userDISTPOS_B, $userIVR_B, false, "already initiated");
		
		// initiate using MSISDN
		initiateUserMigration($userDISTPOS_B, $userIVR_A, true, "already initiated");
		initiateUserMigration($userDISTPOS_B, $userIVR_B, true, "already initiated");		
	}catch (e) {
		_logException(e);
		_log("TESTCASE FAILED -- TC_USR_MIGRATION_19", "error");
	}
	$t1.end();
}

/**
 * user transfer confirmation with correct OTP
 * &
 * To check validation  on User Transfer Using OTP -confirm using MSISDM
 *
 * TC_USR_MIGRATION_13_18
 */
function TC_USR_MIGRATION_13_18(){
	var $t1 = _testcase("TC_USR_MIGRATION_13_18", "User transfer confirmation with correct OTP via MSISDN");
	$t1.start();
	try{		
		/*
		 * Initiate Migration via MSISDN
		 * Verify migration fails when providing wrong OTP
		 * Verify that migration is successful when providing correct OTP
		 */
		confirmUserMigration($userDISTPOS_B, $userIVR_A, true, true);// Correct OTP
		
		/*
		 * Verify User is successfully migrated
		 * Re-initiate using same Parent and It must fail
		 */
		initiateUserMigration($userDISTPOS_B, $userIVR_A, true, "same domain");		
	}catch (e) {
		_logException(e);
		_log("TESTCASE FAILED -- TC_USR_MIGRATION_13_18", "error");
	}
	$t1.end();
}

/**
 * user transfer confirmation with correct OTP
 * &
 * To check validation  on User Transfer Using OTP -confirm using Details
 *
 * TC_USR_MIGRATION_14_18
 */
function TC_USR_MIGRATION_14_18(){
	var $t1 = _testcase("TC_USR_MIGRATION_14_18", "User transfer confirmation with correct OTP via DETAILS");
	$t1.start();
	try{
		/*
		 * Initiate Migration via DETAILS
		 * Verify migration fails when providing wrong OTP
		 * Verify that migration is successful when providing correct OTP
		 */
		confirmUserMigration($userDISTPOS_B, $userIVR_B, false, true);
		
		/*
		 * Verify User is successfully migrated
		 * Re-initiate using same Parent and It must fail
		 */
		initiateUserMigration($userDISTPOS_B, $userIVR_B, true, "same domain");		
	}catch (e) {
		_logException(e);
		_log("TESTCASE FAILED -- TC_USR_MIGRATION_14_18", "error");
	}
	$t1.end();
}

/**
 * OTP timeout Validation with preference
 *
 * TC_USR_MIGRATION_20
 * TODO - Partial Time out of password is failing
 */
function TC_USR_MIGRATION_20(){
	var $t1 = _testcase("TC_USR_MIGRATION_20", "OTP timeout Validation with preference");
	$t1.start();
	try{
		/*
		 * change the Timeout value to 120 second
		 * try OTP for transfer after 120 second. shouldn't happen, verify error
		 * after 120 second re initiate, should initiate
		 */
		var $result = executeQuery("select DEFAULT_VALUE from SYSTEM_PREFERENCES where PREFERENCE_CODE = 'OTP_TIMEOUT_INSEC'");
		var $otpTimeOut = $result[0][0]; // in seconds
		var $waitTime = parseInt($otpTimeOut * 1000);
		
		if ($otpTimeOut > 180){
			_log("Default password Time Out is set more than 3 Minutes - please adjust this for better script response", "FAILURE");
		}
		
		// initiate using details
		initiateUserMigration($userDISTPOS_A, $userIVR_A, true, "initiated");
		
		// * Verify OTP Expiration : Confirmation initiated via MSISDN		
		confirmUserMigration($userDISTPOS_A, $userIVR_A, true, false, $waitTime);
		
		// Initiate using MSISDN, should be initiated
		initiateUserMigration($userDISTPOS_A, $userIVR_B, true, "initiated");
		
		// * Verify OTP Expiration : Confirmation initiated via DETAILS	
		confirmUserMigration($userDISTPOS_A, $userIVR_B, false, false, $waitTime);
	}catch (e) {
		_logException(e);
		_log("TESTCASE FAILED -- TC_USR_MIGRATION_20", "error");
	}
	$t1.end();
}

/**
 * To verify GUI of Multicurrency Service from web
 *
 * TC_MULTI_CURRENCY_TX_01
 */
function TC_MULTI_CURRENCY_TX_01(){
	var $t1 = _testcase("TC_MULTI_CURRENCY_TX_01", "To verify GUI of Multicurrency Service from web");
	$t1.start();
	try{
		/*
		 * Login as Channel User and Verify the UI
		 */
		login($userDISTPOS_A);
		_click(_link("C2S transfer"));
		_click(_link("C2S Recharge"));
		
		_assertVisible(_select("serviceType"));
		var $list = _getOptions(_select("serviceType"), "value");
		// TODO - verify options, chouldn't verify currently, as GUI language is shown in Spanish
		
		_setSelected(_select("serviceType"), "Multi Currency Prepaid Recharge", "Select Option");
		_assertVisible(_textbox("subscriberMsisdn"));
		_assertVisible(_textbox("amount"));
		_assertVisible(_select("subServiceType"));
		_assertVisible(_select("languageCode"));
		_assertVisible(_select("currencyCode"));
		_assertVisible(_password("pin"));		
	}catch (e) {
		_logException(e);
		_log("TESTCASE FAILED -- TC_MULTI_CURRENCY_TX_01", "error");
	}
	$t1.end();
}

/**
 * To perform multi currency service from Web
 *
 * TC_MULTI_CURRENCY_TX_02
 */
function TC_MULTI_CURRENCY_TX_02(){
	var $t1 = _testcase("TC_MULTI_CURRENCY_TX_02", "To perform multi currency service from Web");
	$t1.start();
	try{
		login($userDIST_A);
		_click(_link("C2S transfer"));
		_click(_link("C2S Recharge"));
		_assertVisible(_select("serviceType"));		
		_setSelected(_select("serviceType"), "Multi Currency Prepaid Recharge", "Select Option for multicurrenct transfer");
		_setValue(_textbox("subscriberMsisdn"), $userIVR_A.MSISDN);
		_setValue(_textbox("amount"), 100);
		_setSelected(_select("currencyCode"), "RUPEE");
		_setValue(_password("pin"), $userDIST_A.PIN);
		
		_click(_submit("btnSubmit"));		
		//TODO - Verification pending as Transaction is failing Due to IN
		
	}catch (e) {
		_logException(e);
		_log("TESTCASE FAILED -- TC_MULTI_CURRENCY_TX_02", "error");
	}
	$t1.end();
}

//////////////////////////////////////////////////////////
// Script Specific Methods - Help Functions
//////////////////////////////////////////////////////////
/**
 * Navigate to Channel User Transfer/Confirm  Page
 * @param $link
 */
function navigateChannelUserTransfer($link){
	_click(_link(/Channel user transfer/, _in(_span("Channel user transfer"))));
	_wait(2000);
	if (_condition(_isVisible(_div("cssmenu")))){
		_mouseOver(_link(/Channel user transfer/));
		_click(_span($link));
	}else{
		_log("Failed to Open the Channel User Page", "Error");
	}
}


/**
 * Select a user using search functionality
 * @param $label
 * @param $user
 * TODO - need more anchors to identify modal window
 */
function selectUserFromSearch($label, $user){
	try{
		if (_condition(_isVisible(_div("cssmenu")))){
			_click(_image("search.gif", _near(_label($label))));
			_wait(1000);
			if(_isVisible(_select("userList"))){
				_setSelected(_select("userList"), $user.FirstName + " Last Name");
				_click(_button("Submit"));
			}else if(_isVisible(_select("channelUserList"))){
				_setSelected(_select("channelUserList"), $user.FirstName + " Last Name");
				_click(_button("Submit[1]"));
			}					
			_wait(1000);
		}else{
			_setValue(_textbox(0, _rightOf($label)), $user.FirstName);
			_click(_image("search.gif", _rightOf($label)));
		}
		
	}catch(e){
		_logException(e);
		_log("Failed to select using search", "error");
	}
}

/**
 * Initiate User Migration
 * @param $distUser
 * @param $ivrUser
 * @param $isUsingMSISDN
 * @param $verifyMessage
 */
function initiateUserMigration($distUser, $ivrUser, $viaMSISDN, $verifyMessage){
	try{
		login($distUser);
		navigateChannelUserTransfer("User Transfer OTP Initiation");
		if ($viaMSISDN){
			_setValue(_textbox("msisdn"), $ivrUser.MSISDN);
		}else{
			_setSelected(_select("geography"), $distUser.ChannelUserType.GeographicalDomain);
			_setSelected(_select("domain"), $ivrUser.ChannelUserType.Domain);
			_setSelected(_select("category"), $ivrUser.ChannelUserType.Category);
			
			selectUserFromSearch("Owner User *", $ivrUser.ChannelUserType.OwnerUser);
			selectUserFromSearch("Channel User *", $ivrUser);		
		}
		_click(_submit("Submit"));
		
		_click(_submit("OK"));
		
		// verify that transaction is initiated
		if ($verifyMessage == "initiated"){
			_assertVisible(_span("User Transfer Request for "+ $ivrUser.MSISDN +" has been initiated succesfully.Please ask to user for transfer confirmation OTP."));
		}else if($verifyMessage == "already initiated"){
			_assertVisible(_span("User Transfer Request for {0} already initiated ,So request can not be initiated successfully."));
		}else if($verifyMessage == "same domain"){
			_assertVisible(_span("User Transfer Request cannot be initiated succesfully.Since user details is not valid."));
		}
	}catch(e){
		_logException(e);
		_log("Failed to Initiate Channel User Transfer", "error");
	}			
}

/**
 * Initiate User Migration Confirmation
 * 		This will validate the page and will navigate to page where User can provide OTP
 * @param $distUser
 * @param $ivrUser
 * @param $viaMSISDN
 * @param $confirm
 * @param $verifyTimeout
 * @param $waitTime
 */
function confirmUserMigration($distUser, $ivrUser, $viaMSISDN, $reTryOTP, $waitTime){
	try{
		var $otp = decryptOTP($ivrUser);	// Get the OTP
		
		login($distUser);
		navigateChannelUserTransfer("User Transfer OTP Confirmation");
		
		if ($viaMSISDN){
			_setValue(_textbox("msisdn"), $ivrUser.MSISDN);
		}else{
			// Provide details
			_setSelected(_select("geography"), $ivrUser.ChannelUserType.GeographicalDomain);
			_setSelected(_select("domain"), $ivrUser.ChannelUserType.Domain);
			_setSelected(_select("category"), $ivrUser.ChannelUserType.Category);			
		}
		_click(_submit("Submit"));
		
		// Verify the Page, if not via MSISDN a new page opens
		if (!$viaMSISDN){
			var $currentParent = $ivrUser.getCurrentParentUserName();
			var $currentOwner  = $ivrUser.getCurrentOwnerUserName();
			_wait(2000);
			_assertVisible(_div("User Transfer OTP Confirmation"), "Verify the header");
			_assertVisible(_cell($ivrUser.ChannelUserType.GeographicalDomain,_under(_tableHeader("Geographical Domain"))), "verify geographical Domain");
			_assertVisible(_cell($ivrUser.ChannelUserType.Domain,_under(_tableHeader("Domain"))), "verify  Domain");
			_assertVisible(_cell($ivrUser.ChannelUserType.Category,_under(_tableHeader("Category"))), "verify  Category");		
			
			// Verify The transaction exists
			_assertVisible(_cell($ivrUser.FirstName + " Last Name", _under(_tableHeader("User Name"))), "verify User Name");			
			_assertVisible(_cell($currentParent + " Last Name", _under(_tableHeader("Parent Name"))), "verify Parent User Name");
			_assertVisible(_cell($currentOwner + " Last Name", _under(_tableHeader("Owner Name"))), "verify Owner User Name");
			_assertVisible(_cell($ivrUser.MSISDN, _under(_tableHeader("Msisdn"))), "verify User MSISDN");
			
			_click(_radio("userList", _leftOf(_cell($ivrUser.MSISDN))));
			_click(_submit("Submit"));
		}
		
		_assertVisible(_div("OTP Confirmation:"));
		_assertVisible(_label("Please enter OTP to confirm user transfer *"));	
		
		if ($waitTime){
			// Verify OTP expiration
			_wait($waitTime);
			_setValue(_password("otp"), $otp); // set correct OTP
			_click(_submit("Submit[1]"));
			_assertVisible(_span("OTP has Expired.Kindly initiate the request again."));	
		}else{
			if ($reTryOTP){
				_setValue(_password("otp"), "invalidOTP<@#$>");
				_click(_submit("Submit[1]"));
				_assertVisible(_span("OTP is incorrect."));
			}			
			_setValue(_password("otp"), $otp); // set correct OTP
			_click(_submit("Submit[1]"));			
			_assertVisible(_span("User(s) transferred successfully."));	
		}
		
		if (_isVisible(_button(/Close/))){
			_click(_button(/Close/));
		}
		
		
	}catch(e){
		_logException(e);
		_log("Confirm Channel User transfer Failed", "error");
	}	
}

/**
 * 
 * @param $initiaterUser - User who has initiated the Transfer
 * @returns OTP
 */
function decryptOTP($targetUser){
	try{		
		var $result = executeQuery("Select u1.OTP from User_migration_request u1 , Users u2 where u2.LOGIN_ID ='"+ $targetUser.UserName +"' AND u1.TO_USER_ID = u2.USER_ID");
		var $encryptedOTP = $result[0][0];
		_navigateTo($CONFIG.ENCRYPT_URL);
		_setValue(_textbox("t1"), $encryptedOTP);
		_click(_submit("Decrypt Text"));
		var $OTP = _getText(_cell(2));
		return $OTP;
	}catch(e){
		_logException(e);
		_log("Failed to fetch OTP and decrypt the same", "error");
	}		
}

//////////////////////////////////////////////////////////
// TODO - Move to Framework Files
//////////////////////////////////////////////////////////

/**
 * Create Channel User
 * @param $user {object} - User Object
 */
function createChannelUser($user){
	try{
		if ($user.ExistingUser){
			_log("SAHI User Exists in the system - " + $user.UserName, "CUSTOM1");
		}else{
			// Login as Channel Admin
			login($channelAdmin);

			_log("Adding Channer User: " + $user.UserName, "CUSTOM5");
			// Start Wizard Page 1
			_click(_link("Channel user"));
			_click(_link("Add channel user"));

			_setSelected(_select("domainCode"), $user.ChannelUserType.Domain, "Select Domain");
			_setSelected(_select("channelCategoryCode"), $user.ChannelUserType.Category, "Select Category");

			if($user.ChannelUserType.ParentCategory){
				_setSelected(_select("parentCategoryCode"), $user.ChannelUserType.ParentCategory, "Select Parent Category");
			}
			_click(_submit("Submit"));

			// Select the Owner User and Parent User
			if ($user.ChannelUserType.OwnerUser){			
				selectUserFromSearch(_cell("Owner user :"), $user.ChannelUserType.OwnerUser);	

				if ($user.ChannelUserType.ParentUser){
					selectUserFromSearch(_cell("Parent user :"), $user.ChannelUserType.ParentUser);
				}
				_click(_submit("Submit"));
			}
			// End Wizard Page 1

			// Add Channel User Detail 
			_setValue(_textbox("firstName"), $user.FirstName);
			_setValue(_textbox("shortName"), $user.ShortName);
			_setValue(_textbox("lastName") , "Last Name"); // hard - coded the last name
			_setSelected(_select("userNamePrefixCode"), "Mr");
			_setValue(_textbox("externalCode"), $user.ExternalCode); // unique code TODO- ?? is providing MSISDN is correct
			_setSelected(_select("outletCode"), $CONFIG.OUTLET);
			_setValue(_textbox("email"), $user.EMail);

			//Assign Phone Number
			if (_isVisible(_link("Assign phone numbers"))){
				_click(_link("Assign phone numbers"));
				_popup("eRecharge")._setValue(_textbox("msisdnListIndexed[0].msisdn"), $user.MSISDN);
				_popup("eRecharge")._setValue(_password("msisdnListIndexed[0].showSmsPin"), $user.PIN);
				_popup("eRecharge")._setValue(_password("msisdnListIndexed[0].confirmSmsPin"), $user.PIN);
				_popup("eRecharge")._setSelected(_select("msisdnListIndexed[0].phoneProfile"), $user.ChannelUserType.Category);
				_popup("eRecharge")._click(_submit("Add") ,"Add Details");
			}

			// Assign Geography
			if (_isVisible(_link("Assign geographies"))){
				_click(_link("Assign geographies"));
				_popup("eRecharge")._click(_radio("geographicalCode"));
				_popup("eRecharge")._click(_submit("Add") ,"Add Details");
			}

			// Assign Roles TODO - Specific Role assignment
			if (_isVisible(_link("Assign roles"))){
				_click(_link("Assign roles"));
				_popup("eRecharge")._click(_checkbox("checkall"));
				_popup("eRecharge")._click(_submit("Add") ,"Add Roles");
			}

			// Assign Roles TODO - Specific Role assignment
			if (_isVisible(_link("Assign services"))){
				_click(_link("Assign services"));
				_popup("eRecharge")._click(_checkbox("checkall"));
				_popup("eRecharge")._click(_submit("Add") ,"Add Services");
			}

			// Assign Grade and Profile Information
			_setSelected(_select("userGradeId"), $user.Grade.USER_GRADE);
			_setSelected(_select("commissionProfileSetId"), $user.Grade.COMMISION_PROFILE);
			_setSelected(_select("trannferProfileId"), $user.Grade.TRANSFER_PROFILE);

			// Provide the User login ID and Password
			_setValue(_textbox("webLoginID"), $user.UserName);
			_setValue(_password("showPassword"), $CONFIG.USER_CREATION_PASSWORD);
			_setValue(_password("confirmPassword"), $CONFIG.USER_CREATION_PASSWORD);
			_click(_submit("Save"));
			_click(_submit("Confirm"));	
			_assertVisible(_listItem("User " + $user.FirstName+ " Last Name successfully added"));
			// TODO - below is not functional, approving channel user, functionality might varry in future
			//approveChannelUser();
			changeFirstTimePassword($user);
		}
	}catch(e){
		_logException(e);
		_log("Failed to Create the Channel User", "error");
	}
}
function createChannelUser($user){
	try{
		if ($user.ExistingUser){
			_log("SAHI User Exists in the system - " + $user.UserName, "CUSTOM1");
		}else{
			// Login as Channel Admin
			login($channelAdmin);

			_log("Adding Channer User: " + $user.UserName, "CUSTOM5");
			// Start Wizard Page 1
			_click(_link("Channel user"));
			_click(_link("Add channel user"));

			_setSelected(_select("domainCode"), $user.ChannelUserType.Domain, "Select Domain");
			_setSelected(_select("channelCategoryCode"), $user.ChannelUserType.Category, "Select Category");

			if($user.ChannelUserType.ParentCategory){
				_setSelected(_select("parentCategoryCode"), $user.ChannelUserType.ParentCategory, "Select Parent Category");
			}
			_click(_submit("Submit"));

			// Select the Owner User and Parent User
			if ($user.ChannelUserType.OwnerUser){			
				selectUserFromSearch(_cell("Owner user :"), $user.ChannelUserType.OwnerUser);	

				if ($user.ChannelUserType.ParentUser){
					selectUserFromSearch(_cell("Parent user :"), $user.ChannelUserType.ParentUser);
				}
				_click(_submit("Submit"));
			}
			// End Wizard Page 1

			// Add Channel User Detail 
			_setValue(_textbox("firstName"), $user.FirstName);
			_setValue(_textbox("shortName"), $user.ShortName);
			_setValue(_textbox("lastName") , "Last Name"); // hard - coded the last name
			_setSelected(_select("userNamePrefixCode"), "Mr");
			_setValue(_textbox("externalCode"), $user.ExternalCode); // unique code TODO- ?? is providing MSISDN is correct
			_setSelected(_select("outletCode"), $CONFIG.OUTLET);
			_setValue(_textbox("email"), $user.EMail);

			//Assign Phone Number
			if (_isVisible(_link("Assign phone numbers"))){
				_click(_link("Assign phone numbers"));
				_popup("eRecharge")._setValue(_textbox("msisdnListIndexed[0].msisdn"), $user.MSISDN);
				_popup("eRecharge")._setValue(_password("msisdnListIndexed[0].showSmsPin"), $user.PIN);
				_popup("eRecharge")._setValue(_password("msisdnListIndexed[0].confirmSmsPin"), $user.PIN);
				_popup("eRecharge")._setSelected(_select("msisdnListIndexed[0].phoneProfile"), $user.ChannelUserType.Category);
				_popup("eRecharge")._click(_submit("Add") ,"Add Details");
			}

			// Assign Geography
			if (_isVisible(_link("Assign geographies"))){
				_click(_link("Assign geographies"));
				_popup("eRecharge")._click(_radio("geographicalCode"));
				_popup("eRecharge")._click(_submit("Add") ,"Add Details");
			}

			// Assign Roles TODO - Specific Role assignment
			if (_isVisible(_link("Assign roles"))){
				_click(_link("Assign roles"));
				_popup("eRecharge")._click(_checkbox("checkall"));
				_popup("eRecharge")._click(_submit("Add") ,"Add Roles");
			}

			// Assign Roles TODO - Specific Role assignment
			if (_isVisible(_link("Assign services"))){
				_click(_link("Assign services"));
				_popup("eRecharge")._click(_checkbox("checkall"));
				_popup("eRecharge")._click(_submit("Add") ,"Add Services");
			}

			// Assign Grade and Profile Information
			_setSelected(_select("userGradeId"), $user.Grade.USER_GRADE);
			_setSelected(_select("commissionProfileSetId"), $user.Grade.COMMISION_PROFILE);
			_setSelected(_select("trannferProfileId"), $user.Grade.TRANSFER_PROFILE);

			// Provide the User login ID and Password
			_setValue(_textbox("webLoginID"), $user.UserName);
			_setValue(_password("showPassword"), $CONFIG.USER_CREATION_PASSWORD);
			_setValue(_password("confirmPassword"), $CONFIG.USER_CREATION_PASSWORD);
			_click(_submit("Save"));
			_click(_submit("Confirm"));	
			_assertVisible(_listItem("User " + $user.FirstName+ " Last Name successfully added"));
			// TODO - below is not functional, approving channel user, functionality might varry in future
			//approveChannelUser();
			//changeFirstTimePassword($user);
		}
	}catch(e){
		_logException(e);
		_log("Failed to Create the Channel User", "error");
	}
}

/**
 * Login Function
 * @param $user - User Object
 * 
 * TODO - Include more scenarios
 * TODO - Use Object Repository
 */
function login($user){
	try{
		_navigateTo($CONFIG.URL); // Navigate to the Page

		if (_isVisible(_select("language"))){
			_setSelected(_select("language"), $CONFIG.LANGUAGE , "Set the Language");
		}

		_setValue(_textbox("loginID"), $user.UserName, "Set the UserName");
		_setValue(_password("password"), $user.Password, "Set the Password");

		if(_isVisible(_submit("Login"))){
			_click(_submit("Login"));
		}else if(_isVisible(_submit("Entrada al sistema"))){
			_click(_submit("Entrada al sistema")); // for Spanish
		} 

		if (_isVisible(_submit("Re-login"))){
			_click(_submit("Re-login"));
		}
		_assertVisible(_link("Logout"), "Verify Login as User:" + $user.UserName);
	}catch(e){
		_logException(e);
		_log("Failed to Login as User:" + $user.UserName , "error");
	}	
}

/**
 * Change first time password
 * @param $user
 */
function changeFirstTimePassword($user){
	try{
		if (_isVisible(_link("Logout"))){
			_click(_link("Logout"));		
		}
		_navigateTo($CONFIG.URL); // Navigate to the Page
		
		if (_isVisible(_select("language"))){
			_setSelected(_select("language"), $CONFIG.LANGUAGE , "Set the Language");
		}

		_setValue(_textbox("loginID"), $user.UserName, "Set the UserName");
		_setValue(_password("password"), $CONFIG.USER_CREATION_PASSWORD);

		if(_isVisible(_submit("Login"))){
			_click(_submit("Login"));
		}else if(_isVisible(_submit("Entrada al sistema"))){
			_click(_submit("Entrada al sistema")); // for Spanish
		} 

		if (_isVisible(_submit("Re-login"))){
			_click(_submit("Re-login"));
		}	
		_setValue(_password("oldPassword"), $CONFIG.USER_CREATION_PASSWORD);
		_setValue(_password("newPassword"), $user.Password);
		_setValue(_password("confirmNewPassword"), $user.Password);
		_click(_submit("Submit"));
		
		_assertVisible(_listItem("Successfully changed password"));
		
	}catch(e){
		_logException(e);
		_log("Failed to change the First time Password", "error");
	}	
}
