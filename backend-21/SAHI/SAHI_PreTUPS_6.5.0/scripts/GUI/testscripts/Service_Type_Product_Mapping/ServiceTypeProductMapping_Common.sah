

// This scripts contains all the common methods for service product mapping;

_includeOnce("../../../../utility/ImportPackage.sah");

var $l_naCsv = _readCSVFile("../../../GUI/testdata/NA_Login.csv");

	var $g_serviceName;
	var $g_productName;
	var $g_productCode;
	var $g_subscriberType;
	var $g_receiverType;
	var $g_status;
	var $g_assertion;
	
	var $l_modifyProductName;
	
	var $a_Prefix;
	
	
	function commonVaribleToServiceProduct($g_row, $g_col) {
		
		$g_serviceName = $g_seriveTypeProductMapping[$g_row][$g_col++];
		$g_productName = $g_seriveTypeProductMapping[$g_row][$g_col++];
		$g_productCode = $g_seriveTypeProductMapping[$g_row][$g_col++];
		$g_subscriberType = $g_seriveTypeProductMapping[$g_row][$g_col++];
		$g_receiverType = $g_seriveTypeProductMapping[$g_row][$g_col++];
		$g_status = $g_seriveTypeProductMapping[$g_row][$g_col++];
		$g_assertion = $g_seriveTypeProductMapping[$g_row][$g_col++];
		
	}
	
	
	function commonVaribleForExistingNameOrCode($g_row, $g_col) {
		commonVaribleToServiceProduct($g_row, $g_col);
		$g_productName = $l_naCsv[23][1];
		$g_productCode = $l_naCsv[23][2];
	}
	
	function addNewSeriviceProduct() {
		
		$g_productName = productName($g_autoPrefix);
		$g_productCode = productCode();
		
		addSerivceProductCommon();
		submit();
		confirm();
		
		_assertExists(_listItem("/" +$g_assertion + ".*/"));
		
		if(_exists(_listItem("/"+$g_assertion+".*/"))){
			$l_naCsv[23][1] = $g_productName;
			$l_naCsv[23][2] = $g_productCode;
			_writeCSVFile($l_naCsv, "../../../GUI/testdata/NA_Login.csv", 1); // Writes the newly created Channel User in a csv file.
			_log("Serive Product is added successfully");
		}
		else {
			_log("Service Product is not added successfully ");
		}
		
		
	}
	
	
	function addServiceProductWithInvalidDetails() {
		addSerivceProductCommon();
		submit();
		_assertExists(_listItem("/" +$g_assertion + ".*/"));
	}
	
	function toValidateValuesInDropDown() {
		addSerivceProductCommon();
		
		_setSelected(_select("sendersubscriberType"), 1);
		var $tt = _getSelectedText(_select("sendersubscriberType"));

		if($tt == "Prepaid Subscriber")
			_log("Successful");
		else
			_log("Failed");
		
	}
	
	
	
	function checkResetButtonFunctionality() {
		addSerivceProductCommon();
		reset();
		if(_getValue(_textbox("selectorName")) == "" &&  _getValue(_textbox("selectorCode")) == "")
			_log("Successful")
		else 
			_log("Failed Reset Check");
		
	}
	
	
	function checkForExistingProductCodeOrName() {
		addSerivceProductCommon();
		submit();
		_assertExists(_listItem("/" +$g_assertion + ".*/"));
	}
	
	
	function viewServiceProduct() {
		
		
		$g_serviceName = "Promo VAS Recharge";
		$g_productName = $l_naCsv[23][1];
				
		_click(_link("Service type product mapping"));
		_click(_link("View product"));
		_setSelected(_select("serviceType"), $g_serviceName);
		_click(_submit("Submit"));
		_assertExists(_cell($g_productName, _near(_cell("Product name"))));
		

	}
	
	function addServiceProductWithoutServiceName() {

		_click(_link("Service type product mapping"));
		_click(_link("Add product"));
		_assertExists(_div("Select service type"));
		_click(_submit("Submit"));
		_assertExists(_listItem("Service name is required."));

	}

	function chekBackButtonOnModifucationPage() {
		commonMethodForModification()
		if($g_productName == _getValue(_textbox("selectorName")))
			_log("Test Case Successful")
		else 
			_log("Failed");
			
		_click(_submit("Back"));
		_assertExists(_div("Service product list"));
}	
	
	function chekResetButtonOnModifucationPage() {
		commonMethodForModification()
		_setValue(_textbox("selectorName"), "TESTINGREST");
		_click(_reset("Reset"));
		if($g_productName == _getValue(_textbox("selectorName")))
			_log("Test Case Successful")
		else 
			_log("Failed");
	}
	
	
	function chekBackButtonOnConfirmPage() {
		commonMethodForModification();
			_setValue(_textbox("selectorName"), $g_productName+"M");
		_click(_submit("Submit"));
		_assertExists(_submit("Confirm"));
		_click(_submit("Back"));
		_assertExists(_submit("Submit"));
}
	
	function modifyServiceProduct() {
		commonMethodForModification();
		_setValue(_textbox("selectorName"), $g_productName+"M");
		_click(_submit("Submit"));
		_click(_submit("Confirm"));
		_assertExists(_listItem("Service product mapping for service Promo VAS Recharge modified successfully"));
	}
	
	function deleteServiceProduct() {
		
		$g_productCode = $l_naCsv[23][2];
		
		_click(_link("Service type product mapping"));
		_click(_link("Delete product"));
		_setSelected(_select("serviceType"), "Promo VAS Recharge");
		_click(_submit("Submit"));
		_click(_radio("radioIndex", _near(_cell($g_productCode))));
		_click(_submit("Delete"));
		_click(_submit("Confirm"));
		_assertExists(_listItem("/" + "delete successfully" + ".*/" ));

		
	}
	
	// Common Function for Service Product ..... 
	
	function addSerivceProductCommon() {
		
		_click(_link("Service type product mapping"));
		_click(_link("Add product"));
		_setSelected(_select("serviceType"), $g_serviceName);
		_click(_submit("Submit"));
		_click(_submit("Add"));
		_setValue(_textbox("selectorName"), $g_productName);
		_setValue(_textbox("selectorCode"), $g_productCode);
		_setSelected(_select("sendersubscriberType"), $g_subscriberType);
		_setSelected(_select("receiversubscriberType"), $g_receiverType);
		_setSelected(_select("status"), $g_status);
	}
	
	function commonMethodForModification() {
		$g_productName = $l_naCsv[23][1];
		
		_click(_link("Service type product mapping"));
		_click(_link("Modify product"));
		_setSelected(_select("serviceType"), "Promo VAS Recharge");
		_click(_submit("Submit"));
		_click(_radio("radioIndex", _near(_cell($g_productName))));
		_click(_submit("Modify"));
	
	}
	
	
	function submit() {
		_click(_submit("Submit"));
	}
	
	function confirm() {
		_click(_submit($g_BtnConfirm));
	}
	
	
	function reset(){
		_click(_reset("Reset"));
	}
	
	
	
	function productName($a_Prefix){
		 $l_time = currentTime(); // fetch current time(CurretnTime)
		 var  $l_name = $a_Prefix + "PRO" + $l_time; //AUTONAcurrentTime
		 return $l_name;
	}


	function productCode(){
		 
		var $l_time = new Date();
		var $keyword = "PRO"+ $l_time.getHours()+$l_time.getMinutes(); //AUTONAcurrentTime
		 return $keyword;
	 }


	 
	
	