<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Connecting protocol</stringProp>
          </elementProp>
          <elementProp name="path" elementType="Argument">
            <stringProp name="Argument.name">path</stringProp>
            <stringProp name="Argument.value">/pretups/rest/common/rest-controller/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Path of Rest Controller</stringProp>
          </elementProp>
          <elementProp name="loginID" elementType="Argument">
            <stringProp name="Argument.name">loginID</stringProp>
            <stringProp name="Argument.value">superadmin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Login id </stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">1357</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">password of login user</stringProp>
          </elementProp>
          <elementProp name="dataLoginID" elementType="Argument">
            <stringProp name="Argument.name">dataLoginID</stringProp>
            <stringProp name="Argument.value">superadmin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Data login id</stringProp>
          </elementProp>
          <elementProp name="type1" elementType="Argument">
            <stringProp name="Argument.name">type1</stringProp>
            <stringProp name="Argument.value">CHANGENETWORK</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Action type of ChangeNetwork</stringProp>
          </elementProp>
          <elementProp name="type2" elementType="Argument">
            <stringProp name="Argument.name">type2</stringProp>
            <stringProp name="Argument.value">SUBMITCHANGENETWORK</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Action type of Submit Change Network</stringProp>
          </elementProp>
          <elementProp name="externalCode" elementType="Argument">
            <stringProp name="Argument.name">externalCode</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="networkCode" elementType="Argument">
            <stringProp name="Argument.name">networkCode</stringProp>
            <stringProp name="Argument.value">NG</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Network Code</stringProp>
          </elementProp>
          <elementProp name="CSV path" elementType="Argument">
            <stringProp name="Argument.name">CSV path</stringProp>
            <stringProp name="Argument.value">C:\SVN Checkout\JMETER_PRETUPS_UPDATED\scripts\testdata</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">CSV path for test data</stringProp>
          </elementProp>
          <elementProp name="ResultCsvPath" elementType="Argument">
            <stringProp name="Argument.name">ResultCsvPath</stringProp>
            <stringProp name="Argument.value">C:\SVN Checkout\Resultspostgres/result${__time(ddMMyyyyHHmmss,)}.csv</stringProp>
            <stringProp name="Argument.desc">Result CSV File</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Host name" elementType="Argument">
            <stringProp name="Argument.name">Host name</stringProp>
            <stringProp name="Argument.value">172.16.11.120</stringProp>
            <stringProp name="Argument.desc">Server host name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Web port" elementType="Argument">
            <stringProp name="Argument.name">Web port</stringProp>
            <stringProp name="Argument.value">3923</stringProp>
            <stringProp name="Argument.desc">Web port</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Port" elementType="Argument">
            <stringProp name="Argument.name">Port</stringProp>
            <stringProp name="Argument.value">22</stringProp>
            <stringProp name="Argument.desc">Server Port</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Tomcat path" elementType="Argument">
            <stringProp name="Argument.name">Tomcat path</stringProp>
            <stringProp name="Argument.value">/pretups610_selenium/tomcat8_web</stringProp>
            <stringProp name="Argument.desc">Server Tomcat path</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MessageSent Logs path" elementType="Argument">
            <stringProp name="Argument.name">MessageSent Logs path</stringProp>
            <stringProp name="Argument.value">/pretups610_selenium/tomcat8_web/logs</stringProp>
            <stringProp name="Argument.desc">Server path for MessageSent.log</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NetworkStatusType" elementType="Argument">
            <stringProp name="Argument.name">NetworkStatusType</stringProp>
            <stringProp name="Argument.value">NETWORKSTATUS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Action type of network Status</stringProp>
          </elementProp>
          <elementProp name="SaveNetworkStatus" elementType="Argument">
            <stringProp name="Argument.name">SaveNetworkStatus</stringProp>
            <stringProp name="Argument.value">SAVENETWORKSTATUS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Action type of save network status</stringProp>
          </elementProp>
          <elementProp name="newNetworkCode" elementType="Argument">
            <stringProp name="Argument.name">newNetworkCode</stringProp>
            <stringProp name="Argument.value">[&quot;NG&quot;,&quot;PB&quot;]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Network code </stringProp>
          </elementProp>
          <elementProp name="newLanguage1Message" elementType="Argument">
            <stringProp name="Argument.name">newLanguage1Message</stringProp>
            <stringProp name="Argument.value">[&quot;A&quot;,&quot;B&quot;]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Number of parameters must be same as number of networks in setup.</stringProp>
          </elementProp>
          <elementProp name="newLanguage2Message" elementType="Argument">
            <stringProp name="Argument.name">newLanguage2Message</stringProp>
            <stringProp name="Argument.value">[&quot;A&quot;,&quot;B&quot;]</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Number of parameters must be same as number of networks in setup.</stringProp>
          </elementProp>
          <elementProp name="ViewSelfDetailsType" elementType="Argument">
            <stringProp name="Argument.name">ViewSelfDetailsType</stringProp>
            <stringProp name="Argument.value">VIEWSELFDETAILS</stringProp>
            <stringProp name="Argument.desc">Action Type of View Self Details</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ViewNetworkType" elementType="Argument">
            <stringProp name="Argument.name">ViewNetworkType</stringProp>
            <stringProp name="Argument.value">VIEWNETWORKDETAIL</stringProp>
            <stringProp name="Argument.desc">Action Type of ViewNetwork</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ShowNetworkType" elementType="Argument">
            <stringProp name="Argument.name">ShowNetworkType</stringProp>
            <stringProp name="Argument.value">SHOWNETWORKDETAIL</stringProp>
            <stringProp name="Argument.desc">Action Type of Show Network</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ResultXlsPath" elementType="Argument">
            <stringProp name="Argument.name">ResultXlsPath</stringProp>
            <stringProp name="Argument.value">C:\SVN Checkout\Resultspostgres/result${__time(ddMMyyyyHHmmss,)}.xlsx</stringProp>
            <stringProp name="Argument.desc">XLS PAth of Results(in forward Slash)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Database URL" elementType="Argument">
            <stringProp name="Argument.name">Database URL</stringProp>
            <stringProp name="Argument.value">jdbc:postgresql://172.30.24.113:5432/pretups71</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Database URL </stringProp>
          </elementProp>
          <elementProp name="Database User name" elementType="Argument">
            <stringProp name="Argument.name">Database User name</stringProp>
            <stringProp name="Argument.value">pgdb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Database Username</stringProp>
          </elementProp>
          <elementProp name="Database Password" elementType="Argument">
            <stringProp name="Argument.name">Database Password</stringProp>
            <stringProp name="Argument.value">pgdb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Database Password</stringProp>
          </elementProp>
          <elementProp name="Database Driver" elementType="Argument">
            <stringProp name="Argument.name">Database Driver</stringProp>
            <stringProp name="Argument.value">org.postgresql.Driver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Database Driver </stringProp>
          </elementProp>
          <elementProp name="User name" elementType="Argument">
            <stringProp name="Argument.name">User name</stringProp>
            <stringProp name="Argument.value">pretups71</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Server user name</stringProp>
          </elementProp>
          <elementProp name="Password" elementType="Argument">
            <stringProp name="Argument.name">Password</stringProp>
            <stringProp name="Argument.value">pretups123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Server  Password</stringProp>
          </elementProp>
          <elementProp name="SVNRepositoryID" elementType="Argument">
            <stringProp name="Argument.name">SVNRepositoryID</stringProp>
            <stringProp name="Argument.value">http://172.16.10.134/CRM/MFS/PreTUPS5x_NG/Base Versions/PreTUPS_trunk/Code/Work/JMETER/JMETER_PRETUPS_UPDATED/scripts/testscript</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LeadName" elementType="Argument">
            <stringProp name="Argument.name">LeadName</stringProp>
            <stringProp name="Argument.value">Shishupal Singh</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestFrameworkIP" elementType="Argument">
            <stringProp name="Argument.name">TestFrameworkIP</stringProp>
            <stringProp name="Argument.value">172.16.11.120</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestFrameworkName" elementType="Argument">
            <stringProp name="Argument.name">TestFrameworkName</stringProp>
            <stringProp name="Argument.value">JMeter</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestFrameworkSVNPath" elementType="Argument">
            <stringProp name="Argument.name">TestFrameworkSVNPath</stringProp>
            <stringProp name="Argument.value">http://172.16.10.134/CRM/MFS/PreTUPS5x_NG/Base Versions/PreTUPS_trunk/Code/Work/JMETER/JMETER_PRETUPS_UPDATED/scripts/testscript</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestExecutionDateTime" elementType="Argument">
            <stringProp name="Argument.name">TestExecutionDateTime</stringProp>
            <stringProp name="Argument.value">${__time(yyyy/MM/dd HH:mm:ss,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProductInterface" elementType="Argument">
            <stringProp name="Argument.name">ProductInterface</stringProp>
            <stringProp name="Argument.value">WEB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Header" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1480673579000</longProp>
        <longProp name="ThreadGroup.end_time">1480673579000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">O2CTransferRule</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create folder for Catalina" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <intProp name="port">22</intProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">mkdir ${MessageSent Logs path}/${JFolder}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Header for Result file" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
log.info(&quot;...............trying to execute 0............&quot;);
try{String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
log.info(&quot;...............trying to write............&quot;);
print(&quot;SVN-Repository-ID|Lead-Name|Test-Framework-IP|Test-Framework-Name|Test-Framework-SVN-Path|Test-Execution-Date-Time|Product-Interface|Unique-TestCase-ID|Module|Test-Case-Description|Request|Response|Data|SMS1|SMS2|Test-Status|Analysis&quot;);
//print(&quot;Test case ID\tModule\tDescription\tRequest\tResponse\tData\tSMS1\tSMS2\tStatus&quot;);
/*String OldT = &quot;Lokesh&quot; ;
//vars.get(&quot;asjlkdfjasdjkl&quot;); // I need to compare the value of OldT  
                                 // with ${so_tid_1} which is an exact 
                                 // string and not a variable
if (OldT.equals(_Response)){ 
     print(&quot;Message content matched&quot;);
 }
 else {print(&quot;Message content doesn&apos;t matched&quot;);}*/


f.close(); // close the file
// ------
}
catch(Exception ex) { 
	System.out.println(&quot;Still not working&quot;);
	log.info(ex);}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Change Network" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1484112441000</longProp>
        <longProp name="ThreadGroup.end_time">1484112441000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Change Network Positive" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Analysis" elementType="Argument">
                <stringProp name="Argument.name">Analysis</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ChangeNetworkPositive.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${type1}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();


List list = (List)jsonObject.get(&quot;dataObject&quot;); 

	JSONObject object = (JSONObject)list.get(0);
	var networkCode = object.get(&quot;networkCode&quot;).toString();
	


	
	vars.put(&quot;NTCD&quot;,networkCode);
	







String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

//PrintData=&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+statusCode;

log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 


this.interpreter.setOut(p); 


print(PrintData);
f.close(); //close the file







</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="getNetworkCode" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(networkCode,${NTCD})};</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();


List list = (List)jsonObject.get(&quot;dataObject&quot;); 

	JSONObject object = (JSONObject)list.get(0);
	var networkCode = object.get(&quot;networkCode&quot;).toString();
	


	
	vars.put(&quot;NTCD&quot;,networkCode);
	







String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}




String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);



PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+list+&quot;|Status:&quot;+statusCode;


log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 


this.interpreter.setOut(p); 


print(PrintData);
f.close(); //close the file







</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Change Network Negative1" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ChangeNetworkNegative1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${type1}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();


List list = (List)jsonObject.get(&quot;dataObject&quot;); 

	JSONObject object = (JSONObject)list.get(0);
	var networkCode = object.get(&quot;networkCode&quot;).toString();
	


	
	vars.put(&quot;NTCD&quot;,networkCode);
	







String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}




String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);



PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+list+&quot;|Status:&quot;+statusCode;


log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 


this.interpreter.setOut(p); 


print(PrintData);
f.close();







</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Change Network Negative2" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ChangeNetworkNegative2.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${type1}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();


List list = (List)jsonObject.get(&quot;dataObject&quot;); 

	JSONObject object = (JSONObject)list.get(0);
	var networkCode = object.get(&quot;networkCode&quot;).toString();
	


	
	vars.put(&quot;NTCD&quot;,networkCode);
	







String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}




String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);



PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+list+&quot;|Status:&quot;+statusCode;


log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 


this.interpreter.setOut(p); 


print(PrintData);
f.close();







</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Change Network Negative3" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ChangeNetworkNegative3.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${__RandomString(4,1234567890,)}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${type1}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();


List list = (List)jsonObject.get(&quot;dataObject&quot;); 

	JSONObject object = (JSONObject)list.get(0);
	var networkCode = object.get(&quot;networkCode&quot;).toString();
	


	
	vars.put(&quot;NTCD&quot;,networkCode);
	







String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}




String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);



PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+list+&quot;|Status:&quot;+statusCode;


log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 


this.interpreter.setOut(p); 


print(PrintData);
f.close();







</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Change Network Negative4" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ChangeNetworkNegative4.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${type1}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();


List list = (List)jsonObject.get(&quot;dataObject&quot;); 

	JSONObject object = (JSONObject)list.get(0);
	var networkCode = object.get(&quot;networkCode&quot;).toString();
	


	
	vars.put(&quot;NTCD&quot;,networkCode);
	







String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}




String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);



PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+list+&quot;|Status:&quot;+statusCode;


log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 


this.interpreter.setOut(p); 


print(PrintData);
f.close();







</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Change Network Negative5" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ChangeNetworkNegative5.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();


List list = (List)jsonObject.get(&quot;dataObject&quot;); 

	JSONObject object = (JSONObject)list.get(0);
	var networkCode = object.get(&quot;networkCode&quot;).toString();
	


	
	vars.put(&quot;NTCD&quot;,networkCode);
	







String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}




String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);



PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+list+&quot;|Status:&quot;+statusCode;


log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 


this.interpreter.setOut(p); 


print(PrintData);
f.close();







</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Change Network Negative6" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ChangeNetworkNegative6.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${__RandomString(4,1234567890,)}&quot;},&quot;type&quot;:&quot;${type1}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();


List list = (List)jsonObject.get(&quot;dataObject&quot;); 

	JSONObject object = (JSONObject)list.get(0);
	var networkCode = object.get(&quot;networkCode&quot;).toString();
	


	
	vars.put(&quot;NTCD&quot;,networkCode);
	







String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}




String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);



PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+list+&quot;|Status:&quot;+statusCode;


log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 


this.interpreter.setOut(p); 


print(PrintData);
f.close();







</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Change Network Negative7" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ChangeNetworkNegative7.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;&quot;},&quot;type&quot;:&quot;${type1}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();


List list = (List)jsonObject.get(&quot;dataObject&quot;); 

	JSONObject object = (JSONObject)list.get(0);
	var networkCode = object.get(&quot;networkCode&quot;).toString();
	


	
	vars.put(&quot;NTCD&quot;,networkCode);
	







String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}




String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);



PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+list+&quot;|Status:&quot;+statusCode;


log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 


this.interpreter.setOut(p); 


print(PrintData);
f.close();







</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Submit Change Network" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1484115371000</longProp>
        <longProp name="ThreadGroup.end_time">1484115371000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submit Change Positive Scenario" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SubmitChangeNetworkPositive.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;, &quot;networkCode&quot;:&quot;${networkCode}&quot;},&quot;type&quot;:&quot;${type2}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submit Change Negative1" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SubmitChangeNetworkNegative1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;, &quot;networkCode&quot;:&quot;${networkCode}&quot;},&quot;type&quot;:&quot;${type2}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submit Change Negative2" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SubmitChangeNetworkNegative2.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;, &quot;networkCode&quot;:&quot;${networkCode}&quot;},&quot;type&quot;:&quot;${type2}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submit Change Negative3" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SubmitChangeNetworkNegative3.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${__RandomString(4,1234567890,)}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;, &quot;networkCode&quot;:&quot;${networkCode}&quot;},&quot;type&quot;:&quot;${type2}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submit Change Negative4" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SubmitChangeNetworkNegative4.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${__RandomString(4,1234567890,)}&quot;,&quot;password&quot;:&quot;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;, &quot;networkCode&quot;:&quot;${networkCode}&quot;},&quot;type&quot;:&quot;${type2}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submit Change Negative5" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SubmitChangeNetworkNegative5.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;, &quot;networkCode&quot;:&quot;${networkCode}&quot;},&quot;type&quot;:&quot;&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submit Change Negative6" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SubmitChangeNetworkNegative6.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${__RandomString(4,1234567890,)}&quot;, &quot;networkCode&quot;:&quot;${networkCode}&quot;},&quot;type&quot;:&quot;${type2}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submit Change Negative7" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SubmitChangeNetworkNegative7.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;&quot;, &quot;networkCode&quot;:&quot;${networkCode}&quot;},&quot;type&quot;:&quot;${type2}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submit Change Negative8" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SubmitChangeNetworkNegative8.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;, &quot;networkCode&quot;:&quot;&quot;},&quot;type&quot;:&quot;${type2}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Submit Change Negative9" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SubmitChangeNetworkNegative9.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Change Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;, &quot;networkCode&quot;:&quot;${__RandomString(4,1234567890,)}&quot;},&quot;type&quot;:&quot;${type2}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname=" Network Status" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1482218565000</longProp>
        <longProp name="ThreadGroup.end_time">1482218565000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Network Status Positive" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/NetworkStatusPositive.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${NetworkStatusType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();


List list = (List)jsonObject.get(&quot;dataObject&quot;); 

	JSONObject object = (JSONObject)list.get(0);
	var networkCode = object.get(&quot;networkCode&quot;).toString();
	


	
	vars.put(&quot;NTCD&quot;,networkCode);
	







String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}




String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 


this.interpreter.setOut(p); 


print(PrintData);
f.close(); //close the file







</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Network Status Negative1" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/NetworkStatusNegative1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${NetworkStatusType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Network Status Negative2" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/NetworkStatusNegative2.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${NetworkStatusType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Network Status Negative3" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/NetworkStatusNegative3.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${__RandomString(4,1234567890,)}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${NetworkStatusType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Network Status Negative4" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/NetworkStatusNegative4.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${NetworkStatusType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Network Status Negative5" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/NetworkStatusNegative5.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Network Status Negative6" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/NetworkStatusNegative6.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&quot;},&quot;type&quot;:&quot;${NetworkStatusType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Network Status Negative7" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/NetworkStatusNegative7.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;&quot;},&quot;type&quot;:&quot;${NetworkStatusType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname=" Save Network Status" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1482218565000</longProp>
        <longProp name="ThreadGroup.end_time">1482218565000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Network Status Positive" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SaveNetworkStatusPositive.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;newNetworkCode&quot;:${newNetworkCode}, &quot;loginId&quot;:&quot;${dataLoginID}&quot;,  &quot;newLanguage1Message&quot;:${newLanguage1Message}, &quot;newLanguage2Message&quot;:${newLanguage2Message}},&quot;type&quot;:&quot;${SaveNetworkStatus}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();


List list = (List)jsonObject.get(&quot;dataObject&quot;); 

	JSONObject object = (JSONObject)list.get(0);
	var networkCode = object.get(&quot;networkCode&quot;).toString();
	


	
	vars.put(&quot;NTCD&quot;,networkCode);
	







String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}





String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;


log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 


this.interpreter.setOut(p); 


print(PrintData);
f.close(); //close the file







</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Network Status Negative1" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SaveNetworkStatusNegative1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;newNetworkCode&quot;:${newNetworkCode}, &quot;loginId&quot;:&quot;${dataLoginID}&quot;,  &quot;newLanguage1Message&quot;:${newLanguage1Message}, &quot;newLanguage2Message&quot;:${newLanguage2Message}},&quot;type&quot;:&quot;${SaveNetworkStatus}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Network Status Negative2" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SaveNetworkStatusNegative2.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;&quot;,&quot;data&quot;:{&quot;newNetworkCode&quot;:${newNetworkCode}, &quot;loginId&quot;:&quot;${dataLoginID}&quot;,  &quot;newLanguage1Message&quot;:${newLanguage1Message}, &quot;newLanguage2Message&quot;:${newLanguage2Message}},&quot;type&quot;:&quot;${SaveNetworkStatus}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Network Status Negative3" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SaveNetworkStatusNegative3.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${__RandomString(4,1234567890,)}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;newNetworkCode&quot;:${newNetworkCode}, &quot;loginId&quot;:&quot;${dataLoginID}&quot;,  &quot;newLanguage1Message&quot;:${newLanguage1Message}, &quot;newLanguage2Message&quot;:${newLanguage2Message}},&quot;type&quot;:&quot;${SaveNetworkStatus}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Network Status Negative4" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SaveNetworkStatusNegative4.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${__RandomString(2,1234567890,)}&quot;,&quot;data&quot;:{&quot;newNetworkCode&quot;:${newNetworkCode}, &quot;loginId&quot;:&quot;${dataLoginID}&quot;,  &quot;newLanguage1Message&quot;:${newLanguage1Message}, &quot;newLanguage2Message&quot;:${newLanguage2Message}},&quot;type&quot;:&quot;${SaveNetworkStatus}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Network Status Negative5" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SaveNetworkStatusNegative5.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;newNetworkCode&quot;:${newNetworkCode}, &quot;loginId&quot;:&quot;${dataLoginID}&quot;,  &quot;newLanguage1Message&quot;:${newLanguage1Message}, &quot;newLanguage2Message&quot;:${newLanguage2Message}},&quot;type&quot;:&quot;&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Network Status Negative6" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SaveNetworkStatusNegative6.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;newNetworkCode&quot;:${newNetworkCode}, &quot;loginId&quot;:&quot;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&quot;,  &quot;newLanguage1Message&quot;:${newLanguage1Message}, &quot;newLanguage2Message&quot;:${newLanguage2Message}},&quot;type&quot;:&quot;${SaveNetworkStatus}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Network Status Negative7" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SaveNetworkStatusNegative7.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;newNetworkCode&quot;:${newNetworkCode}, &quot;loginId&quot;:&quot;&quot;,  &quot;newLanguage1Message&quot;:${newLanguage1Message}, &quot;newLanguage2Message&quot;:${newLanguage2Message}},&quot;type&quot;:&quot;${SaveNetworkStatus}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Network Status Negative8" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SaveNetworkStatusNegative8.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;newNetworkCode&quot;:[&quot;${networkCode}&quot;,&quot;&quot;], &quot;loginId&quot;:&quot;${dataLoginID}&quot;,  &quot;newLanguage1Message&quot;:${newLanguage1Message}, &quot;newLanguage2Message&quot;:${newLanguage2Message}},&quot;type&quot;:&quot;${SaveNetworkStatus}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Network Status Negative9" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SaveNetworkStatusNegative9.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;newNetworkCode&quot;:[&quot;${__RandomString(4,ab,)}&quot;], &quot;loginId&quot;:&quot;${dataLoginID}&quot;,  &quot;newLanguage1Message&quot;:${newLanguage1Message}, &quot;newLanguage2Message&quot;:${newLanguage2Message}},&quot;type&quot;:&quot;${SaveNetworkStatus}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Network Status Negative10" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SaveNetworkStatusNegative10.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;newNetworkCode&quot;:${newNetworkCode}, &quot;loginId&quot;:&quot;${dataLoginID}&quot;,  &quot;newLanguage1Message&quot;:[], &quot;newLanguage2Message&quot;:${newLanguage2Message}},&quot;type&quot;:&quot;${SaveNetworkStatus}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Network Status Negative11" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/SaveNetworkStatusNegative11.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Network Status:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;newNetworkCode&quot;:${newNetworkCode}, &quot;loginId&quot;:&quot;${dataLoginID}&quot;,  &quot;newLanguage1Message&quot;:[&quot;${__RandomString(141,abcdefghijklmnopqrstuvxyz,)}&quot;,&quot;${__RandomString(1,ab,)}&quot;,&quot;${__RandomString(1,ab,)}&quot;,&quot;${__RandomString(1,ab,)}&quot;,&quot;${__RandomString(1,ab,)}&quot;,&quot;${__RandomString(1,ab,)}&quot;], &quot;newLanguage2Message&quot;:${newLanguage2Message}},&quot;type&quot;:&quot;${SaveNetworkStatus}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View Self Details" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1492499300000</longProp>
        <longProp name="ThreadGroup.end_time">1492499300000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Self Details Positive" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewSelfDetailsPositive.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Self Details:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${ViewSelfDetailsType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();



String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}




String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;#&quot;+LeadName+&quot;#&quot;+TestFrameworkIP+&quot;#&quot;+TestFrameworkName+&quot;#&quot;+TestFrameworkSVNPath+&quot;#&quot;+TestExecutionDateTime+&quot;#&quot;+ProductInterface+&quot;#&quot;+TestCaseID+&quot;#&quot;+Module+&quot;#&quot;+Description+&quot;#&quot;+CsvRequest+&quot;#&quot;+jsonString+&quot;#&quot;+DumpData+&quot;#&quot;+CsvSMS1+&quot;#&quot;+CsvSMS2+&quot;#&quot;+statusCode+&quot;#&quot;+ErrorCode;


log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 




this.interpreter.setOut(p); 




print(PrintData);
f.close();







</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Self Details Negative1" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewSelfDetailsNegative1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Self Details:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${type1}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Self Details Negative2" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewSelfDetailsNegative2.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Self Details:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${type1}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Self Details Negative3" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewSelfDetailsNegative3.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Self Details:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${__RandomString(4,1234567890,)}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${type1}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Self Details Negative4" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewSelfDetailsNegative4.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Self Details:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${__RandomString(2,1234567890,)}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;${type1}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Self Details Negative5" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewSelfDetailsNegative5.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Self Details:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;},&quot;type&quot;:&quot;&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Self Details Negative6" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewSelfDetailsNegative6.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Self Details:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${__RandomString(4,1234567890,)}&quot;},&quot;type&quot;:&quot;${ViewSelfDetailsType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Self Details Negative7" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewSelfDetailsNegative7.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Self Details:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;&quot;},&quot;type&quot;:&quot;${ViewSelfDetailsType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View Network" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1492499300000</longProp>
        <longProp name="ThreadGroup.end_time">1492499300000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Network Positive" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewNetworkPositive.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;,&quot;networkCode&quot;:&quot;${networkCode}&quot;,&quot;status&quot;:&quot;${__RandomString(1,NSY,)}&quot;},&quot;type&quot;:&quot;${ViewNetworkType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;
import java.util.List;
import org.apache.jmeter.util.JMeterUtils;



String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();




jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();




String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}





String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;



log.info(PrintData);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 


this.interpreter.setOut(p); 




print(PrintData);
f.close();







</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Network Negative1" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewNetworkNegative1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;,&quot;networkCode&quot;:&quot;${networkCode}&quot;,&quot;status&quot;:&quot;${__RandomString(1,NSY,)}&quot;},&quot;type&quot;:&quot;${ViewNetworkType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Network Negative2" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewNetworkNegative2.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;,&quot;networkCode&quot;:&quot;${networkCode}&quot;,&quot;status&quot;:&quot;${__RandomString(1,NSY,)}&quot;},&quot;type&quot;:&quot;${ViewNetworkType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Network Negative3" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewNetworkNegative3.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${__RandomString(1,NSY,)}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;,&quot;networkCode&quot;:&quot;${networkCode}&quot;,&quot;status&quot;:&quot;${__RandomString(1,NSY,)}&quot;},&quot;type&quot;:&quot;${ViewNetworkType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Network Negative4" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewNetworkNegative4.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${__RandomString(1,NSY,)}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;,&quot;networkCode&quot;:&quot;${networkCode}&quot;,&quot;status&quot;:&quot;${__RandomString(1,NSY,)}&quot;},&quot;type&quot;:&quot;${ViewNetworkType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Network Negative5" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewNetworkNegative5.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${dataLoginID}&quot;,&quot;networkCode&quot;:&quot;${networkCode}&quot;,&quot;status&quot;:&quot;${__RandomString(1,NSY,)}&quot;},&quot;type&quot;:&quot;&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Network Negative6" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvSMS1" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS1</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS2" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS2</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ErrorCode" elementType="Argument">
                <stringProp name="Argument.name">ErrorCode</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}/ViewNetworkNegative6.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View Network:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginID}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;loginId&quot;:&quot;${__RandomString(1,NSY,)}&quot;,&quot;networkCode&quot;:&quot;${networkCode}&quot;,&quot;status&quot;:&quot;${__RandomString(1,NSY,)}&quot;},&quot;type&quot;:&quot;${ViewNetworkType}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);
String testType = vars.get(&quot;CsvCaseType&quot;);
 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
	
	
}


String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Convert csv to xls" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1490081607000</longProp>
        <longProp name="ThreadGroup.end_time">1490081607000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.comviva.CSVToExcelConverter;
import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

try {
    //your code here
    //String[] paths = {&quot;C:\\FINAL\\AddUserO2c.csv&quot;, &quot;C:\\FINAL\\abc.xls&quot;};
CSVToExcelConverter object = new CSVToExcelConverter();
log.info(&quot;asad11&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
String resultxlspath = vars.get(&quot;ResultXlsPath&quot;);
log.info(resultcsvpath);
object.convertCsvToXLS(resultcsvpath, resultxlspath);
log.info(&quot;asad11&quot;);
}
catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
