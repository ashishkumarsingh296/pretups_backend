<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="P2P" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ResultCsvPath" elementType="Argument">
            <stringProp name="Argument.name">ResultCsvPath</stringProp>
            <stringProp name="Argument.value">C:/Projects/PreTups/Work/QA/JmeterScripts/JmeterRun1/csv/result${__time(ddMMyyyyHHmmss,)}.csv</stringProp>
            <stringProp name="Argument.desc">Result CSV File</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Host name" elementType="Argument">
            <stringProp name="Argument.name">Host name</stringProp>
            <stringProp name="Argument.value">172.30.24.113</stringProp>
            <stringProp name="Argument.desc">Server host name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Web port" elementType="Argument">
            <stringProp name="Argument.name">Web port</stringProp>
            <stringProp name="Argument.value">7409</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Web port</stringProp>
          </elementProp>
          <elementProp name="Port" elementType="Argument">
            <stringProp name="Argument.name">Port</stringProp>
            <stringProp name="Argument.value">22</stringProp>
            <stringProp name="Argument.desc">Server Port</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="User name" elementType="Argument">
            <stringProp name="Argument.name">User name</stringProp>
            <stringProp name="Argument.value">pretups70</stringProp>
            <stringProp name="Argument.desc">Server user name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Password" elementType="Argument">
            <stringProp name="Argument.name">Password</stringProp>
            <stringProp name="Argument.value">pretups123</stringProp>
            <stringProp name="Argument.desc">Server password</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Tomcat path" elementType="Argument">
            <stringProp name="Argument.name">Tomcat path</stringProp>
            <stringProp name="Argument.value">/data1/pretupsapp/tomcat72</stringProp>
            <stringProp name="Argument.desc">Server Tomcat path</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CSV path" elementType="Argument">
            <stringProp name="Argument.name">CSV path</stringProp>
            <stringProp name="Argument.value">C:\Projects\PreTups\Work\QA\JmeterScripts\testdata</stringProp>
            <stringProp name="Argument.desc">CSV path for test data</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Database URL" elementType="Argument">
            <stringProp name="Argument.name">Database URL</stringProp>
            <stringProp name="Argument.value">jdbc:postgresql://172.30.24.113:5432/pretups72_itr1</stringProp>
            <stringProp name="Argument.desc">Database URL for oracle use =jdbc:oracle:thin:@//&lt;ip&gt;:&lt;port&gt;/&lt;service_id&gt; and for postgres use=jdbc:postgresql://[&lt;ip&gt;]:&lt;port&gt;/&lt;dbname&gt;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Database User name" elementType="Argument">
            <stringProp name="Argument.name">Database User name</stringProp>
            <stringProp name="Argument.value">pgdb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Database User name</stringProp>
          </elementProp>
          <elementProp name="Database Password" elementType="Argument">
            <stringProp name="Argument.name">Database Password</stringProp>
            <stringProp name="Argument.value">pgdb</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Database Password</stringProp>
          </elementProp>
          <elementProp name="USSD HTTP Request path C2S Receiver" elementType="Argument">
            <stringProp name="Argument.name">USSD HTTP Request path C2S Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/C2SReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD HTTP Request path C2S Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXTGW HTTP Request path C2S Receiver" elementType="Argument">
            <stringProp name="Argument.name">EXTGW HTTP Request path C2S Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/C2SReceiver?REQUEST_GATEWAY_CODE=EXTGW&amp;REQUEST_GATEWAY_TYPE=EXTGW&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">EXTGW HTTP Request path C2S Receiver</stringProp>
          </elementProp>
          <elementProp name="EXTGW HTTP Request path OPT Receiver" elementType="Argument">
            <stringProp name="Argument.name">EXTGW HTTP Request path OPT Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/OPTReceiver?REQUEST_GATEWAY_CODE=EXTGW&amp;REQUEST_GATEWAY_TYPE=EXTGW&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">EXTGW HTTP Request path OPT Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USSD HTTP Request path C2S Subscriber Receiver" elementType="Argument">
            <stringProp name="Argument.name">USSD HTTP Request path C2S Subscriber Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/C2SSubscriberReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD HTTP Request path C2S Subscriber Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USSD Plain text C2S Receiver" elementType="Argument">
            <stringProp name="Argument.name">USSD Plain text C2S Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/C2SReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=USSD&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD Plain text C2S Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXTGW HTTP Request path P2P Receiver" elementType="Argument">
            <stringProp name="Argument.name">EXTGW HTTP Request path P2P Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=EXTGW&amp;REQUEST_GATEWAY_TYPE=EXTGW&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">EXTGW HTTP Request path P2P Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USSD P2P Credit Transfer Request" elementType="Argument">
            <stringProp name="Argument.name">USSD P2P Credit Transfer Request</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD P2P Credit Transfer Request </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P2P change pin request USSD" elementType="Argument">
            <stringProp name="Argument.name">P2P change pin request USSD</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">P2P change pin request USSD</stringProp>
          </elementProp>
          <elementProp name="P2P Suspend Request USSD" elementType="Argument">
            <stringProp name="Argument.name">P2P Suspend Request USSD</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">P2P Suspend Request USSD</stringProp>
          </elementProp>
          <elementProp name="P2P Resume Request USSD" elementType="Argument">
            <stringProp name="Argument.name">P2P Resume Request USSD</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">P2P Resume Request USSD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USSD P2P register user" elementType="Argument">
            <stringProp name="Argument.name">USSD P2P register user</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">USSD P2P register user</stringProp>
          </elementProp>
          <elementProp name="USSD P2P credit recharge request" elementType="Argument">
            <stringProp name="Argument.name">USSD P2P credit recharge request</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD P2P credit recharge request</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XMLGW HTTP Request path OPT Receiver" elementType="Argument">
            <stringProp name="Argument.name">XMLGW HTTP Request path OPT Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/OPTReceiver?REQUEST_GATEWAY_CODE=XMLGW&amp;REQUEST_GATEWAY_TYPE=XMLGW&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">XMLGW HTTP Request path OPT Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MSISDN_P2P" elementType="Argument">
            <stringProp name="Argument.name">MSISDN_P2P</stringProp>
            <stringProp name="Argument.value">MSISDN</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">MSISDN for P2P Registration</stringProp>
          </elementProp>
          <elementProp name="MSISDN_USSD_P2P" elementType="Argument">
            <stringProp name="Argument.name">MSISDN_USSD_P2P</stringProp>
            <stringProp name="Argument.value">7288262730</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">MSISDN for USSD_P2P_REGISTER_USER</stringProp>
          </elementProp>
          <elementProp name="SUB_TYPE" elementType="Argument">
            <stringProp name="Argument.name">SUB_TYPE</stringProp>
            <stringProp name="Argument.value">PRE</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">SubType for USSD_P2P_REGISTER_USER</stringProp>
          </elementProp>
          <elementProp name="MSISDN Prefix" elementType="Argument">
            <stringProp name="Argument.name">MSISDN Prefix</stringProp>
            <stringProp name="Argument.value">72</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Prefix for MSISDN</stringProp>
          </elementProp>
          <elementProp name="New Pin" elementType="Argument">
            <stringProp name="Argument.name">New Pin</stringProp>
            <stringProp name="Argument.value">2468</stringProp>
            <stringProp name="Argument.desc">New Pin for Changing Pin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LANGUAGE1" elementType="Argument">
            <stringProp name="Argument.name">LANGUAGE1</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">Language for P2P different APIs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Old Pin" elementType="Argument">
            <stringProp name="Argument.name">Old Pin</stringProp>
            <stringProp name="Argument.value">1357</stringProp>
            <stringProp name="Argument.desc">Old pin required for P2P Change Pin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BUDDY_NAME" elementType="Argument">
            <stringProp name="Argument.name">BUDDY_NAME</stringProp>
            <stringProp name="Argument.value">ayushabajkl</stringProp>
            <stringProp name="Argument.desc">Name of Buddy</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Buddy MSISDN" elementType="Argument">
            <stringProp name="Argument.name">Buddy MSISDN</stringProp>
            <stringProp name="Argument.value">7298743880</stringProp>
            <stringProp name="Argument.desc">Buddy&apos;s MSISDN for P2P Add Buddy</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PRF_AMT" elementType="Argument">
            <stringProp name="Argument.name">PRF_AMT</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.desc">Preferred Amount for Credit transfer</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LANGUAGE2" elementType="Argument">
            <stringProp name="Argument.name">LANGUAGE2</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Language 2 for P2P different APIs</stringProp>
          </elementProp>
          <elementProp name="SELECTOR" elementType="Argument">
            <stringProp name="Argument.name">SELECTOR</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Defeault selector code for credit transfer</stringProp>
          </elementProp>
          <elementProp name="USSD P2P deregister user" elementType="Argument">
            <stringProp name="Argument.name">USSD P2P deregister user</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD P2P deregister user</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MSISDN_USSD_P2P_REG" elementType="Argument">
            <stringProp name="Argument.name">MSISDN_USSD_P2P_REG</stringProp>
            <stringProp name="Argument.value">721347347830</stringProp>
            <stringProp name="Argument.desc">MSISDN for P2P Registration for de-registration</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Barred_Receiver_MSISDN" elementType="Argument">
            <stringProp name="Argument.name">Barred_Receiver_MSISDN</stringProp>
            <stringProp name="Argument.value">7274574575754</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">MSISDN for Barred Receiver</stringProp>
          </elementProp>
          <elementProp name="MSISDN_SUBTYPE_USSD_P2P" elementType="Argument">
            <stringProp name="Argument.name">MSISDN_SUBTYPE_USSD_P2P</stringProp>
            <stringProp name="Argument.value">7213334227148</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Database Driver" elementType="Argument">
            <stringProp name="Argument.name">Database Driver</stringProp>
            <stringProp name="Argument.value">org.postgresql.Driver </stringProp>
            <stringProp name="Argument.desc">Database Driver for oracle use=oracle.jdbc.driver.OracleDriver and for postgres use=org.postgresql.Driver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DATA_SELECTOR" elementType="Argument">
            <stringProp name="Argument.name">DATA_SELECTOR</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.desc">Cp2p Data Selector</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ResultXlsPath" elementType="Argument">
            <stringProp name="Argument.name">ResultXlsPath</stringProp>
            <stringProp name="Argument.value">C:/Projects/PreTups/Work/QA/JmeterScripts/JmeterRun1/xls/result${__time(ddMMyyyyHHmmss,)}.xlsx</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ResultXlsPath for XLSX file</stringProp>
          </elementProp>
          <elementProp name="SVNRepositoryID" elementType="Argument">
            <stringProp name="Argument.name">SVNRepositoryID</stringProp>
            <stringProp name="Argument.value">http://172.16.10.134/CRM/MFS/PreTUPS5x_NG/Base Versions/PreTUPS_trunk/Code/Work/JMETER/JMETER_PRETUPS_UPDATED/scripts/testscript</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LeadName" elementType="Argument">
            <stringProp name="Argument.name">LeadName</stringProp>
            <stringProp name="Argument.value">Shishupal Singh</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestFrameworkIP" elementType="Argument">
            <stringProp name="Argument.name">TestFrameworkIP</stringProp>
            <stringProp name="Argument.value">172.16.11.120</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestFrameworkName" elementType="Argument">
            <stringProp name="Argument.name">TestFrameworkName</stringProp>
            <stringProp name="Argument.value">JMeter</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestFrameworkSVNPath" elementType="Argument">
            <stringProp name="Argument.name">TestFrameworkSVNPath</stringProp>
            <stringProp name="Argument.value">http://172.16.10.134/CRM/MFS/PreTUPS5x_NG/Base Versions/PreTUPS_trunk/Code/Work/JMETER/JMETER_PRETUPS_UPDATED/scripts/testscript</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestExecutionDateTime" elementType="Argument">
            <stringProp name="Argument.name">TestExecutionDateTime</stringProp>
            <stringProp name="Argument.value">${__time(yyyy/MM/dd HH:mm:ss,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProductInterface" elementType="Argument">
            <stringProp name="Argument.name">ProductInterface</stringProp>
            <stringProp name="Argument.value">WEB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
        <stringProp name="HTTPSampler.port">${Web port}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Java/1.7.0_45</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">text/xml</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Header" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1480673579000</longProp>
        <longProp name="ThreadGroup.end_time">1480673579000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">O2CTransferRule</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create folder for Catalina" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <intProp name="port">22</intProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">mkdir ${MessageSent Logs path}/${JFolder}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Header for Result file" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
log.info(&quot;...............trying to execute 0............&quot;);
try{String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
log.info(&quot;...............trying to write............&quot;);
print(&quot;SVN-Repository-ID|Lead-Name|Test-Framework-IP|Test-Framework-Name|Test-Framework-SVN-Path|Test-Execution-Date-Time|Product-Interface|Unique-TestCase-ID|Module|Test-Case-Description|Request|Response|Data|SMS1|SMS2|Test-Status|Analysis&quot;);
//print(&quot;Test case ID\tModule\tDescription\tRequest\tResponse\tData\tSMS1\tSMS2\tStatus&quot;);
/*String OldT = &quot;Lokesh&quot; ;
//vars.get(&quot;asjlkdfjasdjkl&quot;); // I need to compare the value of OldT  
                                 // with ${so_tid_1} which is an exact 
                                 // string and not a variable
if (OldT.equals(_Response)){ 
     print(&quot;Message content matched&quot;);
 }
 else {print(&quot;Message content doesn&apos;t matched&quot;);}*/


f.close(); // close the file
// ------
}
catch(Exception ex) { 
	System.out.println(&quot;Still not working&quot;);
	log.info(ex);}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P registration Plaintext_Positive" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PREG&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">plain/text</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\SMSC_P2P_REGISTRATION_Positive.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="P2P registration request;${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">http://${Host name}:${Web port}/pretups/P2PReceiver?MSISDN=${MSISDN_USSD_P2P}&amp;MESSAGE=PREG+PRE&amp;REQUEST_GATEWAY_CODE=SMSC&amp;REQUEST_GATEWAY_TYPE=SMSC&amp;SERVICE_PORT=190&amp;SOURCE_TYPE=SMSC&amp;LOGIN=pretups&amp;PASSWORD=pretups123</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response =prev.getResponseDataAsString();

System.out.println(prev.getResponseDataAsString());

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

String txnid=response.toString();

log.info(prev.getResponseDataAsString());

 
txnid = txnid.substring(22,41);


log.info(&quot;TXNID&quot;+txnid);

vars.put(&quot;txnid&quot;,txnid);


var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-415174911">mclass^2&amp;pid^61:4011</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(&quot;mclass^2&amp;pid^61:4011:&quot;,&quot;:&quot;),&quot;:&quot;)</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">true</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4011 | tail -1</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;

String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

//System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{

	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;4011&quot;))
	{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

	
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String  _CsvSMS3 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces

log.info(&quot;1111&quot;);
log.info(_Request);
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;2222&quot;);
log.info(_Request);
_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

//print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|SMS1&quot;+_CsvSMS1+&quot;|SMS2&quot;+_CsvSMS2+&quot;|Status:&quot;+_CsvStatus+&quot;|ErrorCode&quot;+_ErrorCode);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P registration Plaintext_Negative" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PREG&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">plain/text</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\SMSC_P2P_REGISTRATION_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="P2P registration request;${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
            <stringProp name="HTTPSampler.port">${Web port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">http://${Host name}:${Web port}/pretups/P2PReceiver?MSISDN=&amp;MESSAGE=PREG+PRE&amp;REQUEST_GATEWAY_CODE=SMSC&amp;REQUEST_GATEWAY_TYPE=SMSC&amp;SERVICE_PORT=190&amp;SOURCE_TYPE=plain/text&amp;LOGIN=pretups&amp;PASSWORD=pretups123</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response =prev.getResponseDataAsString();

System.out.println(prev.getResponseDataAsString());

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

String txnid=response.toString();

log.info(prev.getResponseDataAsString());

 
txnid = txnid.substring(22,41);


log.info(&quot;TXNID&quot;+txnid);

vars.put(&quot;txnid&quot;,txnid);


var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="679345878">mclass^2&amp;pid^61:616</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(&quot;mclass^2&amp;pid^61:616:&quot;,&quot;:&quot;),&quot;:&quot;)</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">true</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4011 | tail -1</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;

String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

//System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{

	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

	
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);


String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Register User USSD_Positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PREG&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="positive test case 1" enabled="false"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
// _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
//String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_REGISTERUSER_Positive2.csv </stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_SUBTYPE_USSD_P2P}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus+&quot;|ErrorCode&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\USSD_P2P_REGISTERUSER_Positive1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
// _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
//String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4011 | tail -1</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Register User USSD_Negative" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PREG&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 2" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
// _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
//String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_REGISTERUSER_Negative2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4011 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);


//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Change Pin USSD_Positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;CPN&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\USSD_P2P_CHANGE_PIN_Positive1.CSV</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}</stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">P2P_getPinValue</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Pin request;${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCPNREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;NEWPIN&gt;${New Pin}&lt;/NEWPIN&gt;&lt;CONFIRMPIN&gt;${New Pin}&lt;/CONFIRMPIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${P2P change pin request USSD}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNID</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel1" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}    </stringProp>
              <stringProp name="password">${Database User name}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">P2P_getPinValue</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4076 | tail -1</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

log.info(&quot;asdasdsad&quot;);
//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

log.info(&quot;asdasdsad&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String npin = vars.get(&quot;New Pin&quot;);
String opin = vars.get(&quot;Old Pin&quot;);
String cpin = vars.get(&quot;New Pin&quot;);

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
log.info(opin+&quot;&quot;+cpin+&quot;&quot;+npin);
		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
			
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		if(!npin.equals(cpin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);


String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;asdasdsad2&quot;+resultcsvpath);
f = new FileOutputStream(resultcsvpath,  true);
log.info(&quot;asdasdsad3&quot;);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Change Pin USSD_Negative" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;CPN&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 1" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_CHANGE_PIN_Negative1.CSV</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Pin request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCPNREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;NEWPIN&gt;${New Pin}&lt;/NEWPIN&gt;&lt;CONFIRMPIN&gt;${New Pin}&lt;/CONFIRMPIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P change pin request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String npin = vars.get(&quot;New Pin&quot;);
String opin = vars.get(&quot;Old Pin&quot;);
String cpin = vars.get(&quot;New Pin&quot;);

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
log.info(opin+&quot;&quot;+cpin+&quot;&quot;+npin);
		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
	//	{
	//	vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
	//	}

	//	if(!npin.equals(cpin))
	//	{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	//	}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);




String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel1" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 2" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_CHANGE_PIN_Negative2.CSV</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Pin request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCPNREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;2467&lt;/PIN&gt;&lt;NEWPIN&gt;${New Pin}&lt;/NEWPIN&gt;&lt;CONFIRMPIN&gt;${New Pin}&lt;/CONFIRMPIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P change pin request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1232820144">&lt;TXNSTATUS&gt;2010&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String npin = vars.get(&quot;NEWPIN&quot;);
String opin = vars.get(&quot;OLDPIN&quot;);
String cpin = vars.get(&quot;CONFIRMPIN&quot;);

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
log.info(opin+&quot;&quot;+cpin+&quot;&quot;+npin);
		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		//{
		//vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		//}

		//if(!npin.equals(cpin))
		//{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		//}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);





String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel1" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 3" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_CHANGE_PIN_Negative3.CSV</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Pin request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCPNREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;NEWPIN&gt;${Old Pin}&lt;/NEWPIN&gt;&lt;CONFIRMPIN&gt;${Old Pin}&lt;/CONFIRMPIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P change pin request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-486714327">&lt;TXNSTATUS&gt;4060&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String npin = vars.get(&quot;New Pin&quot;);
String opin = vars.get(&quot;Old Pin&quot;);
String cpin = vars.get(&quot;New Pin&quot;);

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
log.info(opin+&quot;&quot;+cpin+&quot;&quot;+npin);
		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		//{
		//vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		//}

		//if(!npin.equals(cpin))
		//{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		//}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);





String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel1" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 4" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_CHANGE_PIN_Negative4.CSV</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Pin request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCPNREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;NEWPIN&gt;${New Pin}&lt;/NEWPIN&gt;&lt;CONFIRMPIN&gt;${Old Pin}&lt;/CONFIRMPIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P change pin request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="214945880">&lt;TXNSTATUS&gt;4317&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String npin = vars.get(&quot;New Pin&quot;);
String opin = vars.get(&quot;Old Pin&quot;);
String cpin = vars.get(&quot;New Pin&quot;);

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
log.info(opin+&quot;&quot;+cpin+&quot;&quot;+npin);
		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		//{
		//vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		//}

		//if(!npin.equals(cpin))
		//{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		//}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);





String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel1" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 5" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_CHANGE_PIN_Negative5.CSV</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Pin request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCPNREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;NEWPIN&gt;${New Pin}&lt;/NEWPIN&gt;&lt;CONFIRMPIN&gt;${New Pin}&lt;/CONFIRMPIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P change pin request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1713097836">&lt;TXNSTATUS&gt;9989&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String npin = vars.get(&quot;New Pin&quot;);
String opin = vars.get(&quot;Old Pin&quot;);
String cpin = vars.get(&quot;New Pin&quot;);

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
log.info(opin+&quot;&quot;+cpin+&quot;&quot;+npin);
		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		//{
		//vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		//}

		//if(!npin.equals(cpin))
		//{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		//}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);




String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel1" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 6" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_CHANGE_PIN_Negative6.CSV</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Pin request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCPNREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;NEWPIN&gt;&lt;/NEWPIN&gt;&lt;CONFIRMPIN&gt;${New Pin}&lt;/CONFIRMPIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P change pin request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1713097836">&lt;TXNSTATUS&gt;9989&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String npin = vars.get(&quot;New Pin&quot;);
String opin = vars.get(&quot;Old Pin&quot;);
String cpin = vars.get(&quot;New Pin&quot;);

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
log.info(opin+&quot;&quot;+cpin+&quot;&quot;+npin);
		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		//{
		//vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		//}

		//if(!npin.equals(cpin))
		//{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		//}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);





String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel1" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 7" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_CHANGE_PIN_Negative7.CSV</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Pin request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCPNREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;NEWPIN&gt;${New Pin}&lt;/NEWPIN&gt;&lt;CONFIRMPIN&gt;&lt;/CONFIRMPIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P change pin request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1713097836">&lt;TXNSTATUS&gt;9989&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String npin = vars.get(&quot;New Pin&quot;);
String opin = vars.get(&quot;Old Pin&quot;);
String cpin = vars.get(&quot;New Pin&quot;);

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
log.info(opin+&quot;&quot;+cpin+&quot;&quot;+npin);
		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		//{
		//vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		//}

		//if(!npin.equals(cpin))
		//{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		//}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);





String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel1" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver"> ${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${MSISDN_USSD_P2P}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P De-Register User USSD_Positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PDREG&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\USSD_P2P_DE_REGISTERUSER_Positive1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="false">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
// _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
//String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}    </stringProp>
              <stringProp name="password">${Database User name}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">P2P_getPinValue</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="De-Register user request;${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;DREGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;/COMMAND&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${USSD P2P deregister user}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4013 | tail -1</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P De-Register User USSD_Negative" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PDREG&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 1" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="false">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
// _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
//String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_DE_REGISTERUSER_Negative1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database User name}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="De-Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;DREGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;3456&lt;/PIN&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P deregister user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1232820144">&lt;TXNSTATUS&gt;2010&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=2010 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 2" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="false">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
// _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
//String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_DE_REGISTERUSER_Negative2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database User name}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="P2P_getPin" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">P2P_getPinValue</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="De-Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;DREGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P deregister user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4011 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Suspend  USSD_Positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PSUS&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\USSD_SUSPEND_P2P_Positive1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreStatus" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}    </stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdppreStatusM1" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN_USSD_P2P}&apos; </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">ussdpreStatusM1Value</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserSUSrequest;${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;SUSREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;CELLID&gt;&lt;/CELLID&gt;&lt;SWITCHID&gt;&lt;/SWITCHID&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${P2P Suspend Request USSD}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNID</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostStatus" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}    </stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostStatusM1" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN_USSD_P2P}&apos; </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">ussdpostStatusM1Value</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String PostStatus = vars.get(&quot;ussdpostStatusM1Value_1&quot;);
String PreStatus = vars.get(&quot;ussdpreStatusM1Value_1&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
if((PostStatus.equals(&quot;S&quot;)||PostStatus.equals(&quot;Y&quot;))&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
if((PostStatus.equals(&quot;S&quot;)||PostStatus.equals(&quot;Y&quot;))&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);





String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Suspend  USSD_Negative" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PSUS&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 1" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_SUSPEND_P2P_Negative1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdppreStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN_USSD_P2P}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdpreStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserSUSrequest;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;SUSREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;CELLID&gt;&lt;/CELLID&gt;&lt;SWITCHID&gt;&lt;/SWITCHID&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P Suspend Request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="764428592">&lt;TXNSTATUS&gt;6685&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN_USSD_P2P}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdpostStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=6685 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String PostStatus = vars.get(&quot;ussdpostStatusM1Value_1&quot;);
String PreStatus = vars.get(&quot;ussdpreStatusM1Value_1&quot;);

log.info(&quot;ASASD&quot;);
// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);


log.info(&quot;ASASD1&quot;);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
if((PostStatus.equals(&quot;S&quot;)||PostStatus.equals(&quot;Y&quot;))&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
if((PostStatus.equals(&quot;S&quot;)||PostStatus.equals(&quot;Y&quot;))&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;ASASD3&quot;);
log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);




String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P resume USSD_Positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PRES&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\USSD_RESUME_P2P_Positive1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreStatus" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}    </stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdppreStatusM1" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN_USSD_P2P}&apos; </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">ussdpreStatusM1Value</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserRES request;${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;RESREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;CELLID&gt;&lt;/CELLID&gt;&lt;SWITCHID&gt;&lt;/SWITCHID&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${P2P Resume Request USSD}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNID</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostStatus" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}    </stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostStatusM1" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN_USSD_P2P}&apos; </stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">ussdpostStatusM1Value</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);
log.info(&quot;asad1&quot;);
//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);
log.info(&quot;asad2&quot;);
String PostStatus = vars.get(&quot;ussdpostStatusM1Value_1&quot;);
String PreStatus = vars.get(&quot;ussdpreStatusM1Value_1&quot;);
log.info(&quot;asad3&quot;);
// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
log.info(&quot;asad4&quot;);

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
	log.info(&quot;asad4&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	log.info(&quot;asad5&quot;);
	if(TxnStatus.equals(&quot;200&quot;))
	{
		if(PostStatus.equals(&quot;Y&quot;)&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		log.info(&quot;asad6&quot;);
		}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		log.info(&quot;asad7&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		log.info(&quot;asad8&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
		log.info(&quot;asad9&quot;);
if(PostStatus.equals(&quot;S&quot;)&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		log.info(&quot;asad10&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		log.info(&quot;asad11&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		log.info(&quot;asad12&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);
log.info(&quot;asad13&quot;);

//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
log.info(&quot;asad14&quot;);




String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;asad15&quot;);
_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;asad16&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;asad17&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;asad18&quot;);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
log.info(&quot;asad19&quot;);
print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
log.info(&quot;asad22&quot;);
f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P resume USSD_Negative" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PRES&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 1" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_RESUME_P2P_Negative1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdppreStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN_USSD_P2P}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdpreStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserRES request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;RESREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;CELLID&gt;&lt;/CELLID&gt;&lt;SWITCHID&gt;&lt;/SWITCHID&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P Resume Request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1232820144">&lt;TXNSTATUS&gt;2010&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN_USSD_P2P}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdpostStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=2010 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String PostStatus = vars.get(&quot;ussdpostStatusM1Value_1&quot;);
String PreStatus = vars.get(&quot;ussdpreStatusM1Value_1&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
		if(PostStatus.equals(&quot;Y&quot;)&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
if(PostStatus.equals(&quot;S&quot;)&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN2msg_1_g0&quot;);





String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Add Buddy USSD_Positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PADD&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\USSD_ADD_BUDDY_Positive1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Buddy request;${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;ADDBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;BUDDYNAME&gt;${BUDDY_NAME}&lt;/BUDDYNAME&gt;&lt;MSISDN2&gt;${Buddy MSISDN}&lt;/MSISDN2&gt;&lt;PRFAMT&gt;${PRF_AMT}&lt;/PRFAMT&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="getBuddy" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}</stringProp>
              <stringProp name="password">${Database User name}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="getBuddyInDb" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select status from p2p_buddies where buddy_msisdn=&apos;${Buddy MSISDN}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">buddyMsisdnDb</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4101 | tail -1</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String buddyMsisdnDb= vars.get(&quot;Buddy MSISDN&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
System.out.println(&quot;buddyMsisdnDb = &quot;+buddyMsisdnDb);

//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;) &amp;&amp; buddyMsisdnDb!=null)
	{

		log.info(&quot;asad&quot;);
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Add Buddy USSD_Negative" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PADD&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 1" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_ADD_BUDDY_Negative1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Buddy request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;ADDBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;BUDDYNAME&gt;${BUDDY_NAME}&lt;/BUDDYNAME&gt;&lt;MSISDN2&gt;${Buddy MSISDN}&lt;/MSISDN2&gt;&lt;PRFAMT&gt;${PRF_AMT}&lt;/PRFAMT&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-746336689">&lt;TXNSTATUS&gt;4110&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="getBuddy" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database User name}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="getBuddyInDb" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select status from p2p_buddies where buddy_msisdn=&apos;${Buddy MSISDN}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">buddyMsisdnDb</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4110 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String buddyMsisdnDb= vars.get(&quot;Buddy MSISDN&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
System.out.println(&quot;buddyMsisdnDb = &quot;+buddyMsisdnDb);

//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;) &amp;&amp; buddyMsisdnDb!=null)
	{

		log.info(&quot;asad&quot;);
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 2" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_ADD_BUDDY_Negative2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Buddy request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;ADDBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;&lt;/MSISDN1&gt;&lt;BUDDYNAME&gt;${BUDDY_NAME}&lt;/BUDDYNAME&gt;&lt;MSISDN2&gt;${Buddy MSISDN}&lt;/MSISDN2&gt;&lt;PRFAMT&gt;${PRF_AMT}&lt;/PRFAMT&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="getBuddy" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database User name}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="getBuddyInDb" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select status from p2p_buddies where buddy_msisdn=&apos;${Buddy MSISDN}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">buddyMsisdnDb</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=6675 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String buddyMsisdnDb= vars.get(&quot;Buddy MSISDN&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
System.out.println(&quot;buddyMsisdnDb = &quot;+buddyMsisdnDb);

//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;) &amp;&amp; buddyMsisdnDb!=null)
	{

		log.info(&quot;asad&quot;);
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);



f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 3" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_ADD_BUDDY_Negative3.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Buddy request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;ADDBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;BUDDYNAME&gt;${BUDDY_NAME}&lt;/BUDDYNAME&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;PRFAMT&gt;${PRF_AMT}&lt;/PRFAMT&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1269987217">&lt;TXNSTATUS&gt;6675&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="getBuddy" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database User name}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="getBuddyInDb" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select status from p2p_buddies where buddy_msisdn=&apos;${Buddy MSISDN}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">buddyMsisdnDb</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=6675 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String buddyMsisdnDb= vars.get(&quot;Buddy MSISDN&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
System.out.println(&quot;buddyMsisdnDb = &quot;+buddyMsisdnDb);

//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;) &amp;&amp; buddyMsisdnDb!=null)
	{

		log.info(&quot;asad&quot;);
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 4" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_ADD_BUDDY_Negative4.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Buddy request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;ADDBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;BUDDYNAME&gt;&lt;/BUDDYNAME&gt;&lt;MSISDN2&gt;${Buddy MSISDN}&lt;/MSISDN2&gt;&lt;PRFAMT&gt;${PRF_AMT}&lt;/PRFAMT&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1269987217">&lt;TXNSTATUS&gt;6675&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="getBuddy" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database User name}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="getBuddyInDb" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select status from p2p_buddies where buddy_msisdn=&apos;${Buddy MSISDN}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">buddyMsisdnDb</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=6675 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String buddyMsisdnDb= vars.get(&quot;Buddy MSISDN&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
System.out.println(&quot;buddyMsisdnDb = &quot;+buddyMsisdnDb);

//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;) &amp;&amp; buddyMsisdnDb!=null)
	{

		log.info(&quot;asad&quot;);
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 5" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_ADD_BUDDY_Negative5.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Buddy request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;ADDBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;BUDDYNAME&gt;${BUDDY_NAME}&lt;/BUDDYNAME&gt;&lt;MSISDN2&gt;${Buddy MSISDN}&lt;/MSISDN2&gt;&lt;PRFAMT&gt;${PRF_AMT}&lt;/PRFAMT&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1269987217">&lt;TXNSTATUS&gt;6675&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="getBuddy" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database User name}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="getBuddyInDb" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select status from p2p_buddies where buddy_msisdn=&apos;${Buddy MSISDN}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">buddyMsisdnDb</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=6675 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String buddyMsisdnDb= vars.get(&quot;Buddy MSISDN&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
System.out.println(&quot;buddyMsisdnDb = &quot;+buddyMsisdnDb);

//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;) &amp;&amp; buddyMsisdnDb!=null)
	{

		log.info(&quot;asad&quot;);
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="List Buddy USSD_Positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PLIST&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\USSD_LIST_BUDDY_Positive1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Buddy request;${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;LSTBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);


//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="List Buddy USSD_Negative" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PLIST&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative Test Case 1" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_LIST_BUDDY_Negative1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Buddy request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;LSTBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative Test Case 2" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_LIST_BUDDY_Negative2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Buddy request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;LSTBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="96375189">&lt;TXNSTATUS&gt;6679&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=6679 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);



f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Delete Buddy USSD_Positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PDEL&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\USSD_DEL_BUDDY_POSITIVE.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="getBuddy" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}</stringProp>
              <stringProp name="password">${Database User name}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="getBuddyInDb" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select status from p2p_buddies where buddy_msisdn=&apos;${Buddy MSISDN}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">buddyMsisdnDb</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4201 | tail -1</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Buddy request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;DELBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;MSISDN_NAME&gt;${BUDDY_NAME}&lt;/MSISDN_NAME&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String buddyMsisdnDb= vars.get(&quot;Buddy MSISDN&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
System.out.println(&quot;buddyMsisdnDb = &quot;+buddyMsisdnDb);

//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;) &amp;&amp; buddyMsisdnDb!=null)
	{

		log.info(&quot;asad&quot;);
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Delete Buddy USSD_Negative" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PDEL&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 1" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_DEL_BUDDY_NEGATIVE1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="getBuddy" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database User name}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="getBuddyInDb" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select status from p2p_buddies where buddy_msisdn=&apos;${Buddy MSISDN}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">buddyMsisdnDb</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Buddy request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;DELBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;&lt;/MSISDN1&gt;&lt;MSISDN_NAME&gt;${BUDDY_NAME}&lt;/MSISDN_NAME&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=6678 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String buddyMsisdnDb= vars.get(&quot;Buddy MSISDN&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
System.out.println(&quot;buddyMsisdnDb = &quot;+buddyMsisdnDb);

//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;) &amp;&amp; buddyMsisdnDb!=null)
	{

		log.info(&quot;asad&quot;);
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 2" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_DEL_BUDDY_NEGATIVE2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="getBuddy" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database User name}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="getBuddyInDb" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select status from p2p_buddies where buddy_msisdn=&apos;${Buddy MSISDN}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">buddyMsisdnDb</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Buddy request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;DELBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;MSISDN_NAME&gt;&lt;/MSISDN_NAME&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="389778196">&lt;TXNSTATUS&gt;6678&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=6678 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String buddyMsisdnDb= vars.get(&quot;Buddy MSISDN&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
System.out.println(&quot;buddyMsisdnDb = &quot;+buddyMsisdnDb);

//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;) &amp;&amp; buddyMsisdnDb!=null)
	{

		log.info(&quot;asad&quot;);
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 3" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_DEL_BUDDY_NEGATIVE3.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="getBuddy" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database User name}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="getBuddyInDb" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select status from p2p_buddies where buddy_msisdn=&apos;${Buddy MSISDN}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">buddyMsisdnDb</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Buddy request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;DELBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;MSISDN_NAME&gt;${BUDDY_NAME}&lt;/MSISDN_NAME&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="389778196">&lt;TXNSTATUS&gt;6678&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=6678 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String buddyMsisdnDb= vars.get(&quot;Buddy MSISDN&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
System.out.println(&quot;buddyMsisdnDb = &quot;+buddyMsisdnDb);

//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;) &amp;&amp; buddyMsisdnDb!=null)
	{

		log.info(&quot;asad&quot;);
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Credit Transfer USSD Positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PRC&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Positive 1 with all mandatory and optional parameters" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_CREDIT_TRANSFER_USSD_Positive1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;



System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);



vars.put(&quot;Mobile1&quot;,mobile);










</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="set pin to 1357" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name} </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">preDailyTransferCount,preDailyTransferAmount</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Credit Transfer USSD Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCTRFREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;1357&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P Credit Transfer Request}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number
var response = prev.getResponseDataAsString();

//System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Pin request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCPNREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;NEWPIN&gt;${New Pin}&lt;/NEWPIN&gt;&lt;CONFIRMPIN&gt;${New Pin}&lt;/CONFIRMPIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P change pin request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4076 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value= JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;TestcaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

log.info(&quot;TxnStatus&quot;+TxnStatus);
//String preDailyTransferCount=vars.get(&quot;preDailyTransferCount_1&quot;);
//String preDailyTransferAmount=vars.get(&quot;preDailyTransferAmount_1&quot;);
//String postDailyTransferCount=vars.get(&quot;postDailyTransferCount_1&quot;);
//String postDailyTransferCount = vars.get(&quot;postDailyTransferAmount_1&quot;);
String TXNID= vars.get(&quot;TXNID&quot;);


//get the pre balance and post balance
//int preDailyTransferCountV = Integer.parseInt(preDailyTransferCount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);
// get the transaction amount
//int preDailyTransferAmountV = Integer.parseInt(preDailyTransferAmount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);

//int dailyTransferCountIncrement = postDailyTransferCountV-preDailyTransferAmountV;

//==== checker
 if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;)){
 	
	{		// if the test type is positive

		if(TxnStatus.equals(&quot;200&quot;))
		{
			vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	
		}
		else{
			vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
}
 else if(testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;)){
 	vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
 }
 
//======================= END

// RESULT CSV WRITER
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);

//String xx = vars.get(&quot;_cc&quot;);
//System.out.println(&quot;Dup = &quot;+value);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestcaseId = vars.get(&quot;TestcaseId&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Module = vars.get(&quot;Module&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);

_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;TestcaseId: &quot;+_TestcaseId+&quot; | Description: &quot;+_Description+&quot; | Module: &quot;+_Module+&quot; | TestType: &quot;+testType+&quot; | Status: &quot;+_CsvStatus);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);



print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Positive 2 with mandatory paramters only" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_CREDIT_TRANSFER_USSD_Positive2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);


String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);


System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);










</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="set pin to 1357" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name} </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">preDailyTransferCount,preDailyTransferAmount</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Credit Transfer USSD Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCTRFREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;1357&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P Credit Transfer Request}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4076 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value= JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;TestcaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

log.info(&quot;TxnStatus&quot;+TxnStatus);
//String preDailyTransferCount=vars.get(&quot;preDailyTransferCount_1&quot;);
//String preDailyTransferAmount=vars.get(&quot;preDailyTransferAmount_1&quot;);
//String postDailyTransferCount=vars.get(&quot;postDailyTransferCount_1&quot;);
//String postDailyTransferCount = vars.get(&quot;postDailyTransferAmount_1&quot;);
String TXNID= vars.get(&quot;TXNID&quot;);


//get the pre balance and post balance
//int preDailyTransferCountV = Integer.parseInt(preDailyTransferCount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);
// get the transaction amount
//int preDailyTransferAmountV = Integer.parseInt(preDailyTransferAmount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);

//int dailyTransferCountIncrement = postDailyTransferCountV-preDailyTransferAmountV;

//==== checker
 if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;)){
 	
	{		// if the test type is positive

		if(TxnStatus.equals(&quot;200&quot;))
		{
			vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	
		}
		else{
			vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
}
 else if(testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;)){
 	vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
 }
 
//======================= END

// RESULT CSV WRITER
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);

//String xx = vars.get(&quot;_cc&quot;);
//System.out.println(&quot;Dup = &quot;+value);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestcaseId = vars.get(&quot;TestcaseId&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Module = vars.get(&quot;Module&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);

_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;TestcaseId: &quot;+_TestcaseId+&quot; | Description: &quot;+_Description+&quot; | Module: &quot;+_Module+&quot; | TestType: &quot;+testType+&quot; | Status: &quot;+_CsvStatus);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);



print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Credit Transfer USSD Negative" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PRC&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative 1 with missing mandatory msisdn1" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_CREDIT_TRANSFER_USSD_Negative1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="set pin to 1357" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name} </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">preDailyTransferCount,preDailyTransferAmount</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Pin request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCPNREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;NEWPIN&gt;${New Pin}&lt;/NEWPIN&gt;&lt;CONFIRMPIN&gt;${New Pin}&lt;/CONFIRMPIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P change pin request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="missing mandatory msisdn1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCTRFREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;&lt;/MSISDN1&gt;&lt;PIN&gt;${New Pin}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P Credit Transfer Request}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number
var response = prev.getResponseDataAsString();

//System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
//System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
//System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=19014 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value= JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;TestcaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

log.info(&quot;TxnStatus&quot;+TxnStatus);
//String preDailyTransferCount=vars.get(&quot;preDailyTransferCount_1&quot;);
//String preDailyTransferAmount=vars.get(&quot;preDailyTransferAmount_1&quot;);
//String postDailyTransferCount=vars.get(&quot;postDailyTransferCount_1&quot;);
//String postDailyTransferCount = vars.get(&quot;postDailyTransferAmount_1&quot;);
String TXNID= vars.get(&quot;TXNID&quot;);


//get the pre balance and post balance
//int preDailyTransferCountV = Integer.parseInt(preDailyTransferCount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);
// get the transaction amount
//int preDailyTransferAmountV = Integer.parseInt(preDailyTransferAmount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);

//int dailyTransferCountIncrement = postDailyTransferCountV-preDailyTransferAmountV;

//==== checker
 if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;)){
 	
	{		// if the test type is positive

		if(TxnStatus.equals(&quot;200&quot;))
		{
			vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	
		}
		else{
			vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
}
 else if(testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;)){
 	vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
 }
 
//======================= END

// RESULT CSV WRITER
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);

//String xx = vars.get(&quot;_cc&quot;);
//System.out.println(&quot;Dup = &quot;+value);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestcaseId = vars.get(&quot;TestcaseId&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Module = vars.get(&quot;Module&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);

_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;TestcaseId: &quot;+_TestcaseId+&quot; | Description: &quot;+_Description+&quot; | Module: &quot;+_Module+&quot; | TestType: &quot;+testType+&quot; | Status: &quot;+_CsvStatus);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);



print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative 2 with missing mandatory msisdn2" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_CREDIT_TRANSFER_USSD_Negative2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);



</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="missing mandatory msisdn2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCTRFREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;${New Pin}&lt;/PIN&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P Credit Transfer Request}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;2009&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="927078714">&lt;TXNSTATUS&gt;2009&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=19014 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value= JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;TestcaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

log.info(&quot;TxnStatus&quot;+TxnStatus);
//String preDailyTransferCount=vars.get(&quot;preDailyTransferCount_1&quot;);
//String preDailyTransferAmount=vars.get(&quot;preDailyTransferAmount_1&quot;);
//String postDailyTransferCount=vars.get(&quot;postDailyTransferCount_1&quot;);
//String postDailyTransferCount = vars.get(&quot;postDailyTransferAmount_1&quot;);
String TXNID= vars.get(&quot;TXNID&quot;);


//get the pre balance and post balance
//int preDailyTransferCountV = Integer.parseInt(preDailyTransferCount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);
// get the transaction amount
//int preDailyTransferAmountV = Integer.parseInt(preDailyTransferAmount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);

//int dailyTransferCountIncrement = postDailyTransferCountV-preDailyTransferAmountV;

//==== checker
 if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;)){
 	
	{		// if the test type is positive

		if(TxnStatus.equals(&quot;200&quot;))
		{
			vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	
		}
		else{
			vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
}
 else if(testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;)){
 	vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
 }
 
//======================= END

// RESULT CSV WRITER
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);

//String xx = vars.get(&quot;_cc&quot;);
//System.out.println(&quot;Dup = &quot;+value);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestcaseId = vars.get(&quot;TestcaseId&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Module = vars.get(&quot;Module&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);

_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;TestcaseId: &quot;+_TestcaseId+&quot; | Description: &quot;+_Description+&quot; | Module: &quot;+_Module+&quot; | TestType: &quot;+testType+&quot; | Status: &quot;+_CsvStatus);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);



print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative 3 with missing mandatory pin" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_CREDIT_TRANSFER_USSD_Negative3.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);



</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="missing mandatory pin" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCTRFREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P Credit Transfer Request}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;2010&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1232820144">&lt;TXNSTATUS&gt;2010&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=19014 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value= JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;TestcaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

log.info(&quot;TxnStatus&quot;+TxnStatus);
//String preDailyTransferCount=vars.get(&quot;preDailyTransferCount_1&quot;);
//String preDailyTransferAmount=vars.get(&quot;preDailyTransferAmount_1&quot;);
//String postDailyTransferCount=vars.get(&quot;postDailyTransferCount_1&quot;);
//String postDailyTransferCount = vars.get(&quot;postDailyTransferAmount_1&quot;);
String TXNID= vars.get(&quot;TXNID&quot;);


//get the pre balance and post balance
//int preDailyTransferCountV = Integer.parseInt(preDailyTransferCount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);
// get the transaction amount
//int preDailyTransferAmountV = Integer.parseInt(preDailyTransferAmount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);

//int dailyTransferCountIncrement = postDailyTransferCountV-preDailyTransferAmountV;

//==== checker
 if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;)){
 	
	{		// if the test type is positive

		if(TxnStatus.equals(&quot;200&quot;))
		{
			vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	
		}
		else{
			vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
}
 else if(testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;)){
 	vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
 }
 
//======================= END

// RESULT CSV WRITER
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);

//String xx = vars.get(&quot;_cc&quot;);
//System.out.println(&quot;Dup = &quot;+value);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestcaseId = vars.get(&quot;TestcaseId&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Module = vars.get(&quot;Module&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);

_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;TestcaseId: &quot;+_TestcaseId+&quot; | Description: &quot;+_Description+&quot; | Module: &quot;+_Module+&quot; | TestType: &quot;+testType+&quot; | Status: &quot;+_CsvStatus);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);



print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative 4 with missing mandatory amount" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_CREDIT_TRANSFER_USSD_Negative4.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);



</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="missing mandatory amount" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCTRFREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;${New Pin}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P Credit Transfer Request}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;1010&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-722285967">&lt;TXNSTATUS&gt;1010&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=19014 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value= JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;TestcaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

log.info(&quot;TxnStatus&quot;+TxnStatus);
//String preDailyTransferCount=vars.get(&quot;preDailyTransferCount_1&quot;);
//String preDailyTransferAmount=vars.get(&quot;preDailyTransferAmount_1&quot;);
//String postDailyTransferCount=vars.get(&quot;postDailyTransferCount_1&quot;);
//String postDailyTransferCount = vars.get(&quot;postDailyTransferAmount_1&quot;);
String TXNID= vars.get(&quot;TXNID&quot;);


//get the pre balance and post balance
//int preDailyTransferCountV = Integer.parseInt(preDailyTransferCount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);
// get the transaction amount
//int preDailyTransferAmountV = Integer.parseInt(preDailyTransferAmount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);

//int dailyTransferCountIncrement = postDailyTransferCountV-preDailyTransferAmountV;

//==== checker
 if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;)){
 	
	{		// if the test type is positive

		if(TxnStatus.equals(&quot;200&quot;))
		{
			vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	
		}
		else{
			vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
}
 else if(testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;)){
 	vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
 }
 
//======================= END

// RESULT CSV WRITER
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);

//String xx = vars.get(&quot;_cc&quot;);
//System.out.println(&quot;Dup = &quot;+value);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestcaseId = vars.get(&quot;TestcaseId&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Module = vars.get(&quot;Module&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);

_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;TestcaseId: &quot;+_TestcaseId+&quot; | Description: &quot;+_Description+&quot; | Module: &quot;+_Module+&quot; | TestType: &quot;+testType+&quot; | Status: &quot;+_CsvStatus);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);



print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative 5 with wrong pin" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_CREDIT_TRANSFER_USSD_Negative5.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);



</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="wrong pin" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCTRFREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;${__RandomString(4,1234567890,)}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P Credit Transfer Request}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;20100&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1232820144">&lt;TXNSTATUS&gt;2010&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Reqder" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=19014 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value= JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;TestcaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

log.info(&quot;TxnStatus&quot;+TxnStatus);
//String preDailyTransferCount=vars.get(&quot;preDailyTransferCount_1&quot;);
//String preDailyTransferAmount=vars.get(&quot;preDailyTransferAmount_1&quot;);
//String postDailyTransferCount=vars.get(&quot;postDailyTransferCount_1&quot;);
//String postDailyTransferCount = vars.get(&quot;postDailyTransferAmount_1&quot;);
String TXNID= vars.get(&quot;TXNID&quot;);


//get the pre balance and post balance
//int preDailyTransferCountV = Integer.parseInt(preDailyTransferCount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);
// get the transaction amount
//int preDailyTransferAmountV = Integer.parseInt(preDailyTransferAmount);
//int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);

//int dailyTransferCountIncrement = postDailyTransferCountV-preDailyTransferAmountV;

//==== checker
 if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;)){
 	
	{		// if the test type is positive

		if(TxnStatus.equals(&quot;200&quot;))
		{
			vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	
		}
		else{
			vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
}
 else if(testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;)){
 	vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
 }
 
//======================= END

// RESULT CSV WRITER
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);

//String xx = vars.get(&quot;_cc&quot;);
//System.out.println(&quot;Dup = &quot;+value);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestcaseId = vars.get(&quot;TestcaseId&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Module = vars.get(&quot;Module&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);

_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;TestcaseId: &quot;+_TestcaseId+&quot; | Description: &quot;+_Description+&quot; | Module: &quot;+_Module+&quot; | TestType: &quot;+testType+&quot; | Status: &quot;+_CsvStatus);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);



print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GMB Request USSD positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;CGMBALREQ&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Positive 1 with registered subscriber" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_GMB-POSITIVE1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GMB request ${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CGMBALREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;&lt;/LANGUAGE2&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=2222022 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=2222021 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN2msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);


//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);
_CsvSMS1 = _CsvSMS1.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;);
_CsvSMS2 = _CsvSMS2.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)
_Response = _Response.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;);
log.info(&quot;here11111&quot;);
String _Module = vars.get(&quot;Module&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
//print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|SMS1&quot;+_CsvSMS1.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|SMS2&quot;+_CsvSMS2.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|Status:&quot;+_CsvStatus+&quot;|ErrorCode&quot;+_ErrorCode);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Positive 2 with non  registered subscriber" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_GMB-POSITIVE1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GMB request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CGMBALREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;&lt;/LANGUAGE2&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=2222022 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=2222021 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN2msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

log.info(&quot;here11111&quot;);
String _Module = vars.get(&quot;Module&quot;);
_CsvSMS1 = _CsvSMS1.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;);
_CsvSMS2 = _CsvSMS2.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)
_Response = _Response.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;);
log.info(&quot;here11111&quot;);



f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
//print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|SMS1&quot;+_CsvSMS1.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|SMS2&quot;+_CsvSMS2.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|Status:&quot;+_CsvStatus+&quot;|ErrorCode&quot;+_ErrorCode);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GMB Request USSD negative" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;CGMBALREQ&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative 1  When we do not enter Mandatory parameters" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_GMB-Negative1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GMB request ${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CGMBALREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;&lt;/LANGUAGE2&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-530674547">&lt;TXNSTATUS&gt;2010212&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);


//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);




_CsvSMS1 = _CsvSMS1.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;);
_CsvSMS2 = _CsvSMS2.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)
_Response = _Response.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;);
log.info(&quot;here11111&quot;);
String _Module = vars.get(&quot;Module&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
//print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|SMS1&quot;+_CsvSMS1.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|SMS2&quot;+_CsvSMS2.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|Status:&quot;+_CsvStatus+&quot;|ErrorCode&quot;+_ErrorCode);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative 2 When MSISDN1 Length is not Between Specified SystemPreference MIN_MSISDN_LENGTH and MAX_MSISDN_LENGTH" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_GMB-Negative2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GMB request ${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CGMBALREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(1,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;&lt;/LANGUAGE2&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-611921936">&lt;TXNSTATUS&gt;2010204&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);


//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);
_CsvSMS1 = _CsvSMS1.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;);
_CsvSMS2 = _CsvSMS2.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)
_Response = _Response.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;);
log.info(&quot;here11111&quot;);
String _Module = vars.get(&quot;Module&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
//print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|SMS1&quot;+_CsvSMS1.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|SMS2&quot;+_CsvSMS2.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|Status:&quot;+_CsvStatus+&quot;|ErrorCode&quot;+_ErrorCode);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative 3 When MSISDN1 Length is not Between Specified SystemPreference MIN_MSISDN_LENGTH and MAX_MSISDN_LENGTH" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_GMB-Negative3.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GMB request ${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CGMBALREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(1,1234567890,)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;&lt;/LANGUAGE2&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);


//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

_CsvSMS1 = _CsvSMS1.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;);
_CsvSMS2 = _CsvSMS2.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)
_Response = _Response.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;);
log.info(&quot;here11111&quot;);
String _Module = vars.get(&quot;Module&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);
//print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|SMS1&quot;+_CsvSMS1.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|SMS2&quot;+_CsvSMS2.replaceAll(&quot;\\r|\\n&quot;, &quot;&quot;)+&quot;|Status:&quot;+_CsvStatus+&quot;|ErrorCode&quot;+_ErrorCode);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GMB BAR USSD_Positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;GMBBAR&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\USSD_GMBBAR_POSITIVE.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GMB BAR request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;GMBBAR&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${Barred_Receiver_MSISDN}&lt;/MSISDN2&gt;&lt;/COMMAND&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNID</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);


//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);



String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GMB BAR USSD_Negative" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;GMBBAR&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative Test Case 1" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_GMBBAR_NEGATIVE1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GMB BAR request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;GMBBAR&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${Barred_Receiver_MSISDN}&lt;/MSISDN2&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="171657895">&lt;TXNSTATUS&gt;4223032&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4223032 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);

//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);



String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
	

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative Test Case 2" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_GMBBAR_NEGATIVE2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GMB BAR request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;GMBBAR&lt;/TYPE&gt;&lt;MSISDN1&gt;&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);


//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);



String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
	

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative Test Case 3" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_GMBBAR_NEGATIVE3.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GMB BAR request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;GMBBAR&lt;/TYPE&gt;&lt;MSISDN1&gt;7246&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);


//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);



String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
	

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative Test Case 4" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_GMBBAR_NEGATIVE4.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GMB BAR request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;GMBBAR&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN_USSD_P2P}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;7200&lt;/MSISDN2&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-289786258">&lt;TXNSTATUS&gt;2041013&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);


//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);



String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
	

f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Self Bar USSD_Positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PBAR&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\USSD_P2P_SELF_BAR_POSITIVE.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SelfBarRequest:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;BARREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN1&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${P2P Suspend Request USSD}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNID</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=4228 | tail -1</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String PostStatus = vars.get(&quot;ussdpostStatusM1Value_1&quot;);
String PreStatus = vars.get(&quot;ussdpreStatusM1Value_1&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	
	if(TxnStatus.equals(&quot;200&quot;))
	{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	
	if(!TxnStatus.equals(&quot;200&quot;))
	{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
	}
	else{
	vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);





String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);

f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Self Bar USSD_Negative" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PBAR&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative Test Case 1" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_SELF_BAR_NEGATIVE1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdppreStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN_USSD_P2P}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdpreStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SelfBarRequest:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;BARREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;&lt;/MSISDN1&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P Suspend Request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN_USSD_P2P}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdpostStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=7058 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String PostStatus = vars.get(&quot;ussdpostStatusM1Value_1&quot;);
String PreStatus = vars.get(&quot;ussdpreStatusM1Value_1&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
if((PostStatus.equals(&quot;S&quot;)||PostStatus.equals(&quot;Y&quot;))&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
if((PostStatus.equals(&quot;S&quot;)||PostStatus.equals(&quot;Y&quot;))&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);




String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative Test Case 2" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\USSD_P2P_SELF_BAR_NEGATIVE2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdppreStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN_USSD_P2P}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdpreStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SelfBarRequest:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;BARREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;&lt;/MSISDN1&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${P2P Suspend Request USSD}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN_USSD_P2P}&apos; </stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdpostStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=7058 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String PostStatus = vars.get(&quot;ussdpostStatusM1Value_1&quot;);
String PreStatus = vars.get(&quot;ussdpreStatusM1Value_1&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
if((PostStatus.equals(&quot;S&quot;)||PostStatus.equals(&quot;Y&quot;))&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
if((PostStatus.equals(&quot;S&quot;)||PostStatus.equals(&quot;Y&quot;))&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);





String _Module = vars.get(&quot;Module&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Credit Recharge" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;PCR&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\USSD_CREDIT_Recharge_Positive1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;
String mobile2 = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);
vars.put(&quot;Mobile2&quot;,mobile2);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="set pin to 1357" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name} </stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">preDailyTransferCount,preDailyTransferAmount</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(PAYER,${MSISDN1})};
${__setProperty(PAYEE,${MSISDN2})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Credit Recharge request;${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCRCREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&#xd;
&lt;/COMMAND&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=19012| tail -1</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=19014 | tail -1</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);
f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Data Transfer Positive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;CDATA&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="All the mandatory as well as optional parameters" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_DATA_CREDIT_TRANSFER_USSD_Positive1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;
JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);
System.out.println(&quot;Transaction Started===================&quot;);
String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;
String mobile2 = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;
vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);
vars.put(&quot;Mobile1&quot;,mobile);
vars.put(&quot;Mobile2&quot;,mobile2);
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="set pin to 1357" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name} </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">preDailyTransferCount,preDailyTransferAmount</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(PAYER,${MSISDN1})};
${__setProperty(PAYEE,${MSISDN2})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Data Recharge request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCDATATRFREQ&lt;/TYPE&gt;&lt;DATE&gt;&lt;/DATE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${DATA_SELECTOR}&lt;/SELECTOR&gt;&lt;CELLID&gt;2245534645&lt;/CELLID&gt;&lt;SWITCHID&gt;4444&lt;/SWITCHID&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number


var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=201| tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));
TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;
/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);
if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{
	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}
	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}
p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=202 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));
TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;
/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}

p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));
TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="All the mandatory only" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_DATA_CREDIT_TRANSFER_USSD_Positive2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;
String mobile2 = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);
vars.put(&quot;Mobile2&quot;,mobile2);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="set pin to 1357" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name} </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">preDailyTransferCount,preDailyTransferAmount</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(PAYER,${MSISDN1})};
${__setProperty(PAYEE,${MSISDN2})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Data Recharge request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCDATATRFREQ&lt;/TYPE&gt;&lt;DATE&gt;&lt;/DATE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${DATA_SELECTOR}&lt;/SELECTOR&gt;&lt;CELLID&gt;&lt;/CELLID&gt;&lt;SWITCHID&gt;&lt;/SWITCHID&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=201| tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=202 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Data Transfer NEGATIVE" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver">${Database Driver}</stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="service_type_check" enabled="true">
          <stringProp name="dataSource">service_type_check</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from service_type where service_type=&apos;CDATA&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">serviceTypeStatus</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${serviceTypeStatus_1}&quot;==&quot;Y&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MSISDN1 is missing" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_DATA_CREDIT_TRANSFER_USSD_Negative1.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;
String mobile2 = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);
vars.put(&quot;Mobile2&quot;,mobile2);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="set pin to 1357" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name} </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">preDailyTransferCount,preDailyTransferAmount</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(PAYER,${MSISDN1})};
${__setProperty(PAYEE,${MSISDN2})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Data Recharge request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCDATATRFREQ&lt;/TYPE&gt;&lt;DATE&gt;&lt;/DATE&gt;&lt;MSISDN1&gt;&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;CELLID&gt;2245534645&lt;/CELLID&gt;&lt;SWITCHID&gt;4444&lt;/SWITCHID&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="434985007">&lt;TXNSTATUS&gt;7058&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=7058 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);



f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MSISDN2 is missing" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_DATA_CREDIT_TRANSFER_USSD_Negative2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;
String mobile2 = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);
vars.put(&quot;Mobile2&quot;,mobile2);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="set pin to 1357" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name} </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">preDailyTransferCount,preDailyTransferAmount</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(PAYER,${MSISDN1})};
${__setProperty(PAYEE,${MSISDN2})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Data Recharge request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCDATATRFREQ&lt;/TYPE&gt;&lt;DATE&gt;&lt;/DATE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;CELLID&gt;&lt;/CELLID&gt;&lt;SWITCHID&gt;&lt;/SWITCHID&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="927078714">&lt;TXNSTATUS&gt;2009&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=2009 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);



f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PIN is missing" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_DATA_CREDIT_TRANSFER_USSD_Negative3.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;
String mobile2 = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);
vars.put(&quot;Mobile2&quot;,mobile2);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="set pin to 1357" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name} </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">preDailyTransferCount,preDailyTransferAmount</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(PAYER,${MSISDN1})};
${__setProperty(PAYEE,${MSISDN2})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Data Recharge request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCDATATRFREQ&lt;/TYPE&gt;&lt;DATE&gt;&lt;/DATE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;CELLID&gt;2245534645&lt;/CELLID&gt;&lt;SWITCHID&gt;4444&lt;/SWITCHID&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1232820144">&lt;TXNSTATUS&gt;2010&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=2010| tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Amount is missing" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_DATA_CREDIT_TRANSFER_USSD_Negative4.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;
String mobile2 = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);
vars.put(&quot;Mobile2&quot;,mobile2);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="set pin to 1357" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name} </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update P2P_SUBSCRIBERS set PIN=&apos;5359410680b3a555&apos; where MSISDN=&apos;${Mobile1}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">preDailyTransferCount,preDailyTransferAmount</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(PAYER,${MSISDN1})};
${__setProperty(PAYEE,${MSISDN2})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Data Recharge request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCDATATRFREQ&lt;/TYPE&gt;&lt;DATE&gt;&lt;/DATE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;CELLID&gt;2245534645&lt;/CELLID&gt;&lt;SWITCHID&gt;4444&lt;/SWITCHID&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2123998001">&lt;TXNSTATUS&gt;2031202&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=2031202 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PIN is incorrect" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\P2P_DATA_CREDIT_TRANSFER_USSD_Negative5.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;Description&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);
String mobile = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;
String mobile2 = &quot;${MSISDN Prefix}${__RandomString(8,1234567890,)}&quot;;

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);

vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);
String sd = vars.get(&quot;CsvCaseType&quot;);

vars.put(&quot;Mobile1&quot;,mobile);
vars.put(&quot;Mobile2&quot;,mobile2);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(PAYER,${MSISDN1})};
${__setProperty(PAYEE,${MSISDN2})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Data Recharge request;${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCDATATRFREQ&lt;/TYPE&gt;&lt;DATE&gt;&lt;/DATE&gt;&lt;MSISDN1&gt;${Mobile1}&lt;/MSISDN1&gt;&lt;PIN&gt;${Old Pin}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${PRF_AMT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;CELLID&gt;2245534645&lt;/CELLID&gt;&lt;SWITCHID&gt;4444&lt;/SWITCHID&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1232820144">&lt;TXNSTATUS&gt;2010&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=2010 | tail -1</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);
String _Module = vars.get(&quot;Module&quot;);
String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS2 = vars.get(&quot;MSISDN1msg_1_g0&quot;);

log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Convert csv to xls" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1490081607000</longProp>
        <longProp name="ThreadGroup.end_time">1490081607000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.comviva.CSVToExcelConverter;
import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

try {
    //your code here
    //String[] paths = {&quot;C:\\FINAL\\AddUserO2c.csv&quot;, &quot;C:\\FINAL\\abc.xls&quot;};
CSVToExcelConverter object = new CSVToExcelConverter();
log.info(&quot;asad11&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
String resultxlspath = vars.get(&quot;ResultXlsPath&quot;);

log.info(resultcsvpath);
object.convertCsvToXLS(resultcsvpath, resultxlspath);
log.info(&quot;asad11&quot;);
}
catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
