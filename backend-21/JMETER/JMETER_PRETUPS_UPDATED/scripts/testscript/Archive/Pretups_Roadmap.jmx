<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ResultCsvPath" elementType="Argument">
            <stringProp name="Argument.name">ResultCsvPath</stringProp>
            <stringProp name="Argument.value">C:\apache-jmeter-2.12\bin\results_C2S.csv</stringProp>
            <stringProp name="Argument.desc">Result CSV File</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Host name" elementType="Argument">
            <stringProp name="Argument.name">Host name</stringProp>
            <stringProp name="Argument.value">172.16.11.91</stringProp>
            <stringProp name="Argument.desc">Server host name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Web port" elementType="Argument">
            <stringProp name="Argument.name">Web port</stringProp>
            <stringProp name="Argument.value">9090</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Web port</stringProp>
          </elementProp>
          <elementProp name="Port" elementType="Argument">
            <stringProp name="Argument.name">Port</stringProp>
            <stringProp name="Argument.value">22</stringProp>
            <stringProp name="Argument.desc">Server Port</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="User name" elementType="Argument">
            <stringProp name="Argument.name">User name</stringProp>
            <stringProp name="Argument.value">pretups650dev</stringProp>
            <stringProp name="Argument.desc">Server user name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Password" elementType="Argument">
            <stringProp name="Argument.name">Password</stringProp>
            <stringProp name="Argument.value">com@1234</stringProp>
            <stringProp name="Argument.desc">Server password</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Tomcat path" elementType="Argument">
            <stringProp name="Argument.name">Tomcat path</stringProp>
            <stringProp name="Argument.value">/home/pretupsdev/tomcat8_web</stringProp>
            <stringProp name="Argument.desc">Server Tomcat path</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CSV path" elementType="Argument">
            <stringProp name="Argument.name">CSV path</stringProp>
            <stringProp name="Argument.value">C:\apache-jmeter-2.12</stringProp>
            <stringProp name="Argument.desc">CSV path for test data</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Database URL" elementType="Argument">
            <stringProp name="Argument.name">Database URL</stringProp>
            <stringProp name="Argument.value">jdbc:oracle:thin:@//172.16.11.121:1522/test12c</stringProp>
            <stringProp name="Argument.desc">Database URL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Database User name" elementType="Argument">
            <stringProp name="Argument.name">Database User name</stringProp>
            <stringProp name="Argument.value">pretups660_dev</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Database User name</stringProp>
          </elementProp>
          <elementProp name="Database Password" elementType="Argument">
            <stringProp name="Argument.name">Database Password</stringProp>
            <stringProp name="Argument.value">pretups660_dev</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Database Password</stringProp>
          </elementProp>
          <elementProp name="USSD HTTP Request path C2S Receiver" elementType="Argument">
            <stringProp name="Argument.name">USSD HTTP Request path C2S Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/C2SReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD HTTP Request path C2S Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXTGW HTTP Request path C2S Receiver" elementType="Argument">
            <stringProp name="Argument.name">EXTGW HTTP Request path C2S Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/C2SReceiver?REQUEST_GATEWAY_CODE=EXTGW&amp;REQUEST_GATEWAY_TYPE=EXTGW&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">EXTGW HTTP Request path C2S Receiver</stringProp>
          </elementProp>
          <elementProp name="EXTGW HTTP Request path OPT Receiver" elementType="Argument">
            <stringProp name="Argument.name">EXTGW HTTP Request path OPT Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/OPTReceiver?REQUEST_GATEWAY_CODE=EXTGW&amp;REQUEST_GATEWAY_TYPE=EXTGW&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">EXTGW HTTP Request path OPT Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USSD HTTP Request path C2S Subscriber Receiver" elementType="Argument">
            <stringProp name="Argument.name">USSD HTTP Request path C2S Subscriber Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/C2SSubscriberReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD HTTP Request path C2S Subscriber Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USSD Plain text C2S Receiver" elementType="Argument">
            <stringProp name="Argument.name">USSD Plain text C2S Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/C2SReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=USSD&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD Plain text C2S Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXTGW HTTP Request path P2P Receiver" elementType="Argument">
            <stringProp name="Argument.name">EXTGW HTTP Request path P2P Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=EXTGW&amp;REQUEST_GATEWAY_TYPE=EXTGW&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">EXTGW HTTP Request path P2P Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USSD P2P Credit Transfer Request" elementType="Argument">
            <stringProp name="Argument.name">USSD P2P Credit Transfer Request</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=1357&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD P2P Credit Transfer Request </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="P2P change pin request USSD" elementType="Argument">
            <stringProp name="Argument.name">P2P change pin request USSD</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=1357&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">P2P change pin request USSD</stringProp>
          </elementProp>
          <elementProp name="P2P Suspend Request USSD" elementType="Argument">
            <stringProp name="Argument.name">P2P Suspend Request USSD</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=1357&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">P2P Suspend Request USSD</stringProp>
          </elementProp>
          <elementProp name="P2P Resume Request USSD" elementType="Argument">
            <stringProp name="Argument.name">P2P Resume Request USSD</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=1357&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">P2P Resume Request USSD</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USSD P2P register user" elementType="Argument">
            <stringProp name="Argument.name">USSD P2P register user</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=1357&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190 </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">USSD P2P register user</stringProp>
          </elementProp>
          <elementProp name="USSD P2P credit recharge request" elementType="Argument">
            <stringProp name="Argument.name">USSD P2P credit recharge request</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=1357&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD P2P credit recharge request</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="XMLGW HTTP Request path OPT Receiver" elementType="Argument">
            <stringProp name="Argument.name">XMLGW HTTP Request path OPT Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/OPTReceiver?REQUEST_GATEWAY_CODE=XMLGW&amp;REQUEST_GATEWAY_TYPE=XMLGW&amp;LOGIN=pretups&amp;PASSWORD=1357&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">XMLGW HTTP Request path OPT Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
        <stringProp name="HTTPSampler.port">${Web port}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Java/1.7.0_45</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">content-type</stringProp>
            <stringProp name="Header.value">text/xml</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Lite Recharge USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">19</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_LITE_RECHARGE.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where (a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;) and product_code=&apos;ETOPUP&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Lite Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> &lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;RCTRFSERREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;SERVICECLASS&gt;${SERVICECLASS}&lt;/SERVICECLASS&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdaditionalcomm" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdadditionalCommM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select margin_amount from adjustments where reference_id= &apos;${TXNID}&apos; and user_id=(select user_id from users where MSISDN=&apos;${MSISDN}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdadditionalCommM1Value</stringProp>
            <stringProp name="resultVariable">commission</stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CommissionCalculation" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">int  COMMISSION= vars.get(&quot;commission_1&quot;);
int  AMOUNT = vars.get(&quot;AMOUNT&quot;);
int  preBalance = vars.get(&quot;preBalance&quot;);

int calcBalance = &quot;preBalance&quot;- &quot;AMOUNT&quot;+ &quot;COMMISSION&quot;;
vars.put(&quot;calcBalance&quot;,calcBalance);

//System.out.println(&quot;commission_1&quot;);
//f = new FileOutputStream(&quot;results.csv&quot;, false);
//p = new PrintStream(f); 
//this.interpreter.setOut(p); 
//print(&quot;TestCaseID: &quot; + testcaseid + &quot; : Txn Status: &quot; + TXNSTATUS + &quot; : Sent SMS: &quot; + sentsms);
//System.out.println(value);
//f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where ( a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos; ) and product_code=&apos;ETOPUP&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50  ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;210%|603%&apos;|tail -2</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID
String commCheck= vars.get(&quot;ussdadditionalCommM1Value_#&quot;);
log.info(&quot;comcheck&quot;+commCheck);



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

if(commCheck.equals(&quot;1&quot;))
{
	String commValue= vars.get(&quot;ussdadditionalCommM1Value_1&quot;);
	commAmount = Integer.parseInt(commValue);
	commAmount=commAmount/100;
	log.info(&quot;commAmount&quot;+commAmount);
	transferAmount=transferAmount-commAmount;
	log.info(&quot;transferAmount&quot;+transferAmount);
}

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _CsvSMS3 = vars.get(&quot;sentsms_3_g0&quot;);
String _CsvSMS4 = vars.get(&quot;sentsms_4_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS2+&quot;|SMS3:&quot;+_CsvSMS3+&quot;|SMS4:&quot;+_CsvSMS4+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Lite Recharge EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">20</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_LITE_RECHARGE.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where (a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;) and product_code=&apos;ETOPUP&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Lite Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;RCTRFSERREQ&lt;/TYPE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;SERVICECLASS&gt;${SERVICECLASS}&lt;/SERVICECLASS&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;]/text(), &apos;number&apos; ), &apos;to&apos;)</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdaditionalcomm" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdadditionalCommM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select margin_amount from adjustments where reference_id= &apos;${TXNID}&apos; and user_id=(select user_id from users where MSISDN=&apos;${MSISDN}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdadditionalCommM1Value</stringProp>
            <stringProp name="resultVariable">commission</stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CommissionCalculation" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">int  COMMISSION= vars.get(&quot;commission_1&quot;);
int  AMOUNT = vars.get(&quot;AMOUNT&quot;);
int  preBalance = vars.get(&quot;preBalance&quot;);

int calcBalance = &quot;preBalance&quot;- &quot;AMOUNT&quot;+ &quot;COMMISSION&quot;;
vars.put(&quot;calcBalance&quot;,calcBalance);

//System.out.println(&quot;commission_1&quot;);
//f = new FileOutputStream(&quot;results.csv&quot;, false);
//p = new PrintStream(f); 
//this.interpreter.setOut(p); 
//print(&quot;TestCaseID: &quot; + testcaseid + &quot; : Txn Status: &quot; + TXNSTATUS + &quot; : Sent SMS: &quot; + sentsms);
//System.out.println(value);
//f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where ( a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos; ) and product_code=&apos;ETOPUP&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">172.16.11.91</stringProp>
          <intProp name="port">22</intProp>
          <stringProp name="username">pretups650dev</stringProp>
          <stringProp name="password">com@1234</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |grep ${MESSAGE}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID
String commCheck= vars.get(&quot;ussdadditionalCommM1Value_#&quot;);
log.info(&quot;comcheck&quot;+commCheck);



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

if(commCheck.equals(&quot;1&quot;))
{
	String commValue= vars.get(&quot;ussdadditionalCommM1Value_1&quot;);
	commAmount = Integer.parseInt(commValue);
	commAmount=commAmount/100;
	log.info(&quot;commAmount&quot;+commAmount);
	transferAmount=transferAmount-commAmount;
	log.info(&quot;transferAmount&quot;+transferAmount);
}

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _CsvSMS3 = vars.get(&quot;sentsms_3_g0&quot;);
String _CsvSMS4 = vars.get(&quot;sentsms_4_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS2+&quot;|SMS3:&quot;+_CsvSMS3+&quot;|SMS4:&quot;+_CsvSMS4+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Card Group Enquiry USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_CARDGROUP_ENQUIRY.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where (a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Card group enquiry request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CGENQREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;SERVICETYPE&gt;${SERVICETYPE}&lt;/SERVICETYPE&gt;&lt;SUBSERVICE&gt;${SUBSERVICE}&lt;/SUBSERVICE&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where ( a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos; )</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Card Group Enquiry EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">9</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_CARDGROUP_ENQUIRY.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where (a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Card group enquiry request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CGENQREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;SERVICETYPE&gt;${SERVICETYPE}&lt;/SERVICETYPE&gt;&lt;SUBSERVICE&gt;${SUBSERVICE}&lt;/SUBSERVICE&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where ( a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos; )</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Self TPIN Initiate USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_SELFTPIN_INITIATE.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Self TPIN initiate request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command1.0//EN&quot;&quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;INPRESET&lt;/TYPE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |egrep &apos;1031069%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;

if(TxnStatus.equals(&quot;200&quot;))
{
	PrintData+=&quot;|SMS:&quot;+_CsvSMS1;
}

print(PrintData);




f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Self TPIN Reset USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_SELFTPIN_RESET.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Self TPIN Reset request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;PRESET&lt;/TYPE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;OTP&gt;${OTP}&lt;/OTP&gt;&lt;ANSWER&gt;${ANSWER}&lt;/ANSWER&gt;&lt;NEWPIN&gt;${NEWPIN}&lt;/NEWPIN&gt;&lt;CONFIRMNEWPIN&gt;${CONFIRMNEWPIN}&lt;/CONFIRMNEWPIN&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |egrep &apos;1031070%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;

if(TxnStatus.equals(&quot;200&quot;))
{
	PrintData+=&quot;|SMS:&quot;+_CsvSMS1;
}

print(PrintData);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="User Data update USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">6</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_USERDATA_UPDATION.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Data update request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;DUPDATE&lt;/TYPE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;SHORTNAME&gt;${SHORTNAME}&lt;/SHORTNAME&gt;&lt;CONTACTPERSON&gt;${CONTACTPERSON}&lt;/CONTACTPERSON&gt;&lt;SUBSCRIBERCODE&gt;${SUBSCRIBERCODE}&lt;/SUBSCRIBERCODE&gt;&lt;APPOINTMENTDATE&gt;${APPOINTMENTDATE}&lt;/APPOINTMENTDATE&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Modify User EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_USERMOD.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Modify user request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERMODREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EMPCODE}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;NETWORKCODE&gt;${NETWORKCODE}&lt;/NETWORKCODE&gt;&lt;USERMSISDN&gt;${USERMSISDN}&lt;/USERMSISDN&gt;&lt;EXTERNALCODE&gt;${EXTERNALCODE}&lt;/EXTERNALCODE&gt;&lt;NEWEXTERNALCODE&gt;${NEWEXTERNALCODE}&lt;/NEWEXTERNALCODE&gt;&lt;USERNAME&gt;${USERNAME}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${SHORTNAME}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;${USERNAMEPREFIX}&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${SUBSCRIBERCODE}&lt;/SUBSCRIBERCODE&gt;&lt;CONTACTPERSON&gt;${CONTACTPERSON}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${CONTACTNUMBER}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${SSN}&lt;/SSN&gt;&lt;ADDRESS1&gt;${ADDRESS1}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${ADDRESS2}&lt;/ADDRESS2&gt;&lt;CITY&gt;${CITY}&lt;/CITY&gt;&lt;STATE&gt;${STATE}&lt;/STATE&gt;&lt;COUNTRY&gt;${COUNTRY}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${EMAILID}&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;${WEBLOGINID}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${WEBPASSWORD}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;MSISDN3&gt;${MSISDN3}&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Postpaid Bill payment USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">13</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_PPB.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos; and a.product_code=&apos;POSTETOPUP&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PPB request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;PPBTRFREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos; and a.product_code=&apos;POSTETOPUP&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Calculation" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">int  COMMISSION= vars.get(&quot;commission_1&quot;);
int  TOPUPVALUE = vars.get(&quot;TOPUPVALUE&quot;);
int  preBalance = vars.get(&quot;preBalanceM1Value&quot;);

int calcBalance1 = &quot;preBalance&quot;+ &quot;TOPUPVALUE&quot;+ &quot;COMMISSION&quot;;
vars.put(&quot;calcBalance1&quot;,calcBalance1);

//System.out.println(&quot;commission_1&quot;);
//f = new FileOutputStream(&quot;results.csv&quot;, false);
//p = new PrintStream(f); 
//this.interpreter.setOut(p); 
//print(&quot;TestCaseID: &quot; + testcaseid + &quot; : Txn Status: &quot; + TXNSTATUS + &quot; : Sent SMS: &quot; + sentsms);
//System.out.println(value);
//f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS2+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Postpaid Bill payment EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_PPB.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN}&apos; and a.product_code=&apos;POSTETOPUP&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PPB request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;EXPPBREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN}&apos; and a.product_code=&apos;POSTETOPUP&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Calculation" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">int  COMMISSION= vars.get(&quot;commission_1&quot;);
int  TOPUPVALUE = vars.get(&quot;TOPUPVALUE&quot;);
int  preBalance = vars.get(&quot;preBalanceM1Value&quot;);

int calcBalance1 = &quot;preBalance&quot;+ &quot;TOPUPVALUE&quot;+ &quot;COMMISSION&quot;;
vars.put(&quot;calcBalance1&quot;,calcBalance1);

//System.out.println(&quot;commission_1&quot;);
//f = new FileOutputStream(&quot;results.csv&quot;, false);
//p = new PrintStream(f); 
//this.interpreter.setOut(p); 
//print(&quot;TestCaseID: &quot; + testcaseid + &quot; : Txn Status: &quot; + TXNSTATUS + &quot; : Sent SMS: &quot; + sentsms);
//System.out.println(value);
//f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS2+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Change notification language EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">6</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_CHNG_NOTIFICATION_LNG.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change notification language request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;RCNLANGREQ&lt;/TYPE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}|</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LMS Point Enquiry USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_LMSPOINTENQ.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LMS Point Enquiry request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;LMSPTENQ&lt;/TYPE&gt;&lt;IMEI&gt;${IMEI}&lt;/IMEI&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LMS Point Redemption USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">7</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_LMS_POINT_REDEMPTION.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LMS Point Redemption request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;LMSPTRED&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;POINTS&gt;${POINTS}&lt;/POINTS&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="REDTXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">REDTXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;REDTXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${REDTXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus+&quot;|SMS:&quot;+_CsvSMS1);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LMS Point Enquiry EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_LMSPOINTENQ.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LMS Point Enquiry request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;LMSPTENQ&lt;/TYPE&gt;&lt;IMEI&gt;${IMEI}&lt;/IMEI&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}|</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LMS Point Redemption EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">12</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_LMS_POINT_REDEMPTION.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LMS Point Redemption request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;LMSPTRED&lt;/TYPE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;POINTS&gt;${POINTS}&lt;/POINTS&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}|</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="REDTXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">REDTXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;REDTXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${REDTXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus+&quot;|SMS:&quot;+_CsvSMS1);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Daily status Report USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">9</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_DAILY_STATUS_REPORT.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Daily status Report request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;DSRREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="C2S Gift recharge EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_GIFTRECHARGE.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos; OR b.login_id=&apos;${LOGINID}&apos; OR b.external_code=&apos;${EXTCODE}&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CommissionCalculation" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">int  COMMISSION= vars.get(&quot;commission_1&quot;);
int  AMOUNT = vars.get(&quot;AMOUNT&quot;);
int  preBalance = vars.get(&quot;preBalance&quot;);

int calcBalance = &quot;preBalance&quot;- &quot;AMOUNT&quot;+ &quot;COMMISSION&quot;;
vars.put(&quot;calcBalance&quot;,calcBalance);

//System.out.println(&quot;commission_1&quot;);
//f = new FileOutputStream(&quot;results.csv&quot;, false);
//p = new PrintStream(f); 
//this.interpreter.setOut(p); 
//print(&quot;TestCaseID: &quot; + testcaseid + &quot; : Txn Status: &quot; + TXNSTATUS + &quot; : Sent SMS: &quot; + sentsms);
//System.out.println(value);
//f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C2S Gift Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;EXGFTRCREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;GIFTER_MSISDN&gt;${GIFTER_MSISDN}&lt;/GIFTER_MSISDN&gt;&lt;GIFTER_NAME&gt;${GIFTER_NAME}&lt;/GIFTER_NAME&gt;&lt;GIFTER_LANGUAGE&gt;${GIFTER_LANGUAGE}&lt;/GIFTER_LANGUAGE&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos; OR b.login_id=&apos;${LOGINID}&apos; OR b.external_code=&apos;${EXTCODE}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Calculation" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">int  COMMISSION= vars.get(&quot;commission_1&quot;);
int  TOPUPVALUE = vars.get(&quot;TOPUPVALUE&quot;);
int  preBalance = vars.get(&quot;preBalanceM1Value&quot;);

int calcBalance1 = &quot;preBalance&quot;+ &quot;TOPUPVALUE&quot;+ &quot;COMMISSION&quot;;
vars.put(&quot;calcBalance1&quot;,calcBalance1);

//System.out.println(&quot;commission_1&quot;);
//f = new FileOutputStream(&quot;results.csv&quot;, false);
//p = new PrintStream(f); 
//this.interpreter.setOut(p); 
//print(&quot;TestCaseID: &quot; + testcaseid + &quot; : Txn Status: &quot; + TXNSTATUS + &quot; : Sent SMS: &quot; + sentsms);
//System.out.println(value);
//f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS1+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="User  Delete EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_USERDEL.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="generateExtnumber" enabled="false"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">jdbc:oracle:thin:@//172.16.11.121:1522/test12c</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">pretups660_dev</stringProp>
            <stringProp name="password">pretups660_dev</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="userExtNum" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select MAX(to_number(EXT_TXN_NO))+1 as ext from channel_transfers</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">userExtNumber</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CommissionCalculation" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">int  COMMISSION= vars.get(&quot;commission_1&quot;);
int  AMOUNT = vars.get(&quot;AMOUNT&quot;);
int  preBalance = vars.get(&quot;preBalance&quot;);

int calcBalance = &quot;preBalance&quot;- &quot;AMOUNT&quot;+ &quot;COMMISSION&quot;;
vars.put(&quot;calcBalance&quot;,calcBalance);

//System.out.println(&quot;commission_1&quot;);
//f = new FileOutputStream(&quot;results.csv&quot;, false);
//p = new PrintStream(f); 
//this.interpreter.setOut(p); 
//print(&quot;TestCaseID: &quot; + testcaseid + &quot; : Txn Status: &quot; + TXNSTATUS + &quot; : Sent SMS: &quot; + sentsms);
//System.out.println(value);
//f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpredeleteStatus" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdppredeleteStatusM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.status from users a  where a.msisdn=&apos;${MSISDN}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpredeleteStatusM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserDEL request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERDELREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${NWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EMPCODE}&lt;/EMPCODE&gt;&lt;CATCODE&gt;${CATCODE}&lt;/CATCODE&gt;&lt;LOGINID&gt;${SLOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;REMARKS&gt;${REMARKS}&lt;/REMARKS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostdeleteStatus" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostdeleteStatusM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.status from users a  where a.msisdn=&apos;${MSISDN}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostdeleteStatusM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="updatedeleteStatus" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="updatedeleteStatusM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">update Users a Set a.status=&apos;Y&apos;    where a.msisdn=&apos;${MSISDN}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">updatedeleteStatusM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String PostdelStatus = vars.get(&quot;ussdpostdeleteStatusM1Value_1&quot;);
String PredelStatus = vars.get(&quot;ussdpredeleteStatusM1Value_1&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
if((PostdelStatus.equals(&quot;N&quot;)||PostdelStatus.equals(&quot;DR&quot;))&amp;&amp;!PostdelStatus.equals(PredelStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
if((PostdelStatus.equals(&apos;N&apos;)||PostdelStatus.equals(&quot;DR&quot;))&amp;&amp;!PostdelStatus.equals(PredelStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);




String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

String output = &quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData;

if(TxnStatus.equals(&quot;200&quot;))
	{
	print(output+&quot;|CsvSMS1:&quot;+_CsvSMS1+&quot;|CsvStatus:&quot;+_CsvStatus);
	}
	else{
		print(output+&quot;|CsvStatus:&quot;+_CsvStatus);
	}

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="C2S Status EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">9</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_C2S_STATUS.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C2S status request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;EXRCSTATREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;TXNID&gt;${TXNID}&lt;/TXNID&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);




String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

String output = &quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData;


		print(output+&quot;|CsvStatus:&quot;+_CsvStatus);
	

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Last Transaction Details EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">7</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path} \EXTGW_LastTransactionDetails.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Last Transaction Details request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;EXLSTTRFREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-713560087">&lt;REQSTATUS&gt;200&lt;/REQSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="REQSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">REQSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;REQSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command"> tail -50 ${Tomcat path}/logs/messageSentLog.log |cut -d &apos;:&apos; -f11 |grep ${TXNID}|tail -2</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;REQSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;





//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;TestcaseId&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);




String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

String output = &quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData;

if(TxnStatus.equals(&quot;200&quot;)){
		print(output+&quot;|CsvSMS1&quot;+_CsvSMS1+&quot;|CsvStatus:&quot;+_CsvStatus);
}
else{
	print(output+&quot;|CsvStatus:&quot;+_CsvStatus);
}

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="User Suspend resume Deletion EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">6</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_USER_SUSPEND_RESUME.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreStatus" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdppreStatusM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.status from users a  where a.msisdn=&apos;${MSISDN1}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreStatusM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserSUSRESDEL request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;SRCUSRREQEX&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;NETWORK&gt;${NETWORK}&lt;/NETWORK&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;ACTION&gt;${ACTION}&lt;/ACTION&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/C2SReceiver?REQUEST_GATEWAY_CODE=EXTGW&amp;REQUEST_GATEWAY_TYPE=EXTGW&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostStatus" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostStatusM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.status from users a  where a.msisdn=&apos;${MSISDN1}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostStatusM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="updatedeleteStatus" enabled="false"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">select 1</stringProp>
            <stringProp name="dbUrl">jdbc:oracle:thin:@//172.16.11.121:1522/test12c</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">pretups660_dev</stringProp>
            <stringProp name="password">pretups660_dev</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="updatedeleteStatusM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">update Users a Set a.status=&apos;Y&apos;    where a.msisdn=&apos;${MSISDN1}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">updatedeleteStatusM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |cut -d &apos;:&apos; -f11 |grep ${MSISDN1} |tail -1</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String PostStatus = vars.get(&quot;ussdpostStatusM1Value_1&quot;);
String PreStatus = vars.get(&quot;ussdpreStatusM1Value_1&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
if((PostStatus.equals(&quot;SR&quot;)||PostStatus.equals(&quot;S&quot;)||PostStatus.equals(&quot;Y&quot;))&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
if((PostStatus.equals(&quot;SR&quot;)||PostStatus.equals(&quot;S&quot;)||PostStatus.equals(&quot;Y&quot;))&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);




String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

String output = &quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData;

if(TxnStatus.equals(&quot;200&quot;))
	{
	print(output+&quot;|CsvSMS1:&quot;+_CsvSMS1+&quot;|CsvStatus:&quot;+_CsvStatus);
	}
	else{
		print(output+&quot;|CsvStatus:&quot;+_CsvStatus);
	}

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sid number request USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">6</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_SID_NUMBER_REQUEST.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sid  request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;SIDREQ&lt;/TYPE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;SID&gt;${SID}&lt;/SID&gt;&lt;NEWSID&gt;${NEWSID}&lt;/NEWSID&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Subscriber Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;is&apos;)</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 {Tomcat path}/logs/jmeterLogs.txt |grep  ${MESSAGE}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


/*String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;*/

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);


String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

if(TxnStatus.equals(&quot;200&quot;))
{
print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1 +&quot;|Status:&quot;+_CsvStatus);
}
else
{
print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response +&quot;|Status:&quot;+_CsvStatus);
}
f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sid enquiry USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_SELF_SID_ENQUIRY.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sid enq request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;ENQSID&lt;/TYPE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Subscriber Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;is&apos;)</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 {Tomcat path}/logs/jmeterLogs.txt |grep  ${MESSAGE}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


/*String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;*/

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);


String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

if(TxnStatus.equals(&quot;200&quot;))
{
print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1 +&quot;|Status:&quot;+_CsvStatus);
}
else
{
	print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response +&quot;|Status:&quot;+_CsvStatus);
}
f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sid deletion USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_SID_DELETION.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sid del request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;DELSID&lt;/TYPE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;SID&gt;${SID}&lt;/SID&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Subscriber Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;is&apos;)</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 {Tomcat path}/logs/jmeterLogs.txt |grep  ${MESSAGE}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


/*String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;*/

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);


String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

if(TxnStatus.equals(&quot;200&quot;))
{
print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1 +&quot;|Status:&quot;+_CsvStatus);
}
else
{
	print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response +&quot;|Status:&quot;+_CsvStatus);
}

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Internet recharge EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_INTERNET_REC.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos; OR b.login_id=&apos;${LOGINID}&apos; OR b.external_code=&apos;${EXTCODE}&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InternetRecharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command1.0//EN&quot;&quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;EXINTRRCREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;NOTIFICATION_MSISDN&gt;${NOTIFICATIONMSISDN}&lt;/NOTIFICATION_MSISDN&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos; OR b.login_id=&apos;${LOGINID}&apos; OR b.external_code=&apos;${EXTCODE}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -20 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

if(TxnStatus.equals(&quot;200&quot;))
{
print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS1+&quot;|Status:&quot;+_CsvStatus);
}
else
{
print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|Status:&quot;+_CsvStatus);
}

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Private recharge EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">9</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_PRIVATERECHARGE.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos; OR b.login_id=&apos;${LOGINID}&apos; OR b.external_code=&apos;${EXTCODE}&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Private Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command1.0//EN&quot;&quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;EXRCTRFREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&#xd;
&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&#xd;
&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&#xd;
&lt;/COMMAND&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos; OR b.login_id=&apos;${LOGINID}&apos; OR b.external_code=&apos;${EXTCODE}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -20 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

if(TxnStatus.equals(&quot;200&quot;))
{
print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS1+&quot;|Status:&quot;+_CsvStatus);
}
else
{
	print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|Status:&quot;+_CsvStatus);
}


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="User balance EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">6</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_BALANCE_ENQUIRY.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User balance request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XMLCommand1.0//EN&quot;&quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;EXUSRBALREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&#xd;
&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |cut -d &apos;:&apos; -f11 |egrep &apos;4308%&apos;|tail -1</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


/*String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;*/

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);


String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

if(TxnStatus.equals(&quot;200&quot;))
{
print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1 +&quot;|Status:&quot;+_CsvStatus );
}
else
{
	print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response + &quot;|Status:&quot;+_CsvStatus);
	}

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Bar User RESTFul" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">18</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\BarUser.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;: &quot;${name}&quot;,&quot;msisdn&quot;: &quot;${msisdn}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type}&quot;, &quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;9981%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;

if(TxnStatus.equals(&quot;200&quot;))
{
	PrintData+=&quot;|SMS:&quot;+_CsvSMS1;
}

print(PrintData);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UnBar List RESTFul" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">13</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\Jmeter\UnbarUser.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;: &quot;${msisdn}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type}&quot;, &quot;externalCode&quot;: &quot;${externalCode}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ConfirmUnBar RESTFul" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">8</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\Jmeter\ConfirmUnbar.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm UnBar user request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;: &quot;${msisdn}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;,&quot;barredTypeList&quot;:[&quot;${barredTypeList}&quot;]},&quot;type&quot;: &quot;${type}&quot;,&quot;externalCode&quot;: &quot;${externalCode}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11 |egrep &apos;9980%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;

if(TxnStatus.equals(&quot;200&quot;))
{
	PrintData+=&quot;|SMS:&quot;+_CsvSMS1;
}

print(PrintData);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View barred list RESTFul" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">16</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\Jmeter\ViewBarredList.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View barred list request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;fromDate&quot;: &quot;${fromDate}&quot;,&quot;toDate&quot;: &quot;${toDate}&quot;,&quot;msisdn&quot;: &quot;${msisdn}&quot;},&quot;type&quot;: &quot;${type}&quot;,&quot;externalCode&quot;: &quot;${externalCode}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;



print(PrintData);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Load C2S Reversal TXN detail RESTFul" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">7</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\Jmeter\LoadC2SReverseTransaction.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Load C2S Reversal TXN detail" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ 	&quot;loginId&quot;: &quot;${loginId}&quot;, 	&quot;password&quot;: &quot;${password}&quot;, 	&quot;data&quot;: { 		&quot;moduleType&quot;: &quot;${moduleType}&quot;, 		&quot;serviceType&quot;: &quot;${serviceType}&quot;, 		&quot;currentBalance&quot;: &quot;${currentBalance}&quot;, 		&quot;pin&quot;: &quot;${pin}&quot;, 		&quot;subscriberMsisdn&quot;: &quot;${subscriberMsisdn}&quot; 	}, 	&quot;type&quot;: &quot;${type}&quot;, 	&quot;externalCode&quot;: &quot;${externalCode}&quot; }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;



print(PrintData);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Do C2S Reversal TXN detail RESTFul" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\Jmeter\DoC2SReverseTransaction.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Do C2S Reversal TXN detail" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;:&quot;${loginId}&quot;, &quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;:{&quot;txID&quot;:&quot;${txID}&quot;, &quot;pin&quot;:&quot;${pin}&quot;}, &quot;type&quot;:&quot;${type}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;CsvResponse&apos;]/text(), &apos;Transaction number&apos; ), &apos;for Prepaid&apos;)</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">172.16.11.91</stringProp>
          <intProp name="port">22</intProp>
          <stringProp name="username">pretups650dev</stringProp>
          <stringProp name="password">com@1234</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script"></stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;

if(TxnStatus.equals(&quot;200&quot;))
{
	PrintData+=&quot;|SMS:&quot;+_CsvSMS1;
}

print(PrintData);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get C2S Reversal TXN detail RESTFul" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\Jmeter\getc2sreversaltxndetai.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get C2S Reversal TXN detail" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;senderMsisdn&quot;: &quot;${senderMsisdn}&quot;,&quot;txID&quot;: &quot;${txID}&quot;},&quot;type&quot;: &quot;${type}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Load commission profile status RESTFul" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">7</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\Jmeter\LoadComissionProfileStatus.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Load commission profile status" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,	&quot;password&quot;: &quot;${password}&quot;,	&quot;data&quot;: {&quot;domainCode&quot;: &quot;${domainCode}&quot;,&quot;categoryCode&quot;: &quot;${categoryCode}&quot;,&quot;grphDomainCode&quot;: &quot;${grphDomainCode}&quot;,&quot;gradeCode&quot;: &quot;${gradeCode}&quot;},&quot;type&quot;: &quot;${type}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Change commission profile status RESTFul" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\Jmeter\ChangeComissionProfileStatus.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change commission profile status" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;domainCode&quot;: &quot;${domainCode}&quot;,&quot;categoryCode&quot;: &quot;${categoryCode}&quot;,&quot;grphDomainCode&quot;: &quot;${grphDomainCode}&quot;,&quot;gradeCode&quot;: &quot;${gradeCode}&quot;,&quot;selectCommProfileSetList&quot;: [{&quot;status&quot;: &quot;${status}&quot;,&quot;grphDomainCode&quot;: &quot;${grphDomainCode}&quot;,&quot;language1Message&quot;: &quot;${language1Message}&quot;,&quot;language2Message&quot;: &quot;${language2Message}&quot;,&quot;shortCode&quot;: &quot;${shortCode}&quot;,&quot;categoryCode&quot;: &quot;${categoryCode}&quot;,&quot;commProfileSetId&quot;: &quot;${commProfileSetId}&quot;,&quot;combinedKey&quot;: &quot;${combinedKey}&quot;,&quot;gradeCode&quot;: &quot;${gradeCode}&quot;,&quot;commProfileSetName&quot;: &quot;${commProfileSetName}&quot;,&quot;code&quot;: &quot;${code}&quot;,&quot;oldCode&quot;: &quot;${oldCode}&quot;}]},&quot;type&quot;: &quot;${type}&quot;,&quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Multicurrency Recharge USSD Plaintext" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\MultiCurrencyRecharge.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Multicurrency Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&amp;MSISDN1=${MSISDN}&amp;PIN=${PIN}&amp;TYPE=MCRTRFREQ&amp;MSISDN2=${MSISDN2}&amp;AMOUNT=${AMOUNT}&amp;SELECTOR=${SELECTOR}&amp;LANG1=${LANGUAGE1}&amp;LANG2=${LANGUAGE2}&amp;CURRENCY=${CURRENCY}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
          <stringProp name="HTTPSampler.port">${Web port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">http://${Host name}:${Web port}${USSD Plain text C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response =prev.getResponseDataAsString();

System.out.println(prev.getResponseDataAsString());

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

String txnid=response.toString();

log.info(prev.getResponseDataAsString());

 
txnid = txnid.substring(22,41);


log.info(&quot;TXNID&quot;+txnid);

vars.put(&quot;txnid&quot;,txnid);


var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1903388945">TXNSTATUS=200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">true</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${txnid}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS2+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="C2S recharge USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">93</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_C2S_TRANSFER.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN}&apos; and product_code=&apos;ETOPUP&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C2S Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;RCTRFREQ&lt;/TYPE&gt;&lt;CELLID&gt;${CELLID}&lt;/CELLID&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdaditionalcomm" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdadditionalCommM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select margin_amount from adjustments where reference_id= &apos;${TXNID}&apos; and user_id=(select user_id from users where MSISDN=&apos;${MSISDN}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdadditionalCommM1Value</stringProp>
            <stringProp name="resultVariable">commission</stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN}&apos; and product_code=&apos;ETOPUP&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -20 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID
String commCheck= vars.get(&quot;ussdadditionalCommM1Value_#&quot;);
log.info(&quot;comcheck&quot;+commCheck);



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

if(commCheck.equals(&quot;1&quot;))
{
	String commValue= vars.get(&quot;ussdadditionalCommM1Value_1&quot;);
	commAmount = Integer.parseInt(commValue);
	commAmount=commAmount/100;
	log.info(&quot;commAmount&quot;+commAmount);
	transferAmount=transferAmount-commAmount;
	log.info(&quot;transferAmount&quot;+transferAmount);
}

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _CsvSMS3 = vars.get(&quot;sentsms_3_g0&quot;);
String _CsvSMS4 = vars.get(&quot;sentsms_4_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS2+&quot;|SMS3:&quot;+_CsvSMS3+&quot;|SMS4:&quot;+_CsvSMS4+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="C2C Transfer USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_C2C_TRANSFER.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance1" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos; and a.product_code IN(Select Product_code from Products where product_short_code = &apos;${PRODUCTCODE}&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance2" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM2" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN2}&apos; and a.product_code IN(Select Product_code from Products where product_short_code = &apos;${PRODUCTCODE}&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM2Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C2C Transfer request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;TRFREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;TOPUPVALUE&gt;${TOPUPVALUE}&lt;/TOPUPVALUE&gt;&lt;PRODUCTCODE&gt;${PRODUCTCODE}&lt;/PRODUCTCODE&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"> ${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance2" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos; and a.product_code IN(Select Product_code from Products where product_short_code = &apos;${PRODUCTCODE}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance2" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM2" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN2}&apos; and a.product_code IN(Select Product_code from Products where product_short_code = &apos;${PRODUCTCODE}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM2Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |cut -d &apos;:&apos; -f11 |egrep &apos;8087%|5037%&apos;|tail -2 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String prebal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String prebal2=vars.get(&quot;ussdpreBalanceM2Value_1&quot;);
String postbal1=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String postbal2=vars.get(&quot;ussdpostBalanceM2Value_1&quot;);
String qty=vars.get(&quot;TOPUPVALUE&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID

log.info(&quot;shaina1&quot;);
//get the pre balance and post balance
int ussdpreBalanceM1Value =0;
int ussdpreBalanceM2Value =0;
int ussdpostBalanceM1Value =0;
int ussdpostBalanceM2Value =0;
ussdpreBalanceM1Value = Integer.parseInt(prebal1);
ussdpreBalanceM2Value = Integer.parseInt(prebal2);
ussdpostBalanceM1Value = Integer.parseInt(postbal1);
ussdpostBalanceM2Value = Integer.parseInt(postbal2);
log.info(&quot;shaina2&quot;);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);
ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpreBalanceM2Value = ussdpreBalanceM2Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;
ussdpostBalanceM2Value = ussdpostBalanceM2Value/100;

//dumping the data
DumpData+=&quot;For Sender Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;
DumpData+=&quot;|For Reciever Prebalance= &quot;+ussdpreBalanceM2Value+&quot;#postBalance = &quot;+ussdpostBalanceM2Value;
//check for the deduct balance
int senderDeduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
int balanceReciever = ussdpostBalanceM2Value-ussdpreBalanceM2Value;
DumpData+=&quot;#balance deducted for Sender = &quot;+senderDeduct;
DumpData+=&quot;#amount Recieved by Reciever = &quot;+balanceReciever;
System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(&quot;shaina3&quot;);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(senderDeduct==transferAmount&amp;&amp;balanceReciever==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
         
		if(senderDeduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
          if(balanceReciever!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
		if(balanceReciever!=senderDeduct)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(senderDeduct==transferAmount&amp;&amp;balanceReciever==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(senderDeduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
		 if(balanceReciever!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
		if(balanceReciever!=senderDeduct)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);


String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

f = new FileOutputStream(resultcsvpath,  true);
log.info(&quot;hwre1&quot;);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS2+&quot;|CsvStatus:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="C2S Gift recharge USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_GIFTRECHARGE.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos; 
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C2S Gift Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;GFTRCREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;GIFTER_MSISDN&gt;${GIFTER_MSISDN}&lt;/GIFTER_MSISDN&gt;&lt;GIFTER_NAME&gt;${GIFTER_NAME}&lt;/GIFTER_NAME&gt;&lt;GIFTER_LANGUAGE&gt;${GIFTER_LANGUAGE}&lt;/GIFTER_LANGUAGE&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"> ${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS1+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Customer RC Fix Line USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_FIXLINE_RECHARGE.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN}&apos; 
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fixe line Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> &lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;PSTNRCTRFREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;NOTIFICATION_MSISDN&gt;${NOTIFICATION_MSISDN}&lt;/NOTIFICATION_MSISDN&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">  ${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS2+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Customer RC Fix Line EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_FIXLINE_RECHARGE.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos; OR b.login_id=&apos;${LOGINID}&apos; OR b.external_code=&apos;${EXTCODE}&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fixe line Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;EXPSTNRCREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;NOTIFICATION_MSISDN&gt;${NOTIFICATION_MSISDN}&lt;/NOTIFICATION_MSISDN&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos; OR b.login_id=&apos;${LOGINID}&apos; OR b.external_code=&apos;${EXTCODE}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS2+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Customer RC Internet USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">6</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_INTERNET_RECHARGE.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Internet Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;INTRRCTRFREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;NOTIFICATION_MSISDN&gt;${NOTIFICATION_MSISDN}&lt;/NOTIFICATION_MSISDN&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"> ${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS2+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Voucher Consumption EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">7</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_VOUCHER_CONSUMPTION.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Voucher Consumption request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;VOMSCONSREQ&lt;/TYPE&gt;&lt;DATE&gt;&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;VOUCHERCODE&gt;${VOUCHERCODE}&lt;/VOUCHERCODE&gt;&lt;SERIAL_NO&gt;${SERIAL_NO}&lt;/SERIAL_NO&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;CELLID&gt;${CELLID}&lt;/CELLID&gt;&lt;SWITCHID&gt;${SWITCHID}&lt;/SWITCHID&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path P2P Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS2+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Set Pin USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">8</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_SET_PIN.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Pin request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;TYPE&gt;RCPNREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;NEWPIN&gt;${NEWPIN}&lt;/NEWPIN&gt;&lt;CONFIRMPIN&gt;${CONFIRMPIN}&lt;/CONFIRMPIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"> ${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11 |egrep ${NEWPIN} &amp; &apos;4320&apos; &amp; ${MSISDN1} |tail -n 1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String npin = vars.get(&quot;NEWPIN&quot;);
String opin = vars.get(&quot;OLDPIN&quot;);
String cpin = vars.get(&quot;CONFIRMPIN&quot;);

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
log.info(opin+&quot;&quot;+cpin+&quot;&quot;+npin);
		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		if(!npin.equals(cpin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);




String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

String output = &quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response;

if(TxnStatus.equals(&quot;200&quot;))
	{
	print(output+&quot;|CsvSMS1:&quot;+_CsvSMS1+&quot;|CsvStatus:&quot;+_CsvStatus);
	}
	else{
		print(output+&quot;|CsvStatus:&quot;+_CsvStatus);
	}

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="EVD EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">17</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_EVD.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EVD request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;EXEVDREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		//if amount is deducted
		
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+_CsvSMS1+&quot;|SMS2:&quot;+_CsvSMS2+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P registration Plaintext" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">plain/text</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\SMSC_P2P_REGISTRATION.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="P2P registration request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">MSISDN=${MSISDN}&amp;MESSAGE=PREG+PRE&amp;REQUEST_GATEWAY_CODE=SMSC&amp;REQUEST_GATEWAY_TYPE=SMSC&amp;SERVICE_PORT=190&amp;SOURCE_TYPE=SMSC&amp;LOGIN=pretups&amp;PASSWORD=pretups123</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
          <stringProp name="HTTPSampler.port">${Web port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">http://${Host name}:${Web port}/pretups/P2PReceiver?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response =prev.getResponseDataAsString();

System.out.println(prev.getResponseDataAsString());

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

String txnid=response.toString();

log.info(prev.getResponseDataAsString());

 
txnid = txnid.substring(22,41);


log.info(&quot;TXNID&quot;+txnid);

vars.put(&quot;txnid&quot;,txnid);


var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1903388945">TXNSTATUS=200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">true</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;

String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

//System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{

	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

	
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="C2S rechargewithLOWbase USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_C2S_TRANSFER_LOWBASE_FNF_ZB.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PreferenceforLOWBASE" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PreferenceforLOWBASEM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select default_value from SYSTEM_PREFERENCES where preference_code=&apos;LOW_BASED_ALLOWED&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">PreferenceforLOWBASEM1value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C2S Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;RCTRFREQ&lt;/TYPE&gt;&lt;CELLID&gt;${CELLID}&lt;/CELLID&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -20 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command_lowBase" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -8 ${Tomcat path}/logs/jmeterLogs.txt | less +11 |grep &apos;code=2600004&apos; |tail -1  </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsmsLOW</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
log.info(&quot;here1&quot;);

String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID
String lowbase=vars.get(&quot;PreferenceforLOWBASEM1value_1&quot;);
log.info(&quot;here2&quot;);

//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
log.info(&quot;here3&quot;);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;
log.info(&quot;here3&quot;);
//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
		//if amount is deducted
	
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String finalsms = &quot;&quot;;
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
finalsms=_CsvSMS1+_CsvSMS2;

if(TxnStatus.equals(&quot;200&quot;)){

if(lowbase.equals(&quot;true&quot;)){
String _csvSMSLow = vars.get(&quot;sentsmsLOW_1_g0&quot;);	
if(!_csvSMSLow.equals(&quot;&quot;)){
finalsms=finalsms+&quot;|_csvSMSLow&quot;+_csvSMSLow;
}
}
}
String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+finalsms+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="C2S recharge_withLowBase EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_C2S_TRANSFER_LOWBASE_FNF_ZB.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PreferenceforLOWBASE" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PreferenceforLOWBASEM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select default_value from SYSTEM_PREFERENCES where preference_code=&apos;LOW_BASED_ALLOWED&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">PreferenceforLOWBASEM1value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos; OR b.login_id=&apos;${LOGINID}&apos; OR b.external_code=&apos;${EXTCODE}&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C2S Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command1.0//EN&quot;&quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;EXRCTRFREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&#xd;
&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos; OR b.login_id=&apos;${LOGINID}&apos; OR b.external_code=&apos;${EXTCODE}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -20 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command_lowBase" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -8 ${Tomcat path}/logs/jmeterLogs.txt | less +11  |grep &apos;code=2600004&apos; |tail -1  </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsmsLOW</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID
String lowbase=vars.get(&quot;PreferenceforLOWBASEM1value_1&quot;);



//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
		//if amount is deducted
	
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String finalsms = &quot;&quot;;
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
finalsms=_CsvSMS1+_CsvSMS2;

if(TxnStatus.equals(&quot;200&quot;)){


if(lowbase.equals(&quot;true&quot;)){
String _csvSMSLow = vars.get(&quot;sentsmsLOW_1_g0&quot;);	
if(!_csvSMSLow.equals(&quot;&quot;)){
finalsms=finalsms+&quot;|_csvSMSLow&quot;+_csvSMSLow;
}
}
}
String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+finalsms+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Low Base Transaction Enquiry" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">14</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\LowBaseTransactionEnquiry.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Low Base Recharge Enquiry" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;agentMobileNo&quot;: &quot;${agentMobileNo}&quot;,&quot;subscriberMobileNo&quot;: &quot;${subscriberMobileNo}&quot;,&quot;rechargeDate&quot;: &quot;${rechargeDate}&quot;},&quot;type&quot;: &quot;${type}&quot;,&quot;externalCode&quot;: &quot;${externalCode}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;



print(PrintData);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Low Base Subscriber Eligibility Enquiry" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">13</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\LowBaseSubscriberEligibilityEnquiry.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Low Base Recharge Enquiry" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;subscriberMobileNo&quot;: &quot;${subscriberMobileNo}&quot;,&quot;rechargeAmount&quot;: &quot;${rechargeAmount}&quot;},&quot;type&quot;: &quot;${type}&quot;,&quot;externalCode&quot;: &quot;${externalCode}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;



print(PrintData);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="C2S recharge_withZeroBaseFnF EXTGW" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\EXTGW_C2S_TRANSFER_ZBFNF.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PreferenceforFNFZB" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PreferenceforFNFZBM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select default_value from SYSTEM_PREFERENCES where preference_code=&apos;FNF_ZB_ALLOWED&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">PreferenceforFNFZBM1value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos; OR b.login_id=&apos;${LOGINID}&apos; OR b.external_code=&apos;${EXTCODE}&apos;)
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C2S Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command1.0//EN&quot;&quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;EXRCTRFREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&#xd;
&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and (b.msisdn=&apos;${MSISDN}&apos; OR b.login_id=&apos;${LOGINID}&apos; OR b.external_code=&apos;${EXTCODE}&apos;)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -10 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command_ZB" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -7 ${Tomcat path}/logs/jmeterLogs.txt | less +11  |grep &apos;code=2600001&apos; |tail -1  </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsmsZB</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command_FNF" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -10 ${Tomcat path}/logs/jmeterLogs.txt | less +11  |grep &apos;code=2600002&apos; |tail -1  </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsmsFNF</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID

String FNFZB=vars.get(&quot;PreferenceforFNFZBM1value_1&quot;);


//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
		//if amount is deducted
	
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String finalsms = &quot;&quot;;
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
finalsms=_CsvSMS1+_CsvSMS2;

if(TxnStatus.equals(&quot;200&quot;)){

if(FNFZB.equals(&quot;true&quot;)){
String _csvSMSZB = vars.get(&quot;sentsmsZB_1_g0&quot;);
String _csvSMSFNF1 = vars.get(&quot;sentsmsFNF_1_g0&quot;);
String _csvSMSFNF2 = vars.get(&quot;sentsmsFNF_1_g1&quot;);
if(!_csvSMSZB.equals(&quot;&quot;)){
finalsms=finalsms+&quot;|_csvSMSZB&quot;+_csvSMSZB;
}
if(!_csvSMSFNF1.equals(&quot;&quot;)){
finalsms=finalsms+&quot;|_csvSMSFNF1&quot;+_csvSMSFNF1;
}
if(!_csvSMSFNF2.equals(&quot;&quot;)){
finalsms=finalsms+&quot;|_csvSMSFNF2&quot;+_csvSMSFNF2;
}	
}

}
String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+finalsms+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="C2S rechargewithZB and FNF USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_C2S_TRANSFER_ZBFNF.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PreferenceforFNFZB" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PreferenceforFNFZBM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select default_value from SYSTEM_PREFERENCES where preference_code=&apos;FNF_ZB_ALLOWED&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">PreferenceforFNFZBM1value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="C2S Recharge request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;RCTRFREQ&lt;/TYPE&gt;&lt;CELLID&gt;${CELLID}&lt;/CELLID&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.balance from user_balances a ,users b where a.user_id=b.user_id and b.msisdn=&apos;${MSISDN1}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostBalanceM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/messageSentLog.log |grep ${TXNID}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command_ZB" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -7 ${Tomcat path}/logs/jmeterLogs.txt | less +11  |grep &apos;code=2600001&apos; |tail -1  </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsmsZB</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command_FNF" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -10 ${Tomcat path}/logs/jmeterLogs.txt | less +11 |grep &apos;code=2600002&apos; |tail -2</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsmsFNF</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
log.info(&quot;here1&quot;);

String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID
String FNFZB=vars.get(&quot;PreferenceforFNFZBM1value_1&quot;);
log.info(&quot;here2&quot;);

//get the pre balance and post balance
int ussdpreBalanceM1Value = Integer.parseInt(bal1);
log.info(&quot;here3&quot;);
int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
int transferAmount = Integer.parseInt(qty);

ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;
log.info(&quot;here3&quot;);
//dumping the data
DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}

		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
		//if amount is deducted
	
		if(deduct==transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		//if amount is not deducted
		if(deduct!=transferAmount)
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String finalsms = &quot;SMS&quot;;
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
finalsms=_CsvSMS1+_CsvSMS2;

if(TxnStatus.equals(&quot;200&quot;)){

 if(FNFZB.equals(&quot;true&quot;)){
String _csvSMSZB = vars.get(&quot;sentsmsZB_1_g0&quot;);
String _csvSMSFNF1 = vars.get(&quot;sentsmsFNF_1_g0&quot;);
String _csvSMSFNF2 = vars.get(&quot;sentsmsFNF_1_g1&quot;);
if(!_csvSMSZB.equals(&quot;&quot;)){
finalsms=finalsms+&quot;|_csvSMSZB&quot;+_csvSMSZB;
}
if(!_csvSMSFNF1.equals(&quot;&quot;)){
finalsms=finalsms+&quot;|_csvSMSFNF1&quot;+_csvSMSFNF1;
}
if(!_csvSMSFNF2.equals(&quot;&quot;)){
finalsms=finalsms+&quot;|_csvSMSFNF2&quot;+_csvSMSFNF2;
}	
}

}


String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData+&quot;|SMS1:&quot;+finalsms+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Change Pin USSD" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">9</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_P2P_CHANGE_PIN.CSV</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Pin request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCPNREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN}&lt;/MSISDN1&gt;&lt;PIN&gt;${OLDPIN}&lt;/PIN&gt;&lt;NEWPIN&gt;${NEWPIN}&lt;/NEWPIN&gt;&lt;CONFIRMPIN&gt;${CONFIRMPIN}&lt;/CONFIRMPIN&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${P2P change pin request USSD}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String npin = vars.get(&quot;NEWPIN&quot;);
String opin = vars.get(&quot;OLDPIN&quot;);
String cpin = vars.get(&quot;CONFIRMPIN&quot;);

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
log.info(opin+&quot;&quot;+cpin+&quot;&quot;+npin);
		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		if(npin.equals(cpin)&amp;&amp;!npin.equals(opin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}

		if(!npin.equals(cpin))
		{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);




String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

String output = &quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response;

if(TxnStatus.equals(&quot;200&quot;))
	{
	print(output+&quot;|CsvSMS1:&quot;+_CsvSMS1+&quot;|CsvStatus:&quot;+_CsvStatus);
	}
	else{
		print(output+&quot;|CsvStatus:&quot;+_CsvStatus);
	}

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P Suspend  USSD" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_SUSPEND_P2P.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreStatus" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">jdbc:oracle:thin:@//172.16.11.121:1522/test12c</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">pretups670_bangla</stringProp>
            <stringProp name="password">pretups670_bangla</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdppreStatusM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN1}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreStatusM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserSUSrequest" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;SUSREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;CELLID&gt;&lt;/CELLID&gt;&lt;SWITCHID&gt;&lt;/SWITCHID&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${P2P Suspend Request USSD}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostStatus" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">jdbc:oracle:thin:@//172.16.11.121:1522/test12c</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">pretups670_bangla</stringProp>
            <stringProp name="password">pretups670_bangla</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostStatusM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN1}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostStatusM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String PostStatus = vars.get(&quot;ussdpostStatusM1Value_1&quot;);
String PreStatus = vars.get(&quot;ussdpreStatusM1Value_1&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
if((PostStatus.equals(&quot;S&quot;)||PostStatus.equals(&quot;Y&quot;))&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
if((PostStatus.equals(&quot;S&quot;)||PostStatus.equals(&quot;Y&quot;))&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);




String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

String output = &quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData;

if(TxnStatus.equals(&quot;200&quot;))
	{
	print(output+&quot;|CsvSMS1:&quot;+_CsvSMS1+&quot;|CsvStatus:&quot;+_CsvStatus);
	}
	else{
		print(output+&quot;|CsvStatus:&quot;+_CsvStatus);
	}

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="P2P resume USSD" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_RESUME_P2P.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreStatus" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">jdbc:oracle:thin:@//172.16.11.121:1522/test12c</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">pretups670_bangla</stringProp>
            <stringProp name="password">pretups670_bangla</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdppreStatusM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN1}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpreStatusM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UserRES request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;RESREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;CELLID&gt;&lt;/CELLID&gt;&lt;SWITCHID&gt;&lt;/SWITCHID&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${P2P Resume Request USSD}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostStatus" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">jdbc:oracle:thin:@//172.16.11.121:1522/test12c</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">pretups670_bangla</stringProp>
            <stringProp name="password">pretups670_bangla</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostStatusM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select a.status from p2p_subscribers a  where a.msisdn=&apos;${MSISDN1}&apos; </stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">ussdpostStatusM1Value</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String PostStatus = vars.get(&quot;ussdpostStatusM1Value_1&quot;);
String PreStatus = vars.get(&quot;ussdpreStatusM1Value_1&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
		if(PostStatus.equals(&quot;Y&quot;)&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{
if(PostStatus.equals(&quot;S&quot;)&amp;&amp;!PostStatus.equals(PreStatus)){
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
}
		else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);




String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

String output = &quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData;

if(TxnStatus.equals(&quot;200&quot;))
	{
	print(output+&quot;|CsvSMS1:&quot;+_CsvSMS1+&quot;|CsvStatus:&quot;+_CsvStatus);
	}
	else{
		print(output+&quot;|CsvStatus:&quot;+_CsvStatus);
	}

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="USSD_P2P_REGISTER_USER" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_P2P_REGISTERUSER.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
// _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
//String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register user request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">DATA=&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;REGREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN}&lt;/MSISDN1&gt;&lt;SUB_TYPE&gt;${SUB_TYPE}&lt;/SUB_TYPE&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD P2P register user}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="List Buddy USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_LIST_BUDDY.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Buddy request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;LSTBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">172.16.11.91</stringProp>
          <stringProp name="HTTPSampler.port">9090</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=1357&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Add Buddy USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">6</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_ADD_BUDDY.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
//String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
//String code = vars.get(&quot;EXTTXNNUMBER&quot;);
//System.out.println(&quot;sd&quot;+newExtcode);
//vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;


vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Buddy request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;ADDBUDDYREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;BUDDYNAME&gt;${BUDDYNAME}&lt;/BUDDYNAME&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;PRFAMT&gt;${PRFAMT}&lt;/PRFAMT&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;/COMMAND&gt;&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">172.16.11.91</stringProp>
          <stringProp name="HTTPSampler.port">9090</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">pretups/P2PReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=1357&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="getBuddy" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">jdbc:oracle:thin:@//172.16.11.121:1522/test12c</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">PRETUPS670_BANGLA</stringProp>
            <stringProp name="password">pretups670_bangla</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="getBuddyInDb" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select status from p2p_buddies where buddy_msisdn=&apos;${MSISDN2}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">buddyMsisdnDb</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

String buddyMsisdnDb= vars.get(&quot;buddyMsisdnDb_1&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
System.out.println(&quot;buddyMsisdnDb = &quot;+buddyMsisdnDb);

//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;) &amp;&amp; buddyMsisdnDb!=null)
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Credit Transfer USSD" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_CREDIT_TRANSFER.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name} </stringProp>
            <stringProp name="password">$(Database Password)</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select DAILY_TRANSFER_COUNT,DAILY_TRANSFER_AMOUNT from P2P_SUBSCRIBERS_COUNTERS where MSISDN=&apos;${MSISDN1}&apos; and SERVICE_TYPE=&apos;PRC&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">preDailyTransferCount,preDailyTransferAmount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Credit Transfer USSD Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCTRFREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD P2P Credit Transfer Request}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select DAILY_TRANSFER_COUNT,DAILY_TRANSFER_AMOUNT from P2P_SUBSCRIBERS_COUNTERS where MSISDN=&apos;${MSISDN1}&apos; and SERVICE_TYPE=&apos;PRC&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">postDailyTransferCount,postDailyTransferAmount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value= JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;TestcaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

log.info(&quot;TxnStatus&quot;+TxnStatus);
String preDailyTransferCount=vars.get(&quot;preDailyTransferCount_1&quot;);
String preDailyTransferAmount=vars.get(&quot;preDailyTransferAmount_1&quot;);
String postDailyTransferCount=vars.get(&quot;postDailyTransferCount_1&quot;);
String postDailyTransferCount = vars.get(&quot;postDailyTransferAmount_1&quot;);
String TXNID= vars.get(&quot;TXNID&quot;);


//get the pre balance and post balance
int preDailyTransferCountV = Integer.parseInt(preDailyTransferCount);
int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);
// get the transaction amount
int preDailyTransferAmountV = Integer.parseInt(preDailyTransferAmount);
int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);

int dailyTransferCountIncrement = postDailyTransferCountV-preDailyTransferAmountV;

//==== checker
 if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;)){
 	if(dailyTransferCountIncrement &gt; 0)
	{
		System.out.println(&quot;dailyTransferCountIncremented&quot;);
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);

	}else 
	{
		// if the test type is positive

		if(TxnStatus.equals(&quot;200&quot;))
		{
			vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	
		}
		else{
			vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
}
 else if(testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;)){
 	vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
 }
 
//======================= END

// RESULT CSV WRITER
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);

//String xx = vars.get(&quot;_cc&quot;);
//System.out.println(&quot;Dup = &quot;+value);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestcaseId = vars.get(&quot;TestcaseId&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Module = vars.get(&quot;Module&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);

log.info(&quot;TestcaseId: &quot;+_TestcaseId+&quot; | Description: &quot;+_Description+&quot; | Module: &quot;+_Module+&quot; | TestType: &quot;+testType+&quot; | Status: &quot;+_CsvStatus);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;TestcaseId: &quot;+_TestcaseId+&quot; | Description: &quot;+_Description+&quot; | Module: &quot;+_Module+&quot; | TestType: &quot;+testType+&quot; | Status: &quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="USSD Credit Recharge" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">4</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_CREDIT_Recharge.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpreBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name} </stringProp>
            <stringProp name="password">pretups660_dev</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpreBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select DAILY_TRANSFER_COUNT,DAILY_TRANSFER_AMOUNT from P2P_SUBSCRIBERS_COUNTERS where MSISDN=&apos;${MSISDN1}&apos; and SERVICE_TYPE=&apos;PRC&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">preDailyTransferCount,preDailyTransferAmount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="CommissionCalculation" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">int  COMMISSION= vars.get(&quot;commission_1&quot;);
int  AMOUNT = vars.get(&quot;AMOUNT&quot;);
int  preBalance = vars.get(&quot;preBalance&quot;);

int calcBalance = &quot;preBalance&quot;- &quot;AMOUNT&quot;+ &quot;COMMISSION&quot;;
vars.put(&quot;calcBalance&quot;,calcBalance);

//System.out.println(&quot;commission_1&quot;);
//f = new FileOutputStream(&quot;results.csv&quot;, false);
//p = new PrintStream(f); 
//this.interpreter.setOut(p); 
//print(&quot;TestCaseID: &quot; + testcaseid + &quot; : Txn Status: &quot; + TXNSTATUS + &quot; : Sent SMS: &quot; + sentsms);
//System.out.println(value);
//f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Credit Recharge USSD Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CCRCREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;SELECTOR&gt;${SELECTOR}&lt;/SELECTOR&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD P2P credit recharge request}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdpostBalance" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="username">${Database User name} </stringProp>
            <stringProp name="password">pretups660_dev</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdpostBalanceM1" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select DAILY_TRANSFER_COUNT,DAILY_TRANSFER_AMOUNT from P2P_SUBSCRIBERS_COUNTERS where MSISDN=&apos;${MSISDN1}&apos; and SERVICE_TYPE=&apos;PRC&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">postDailyTransferCount,postDailyTransferAmount</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Calculation" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">int  COMMISSION= vars.get(&quot;commission_1&quot;);
int  TOPUPVALUE = vars.get(&quot;TOPUPVALUE&quot;);
int  preBalance = vars.get(&quot;preBalanceM1Value&quot;);

int calcBalance1 = &quot;preBalance&quot;+ &quot;TOPUPVALUE&quot;+ &quot;COMMISSION&quot;;
vars.put(&quot;calcBalance1&quot;,calcBalance1);

//System.out.println(&quot;commission_1&quot;);
//f = new FileOutputStream(&quot;results.csv&quot;, false);
//p = new PrintStream(f); 
//this.interpreter.setOut(p); 
//print(&quot;TestCaseID: &quot; + testcaseid + &quot; : Txn Status: &quot; + TXNSTATUS + &quot; : Sent SMS: &quot; + sentsms);
//System.out.println(value);
//f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value= JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;TestcaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

log.info(&quot;TxnStatus&quot;+TxnStatus);
String preDailyTransferCount=vars.get(&quot;preDailyTransferCount_1&quot;);
String preDailyTransferAmount=vars.get(&quot;preDailyTransferAmount_1&quot;);
String postDailyTransferCount=vars.get(&quot;postDailyTransferCount_1&quot;);
String postDailyTransferCount = vars.get(&quot;postDailyTransferAmount_1&quot;);
String TXNID= vars.get(&quot;TXNID&quot;);


//get the pre balance and post balance
int preDailyTransferCountV = Integer.parseInt(preDailyTransferCount);
int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);
// get the transaction amount
int preDailyTransferAmountV = Integer.parseInt(preDailyTransferAmount);
int postDailyTransferCountV = Integer.parseInt(postDailyTransferCount);

int dailyTransferCountIncrement = postDailyTransferCountV-preDailyTransferAmountV;

//==== checker
 if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;)){
 	if(dailyTransferCountIncrement &gt; 0)
	{
		System.out.println(&quot;dailyTransferCountIncremented&quot;);
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);

	}else 
	{
		// if the test type is positive

		if(TxnStatus.equals(&quot;200&quot;))
		{
			vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	
		}
		else{
			vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	}
}
 else if(testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;)){
 	vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
 }
 
//======================= END

// RESULT CSV WRITER
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);

//String xx = vars.get(&quot;_cc&quot;);
//System.out.println(&quot;Dup = &quot;+value);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestcaseId = vars.get(&quot;TestcaseId&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Module = vars.get(&quot;Module&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);

log.info(&quot;TestcaseId: &quot;+_TestcaseId+&quot; | Description: &quot;+_Description+&quot; | Module: &quot;+_Module+&quot; | TestType: &quot;+testType+&quot; | Status: &quot;+_CsvStatus);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;TestcaseId: &quot;+_TestcaseId+&quot; | Description: &quot;+_Description+&quot; | Module: &quot;+_Module+&quot; | TestType: &quot;+testType+&quot; | Status: &quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GMB BAR USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_GMBBAR.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GMB BAR request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;GMBBAR&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);

//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);



String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

String output = &quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData;


		print(output+&quot;|CsvStatus:&quot;+_CsvStatus);
	

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GMB Request USSD" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">11</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\USSD_GMB.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GMB request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;! DOCTYPE COMMAND PUBLIC &quot;-//Ocam//DTD XML Command 1.0//EN&quot; &quot;xml/command.dtd&quot;&gt;&lt;COMMAND&gt;&lt;TYPE&gt;CGMBALREQ&lt;/TYPE&gt;&lt;MSISDN1&gt;${MSISDN1}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;AMOUNT&gt;${AMOUNT}&lt;/AMOUNT&gt;&lt;LANGUAGE1&gt;${LANGUAGE1}&lt;/LANGUAGE1&gt;&lt;LANGUAGE2&gt;${LANGUAGE2}&lt;/LANGUAGE2&gt;&lt;/COMMAND&gt;&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${USSD HTTP Request path C2S Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNID</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=2222022 | tail -1</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -5 ${Tomcat path}/logs/messageSentLog.log | egrep code=2222021 | tail -1</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">MSISDN2msg</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);

log.info(TxnStatus+&quot;&quot;+opin+&quot;&quot;+cpin);

//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{
vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}




//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);

//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);


//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String  _CsvSMS1 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  _CsvSMS1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);


String _Module = vars.get(&quot;Module&quot;);

//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);

//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);


f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

String output = &quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Data:&quot;+_DumpData;

if(TxnStatus.equals(&quot;200&quot;))
	{
	print(output+&quot;|CsvSMS1:&quot;+_CsvSMS1+&quot;|CsvStatus:&quot;+_CsvStatus);
	}
	else{
		print(output+&quot;|CsvStatus:&quot;+_CsvStatus);
	}

f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">172.16.11.91</stringProp>
          <intProp name="port">22</intProp>
          <stringProp name="username">pretups650dev</stringProp>
          <stringProp name="password">com@1234</stringProp>
          <stringProp name="command">&gt;messageSentLog_jmeter.log</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">MSISDN1msg</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms2 = vars.get(&quot;MSISDN2msg_1_g0&quot;);
String  sentsms1 = vars.get(&quot;MSISDN1msg_1_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="User Movement XMLGW" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">7</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\XMLGW_USER_MOVEMENT.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User Movement Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERMOVEMENTREQ&lt;/TYPE&gt;&lt;DATE&gt;${DATE}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EMPCODE}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;EXTCODE&gt;${EXTCODE}&lt;/EXTCODE&gt;&lt;EXTREFNUM&gt;${EXTREFNUM}&lt;/EXTREFNUM&gt;&lt;NETWORKCODE&gt;${NETWORKCODE}&lt;/NETWORKCODE&gt;&lt;FROM_USER_MSISDN&gt;${FROM_USER_MSISDN}&lt;/FROM_USER_MSISDN&gt;&lt;FROM_USER_LOGINID&gt;${FROM_USER_LOGINID}&lt;/FROM_USER_LOGINID&gt;&lt;FROM_USER_EXTCODE&gt;${FROM_USER_EXTCODE}&lt;/FROM_USER_EXTCODE&gt;&lt;TO_PARENT_MSISDN&gt;${TO_PARENT_MSISDN}&lt;/TO_PARENT_MSISDN&gt;&lt;TO_PARENT_LOGINID&gt;${TO_PARENT_LOGINID}&lt;/TO_PARENT_LOGINID&gt;&lt;TO_PARENT_EXTCODE&gt;${TO_PARENT_EXTCODE}&lt;/TO_PARENT_EXTCODE&gt;&lt;TO_USER_GEOGRAPHICAL_CODE&gt;${TO_USER_GEOGRAPHICAL_CODE}&lt;/TO_USER_GEOGRAPHICAL_CODE&gt;&lt;TO_USER_CATEGORY_CODE&gt;${TO_USER_CATEGORY_CODE}&lt;/TO_USER_CATEGORY_CODE&gt;&lt;/COMMAND&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${XMLGW HTTP Request path OPT Receiver}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
//String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
//String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Download GreetMsg UserList RESTFul" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">7</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\Jmeter\GreetMsg_Download.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download Greetmsg User List" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;domainCode&quot;: &quot;${domainCode}&quot;,&quot;userCat&quot;: &quot;${userCat}&quot;,&quot;zoneCode&quot;: &quot;${zoneCode}&quot;,&quot;loginUserID&quot;:&quot;${loginUserID}&quot;},&quot;type&quot;:&quot;${type}&quot; , &quot;externalCode&quot;:&quot;${externalCode}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
