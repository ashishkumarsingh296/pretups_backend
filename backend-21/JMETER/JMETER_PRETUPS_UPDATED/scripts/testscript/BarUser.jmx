<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ResultCsvPath" elementType="Argument">
            <stringProp name="Argument.name">ResultCsvPath</stringProp>
            <stringProp name="Argument.value">C:\Users\richa.chhabra\Desktop\Jmeter_test_results\BarUser_result${__time(ddMMyyyyHHmmss,)}.csv</stringProp>
            <stringProp name="Argument.desc">Result CSV File</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Host name" elementType="Argument">
            <stringProp name="Argument.name">Host name</stringProp>
            <stringProp name="Argument.value">172.30.24.113</stringProp>
            <stringProp name="Argument.desc">Server host name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Web port" elementType="Argument">
            <stringProp name="Argument.name">Web port</stringProp>
            <stringProp name="Argument.value">9409</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Web port</stringProp>
          </elementProp>
          <elementProp name="Port" elementType="Argument">
            <stringProp name="Argument.name">Port</stringProp>
            <stringProp name="Argument.value">22</stringProp>
            <stringProp name="Argument.desc">Server Port</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="User name" elementType="Argument">
            <stringProp name="Argument.name">User name</stringProp>
            <stringProp name="Argument.value">pretups70</stringProp>
            <stringProp name="Argument.desc">Server user name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Password" elementType="Argument">
            <stringProp name="Argument.name">Password</stringProp>
            <stringProp name="Argument.value">pretups123</stringProp>
            <stringProp name="Argument.desc">Server password</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Tomcat path" elementType="Argument">
            <stringProp name="Argument.name">Tomcat path</stringProp>
            <stringProp name="Argument.value">/data1/pretupsapp/tomcatpersian</stringProp>
            <stringProp name="Argument.desc">Server Tomcat path</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MessageSent Logs path" elementType="Argument">
            <stringProp name="Argument.name">MessageSent Logs path</stringProp>
            <stringProp name="Argument.value">/data1/pretupsapp/tomcatpersian/logs</stringProp>
            <stringProp name="Argument.desc">Server path for MessageSent.log</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CSV path" elementType="Argument">
            <stringProp name="Argument.name">CSV path</stringProp>
            <stringProp name="Argument.value">C:\Users\richa.chhabra\Desktop\Jmeter\JMETER_PRETUPS_UPDATED\scripts\testdata</stringProp>
            <stringProp name="Argument.desc">CSV path for test data</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Database URL" elementType="Argument">
            <stringProp name="Argument.name">Database URL</stringProp>
            <stringProp name="Argument.value">jdbc:oracle:thin:@//172.30.24.113:1521/test12c</stringProp>
            <stringProp name="Argument.desc">for Oracle &quot;jdbc:oracle:thin:@//&lt;ip&gt;:&lt;port&gt;/&lt;SID&gt;&quot; for postgres &quot;jdbc:postgresql://[&lt;ip&gt;]:&lt;port&gt;/&lt;SID&gt;&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Database User name" elementType="Argument">
            <stringProp name="Argument.name">Database User name</stringProp>
            <stringProp name="Argument.value">pretups_trnk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Database User name</stringProp>
          </elementProp>
          <elementProp name="Database Password" elementType="Argument">
            <stringProp name="Argument.name">Database Password</stringProp>
            <stringProp name="Argument.value">pretups_trnk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Database Password</stringProp>
          </elementProp>
          <elementProp name="USSD HTTP Request path C2S Receiver" elementType="Argument">
            <stringProp name="Argument.name">USSD HTTP Request path C2S Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/C2SReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD HTTP Request path C2S Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXTGW HTTP Request path C2S Receiver" elementType="Argument">
            <stringProp name="Argument.name">EXTGW HTTP Request path C2S Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/C2SReceiver?REQUEST_GATEWAY_CODE=EXTGW&amp;REQUEST_GATEWAY_TYPE=EXTGW&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">EXTGW HTTP Request path C2S Receiver</stringProp>
          </elementProp>
          <elementProp name="EXTGW HTTP Request path OPT Receiver" elementType="Argument">
            <stringProp name="Argument.name">EXTGW HTTP Request path OPT Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/OPTReceiver?REQUEST_GATEWAY_CODE=EXTGW&amp;REQUEST_GATEWAY_TYPE=EXTGW&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">EXTGW HTTP Request path OPT Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USSD HTTP Request path C2S Subscriber Receiver" elementType="Argument">
            <stringProp name="Argument.name">USSD HTTP Request path C2S Subscriber Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/C2SSubscriberReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD HTTP Request path C2S Subscriber Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USSD Plain text C2S Receiver" elementType="Argument">
            <stringProp name="Argument.name">USSD Plain text C2S Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/C2SReceiver?REQUEST_GATEWAY_CODE=USSD&amp;REQUEST_GATEWAY_TYPE=USSD&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=USSD&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">USSD Plain text C2S Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXTGW HTTP Request path P2P Receiver" elementType="Argument">
            <stringProp name="Argument.name">EXTGW HTTP Request path P2P Receiver</stringProp>
            <stringProp name="Argument.value">/pretups/P2PReceiver?REQUEST_GATEWAY_CODE=EXTGW&amp;REQUEST_GATEWAY_TYPE=EXTGW&amp;LOGIN=pretups&amp;PASSWORD=pretups123&amp;SOURCE_TYPE=XML&amp;SERVICE_PORT=190</stringProp>
            <stringProp name="Argument.desc">EXTGW HTTP Request path P2P Receiver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MSISDN Prefix" elementType="Argument">
            <stringProp name="Argument.name">MSISDN Prefix</stringProp>
            <stringProp name="Argument.value">72</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SUBSCRIBER MSISDN for C2S" elementType="Argument">
            <stringProp name="Argument.name">SUBSCRIBER MSISDN for C2S</stringProp>
            <stringProp name="Argument.value">7200000010</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Quantity for C2C" elementType="Argument">
            <stringProp name="Argument.name">Quantity for C2C</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXTNWCODE" elementType="Argument">
            <stringProp name="Argument.name">EXTNWCODE</stringProp>
            <stringProp name="Argument.value">NG</stringProp>
            <stringProp name="Argument.desc">External Network code for All transactions</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Quantity for O2C" elementType="Argument">
            <stringProp name="Argument.name">Quantity for O2C</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Quantity for C2S" elementType="Argument">
            <stringProp name="Argument.name">Quantity for C2S</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Quantity for O2C return" elementType="Argument">
            <stringProp name="Argument.name">Quantity for O2C return</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Quantity for O2C withdraw" elementType="Argument">
            <stringProp name="Argument.name">Quantity for O2C withdraw</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="module" elementType="Argument">
            <stringProp name="Argument.name">module</stringProp>
            <stringProp name="Argument.value">C2S</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userType" elementType="Argument">
            <stringProp name="Argument.name">userType</stringProp>
            <stringProp name="Argument.value">RECEIVER</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="barredType" elementType="Argument">
            <stringProp name="Argument.name">barredType</stringProp>
            <stringProp name="Argument.value">SL021</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="barredReason" elementType="Argument">
            <stringProp name="Argument.name">barredReason</stringProp>
            <stringProp name="Argument.value">Testing</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loginId" elementType="Argument">
            <stringProp name="Argument.name">loginId</stringProp>
            <stringProp name="Argument.value">gauravadm</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">1986</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="negative" elementType="Argument">
            <stringProp name="Argument.name">negative</stringProp>
            <stringProp name="Argument.value">C:\Projects\PreTups\Work\QA\JmeterScripts\JmeterRun1\csv\resultsBaruserNegative.csv	</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Database Driver" elementType="Argument">
            <stringProp name="Argument.name">Database Driver</stringProp>
            <stringProp name="Argument.value">oracle.jdbc.driver.OracleDriver</stringProp>
            <stringProp name="Argument.desc">for Oracle &quot;oracle.jdbc.driver.OracleDriver &quot;  for postgres &quot;org.postgresql.Driver&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DOMAINCODE" elementType="Argument">
            <stringProp name="Argument.name">DOMAINCODE</stringProp>
            <stringProp name="Argument.value">DIST</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Password1" elementType="Argument">
            <stringProp name="Argument.name">Password1</stringProp>
            <stringProp name="Argument.value">1357</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PrefixLEN" elementType="Argument">
            <stringProp name="Argument.name">PrefixLEN</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DFORMAT" elementType="Argument">
            <stringProp name="Argument.name">DFORMAT</stringProp>
            <stringProp name="Argument.value">yyyy/MM/dd</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MSISDNLEN" elementType="Argument">
            <stringProp name="Argument.name">MSISDNLEN</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ResultXlsPath" elementType="Argument">
            <stringProp name="Argument.name">ResultXlsPath</stringProp>
            <stringProp name="Argument.value">C:\Users\richa.chhabra\Desktop\Jmeter_test_results\BarUser_result${__time(ddMMyyyyHHmmss,)}.xlsx</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SVNRepositoryID" elementType="Argument">
            <stringProp name="Argument.name">SVNRepositoryID</stringProp>
            <stringProp name="Argument.value">http://172.16.10.134/CRM/MFS/PreTUPS5x_NG/Base Versions/PreTUPS_trunk/Code/Work/JMETER/JMETER_PRETUPS_UPDATED/scripts/testscript</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LeadName" elementType="Argument">
            <stringProp name="Argument.name">LeadName</stringProp>
            <stringProp name="Argument.value">Shishupal Singh</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestFrameworkIP" elementType="Argument">
            <stringProp name="Argument.name">TestFrameworkIP</stringProp>
            <stringProp name="Argument.value">172.16.11.120</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestFrameworkName" elementType="Argument">
            <stringProp name="Argument.name">TestFrameworkName</stringProp>
            <stringProp name="Argument.value">JMeter</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestFrameworkSVNPath" elementType="Argument">
            <stringProp name="Argument.name">TestFrameworkSVNPath</stringProp>
            <stringProp name="Argument.value">http://172.16.10.134/CRM/MFS/PreTUPS5x_NG/Base Versions/PreTUPS_trunk/Code/Work/JMETER/JMETER_PRETUPS_UPDATED/scripts/testscript</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestExecutionDateTime" elementType="Argument">
            <stringProp name="Argument.name">TestExecutionDateTime</stringProp>
            <stringProp name="Argument.value">${__time(yyyy/MM/dd HH:mm:ss,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProductInterface" elementType="Argument">
            <stringProp name="Argument.name">ProductInterface</stringProp>
            <stringProp name="Argument.value">WEB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ExternalCalendarType" elementType="Argument">
            <stringProp name="Argument.name">ExternalCalendarType</stringProp>
            <stringProp name="Argument.value">persian</stringProp>
            <stringProp name="Argument.desc">Calendar Type in system (gregorian/persian)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${Host name}</stringProp>
        <stringProp name="HTTPSampler.port">${Web port}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Header" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1480673579000</longProp>
        <longProp name="ThreadGroup.end_time">1480673579000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">O2CTransferRule</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery">Select 1 from dual</stringProp>
          <stringProp name="dbUrl">${Database URL}</stringProp>
          <stringProp name="driver"></stringProp>
          <stringProp name="username">${Database User name}</stringProp>
          <stringProp name="password">${Database Password}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Create folder for Catalina" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <intProp name="port">22</intProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">mkdir ${Log path}/${JFolder}</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Header for Result file" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="persian Calendar" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.btsl.util.calendar.BTSLDateUtil; //importing the package and class
import java.util.*;
import java.lang.*;
import java.io.*;
import java.text.SimpleDateFormat;
import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

 try{    
     Date date = new Date(); 
      
     SimpleDateFormat df  = new SimpleDateFormat(&quot;dd/MM/yy&quot;); 
     String formattedDate = df.format(date);
     log.info(&quot;normalDate &quot;+ formattedDate);
     String systemLocalDate;
     String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     systemLocalDate = BTSLDateUtil.getSystemLocaleDate(formattedDate);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }else{
     systemLocalDate = formattedDate;
     log.info(&quot;gregorian!!!!!!!!!!!!!!&quot;);}
  	log.info(&quot;Persian Date &quot;+ systemLocalDate);

  	vars.put(&quot;systemLocalDate&quot;, systemLocalDate);
  	
  	
     ${__setProperty(systemLocalDate, ${systemLocalDate})};
     log.info(&quot;Persian Date HIIIIIIIIIIIIIIIIIII&quot;);
}
catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
log.info(&quot;...............trying to execute 0............&quot;);
try{String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);

f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

log.info(&quot;...............trying to write............&quot;);
print(&quot;SVN-Repository-ID|Lead-Name|Test-Framework-IP|Test-Framework-Name|Test-Framework-SVN-Path|Test-Execution-Date-Time|Product-Interface|Unique-TestCase-ID|Module|Test-Case-Description|Request|Response|Data|SMS1|SMS2|Test-Status|Analysis&quot;);
//print(&quot;Test case ID\tModule\tDescription\tRequest\tResponse\tData\tSMS1\tSMS2\tStatus&quot;);
/*String OldT = &quot;Lokesh&quot; ;
//vars.get(&quot;asjlkdfjasdjkl&quot;); // I need to compare the value of OldT  
                                 // with ${so_tid_1} which is an exact 
                                 // string and not a variable
if (OldT.equals(_Response)){ 
     print(&quot;Message content matched&quot;);
 }
 else {print(&quot;Message content doesn&apos;t matched&quot;);}*/


f.close(); // close the file
// ------
}
catch(Exception ex) { 
	System.out.println(&quot;Still not working&quot;);
	log.info(ex);}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Bar User Positive RESTFul" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="add user " enabled="false"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\EXTGW_USERADD.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Creator details" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}</stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Creator detail" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select EMPLOYEE_CODE, MSISDN  from users where Login_id=&apos;${loginId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">EmployeeCode, MSISDN_Chadm</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller (for postgres driver)" enabled="true">
            <stringProp name="IfController.condition">&quot;${Database Driver}&quot;==&quot;org.postgresql.Driver&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GEOCODE" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="geo_code" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
SELECT Q.grph_domain_code from (SELECT grph_domain_code
 from geographical_domains
 where grph_domain_type IN (
 SELECT grph_domain_type from categories 
 where sequence_no=&apos;1&apos;AND status=&apos;Y&apos; and domain_code =&apos;${DOMAINCODE}&apos; ) and Network_code =&apos;${EXTNWCODE}&apos; order by random() limit 1)Q</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">GEOCODE</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller(For oracle driver)" enabled="true">
            <stringProp name="IfController.condition">&quot;${Database Driver}&quot;==&quot;oracle.jdbc.driver.OracleDriver&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GEOCODE" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="geo_code" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT grph_domain_code from (SELECT grph_domain_code
  FROM geographical_domains
 WHERE grph_domain_type IN (
              SELECT grph_domain_type
                FROM categories
               WHERE sequence_no = &apos;1&apos; AND status = &apos;Y&apos;
                     AND domain_code = &apos;${DOMAINCODE}&apos;) and Network_code=&apos;${EXTNWCODE}&apos;
                    
ORDER BY DBMS_RANDOM.VALUE) where rownum=&apos;1&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">GEOCODE</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="user_categorycode" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver"> ${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}</stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user_catCODE" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">Select category_code from categories where Domain_code=&apos;${DOMAINCODE}&apos; and Sequence_no=&apos;1&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">USECATCODE</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LoginID checker" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.sql.*;

log.info(&quot;------------connecting---------&quot;);


try{  

while(true){
${__setProperty(Login,Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)})};
log.info(&quot;------Login generate ----${__property(Login,)}&quot;);
	//
//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where Login_ID = &apos;${__property(Login,)}&apos; ) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where Login_ID = &apos;${__property(Login,)}&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
//external_code=&apos;${EXTCODE}&apos;
String EXTC;
log.info(&quot;-----Login random-- ${__property(Login,)}&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----Login id already exist -- &quot;+EXTC);
}



//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  
if(!EXTC.equals(&quot;Y&quot;))
break;
}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  
  

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.sql.*;
String y;
String extcode1;

log.info(&quot;------------connecting---------&quot;);

public class GenerateRandomString {
 
 public static final String DATA = &quot;ABCDEFGHIJKLMNOabcdefghijklmno1234567890&quot;;
 public static Random RANDOM = new Random();
 
 public static String randomString(int len) {
   StringBuilder sb = new StringBuilder(len);
 
   for (int i = 0; i &lt; len; i++) {
     sb.append(DATA.charAt(RANDOM.nextInt(DATA.length())));
   }
  y =sb.toString();

   log.info(&quot;&quot;+y);
   return sb.toString(); 
   
 }
 
}




try{  

while(true){

//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
extcode1=GenerateRandomString.randomString(6);
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where Login_ID = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where Login_ID = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);

String EXTC;
log.info(&quot;-----External_code random--&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----External_code-- &quot;+EXTC);
}


//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  

if(!EXTC.equals(&quot;Y&quot;))
break;

}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  

props.put(&quot;Login&quot;,extcode1);
//${__setProperty(ECODE1,${__property(ECODE2)})};</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ExtCODE checker" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.sql.*;

log.info(&quot;------------connecting---------&quot;);


try{  

while(true){
${__setProperty(ECODE1,${__RandomString(6,ABCDEFGHIJKLMNO1234567890,)})};
log.info(&quot;------EXTCODE1----${__property(ECODE1,)}&quot;);
	//
//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where External_code = &apos;${__property(ECODE1,)}&apos; ) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where External_code = &apos;${__property(ECODE1,)}&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
//external_code=&apos;${EXTCODE}&apos;
String EXTC;
log.info(&quot;-----External_code random-- ${__property(ECODE1,)}&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----External_code-- &quot;+EXTC);
}



//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  
if(!EXTC.equals(&quot;Y&quot;))
break;
}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  
  

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.sql.*;
String y;
String extcode1;

log.info(&quot;------------connecting---------&quot;);

public class GenerateRandomString {
 
 public static final String DATA = &quot;1234567890&quot;;
 public static Random RANDOM = new Random();
 
 public static String randomString(int len) {
   StringBuilder sb = new StringBuilder(len);
 
   for (int i = 0; i &lt; len; i++) {
     sb.append(DATA.charAt(RANDOM.nextInt(DATA.length())));
   }
  y =sb.toString();

   log.info(&quot;&quot;+y);
   return sb.toString(); 
   
 }
 
}




try{  

while(true){

//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
extcode1=GenerateRandomString.randomString(6);
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where External_code = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where External_code = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);

String EXTC;
log.info(&quot;-----External_code random--&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----External_code-- &quot;+EXTC);
}


//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  

if(!EXTC.equals(&quot;Y&quot;))
break;

}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  

props.put(&quot;ECODE1&quot;,extcode1);
//${__setProperty(ECODE1,${__property(ECODE2)})};</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int PreLEN= Integer.parseInt(&quot;${PrefixLEN}&quot;);
log.info(&quot;----------Prefix Length--------&quot;+PreLEN);

int MsisdnLEN= Integer.parseInt(&quot;${MSISDNLEN}&quot;);
log.info(&quot;----------MSISDN Length--------&quot;+MsisdnLEN);

int remLEN;
log.info(&quot;----Comparing----&quot;);

if(MsisdnLEN &gt;= PreLEN)
{log.info(&quot;----Compared----&quot;);
remLEN= MsisdnLEN - PreLEN;
log.info(&quot;----------Remain Length--------&quot;+remLEN);
}
else{remLEN=PreLEN-MsisdnLEN;
log.info(&quot;----------Remain Length--------&quot;+remLEN);}

vars.put(&quot;remLEN&quot;,&quot;&quot;+remLEN);
log.info(&quot;--------------&quot;+vars.get(&quot;remLEN&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}    </stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdapprovalLevelM1" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select default_value from system_preferences where preference_code=&apos;EXTSYS_USR_APRL_LEVEL_REQUIRED&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">ussdapprovalLevelM1Value</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${ussdapprovalLevelM1Value_1}==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add user request :${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${systemLocalDate}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EmployeeCode_1}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${CHADM_LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${CHADM_PASWD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;&lt;/MSISDN&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOCODE_1}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USECATCODE_1}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${__RandomString(2,ABCDEFGHIJKLMNOPQRST123456789,)}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;MR&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${__RandomString(7,abcdefghijklmnopqrstuvxyzABCDEF,)}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${__RandomString(7,1234567890,)}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${__RandomString(9,1234567890,)}&lt;/SSN&gt;&lt;ADDRESS1&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS2&gt;&lt;CITY&gt;${__RandomString(8,ABCDEFGHIJKLMNOPQRS,)}&lt;/CITY&gt;&lt;STATE&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/STATE&gt;&lt;COUNTRY&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz123456789,)}@mail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${Password1}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(${remLEN},1234567890)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;MSISDN3&gt;&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="LOGINID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">LOGINID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;],  &apos;login ID is&apos;),&apos;, primary&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
//${__setProperty(USERPASSWORD,${WEBPASSWORD})};

${__setProperty(USERPASSWORD,${Password1})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);
${__setProperty(systemLocalDate, ${systemLocalDate})};
${__setProperty(WEBLOGINID,${LOGINID})};</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${ussdapprovalLevelM1Value_1}==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add user request :${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${systemLocalDate}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EmployeeCode_1}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${CHADM_LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${CHADM_PASWD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;&lt;/MSISDN&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOCODE_1}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USECATCODE_1}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${__RandomString(2,ABCDEFGHIJKLMNOPQRST123456789,)}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;MR&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${__RandomString(7,abcdefghijklmnopqrstuvxyzABCDEF,)}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${__RandomString(7,1234567890,)}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${__RandomString(9,1234567890,)}&lt;/SSN&gt;&lt;ADDRESS1&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS2&gt;&lt;CITY&gt;${__RandomString(8,ABCDEFGHIJKLMNOPQRS,)}&lt;/CITY&gt;&lt;STATE&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/STATE&gt;&lt;COUNTRY&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz123456789,)}@mail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;${__property(Login,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${Password1}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(${remLEN},1234567890)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;MSISDN3&gt;&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
//${__setProperty(USERPASSWORD,${WEBPASSWORD})};

${__setProperty(USERPASSWORD,${Password1})};
${__setProperty(OLDPIN,${USERPIN})};
${__setProperty(systemLocalDate, ${systemLocalDate})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERID" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">USERID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;USERID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Update</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update users set status=&apos;PA&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdupdateUserStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserPIN" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Update</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserPINM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update user_phones set sms_pin=&apos;6cae7ac13edb3a83&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdupdateUserPINM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${ussdapprovalLevelM1Value_1}==&quot;2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add user request :${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${systemLocalDate}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EmployeeCode_1}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${CHADM_LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${CHADM_PASWD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;&lt;/MSISDN&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOCODE_1}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USECATCODE_1}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${__RandomString(2,ABCDEFGHIJKLMNOPQRST123456789,)}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;MR&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${__RandomString(7,abcdefghijklmnopqrstuvxyzABCDEF,)}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${__RandomString(7,1234567890,)}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${__RandomString(9,1234567890,)}&lt;/SSN&gt;&lt;ADDRESS1&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS2&gt;&lt;CITY&gt;${__RandomString(8,ABCDEFGHIJKLMNOPQRS,)}&lt;/CITY&gt;&lt;STATE&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/STATE&gt;&lt;COUNTRY&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz123456789,)}@mail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;${__property(Login,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${Password1}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(${remLEN},1234567890)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;MSISDN3&gt;&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
//${__setProperty(USERPASSWORD,${WEBPASSWORD})};

${__setProperty(USERPASSWORD,${Password1})};
${__setProperty(OLDPIN,${USERPIN})};
${__setProperty(systemLocalDate, ${systemLocalDate})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERID" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">USERID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;USERID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Update</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update users set status=&apos;PA&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdupdateUserStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserPIN" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Update</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserPINM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update user_phones set sms_pin=&apos;6cae7ac13edb3a83&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdupdateUserPINM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+vars.get(&quot;SVNRepositoryID&quot;)+&quot;|&quot;+vars.get(&quot;LeadName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkIP&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkName&quot;)+&quot;|&quot;+vars.get(&quot;TestFrameworkSVNPath&quot;)+&quot;|&quot;+vars.get(&quot;TestExecutionDateTime&quot;)+&quot;|&quot;+vars.get(&quot;ProductInterface&quot;)+&quot;|&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+_DumpData+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="add user " enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="false">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="false">
            <stringProp name="filename">${CSV path}\EXTGW_USERADD.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="user add request :${Description}" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${__time(dd/MM/yyyy,)}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EMPCODE}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOGRAPHYCODE}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;${PARENTMSISDN}&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;${PARENTEXTERNALCODE}&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USERCATCODE}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${SHORTNAME}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;${USERNAMEPREFIX}&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${CONTACTPERSON}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${CONTACTNUMBER}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${SSN}&lt;/SSN&gt;&lt;ADDRESS1&gt;${ADDRESS1}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${ADDRESS2}&lt;/ADDRESS2&gt;&lt;CITY&gt;${CITY}&lt;/CITY&gt;&lt;STATE&gt;${STATE}&lt;/STATE&gt;&lt;COUNTRY&gt;${COUNTRY}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz,)}@gmail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${WEBPASSWORD}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;MSISDN3&gt;${MSISDN3}&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNID</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="persian Calendar" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.btsl.util.calendar.BTSLDateUtil; //importing the package and class
import java.util.*;
import java.lang.*;
import java.io.*;
import java.text.SimpleDateFormat;
import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

 try{    
     Date date = new Date(); 
      
     SimpleDateFormat df  = new SimpleDateFormat(&quot;dd/MM/yy&quot;); 
     String formattedDate = df.format(date);
     log.info(&quot;normalDate &quot;+ formattedDate);
     String systemLocalDate;
     String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     systemLocalDate = BTSLDateUtil.getSystemLocaleDate(formattedDate);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }else{
     systemLocalDate = formattedDate;
     log.info(&quot;gregorian!!!!!!!!!!!!!!&quot;);}
  	log.info(&quot;Persian Date &quot;+ systemLocalDate);

  	vars.put(&quot;systemLocalDate&quot;, systemLocalDate);
  	
  	
     ${__setProperty(systemLocalDate, ${systemLocalDate})};
     log.info(&quot;Persian Date HIIIIIIIIIIIIIIIIIII&quot;);
}
catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\EXTGW_USERADD.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Creator details" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}</stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Creator detail" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select EMPLOYEE_CODE, MSISDN  from users where Login_id=&apos;${loginId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">EmployeeCode, MSISDN_Chadm</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller (for postgres driver)" enabled="true">
            <stringProp name="IfController.condition">&quot;${Database Driver}&quot;==&quot;org.postgresql.Driver&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GEOCODE" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="geo_code" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
SELECT Q.grph_domain_code from (SELECT grph_domain_code
 from geographical_domains
 where grph_domain_type IN (
 SELECT grph_domain_type from categories 
 where sequence_no=&apos;1&apos;AND status=&apos;Y&apos; and domain_code =&apos;${DOMAINCODE}&apos; ) and Network_code =&apos;${EXTNWCODE}&apos; order by random() limit 1)Q</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">GEOCODE</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller(For oracle driver)" enabled="true">
            <stringProp name="IfController.condition">&quot;${Database Driver}&quot;==&quot;oracle.jdbc.driver.OracleDriver&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GEOCODE" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="geo_code" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT grph_domain_code from (SELECT grph_domain_code
  FROM geographical_domains
 WHERE grph_domain_type IN (
              SELECT grph_domain_type
                FROM categories
               WHERE sequence_no = &apos;1&apos; AND status = &apos;Y&apos;
                     AND domain_code = &apos;${DOMAINCODE}&apos;) and Network_code=&apos;${EXTNWCODE}&apos;
                    
ORDER BY DBMS_RANDOM.VALUE) where rownum=&apos;1&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">GEOCODE</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="user_categorycode" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver"> ${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}</stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user_catCODE" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">Select category_code from categories where Domain_code=&apos;${DOMAINCODE}&apos; and Sequence_no=&apos;1&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">USECATCODE</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LoginID checker" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.sql.*;

log.info(&quot;------------connecting---------&quot;);


try{  

while(true){
${__setProperty(Login,Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)})};
log.info(&quot;------Login generate ----${__property(Login,)}&quot;);
	//
//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where Login_ID = &apos;${__property(Login,)}&apos; ) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where Login_ID = &apos;${__property(Login,)}&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
//external_code=&apos;${EXTCODE}&apos;
String EXTC;
log.info(&quot;-----Login random-- ${__property(Login,)}&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----Login id already exist -- &quot;+EXTC);
}



//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  
if(!EXTC.equals(&quot;Y&quot;))
break;
}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  
  

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.sql.*;
String y;
String extcode1;

log.info(&quot;------------connecting---------&quot;);

public class GenerateRandomString {
 
 public static final String DATA = &quot;ABCDEFGHIJKLMNOabcdefghijklmno1234567890&quot;;
 public static Random RANDOM = new Random();
 
 public static String randomString(int len) {
   StringBuilder sb = new StringBuilder(len);
 
   for (int i = 0; i &lt; len; i++) {
     sb.append(DATA.charAt(RANDOM.nextInt(DATA.length())));
   }
  y =sb.toString();

   log.info(&quot;&quot;+y);
   return sb.toString(); 
   
 }
 
}




try{  

while(true){

//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
extcode1=GenerateRandomString.randomString(6);
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where Login_ID = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where Login_ID = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);

String EXTC;
log.info(&quot;-----External_code random--&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----External_code-- &quot;+EXTC);
}


//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  

if(!EXTC.equals(&quot;Y&quot;))
break;

}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  

props.put(&quot;Login&quot;,extcode1);
//${__setProperty(ECODE1,${__property(ECODE2)})};</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ExtCODE checker" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.sql.*;

log.info(&quot;------------connecting---------&quot;);


try{  

while(true){
${__setProperty(ECODE1,${__RandomString(6,ABCDEFGHIJKLMNO1234567890,)})};
log.info(&quot;------EXTCODE1----${__property(ECODE1,)}&quot;);
	//
//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where External_code = &apos;${__property(ECODE1,)}&apos; ) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where External_code = &apos;${__property(ECODE1,)}&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
//external_code=&apos;${EXTCODE}&apos;
String EXTC;
log.info(&quot;-----External_code random-- ${__property(ECODE1,)}&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----External_code-- &quot;+EXTC);
}



//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  
if(!EXTC.equals(&quot;Y&quot;))
break;
}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  
  

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.sql.*;
String y;
String extcode1;

log.info(&quot;------------connecting---------&quot;);

public class GenerateRandomString {
 
 public static final String DATA = &quot;1234567890&quot;;
 public static Random RANDOM = new Random();
 
 public static String randomString(int len) {
   StringBuilder sb = new StringBuilder(len);
 
   for (int i = 0; i &lt; len; i++) {
     sb.append(DATA.charAt(RANDOM.nextInt(DATA.length())));
   }
  y =sb.toString();

   log.info(&quot;&quot;+y);
   return sb.toString(); 
   
 }
 
}




try{  

while(true){

//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); 
log.info(&quot;------------hiiiiiiii---------&quot;);
//Class.forName(&quot; ${Database Driver}&quot;); 
log.info(&quot;------------connecting---------1!!!!!!!!!!!!!!!!!!&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
extcode1=GenerateRandomString.randomString(6);
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where External_code = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where External_code = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);

String EXTC;
log.info(&quot;-----External_code random--&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----External_code-- &quot;+EXTC);
}


//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  

if(!EXTC.equals(&quot;Y&quot;))
break;

}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  

props.put(&quot;ECODE1&quot;,extcode1);
//${__setProperty(ECODE1,${__property(ECODE2)})};</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int PreLEN= Integer.parseInt(&quot;${PrefixLEN}&quot;);
log.info(&quot;----------Prefix Length--------&quot;+PreLEN);

int MsisdnLEN= Integer.parseInt(&quot;${MSISDNLEN}&quot;);
log.info(&quot;----------MSISDN Length--------&quot;+MsisdnLEN);

int remLEN;
log.info(&quot;----Comparing----&quot;);

if(MsisdnLEN &gt;= PreLEN)
{log.info(&quot;----Compared----&quot;);
remLEN= MsisdnLEN - PreLEN;
log.info(&quot;----------Remain Length--------&quot;+remLEN);
}
else{remLEN=PreLEN-MsisdnLEN;
log.info(&quot;----------Remain Length--------&quot;+remLEN);}

vars.put(&quot;remLEN&quot;,&quot;&quot;+remLEN);
log.info(&quot;--------------&quot;+vars.get(&quot;remLEN&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}    </stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdapprovalLevelM1" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select default_value from system_preferences where preference_code=&apos;EXTSYS_USR_APRL_LEVEL_REQUIRED&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">ussdapprovalLevelM1Value</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${ussdapprovalLevelM1Value_1}==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add user request :${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${systemLocalDate}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EmployeeCode_1}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${loginId}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${password}&lt;/PASSWORD&gt;&lt;MSISDN&gt;&lt;/MSISDN&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOCODE_1}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USECATCODE_1}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${__RandomString(2,ABCDEFGHIJKLMNOPQRST123456789,)}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;MR&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${__RandomString(7,abcdefghijklmnopqrstuvxyzABCDEF,)}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${__RandomString(7,1234567890,)}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${__RandomString(9,1234567890,)}&lt;/SSN&gt;&lt;ADDRESS1&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS2&gt;&lt;CITY&gt;${__RandomString(8,ABCDEFGHIJKLMNOPQRS,)}&lt;/CITY&gt;&lt;STATE&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/STATE&gt;&lt;COUNTRY&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz123456789,)}@mail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${Password1}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(${remLEN},1234567890)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;MSISDN3&gt;&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="LOGINID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">LOGINID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;],  &apos;login ID is&apos;),&apos;, primary&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
//${__setProperty(USERPASSWORD,${WEBPASSWORD})};

${__setProperty(USERPASSWORD,${Password1})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);

${__setProperty(WEBLOGINID,${LOGINID})};
${__setProperty(systemLocalDate,${systemLocalDate})};</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${ussdapprovalLevelM1Value_1}==&quot;2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add user request :${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${systemLocalDate}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EmployeeCode_1}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${CHADM_LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${CHADM_PASWD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;&lt;/MSISDN&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOCODE_1}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USECATCODE_1}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${__RandomString(2,ABCDEFGHIJKLMNOPQRST123456789,)}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;MR&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${__RandomString(7,abcdefghijklmnopqrstuvxyzABCDEF,)}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${__RandomString(7,1234567890,)}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${__RandomString(9,1234567890,)}&lt;/SSN&gt;&lt;ADDRESS1&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS2&gt;&lt;CITY&gt;${__RandomString(8,ABCDEFGHIJKLMNOPQRS,)}&lt;/CITY&gt;&lt;STATE&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/STATE&gt;&lt;COUNTRY&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz123456789,)}@mail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;${__property(Login,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${Password1}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(${remLEN},1234567890)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;MSISDN3&gt;&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
//${__setProperty(USERPASSWORD,${WEBPASSWORD})};

${__setProperty(USERPASSWORD,${Password1})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERID" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">USERID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;USERID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Update</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update users set status=&apos;PA&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdupdateUserStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserPIN" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Update</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserPINM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update user_phones set sms_pin=&apos;6cae7ac13edb3a83&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdupdateUserPINM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${ussdapprovalLevelM1Value_1}==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add user request :${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${systemLocalDate}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EmployeeCode_1}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${CHADM_LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${CHADM_PASWD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;&lt;/MSISDN&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOCODE_1}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USECATCODE_1}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${__RandomString(2,ABCDEFGHIJKLMNOPQRST123456789,)}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;MR&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${__RandomString(7,abcdefghijklmnopqrstuvxyzABCDEF,)}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${__RandomString(7,1234567890,)}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${__RandomString(9,1234567890,)}&lt;/SSN&gt;&lt;ADDRESS1&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS2&gt;&lt;CITY&gt;${__RandomString(8,ABCDEFGHIJKLMNOPQRS,)}&lt;/CITY&gt;&lt;STATE&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/STATE&gt;&lt;COUNTRY&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz123456789,)}@mail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;${__property(Login,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${Password1}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(${remLEN},1234567890)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;MSISDN3&gt;&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
//${__setProperty(USERPASSWORD,${WEBPASSWORD})};

${__setProperty(USERPASSWORD,${Password1})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(USERPASSWORD,${WEBPASSWORD})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERID" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">USERID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;USERID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Update</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update users set status=&apos;PA&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdupdateUserStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserPIN" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Update</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserPINM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update user_phones set sms_pin=&apos;6cae7ac13edb3a83&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdupdateUserPINM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;9981%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\BarUser_POSITIVE.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type1" elementType="Argument">
                <stringProp name="Argument.name">type1</stringProp>
                <stringProp name="Argument.value">BARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="fetchusername" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">username</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}</stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="fetchusername" enabled="true">
              <stringProp name="dataSource">username</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select user_name from users where msisdn=&apos;${__property(MOBILENUMBER)}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">username</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">true</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="fetchextcode" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">extcode</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}</stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="fetchextcode" enabled="true">
              <stringProp name="dataSource">extcode</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select external_code from users where msisdn=&apos;${__property(MOBILENUMBER)}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">extcode</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="SET USERNAME EXTCODE" enabled="true">
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String username=vars.getObject(&quot;username_1&quot;);
String extcode=vars.get(&quot;extcode_1&quot;);
log.info(&quot;---------username_1---------&quot;+username_1);
vars.put(&quot;USERNAME&quot;,username);
vars.put(&quot;EXTCODE&quot;,extcode);







</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${USERNAME}&quot; ,&quot;msisdn&quot;: ${__property(MOBILENUMBER)},&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Parser" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);
</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View barred list Positive RESTFul" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="barredType" elementType="Argument">
              <stringProp name="Argument.name">barredType</stringProp>
              <stringProp name="Argument.value">SL017</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="type4" elementType="Argument">
              <stringProp name="Argument.name">type4</stringProp>
              <stringProp name="Argument.value">VIEWBARREDLIST</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\ViewBarredList_POSITIVE.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 
import com.btsl.util.calendar.BTSLDateUtil;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yy&quot;);
Calendar c = Calendar.getInstance();
c.setTime(new Date()); // Now use today date.
c.add(Calendar.DATE, -5); // Adding 5 days
String output = sdf.format(c.getTime());

Date date = new Date();
String curr= sdf.format(date);
String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     curr = BTSLDateUtil.getSystemLocaleDate(curr);
     output = BTSLDateUtil.getSystemLocaleDate(output);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }


log.info(&quot;new&quot; +output);
log.info(&quot;OLD&quot; +curr);

vars.put(&quot;FutureDate&quot;,curr);
vars.put(&quot;CurrentDate&quot;,output);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="View barred list request:${Description}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;fromDate&quot;:&quot;${CurrentDate}&quot; ,&quot;toDate&quot;: &quot;${FutureDate}&quot;,&quot;msisdn&quot;:${__property(MOBILENUMBER)}},&quot;type&quot;: &quot;${type4}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Request Parser" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;


String jsonString = prev.getResponseDataAsString();
log.info(&quot;******************************************************Hi1111111&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();
log.info(&quot;******************************************************Hi2222&quot;);
jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);

 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode +&quot;|MSISDN:&quot;+msisdn;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UnBar List Positive RESTFul" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="type2" elementType="Argument">
              <stringProp name="Argument.name">type2</stringProp>
              <stringProp name="Argument.value">UNBARUSER</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\UnBarUser_POSITIVE.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:${__property(MOBILENUMBER)},&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ConfirmUnBar Positive RESTFul" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Java/1.7.0_45</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="CsvTestCaseID" elementType="Argument">
              <stringProp name="Argument.name">CsvTestCaseID</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDescription" elementType="Argument">
              <stringProp name="Argument.name">CsvDescription</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvRequest" elementType="Argument">
              <stringProp name="Argument.name">CsvRequest</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvResponse" elementType="Argument">
              <stringProp name="Argument.name">CsvResponse</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPre_Processed" elementType="Argument">
              <stringProp name="Argument.name">CsvPre_Processed</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvPost_process" elementType="Argument">
              <stringProp name="Argument.name">CsvPost_process</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvMessages" elementType="Argument">
              <stringProp name="Argument.name">CsvMessages</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvDumpData" elementType="Argument">
              <stringProp name="Argument.name">CsvDumpData</stringProp>
              <stringProp name="Argument.value">==&gt;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvCaseType" elementType="Argument">
              <stringProp name="Argument.name">CsvCaseType</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvStatus" elementType="Argument">
              <stringProp name="Argument.name">CsvStatus</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CsvSMS" elementType="Argument">
              <stringProp name="Argument.name">CsvSMS</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="type3" elementType="Argument">
              <stringProp name="Argument.name">type3</stringProp>
              <stringProp name="Argument.value">CONUNBARUSER</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="barredTypeList" elementType="Argument">
              <stringProp name="Argument.name">barredTypeList</stringProp>
              <stringProp name="Argument.value">SL017</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
          <stringProp name="filename">${CSV path}\ConfirmUnbar_POSITIVE.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="delimiter"></stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -f ${Tomcat path}/logs/messageSentLog.log &gt;${Tomcat path}/logs/jmeterLogs.txt &amp; echo $! &gt; ~/jmeterLogs.pid</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm UnBar user request:${Description}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:&#xd;
${__property(MOBILENUMBER)},&quot;barredReason&quot;: &quot;${barredReason}&quot;,&quot;barredTypeList&quot;:[&quot;${barredTypeList}&quot;]},&quot;type&quot;: &quot;${type3}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
            <stringProp name="XPathExtractor.default">NOVAL</stringProp>
            <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
            <stringProp name="XPathExtractor.default"></stringProp>
            <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
            <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
            <boolProp name="XPathExtractor.validate">false</boolProp>
            <boolProp name="XPathExtractor.tolerant">false</boolProp>
            <boolProp name="XPathExtractor.namespace">false</boolProp>
          </XPathExtractor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Fail&quot;;
}else{
	statusCode = &quot;Pass&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11 |egrep &apos;9980%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;

if(TxnStatus.equals(&quot;200&quot;))
{
	PrintData+=&quot;|SMS:&quot;+_CsvSMS1;
}

print(PrintData);


f.close(); // close the file
// ------

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Add user for negative cases" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="add user " enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="false">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="false">
            <stringProp name="filename">${CSV path}\EXTGW_USERADD.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="user add request :${Description}" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${__time(dd/MM/yyyy,)}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EMPCODE}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOGRAPHYCODE}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;${PARENTMSISDN}&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;${PARENTEXTERNALCODE}&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USERCATCODE}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${SHORTNAME}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;${USERNAMEPREFIX}&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${CONTACTPERSON}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${CONTACTNUMBER}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${SSN}&lt;/SSN&gt;&lt;ADDRESS1&gt;${ADDRESS1}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${ADDRESS2}&lt;/ADDRESS2&gt;&lt;CITY&gt;${CITY}&lt;/CITY&gt;&lt;STATE&gt;${STATE}&lt;/STATE&gt;&lt;COUNTRY&gt;${COUNTRY}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz,)}@gmail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${WEBPASSWORD}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;MSISDN3&gt;${MSISDN3}&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNID</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\EXTGW_USERADD.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Creator details" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}</stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Creator detail" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select EMPLOYEE_CODE, MSISDN  from users where Login_id=&apos;${loginId}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">EmployeeCode, MSISDN_Chadm</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller (for postgres driver)" enabled="true">
            <stringProp name="IfController.condition">&quot;${Database Driver}&quot;==&quot;org.postgresql.Driver&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GEOCODE" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="geo_code" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">
SELECT Q.grph_domain_code from (SELECT grph_domain_code
 from geographical_domains
 where grph_domain_type IN (
 SELECT grph_domain_type from categories 
 where sequence_no=&apos;1&apos;AND status=&apos;Y&apos; and domain_code =&apos;${DOMAINCODE}&apos; ) and Network_code =&apos;${EXTNWCODE}&apos; order by random() limit 1)Q</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">GEOCODE</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller(For oracle driver)" enabled="true">
            <stringProp name="IfController.condition">&quot;${Database Driver}&quot;==&quot;oracle.jdbc.driver.OracleDriver&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GEOCODE" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="geo_code" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">SELECT grph_domain_code from (SELECT grph_domain_code
  FROM geographical_domains
 WHERE grph_domain_type IN (
              SELECT grph_domain_type
                FROM categories
               WHERE sequence_no = &apos;1&apos; AND status = &apos;Y&apos;
                     AND domain_code = &apos;${DOMAINCODE}&apos;) and Network_code=&apos;${EXTNWCODE}&apos;
                    
ORDER BY DBMS_RANDOM.VALUE) where rownum=&apos;1&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">GEOCODE</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="user_categorycode" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver"> ${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}</stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user_catCODE" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">Select category_code from categories where Domain_code=&apos;${DOMAINCODE}&apos; and Sequence_no=&apos;1&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">USECATCODE</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LoginID checker" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.sql.*;

log.info(&quot;------------connecting---------&quot;);


try{  

while(true){
${__setProperty(Login,Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)})};
log.info(&quot;------Login generate ----${__property(Login,)}&quot;);
	//
//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where Login_ID = &apos;${__property(Login,)}&apos; ) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where Login_ID = &apos;${__property(Login,)}&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
//external_code=&apos;${EXTCODE}&apos;
String EXTC;
log.info(&quot;-----Login random-- ${__property(Login,)}&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----Login id already exist -- &quot;+EXTC);
}



//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  
if(!EXTC.equals(&quot;Y&quot;))
break;
}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  
  

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.sql.*;
String y;
String extcode1;

log.info(&quot;------------connecting---------&quot;);

public class GenerateRandomString {
 
 public static final String DATA = &quot;ABCDEFGHIJKLMNOabcdefghijklmno1234567890&quot;;
 public static Random RANDOM = new Random();
 
 public static String randomString(int len) {
   StringBuilder sb = new StringBuilder(len);
 
   for (int i = 0; i &lt; len; i++) {
     sb.append(DATA.charAt(RANDOM.nextInt(DATA.length())));
   }
  y =sb.toString();

   log.info(&quot;&quot;+y);
   return sb.toString(); 
   
 }
 
}




try{  

while(true){

//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
extcode1=GenerateRandomString.randomString(6);
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where Login_ID = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where Login_ID = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);

String EXTC;
log.info(&quot;-----External_code random--&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----External_code-- &quot;+EXTC);
}


//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  

if(!EXTC.equals(&quot;Y&quot;))
break;

}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  

props.put(&quot;Login&quot;,extcode1);
//${__setProperty(ECODE1,${__property(ECODE2)})};</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ExtCODE checker" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.sql.*;

log.info(&quot;------------connecting---------&quot;);


try{  

while(true){
${__setProperty(ECODE1,${__RandomString(6,ABCDEFGHIJKLMNO1234567890,)})};
log.info(&quot;------EXTCODE1----${__property(ECODE1,)}&quot;);
	//
//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where External_code = &apos;${__property(ECODE1,)}&apos; ) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where External_code = &apos;${__property(ECODE1,)}&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
//external_code=&apos;${EXTCODE}&apos;
String EXTC;
log.info(&quot;-----External_code random-- ${__property(ECODE1,)}&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----External_code-- &quot;+EXTC);
}



//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  
if(!EXTC.equals(&quot;Y&quot;))
break;
}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  
  

</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.sql.*;
String y;
String extcode1;

log.info(&quot;------------connecting---------&quot;);

public class GenerateRandomString {
 
 public static final String DATA = &quot;1234567890&quot;;
 public static Random RANDOM = new Random();
 
 public static String randomString(int len) {
   StringBuilder sb = new StringBuilder(len);
 
   for (int i = 0; i &lt; len; i++) {
     sb.append(DATA.charAt(RANDOM.nextInt(DATA.length())));
   }
  y =sb.toString();

   log.info(&quot;&quot;+y);
   return sb.toString(); 
   
 }
 
}




try{  

while(true){

//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); 
log.info(&quot;------------hiiiiiiii---------&quot;);
//Class.forName(&quot; ${Database Driver}&quot;); 
log.info(&quot;------------connecting---------1!!!!!!!!!!!!!!!!!!&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
extcode1=GenerateRandomString.randomString(6);
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where External_code = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where External_code = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);

String EXTC;
log.info(&quot;-----External_code random--&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----External_code-- &quot;+EXTC);
}


//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  

if(!EXTC.equals(&quot;Y&quot;))
break;

}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  

props.put(&quot;ECODE1&quot;,extcode1);
//${__setProperty(ECODE1,${__property(ECODE2)})};</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int PreLEN= Integer.parseInt(&quot;${PrefixLEN}&quot;);
log.info(&quot;----------Prefix Length--------&quot;+PreLEN);

int MsisdnLEN= Integer.parseInt(&quot;${MSISDNLEN}&quot;);
log.info(&quot;----------MSISDN Length--------&quot;+MsisdnLEN);

int remLEN;
log.info(&quot;----Comparing----&quot;);

if(MsisdnLEN &gt;= PreLEN)
{log.info(&quot;----Compared----&quot;);
remLEN= MsisdnLEN - PreLEN;
log.info(&quot;----------Remain Length--------&quot;+remLEN);
}
else{remLEN=PreLEN-MsisdnLEN;
log.info(&quot;----------Remain Length--------&quot;+remLEN);}

vars.put(&quot;remLEN&quot;,&quot;&quot;+remLEN);
log.info(&quot;--------------&quot;+vars.get(&quot;remLEN&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
          <hashTree>
            <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="poolMax">10</stringProp>
              <stringProp name="timeout">10000</stringProp>
              <stringProp name="trimInterval">60000</stringProp>
              <boolProp name="autocommit">true</boolProp>
              <stringProp name="transactionIsolation">DEFAULT</stringProp>
              <boolProp name="keepAlive">true</boolProp>
              <stringProp name="connectionAge">5000</stringProp>
              <stringProp name="checkQuery">Select 1</stringProp>
              <stringProp name="dbUrl">${Database URL}</stringProp>
              <stringProp name="driver">${Database Driver}</stringProp>
              <stringProp name="username">${Database User name}    </stringProp>
              <stringProp name="password">${Database Password}</stringProp>
            </JDBCDataSource>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdapprovalLevelM1" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select default_value from system_preferences where preference_code=&apos;EXTSYS_USR_APRL_LEVEL_REQUIRED&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">ussdapprovalLevelM1Value</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="persian Calendar" enabled="true">
            <stringProp name="BeanShellSampler.query">import com.btsl.util.calendar.BTSLDateUtil; //importing the package and class
import java.util.*;
import java.lang.*;
import java.io.*;
import java.text.SimpleDateFormat;
import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

 try{    
     Date date = new Date(); 
      
     SimpleDateFormat df  = new SimpleDateFormat(&quot;dd/MM/yy&quot;); 
     String formattedDate = df.format(date);
     log.info(&quot;normalDate &quot;+ formattedDate);
     String systemLocalDate1;
     String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     systemLocalDate1 = BTSLDateUtil.getSystemLocaleDate(formattedDate);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }else{
     systemLocalDate1 = formattedDate;
     log.info(&quot;gregorian!!!!!!!!!!!!!!&quot;);}
  	log.info(&quot;Persian Date &quot;+ systemLocalDate1);

  	vars.put(&quot;systemLocalDate1&quot;, systemLocalDate1);
  	
  	
     ${__setProperty(systemLocalDate1, ${systemLocalDate1})};
     log.info(&quot;Persian Date HIIIIIIIIIIIIIIIIIII&quot;);
}
catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${ussdapprovalLevelM1Value_1}==&quot;0&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add user request :${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${systemLocalDate1}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EmployeeCode_1}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${loginId}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${password}&lt;/PASSWORD&gt;&lt;MSISDN&gt;&lt;/MSISDN&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOCODE_1}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USECATCODE_1}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${__RandomString(2,ABCDEFGHIJKLMNOPQRST123456789,)}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;MR&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${__RandomString(7,abcdefghijklmnopqrstuvxyzABCDEF,)}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${__RandomString(7,1234567890,)}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${__RandomString(9,1234567890,)}&lt;/SSN&gt;&lt;ADDRESS1&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS2&gt;&lt;CITY&gt;${__RandomString(8,ABCDEFGHIJKLMNOPQRS,)}&lt;/CITY&gt;&lt;STATE&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/STATE&gt;&lt;COUNTRY&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz123456789,)}@mail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${Password1}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(${remLEN},1234567890)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;MSISDN3&gt;&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="LOGINID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">LOGINID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;],  &apos;login ID is&apos;),&apos;, primary&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
//${__setProperty(USERPASSWORD,${WEBPASSWORD})};

${__setProperty(USERPASSWORD,${Password1})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);

${__setProperty(WEBLOGINID,${LOGINID})};</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${ussdapprovalLevelM1Value_1}==&quot;2&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add user request :${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${systemLocalDate1}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EmployeeCode_1}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${CHADM_LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${CHADM_PASWD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;&lt;/MSISDN&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOCODE_1}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USECATCODE_1}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${__RandomString(2,ABCDEFGHIJKLMNOPQRST123456789,)}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;MR&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${__RandomString(7,abcdefghijklmnopqrstuvxyzABCDEF,)}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${__RandomString(7,1234567890,)}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${__RandomString(9,1234567890,)}&lt;/SSN&gt;&lt;ADDRESS1&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS2&gt;&lt;CITY&gt;${__RandomString(8,ABCDEFGHIJKLMNOPQRS,)}&lt;/CITY&gt;&lt;STATE&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/STATE&gt;&lt;COUNTRY&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz123456789,)}@mail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;${__property(Login,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${Password1}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(${remLEN},1234567890)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;MSISDN3&gt;&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
//${__setProperty(USERPASSWORD,${WEBPASSWORD})};

${__setProperty(USERPASSWORD,${Password1})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERID" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">USERID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;USERID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Update</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update users set status=&apos;PA&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdupdateUserStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserPIN" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Update</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserPINM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update user_phones set sms_pin=&apos;6cae7ac13edb3a83&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdupdateUserPINM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${ussdapprovalLevelM1Value_1}==&quot;1&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add user request :${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${systemLocalDate1}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EmployeeCode_1}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${CHADM_LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${CHADM_PASWD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;&lt;/MSISDN&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOCODE_1}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USECATCODE_1}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${__RandomString(2,ABCDEFGHIJKLMNOPQRST123456789,)}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;MR&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${__RandomString(7,abcdefghijklmnopqrstuvxyzABCDEF,)}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${__RandomString(7,1234567890,)}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${__RandomString(9,1234567890,)}&lt;/SSN&gt;&lt;ADDRESS1&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS2&gt;&lt;CITY&gt;${__RandomString(8,ABCDEFGHIJKLMNOPQRS,)}&lt;/CITY&gt;&lt;STATE&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/STATE&gt;&lt;COUNTRY&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz123456789,)}@mail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;${__property(Login,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${Password1}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(${remLEN},1234567890)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;MSISDN3&gt;&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
//${__setProperty(USERPASSWORD,${WEBPASSWORD})};

${__setProperty(USERPASSWORD,${Password1})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(USERPASSWORD,${WEBPASSWORD})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERID" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">USERID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;USERID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserStatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Update</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserStatusM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update users set status=&apos;PA&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdupdateUserStatusM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserPIN" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Update</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserPINM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update user_phones set sms_pin=&apos;6cae7ac13edb3a83&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdupdateUserPINM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
            <stringProp name="hostname">${Host name}</stringProp>
            <stringProp name="port">${Port}</stringProp>
            <stringProp name="username">${User name}</stringProp>
            <stringProp name="password">${Password}</stringProp>
            <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
          </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">default</stringProp>
              <stringProp name="RegexExtractor.match_number">-1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="add user " enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="false">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="false">
            <stringProp name="filename">${CSV path}\EXTGW_USERADD_POSITIVE.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="user add request :${Description}" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${__time(dd/MM/yyyy,)}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EMPCODE}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOGRAPHYCODE}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;${PARENTMSISDN}&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;${PARENTEXTERNALCODE}&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USERCATCODE}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${SHORTNAME}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;${USERNAMEPREFIX}&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${CONTACTPERSON}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${CONTACTNUMBER}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${SSN}&lt;/SSN&gt;&lt;ADDRESS1&gt;${ADDRESS1}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${ADDRESS2}&lt;/ADDRESS2&gt;&lt;CITY&gt;${CITY}&lt;/CITY&gt;&lt;STATE&gt;${STATE}&lt;/STATE&gt;&lt;COUNTRY&gt;${COUNTRY}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz,)}@gmail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${WEBPASSWORD}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;MSISDN3&gt;${MSISDN3}&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNID</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(USERPASSWORD,${WEBPASSWORD})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="fetchusername" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">username</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">${Database Driver}</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="fetchusername" enabled="true">
            <stringProp name="dataSource">username</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select user_name from users where msisdn=&apos;${__property(MOBILENUMBER)}&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">username</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">true</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">true</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="fetchextcode" enabled="true"/>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">extcode</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver">${Database Driver}</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="fetchextcode" enabled="true">
            <stringProp name="dataSource">extcode</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select external_code from users where msisdn=&apos;${__property(MOBILENUMBER)}&apos;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">extcode</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="SET USERNAME EXTCODE" enabled="true">
          <boolProp name="resetInterpreter">true</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String username=vars.getObject(&quot;username_1&quot;);
String extcode=vars.get(&quot;extcode_1&quot;);
vars.put(&quot;USERNAME&quot;,username);
vars.put(&quot;EXTCODE&quot;,extcode);

${__setProperty(USERNAME,${USERNAME})};







</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Bar User Negative Restful" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1496124027000</longProp>
        <longProp name="ThreadGroup.end_time">1496124027000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 1" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type1" elementType="Argument">
                <stringProp name="Argument.name">type1</stringProp>
                <stringProp name="Argument.value">BARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request :${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;&quot; ,&quot;msisdn&quot;: &quot;${__property(MOBILENUMBER)}&quot;,&quot;userType&quot;: &quot;&quot;,&quot;module&quot;: &quot;&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115642405">&quot;statusCode&quot;:400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 2" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_2.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="usernametest" elementType="Argument">
                  <stringProp name="Argument.name">usernametest</stringProp>
                  <stringProp name="Argument.value">s@dik</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${usernametest}&quot; ,&quot;msisdn&quot;: &quot;${__property(MOBILENUMBER)}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 3" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_3.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="msisdn" elementType="Argument">
                  <stringProp name="Argument.name">msisdn</stringProp>
                  <stringProp name="Argument.value">abcdefgh</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${USERNAME}&quot; ,&quot;msisdn&quot;: &quot;${msisdn}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 4" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_4.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="msisdn" elementType="Argument">
                  <stringProp name="Argument.name">msisdn</stringProp>
                  <stringProp name="Argument.value">78256985522</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${USERNAME}&quot; ,&quot;msisdn&quot;: &quot;${msisdn}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 5" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_5.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="fetchusername" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">username</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="fetchusername" enabled="true">
                <stringProp name="dataSource">username</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select user_name from users where msisdn=&apos;${__property(MOBILENUMBER)}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">username</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">true</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">true</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="fetchextcode" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">extcode</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="fetchextcode" enabled="true">
                <stringProp name="dataSource">extcode</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select external_code from users where msisdn=&apos;${__property(MOBILENUMBER)}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">extcode</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="SET USERNAME EXTCODE" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String username=vars.getObject(&quot;username_1&quot;);
String extcode=vars.get(&quot;extcode_1&quot;);
vars.put(&quot;USERNAME&quot;,username);
vars.put(&quot;EXTCODE&quot;,extcode);







</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${USERNAME}&quot; ,&quot;msisdn&quot;: ${__property(MOBILENUMBER)},&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;PASS&quot;;
}else{
	statusCode = &quot;FAIL&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode ;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request 2:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${USERNAME}&quot; ,&quot;msisdn&quot;: ${__property(MOBILENUMBER)},&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 6 user inactive" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="add user " enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="false">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="false">
              <stringProp name="filename">${CSV path}\EXTGW_USERADD.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="user add request :${Description}" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${__time(dd/MM/yyyy,)}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EMPCODE}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOGRAPHYCODE}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;${PARENTMSISDN}&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;${PARENTEXTERNALCODE}&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USERCATCODE}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${SHORTNAME}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;${USERNAMEPREFIX}&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${CONTACTPERSON}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${CONTACTNUMBER}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${SSN}&lt;/SSN&gt;&lt;ADDRESS1&gt;${ADDRESS1}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${ADDRESS2}&lt;/ADDRESS2&gt;&lt;CITY&gt;${CITY}&lt;/CITY&gt;&lt;STATE&gt;${STATE}&lt;/STATE&gt;&lt;COUNTRY&gt;${COUNTRY}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz,)}@gmail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${WEBPASSWORD}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;MSISDN3&gt;${MSISDN3}&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="CsvTestCaseID" elementType="Argument">
                  <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDescription" elementType="Argument">
                  <stringProp name="Argument.name">CsvDescription</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvRequest" elementType="Argument">
                  <stringProp name="Argument.name">CsvRequest</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvResponse" elementType="Argument">
                  <stringProp name="Argument.name">CsvResponse</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPre_Processed" elementType="Argument">
                  <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvPost_process" elementType="Argument">
                  <stringProp name="Argument.name">CsvPost_process</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvMessages" elementType="Argument">
                  <stringProp name="Argument.name">CsvMessages</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvDumpData" elementType="Argument">
                  <stringProp name="Argument.name">CsvDumpData</stringProp>
                  <stringProp name="Argument.value">==&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvCaseType" elementType="Argument">
                  <stringProp name="Argument.name">CsvCaseType</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvStatus" elementType="Argument">
                  <stringProp name="Argument.name">CsvStatus</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="CsvSMS" elementType="Argument">
                  <stringProp name="Argument.name">CsvSMS</stringProp>
                  <stringProp name="Argument.value">null</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\EXTGW_USERADD.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Creator details" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Creator detail" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select EMPLOYEE_CODE, MSISDN  from users where Login_id=&apos;${loginId}&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">EmployeeCode, MSISDN_Chadm</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller (for postgres driver)" enabled="true">
              <stringProp name="IfController.condition">&quot;${Database Driver}&quot;==&quot;org.postgresql.Driver&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GEOCODE" enabled="true"/>
              <hashTree>
                <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                  <stringProp name="dataSource">test</stringProp>
                  <stringProp name="poolMax">10</stringProp>
                  <stringProp name="timeout">10000</stringProp>
                  <stringProp name="trimInterval">60000</stringProp>
                  <boolProp name="autocommit">true</boolProp>
                  <stringProp name="transactionIsolation">DEFAULT</stringProp>
                  <boolProp name="keepAlive">true</boolProp>
                  <stringProp name="connectionAge">5000</stringProp>
                  <stringProp name="checkQuery">Select 1</stringProp>
                  <stringProp name="dbUrl">${Database URL}</stringProp>
                  <stringProp name="driver">${Database Driver}</stringProp>
                  <stringProp name="username">${Database User name}</stringProp>
                  <stringProp name="password">${Database Password}</stringProp>
                </JDBCDataSource>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="geo_code" enabled="true">
                  <stringProp name="dataSource">test</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">
SELECT Q.grph_domain_code from (SELECT grph_domain_code
 from geographical_domains
 where grph_domain_type IN (
 SELECT grph_domain_type from categories 
 where sequence_no=&apos;1&apos;AND status=&apos;Y&apos; and domain_code =&apos;${DOMAINCODE}&apos; ) and Network_code =&apos;${EXTNWCODE}&apos; order by random() limit 1)Q</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">GEOCODE</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                </JDBCSampler>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller(For oracle driver)" enabled="true">
              <stringProp name="IfController.condition">&quot;${Database Driver}&quot;==&quot;oracle.jdbc.driver.OracleDriver&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GEOCODE" enabled="true"/>
              <hashTree>
                <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                  <stringProp name="dataSource">test</stringProp>
                  <stringProp name="poolMax">10</stringProp>
                  <stringProp name="timeout">10000</stringProp>
                  <stringProp name="trimInterval">60000</stringProp>
                  <boolProp name="autocommit">true</boolProp>
                  <stringProp name="transactionIsolation">DEFAULT</stringProp>
                  <boolProp name="keepAlive">true</boolProp>
                  <stringProp name="connectionAge">5000</stringProp>
                  <stringProp name="checkQuery">Select 1</stringProp>
                  <stringProp name="dbUrl">${Database URL}</stringProp>
                  <stringProp name="driver">${Database Driver}</stringProp>
                  <stringProp name="username">${Database User name}</stringProp>
                  <stringProp name="password">${Database Password}</stringProp>
                </JDBCDataSource>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="geo_code" enabled="true">
                  <stringProp name="dataSource">test</stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="query">SELECT grph_domain_code from (SELECT grph_domain_code
  FROM geographical_domains
 WHERE grph_domain_type IN (
              SELECT grph_domain_type
                FROM categories
               WHERE sequence_no = &apos;1&apos; AND status = &apos;Y&apos;
                     AND domain_code = &apos;${DOMAINCODE}&apos;) and Network_code=&apos;${EXTNWCODE}&apos;
                    
ORDER BY DBMS_RANDOM.VALUE) where rownum=&apos;1&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">GEOCODE</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                </JDBCSampler>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="user_categorycode" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver"> ${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="user_catCODE" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">Select category_code from categories where Domain_code=&apos;${DOMAINCODE}&apos; and Sequence_no=&apos;1&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">USECATCODE</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="LoginID checker" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.sql.*;

log.info(&quot;------------connecting---------&quot;);


try{  

while(true){
${__setProperty(Login,Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)})};
log.info(&quot;------Login generate ----${__property(Login,)}&quot;);
	//
//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where Login_ID = &apos;${__property(Login,)}&apos; ) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where Login_ID = &apos;${__property(Login,)}&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
//external_code=&apos;${EXTCODE}&apos;
String EXTC;
log.info(&quot;-----Login random-- ${__property(Login,)}&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----Login id already exist -- &quot;+EXTC);
}



//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  
if(!EXTC.equals(&quot;Y&quot;))
break;
}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  
  

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.sql.*;
String y;
String extcode1;

log.info(&quot;------------connecting---------&quot;);

public class GenerateRandomString {
 
 public static final String DATA = &quot;ABCDEFGHIJKLMNOabcdefghijklmno1234567890&quot;;
 public static Random RANDOM = new Random();
 
 public static String randomString(int len) {
   StringBuilder sb = new StringBuilder(len);
 
   for (int i = 0; i &lt; len; i++) {
     sb.append(DATA.charAt(RANDOM.nextInt(DATA.length())));
   }
  y =sb.toString();

   log.info(&quot;&quot;+y);
   return sb.toString(); 
   
 }
 
}




try{  

while(true){

//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
extcode1=GenerateRandomString.randomString(6);
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where Login_ID = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where Login_ID = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);

String EXTC;
log.info(&quot;-----External_code random--&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----External_code-- &quot;+EXTC);
}


//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  

if(!EXTC.equals(&quot;Y&quot;))
break;

}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  

props.put(&quot;Login&quot;,extcode1);
//${__setProperty(ECODE1,${__property(ECODE2)})};</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="ExtCODE checker" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.sql.*;

log.info(&quot;------------connecting---------&quot;);


try{  

while(true){
${__setProperty(ECODE1,${__RandomString(6,ABCDEFGHIJKLMNO1234567890,)})};
log.info(&quot;------EXTCODE1----${__property(ECODE1,)}&quot;);
	//
//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;);  
log.info(&quot;------------connecting---------1&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where External_code = &apos;${__property(ECODE1,)}&apos; ) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where External_code = &apos;${__property(ECODE1,)}&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
//external_code=&apos;${EXTCODE}&apos;
String EXTC;
log.info(&quot;-----External_code random-- ${__property(ECODE1,)}&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----External_code-- &quot;+EXTC);
}



//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  
if(!EXTC.equals(&quot;Y&quot;))
break;
}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  
  

</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.sql.*;
String y;
String extcode1;

log.info(&quot;------------connecting---------&quot;);

public class GenerateRandomString {
 
 public static final String DATA = &quot;1234567890&quot;;
 public static Random RANDOM = new Random();
 
 public static String randomString(int len) {
   StringBuilder sb = new StringBuilder(len);
 
   for (int i = 0; i &lt; len; i++) {
     sb.append(DATA.charAt(RANDOM.nextInt(DATA.length())));
   }
  y =sb.toString();

   log.info(&quot;&quot;+y);
   return sb.toString(); 
   
 }
 
}




try{  

while(true){

//step1 load the driver class  
Class.forName(&quot;oracle.jdbc.driver.OracleDriver&quot;); 
log.info(&quot;------------hiiiiiiii---------&quot;);
//Class.forName(&quot; ${Database Driver}&quot;); 
log.info(&quot;------------connecting---------1!!!!!!!!!!!!!!!!!!&quot;);  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(&quot;${Database URL}&quot;);  
  log.info(&quot;------------connecting---------2&quot;);
//step3 create the statement object  
Statement stmt=con.createStatement();  
  log.info(&quot;------------connecting---------3&quot;);
//step4 execute query  
extcode1=GenerateRandomString.randomString(6);
ResultSet rs=stmt.executeQuery(
&quot;select case when exists (select 1 from users where External_code = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);
log.info(
&quot;select case when exists (select 1 from users where External_code = &apos;&quot;+extcode1+&quot;&apos;) then &apos;Y&apos; else &apos;N&apos; end as rec_exists from dual&quot;);

String EXTC;
log.info(&quot;-----External_code random--&quot;);
while(rs.next())  
{
EXTC=rs.getString(&quot;rec_exists&quot;);
log.info(&quot;-----External_code-- &quot;+EXTC);
}


//System.out.println(rs.getInt(1)+&quot;  &quot;+rs.getString(2)+&quot;  &quot;+rs.getString(3));  
  log.info(&quot;------------connected---------&quot;);
//step5 close the connection object  
con.close();  

if(!EXTC.equals(&quot;Y&quot;))
break;

}
}

catch(Exception e){ System.out.println(e);
log.info(&quot;--------Connection failed--------&quot;);}  

props.put(&quot;ECODE1&quot;,extcode1);
//${__setProperty(ECODE1,${__property(ECODE2)})};</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query"></stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">int PreLEN= Integer.parseInt(&quot;${PrefixLEN}&quot;);
log.info(&quot;----------Prefix Length--------&quot;+PreLEN);

int MsisdnLEN= Integer.parseInt(&quot;${MSISDNLEN}&quot;);
log.info(&quot;----------MSISDN Length--------&quot;+MsisdnLEN);

int remLEN;
log.info(&quot;----Comparing----&quot;);

if(MsisdnLEN &gt;= PreLEN)
{log.info(&quot;----Compared----&quot;);
remLEN= MsisdnLEN - PreLEN;
log.info(&quot;----------Remain Length--------&quot;+remLEN);
}
else{remLEN=PreLEN-MsisdnLEN;
log.info(&quot;----------Remain Length--------&quot;+remLEN);}

vars.put(&quot;remLEN&quot;,&quot;&quot;+remLEN);
log.info(&quot;--------------&quot;+vars.get(&quot;remLEN&quot;));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdapprovalLevel" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdapprovalLevelM1" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select default_value from system_preferences where preference_code=&apos;EXTSYS_USR_APRL_LEVEL_REQUIRED&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">ussdapprovalLevelM1Value</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${ussdapprovalLevelM1Value_1}==&quot;0&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add user request :${Description}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${__property(systemLocalDate)}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EmployeeCode_1}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${loginId}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${password}&lt;/PASSWORD&gt;&lt;MSISDN&gt;&lt;/MSISDN&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOCODE_1}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USECATCODE_1}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${__RandomString(2,ABCDEFGHIJKLMNOPQRST123456789,)}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;MR&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${__RandomString(7,abcdefghijklmnopqrstuvxyzABCDEF,)}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${__RandomString(7,1234567890,)}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${__RandomString(9,1234567890,)}&lt;/SSN&gt;&lt;ADDRESS1&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS2&gt;&lt;CITY&gt;${__RandomString(8,ABCDEFGHIJKLMNOPQRS,)}&lt;/CITY&gt;&lt;STATE&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/STATE&gt;&lt;COUNTRY&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz123456789,)}@mail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${Password1}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(${remLEN},1234567890)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;MSISDN3&gt;&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                  <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                  <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                  <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                  <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                  <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                  <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="LOGINID" enabled="true">
                  <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                  <stringProp name="XPathExtractor.refname">LOGINID</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;],  &apos;login ID is&apos;),&apos;, primary&apos;)</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
//${__setProperty(USERPASSWORD,${WEBPASSWORD})};

${__setProperty(USERPASSWORD,${Password1})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);

${__setProperty(WEBLOGINID,${LOGINID})};</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${ussdapprovalLevelM1Value_1}==&quot;2&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add user request :${Description}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${__property(systemLocalDate)}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EmployeeCode_1}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${CHADM_LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${CHADM_PASWD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;&lt;/MSISDN&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOCODE_1}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USECATCODE_1}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${__RandomString(2,ABCDEFGHIJKLMNOPQRST123456789,)}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;MR&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${__RandomString(7,abcdefghijklmnopqrstuvxyzABCDEF,)}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${__RandomString(7,1234567890,)}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${__RandomString(9,1234567890,)}&lt;/SSN&gt;&lt;ADDRESS1&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS2&gt;&lt;CITY&gt;${__RandomString(8,ABCDEFGHIJKLMNOPQRS,)}&lt;/CITY&gt;&lt;STATE&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/STATE&gt;&lt;COUNTRY&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz123456789,)}@mail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;${__property(Login,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${Password1}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(${remLEN},1234567890)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;MSISDN3&gt;&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                  <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                  <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                  <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                  <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                  <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                  <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
//${__setProperty(USERPASSWORD,${WEBPASSWORD})};

${__setProperty(USERPASSWORD,${Password1})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERID" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">USERID</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;USERID&apos;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserStatus" enabled="true"/>
              <hashTree>
                <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                  <stringProp name="dataSource">test</stringProp>
                  <stringProp name="poolMax">10</stringProp>
                  <stringProp name="timeout">10000</stringProp>
                  <stringProp name="trimInterval">60000</stringProp>
                  <boolProp name="autocommit">true</boolProp>
                  <stringProp name="transactionIsolation">DEFAULT</stringProp>
                  <boolProp name="keepAlive">true</boolProp>
                  <stringProp name="connectionAge">5000</stringProp>
                  <stringProp name="checkQuery">Update</stringProp>
                  <stringProp name="dbUrl">${Database URL}</stringProp>
                  <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                  <stringProp name="username">${Database User name}    </stringProp>
                  <stringProp name="password">${Database Password}</stringProp>
                </JDBCDataSource>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserStatusM1" enabled="true">
                  <stringProp name="dataSource">test</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">update users set status=&apos;PA&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">ussdupdateUserStatusM1Value</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                </JDBCSampler>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserPIN" enabled="true"/>
              <hashTree>
                <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                  <stringProp name="dataSource">test</stringProp>
                  <stringProp name="poolMax">10</stringProp>
                  <stringProp name="timeout">10000</stringProp>
                  <stringProp name="trimInterval">60000</stringProp>
                  <boolProp name="autocommit">true</boolProp>
                  <stringProp name="transactionIsolation">DEFAULT</stringProp>
                  <boolProp name="keepAlive">true</boolProp>
                  <stringProp name="connectionAge">5000</stringProp>
                  <stringProp name="checkQuery">Update</stringProp>
                  <stringProp name="dbUrl">${Database URL}</stringProp>
                  <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                  <stringProp name="username">${Database User name}    </stringProp>
                  <stringProp name="password">${Database Password}</stringProp>
                </JDBCDataSource>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserPINM1" enabled="true">
                  <stringProp name="dataSource">test</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">update user_phones set sms_pin=&apos;6cae7ac13edb3a83&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">ussdupdateUserPINM1Value</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                </JDBCSampler>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${ussdapprovalLevelM1Value_1}==&quot;1&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add user request :${Description}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${__property(systemLocalDate)}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EmployeeCode_1}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${CHADM_LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${CHADM_PASWD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;&lt;/MSISDN&gt;&lt;PIN&gt;&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOCODE_1}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USECATCODE_1}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${__RandomString(2,ABCDEFGHIJKLMNOPQRST123456789,)}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;MR&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${__RandomString(7,abcdefghijklmnopqrstuvxyzABCDEF,)}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${__RandomString(7,1234567890,)}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${__RandomString(9,1234567890,)}&lt;/SSN&gt;&lt;ADDRESS1&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${__RandomString(8,ABCDEFG 1234567890,)}&lt;/ADDRESS2&gt;&lt;CITY&gt;${__RandomString(8,ABCDEFGHIJKLMNOPQRS,)}&lt;/CITY&gt;&lt;STATE&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/STATE&gt;&lt;COUNTRY&gt;${__RandomString(10,ABCDEFGHIJKLMNOPQRS,)}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz123456789,)}@mail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;${__property(Login,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${Password1}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(${remLEN},1234567890)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;&lt;/MSISDN2&gt;&lt;MSISDN3&gt;&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                  <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                  <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                  <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                  <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                  <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                  <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="false">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
//${__setProperty(USERPASSWORD,${WEBPASSWORD})};

${__setProperty(USERPASSWORD,${Password1})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(USERPASSWORD,${WEBPASSWORD})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERID" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">USERID</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;USERID&apos;]/text()</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserStatus" enabled="true"/>
              <hashTree>
                <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                  <stringProp name="dataSource">test</stringProp>
                  <stringProp name="poolMax">10</stringProp>
                  <stringProp name="timeout">10000</stringProp>
                  <stringProp name="trimInterval">60000</stringProp>
                  <boolProp name="autocommit">true</boolProp>
                  <stringProp name="transactionIsolation">DEFAULT</stringProp>
                  <boolProp name="keepAlive">true</boolProp>
                  <stringProp name="connectionAge">5000</stringProp>
                  <stringProp name="checkQuery">Update</stringProp>
                  <stringProp name="dbUrl">${Database URL}</stringProp>
                  <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                  <stringProp name="username">${Database User name}    </stringProp>
                  <stringProp name="password">${Database Password}</stringProp>
                </JDBCDataSource>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserStatusM1" enabled="true">
                  <stringProp name="dataSource">test</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">update users set status=&apos;PA&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">ussdupdateUserStatusM1Value</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                </JDBCSampler>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ussdupdateUserPIN" enabled="true"/>
              <hashTree>
                <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                  <stringProp name="dataSource">test</stringProp>
                  <stringProp name="poolMax">10</stringProp>
                  <stringProp name="timeout">10000</stringProp>
                  <stringProp name="trimInterval">60000</stringProp>
                  <boolProp name="autocommit">true</boolProp>
                  <stringProp name="transactionIsolation">DEFAULT</stringProp>
                  <boolProp name="keepAlive">true</boolProp>
                  <stringProp name="connectionAge">5000</stringProp>
                  <stringProp name="checkQuery">Update</stringProp>
                  <stringProp name="dbUrl">${Database URL}</stringProp>
                  <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
                  <stringProp name="username">${Database User name}    </stringProp>
                  <stringProp name="password">${Database Password}</stringProp>
                </JDBCDataSource>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ussdupdateUserPINM1" enabled="true">
                  <stringProp name="dataSource">test</stringProp>
                  <stringProp name="queryType">Update Statement</stringProp>
                  <stringProp name="query">update user_phones set sms_pin=&apos;6cae7ac13edb3a83&apos; where user_id=&apos;${USERID}&apos;
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">ussdupdateUserPINM1Value</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                </JDBCSampler>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
              <stringProp name="hostname">${Host name}</stringProp>
              <stringProp name="port">${Port}</stringProp>
              <stringProp name="username">${User name}</stringProp>
              <stringProp name="password">${Password}</stringProp>
              <stringProp name="command">cat ${Tomcat path}/webapps/pretups/WEB-INF/classes/configfiles/Messages.properties | grep &apos;^${TXNSTATUS}=&apos;</stringProp>
            </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
                <stringProp name="RegexExtractor.refname">ErrorCode</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template"></stringProp>
                <stringProp name="RegexExtractor.default">default</stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
//String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);
String _ErrorCode= vars.get(&quot;ErrorCode_1_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);


print(&quot;&quot;+_TestCaseID+&quot;|&quot;+_Module+&quot;|&quot;+_Description+&quot;|&quot;+_Request+&quot;|&quot;+_Response+&quot;|&quot;+&quot;|&quot;+_CsvSMS1+&quot;|&quot;+_CsvSMS2+&quot;|&quot;+_CsvStatus+&quot;|&quot;+_ErrorCode);


f.close(); // close the file
// ------

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="add user " enabled="false"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\EXTGW_USERADD_POSITIVE.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="user add request :${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;COMMAND&gt;&lt;TYPE&gt;USERADDREQ&lt;/TYPE&gt;&lt;DATE&gt;${__time(dd/MM/yyyy,)}&lt;/DATE&gt;&lt;EXTNWCODE&gt;${EXTNWCODE}&lt;/EXTNWCODE&gt;&lt;EMPCODE&gt;${EMPCODE}&lt;/EMPCODE&gt;&lt;LOGINID&gt;${LOGINID}&lt;/LOGINID&gt;&lt;PASSWORD&gt;${PASSWORD}&lt;/PASSWORD&gt;&lt;MSISDN&gt;${MSISDN}&lt;/MSISDN&gt;&lt;PIN&gt;${PIN}&lt;/PIN&gt;&lt;EXTREFNUM&gt;${__RandomString(8,1234567890,)}&lt;/EXTREFNUM&gt;&lt;DATA&gt;&lt;GEOGRAPHYCODE&gt;${GEOGRAPHYCODE}&lt;/GEOGRAPHYCODE&gt;&lt;PARENTMSISDN&gt;${PARENTMSISDN}&lt;/PARENTMSISDN&gt;&lt;PARENTEXTERNALCODE&gt;${PARENTEXTERNALCODE}&lt;/PARENTEXTERNALCODE&gt;&lt;USERCATCODE&gt;${USERCATCODE}&lt;/USERCATCODE&gt;&lt;USERNAME&gt;${__RandomString(4,abcdefghijklmnopqrstuvxyz,)}&lt;/USERNAME&gt;&lt;SHORTNAME&gt;${SHORTNAME}&lt;/SHORTNAME&gt;&lt;USERNAMEPREFIX&gt;${USERNAMEPREFIX}&lt;/USERNAMEPREFIX&gt;&lt;SUBSCRIBERCODE&gt;${__RandomString(8,1234567890,)}&lt;/SUBSCRIBERCODE&gt;&lt;EXTERNALCODE&gt;${__RandomString(8,1234567890,)}&lt;/EXTERNALCODE&gt;&lt;CONTACTPERSON&gt;${CONTACTPERSON}&lt;/CONTACTPERSON&gt;&lt;CONTACTNUMBER&gt;${CONTACTNUMBER}&lt;/CONTACTNUMBER&gt;&lt;SSN&gt;${SSN}&lt;/SSN&gt;&lt;ADDRESS1&gt;${ADDRESS1}&lt;/ADDRESS1&gt;&lt;ADDRESS2&gt;${ADDRESS2}&lt;/ADDRESS2&gt;&lt;CITY&gt;${CITY}&lt;/CITY&gt;&lt;STATE&gt;${STATE}&lt;/STATE&gt;&lt;COUNTRY&gt;${COUNTRY}&lt;/COUNTRY&gt;&lt;EMAILID&gt;${__RandomString(5,abcdefghijklmnopqrstuvxyz,)}@gmail.com&lt;/EMAILID&gt;&lt;WEBLOGINID&gt;Test${__RandomString(5,abcdefghijklmnopqrstuvxyz1234567890,)}&lt;/WEBLOGINID&gt;&lt;WEBPASSWORD&gt;${WEBPASSWORD}&lt;/WEBPASSWORD&gt;&lt;MSISDNS&gt;&lt;MSISDN1&gt;${MSISDN Prefix}${__RandomString(8,1234567890,)}&lt;/MSISDN1&gt;&lt;MSISDN2&gt;${MSISDN2}&lt;/MSISDN2&gt;&lt;MSISDN3&gt;${MSISDN3}&lt;/MSISDN3&gt;&lt;/MSISDNS&gt;&lt;/DATA&gt;&lt;/COMMAND&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${EXTGW HTTP Request path OPT Receiver}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1701114217">&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNID" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNID</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNID&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MSISDN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">MSISDN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MSISDN&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="USERPIN" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">USERPIN</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">substring-before(substring-after(//*[local-name()=&apos;MESSAGE&apos;], &apos;PIN is&apos;),&apos;.&apos;)</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="GetMSISDNPINandPASSWORD" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
//vars.put(&quot;DedVCNTxnID${__counter(TRUE,)}&quot;,&quot;${DeductVCNTxnID}&quot;);
${__setProperty(MOBILENUMBER,${MSISDN})};
${__setProperty(USERPASSWORD,${WEBPASSWORD})};
${__setProperty(OLDPIN,${USERPIN})};
//vars.put(&quot;DedVCNTxnID&quot; + ${__counter(TRUE,)}, &quot;${DTxnID1}&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_POSITIVE.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="fetchusername" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">username</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="fetchusername" enabled="true">
                <stringProp name="dataSource">username</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select user_name from users where msisdn=&apos;${__property(MOBILENUMBER)}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">username</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">true</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">true</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="fetchextcode" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">extcode</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}    </stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="fetchextcode" enabled="true">
                <stringProp name="dataSource">extcode</stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="query">select external_code from users where msisdn=&apos;${__property(MOBILENUMBER)}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">extcode</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setuserstatus" enabled="true"/>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                <stringProp name="dataSource">status</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="dbUrl">${Database URL}</stringProp>
                <stringProp name="driver">${Database Driver}</stringProp>
                <stringProp name="username">${Database User name}</stringProp>
                <stringProp name="password">${Database Password}</stringProp>
              </JDBCDataSource>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="setstatus" enabled="true">
                <stringProp name="dataSource">status</stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="query">update users set status=&apos;N&apos; where msisdn=&apos;${__property(MOBILENUMBER)}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="variableNames">status</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller(For oracle driver)" enabled="true">
              <stringProp name="IfController.condition">&quot;${Database Driver}&quot;==&quot;oracle.jdbc.driver.OracleDriver&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setuserstatus" enabled="true"/>
              <hashTree>
                <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
                  <stringProp name="dataSource">status</stringProp>
                  <stringProp name="poolMax">10</stringProp>
                  <stringProp name="timeout">10000</stringProp>
                  <stringProp name="trimInterval">60000</stringProp>
                  <boolProp name="autocommit">true</boolProp>
                  <stringProp name="transactionIsolation">DEFAULT</stringProp>
                  <boolProp name="keepAlive">true</boolProp>
                  <stringProp name="connectionAge">5000</stringProp>
                  <stringProp name="checkQuery">Select 1</stringProp>
                  <stringProp name="dbUrl">${Database URL}</stringProp>
                  <stringProp name="driver">${Database Driver}</stringProp>
                  <stringProp name="username">${Database User name}</stringProp>
                  <stringProp name="password">${Database Password}</stringProp>
                </JDBCDataSource>
                <hashTree/>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="commit status" enabled="true">
                  <stringProp name="dataSource">status</stringProp>
                  <stringProp name="queryType">Commit</stringProp>
                  <stringProp name="query">COMMIT
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="variableNames">status</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                </JDBCSampler>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="SET USERNAME EXTCODE" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String username=vars.getObject(&quot;username_1&quot;);
String extcode=vars.get(&quot;extcode_1&quot;);
String status=vars.get(&quot;status_1&quot;);
vars.put(&quot;USERNAME&quot;,username);
vars.put(&quot;EXTCODE&quot;,extcode);
vars.put(&quot;STATUS&quot;,status);







</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="bar user" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${USERNAME}&quot; ,&quot;msisdn&quot;: ${__property(MOBILENUMBER)},&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="true">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;


String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode +&quot;|MSISDN:&quot;+msisdn;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_6.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="SET USERNAME EXTCODE" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
String username=vars.getObject(&quot;username_1&quot;);
String extcode=vars.get(&quot;extcode_1&quot;);
vars.put(&quot;USERNAME&quot;,username);
vars.put(&quot;EXTCODE&quot;,extcode);







</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${USERNAME}&quot; ,&quot;msisdn&quot;: ${__property(MOBILENUMBER)},&quot;userType&quot;: &quot;&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 7" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_7.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;: &quot;${__property(USERNAME)}&quot;,&quot;msisdn&quot;: &quot;${__property(MOBILENUMBER)}&quot;,&quot;userType&quot;: &quot;&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 8" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_8.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${__property(USERNAME)}&quot; ,&quot;msisdn&quot;: &quot;&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 9" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_9.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${__property(USERNAME)}&quot; ,&quot;msisdn&quot;: &quot;${__property(MOBILENUMBER)}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 10" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_10.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${__property(USERNAME)}&quot; ,&quot;msisdn&quot;: &quot;${__property(MOBILENUMBER)}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 11" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_11.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${__property(USERNAME)}&quot; ,&quot;msisdn&quot;: &quot;${__property(MOBILENUMBER)}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 12" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_12.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${__property(USERNAME)}&quot; ,&quot;msisdn&quot;: &quot;${__property(MOBILENUMBER)}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 13" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_13.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="barredReason1" elementType="Argument">
                  <stringProp name="Argument.name">barredReason1</stringProp>
                  <stringProp name="Argument.value">Testingggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${__property(USERNAME)}&quot; ,&quot;msisdn&quot;: &quot;${__property(MOBILENUMBER)}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason1}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 14" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_14.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="msisdn1" elementType="Argument">
                  <stringProp name="Argument.name">msisdn1</stringProp>
                  <stringProp name="Argument.value">78256985522</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${__property(USERNAME)}&quot; ,&quot;msisdn&quot;: &quot;${msisdn1}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 15" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_15.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="userType1" elementType="Argument">
                  <stringProp name="Argument.name">userType1</stringProp>
                  <stringProp name="Argument.value">RECEIVER,</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${__property(USERNAME)}&quot; ,&quot;msisdn&quot;: &quot;${__property(MOBILENUMBER)}&quot;,&quot;userType&quot;: &quot;${userType1}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 16" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_16.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${__property(MOBILENUMBER)}&quot; ,&quot;msisdn&quot;: &quot; ${__property(USERNAME)}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 17" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="bar user" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
              <stringProp name="filename">${CSV path}\BarUser_NEGATIVE_17.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="delimiter"></stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type1" elementType="Argument">
                  <stringProp name="Argument.name">type1</stringProp>
                  <stringProp name="Argument.value">BARUSER</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="msisdn1" elementType="Argument">
                  <stringProp name="Argument.name">msisdn1</stringProp>
                  <stringProp name="Argument.value">$^$%^ </stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bar user request:${Description}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;name&quot;:&quot;${__property(USERNAME)}&quot; ,&quot;msisdn&quot;: &quot;${msisdn1}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;module&quot;: &quot;${module}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type1}&quot;, &quot;externalCode&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
                <stringProp name="XPathExtractor.default">NOVAL</stringProp>
                <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
//String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END

log.info(&quot;****************CsvStatus**********&quot;+CsvStatus+&quot;**********************3&quot;);

// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);

log.info(&quot;****************resultcsvpath**********&quot;+resultcsvpath+&quot;**********************3&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View barred list Negative Case 1" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 
import com.btsl.util.calendar.BTSLDateUtil;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yy&quot;);
Calendar c = Calendar.getInstance();
c.setTime(new Date()); // Now use today date.
c.add(Calendar.DATE, -5); // Adding 5 days
String output = sdf.format(c.getTime());

Date date = new Date();
String curr= sdf.format(date);
String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     curr = BTSLDateUtil.getSystemLocaleDate(curr);
     output = BTSLDateUtil.getSystemLocaleDate(output);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }


log.info(&quot;new&quot; +output);
log.info(&quot;OLD&quot; +curr);

vars.put(&quot;FutureDate&quot;,curr);
vars.put(&quot;CurrentDate&quot;,output);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="true">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;9981%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="view bar list" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ViewBarredList_NEGATIVE_1.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type4" elementType="Argument">
                <stringProp name="Argument.name">type4</stringProp>
                <stringProp name="Argument.value">VIEWBARREDLIST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn1" elementType="Argument">
                <stringProp name="Argument.name">msisdn1</stringProp>
                <stringProp name="Argument.value">sadjaskd </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="view bar list request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;fromDate&quot;:&quot;${CurrentDate}&quot; ,&quot;toDate&quot;: &quot;${FutureDate}&quot;,&quot;msisdn&quot;:&quot;${msisdn1}&quot;},&quot;type&quot;: &quot;${type4}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);

 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode +&quot;|MSISDN:&quot;+msisdn;

String resultcsvpath = vars.get(&quot;negative&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View barred list Negative Case 2" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 
import com.btsl.util.calendar.BTSLDateUtil;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yy&quot;);
Calendar c = Calendar.getInstance();
c.setTime(new Date()); // Now use today date.
c.add(Calendar.DATE, -5); // Adding 5 days
String output = sdf.format(c.getTime());

Date date = new Date();
String curr= sdf.format(date);
String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     curr = BTSLDateUtil.getSystemLocaleDate(curr);
     output = BTSLDateUtil.getSystemLocaleDate(output);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }


log.info(&quot;new&quot; +output);
log.info(&quot;OLD&quot; +curr);

vars.put(&quot;FutureDate&quot;,curr);
vars.put(&quot;CurrentDate&quot;,output);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;9981%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="view bar list" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ViewBarredList_NEGATIVE_2.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type4" elementType="Argument">
                <stringProp name="Argument.name">type4</stringProp>
                <stringProp name="Argument.value">VIEWBARREDLIST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn1" elementType="Argument">
                <stringProp name="Argument.name">msisdn1</stringProp>
                <stringProp name="Argument.value">$^$%^ </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="view bar list request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;fromDate&quot;:&quot;${CurrentDate}&quot; ,&quot;toDate&quot;: &quot;${FutureDate}&quot;,&quot;msisdn&quot;:&quot;${msisdn1}&quot;},&quot;type&quot;: &quot;${type4}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);

 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode +&quot;|MSISDN:&quot;+msisdn;

String resultcsvpath = vars.get(&quot;negative&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View barred list Negative Case 3" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 
import com.btsl.util.calendar.BTSLDateUtil;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yy&quot;);
Calendar c = Calendar.getInstance();
c.setTime(new Date()); // Now use today date.
c.add(Calendar.DATE, -5); // Adding 5 days
String output = sdf.format(c.getTime());

Date date = new Date();
String curr= sdf.format(date);
String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     curr = BTSLDateUtil.getSystemLocaleDate(curr);
     output = BTSLDateUtil.getSystemLocaleDate(output);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }


log.info(&quot;new&quot; +output);
log.info(&quot;OLD&quot; +curr);

vars.put(&quot;FutureDate&quot;,curr);
vars.put(&quot;CurrentDate&quot;,output);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;9981%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="view bar list" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ViewBarredList_NEGATIVE_3.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type4" elementType="Argument">
                <stringProp name="Argument.name">type4</stringProp>
                <stringProp name="Argument.value">VIEWBARREDLIST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn1" elementType="Argument">
                <stringProp name="Argument.name">msisdn1</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="view bar list request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;fromDate&quot;:&quot;${CurrentDate}&quot; ,&quot;toDate&quot;: &quot;${FutureDate}&quot;,&quot;msisdn&quot;:&quot;${msisdn1}&quot;},&quot;type&quot;: &quot;${type4}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);

 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode +&quot;|MSISDN:&quot;+msisdn;

String resultcsvpath = vars.get(&quot;negative&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View barred list Negative Case 4" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 
import com.btsl.util.calendar.BTSLDateUtil;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yy&quot;);
Calendar c = Calendar.getInstance();
c.setTime(new Date()); // Now use today date.
c.add(Calendar.DATE, -5); // Adding 5 days
String output = sdf.format(c.getTime());

Date date = new Date();
String curr= sdf.format(date);
String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     curr = BTSLDateUtil.getSystemLocaleDate(curr);
     output = BTSLDateUtil.getSystemLocaleDate(output);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }


log.info(&quot;new&quot; +output);
log.info(&quot;OLD&quot; +curr);

vars.put(&quot;FutureDate&quot;,curr);
vars.put(&quot;CurrentDate&quot;,output);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;9981%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="view bar list" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ViewBarredList_NEGATIVE_4.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type4" elementType="Argument">
                <stringProp name="Argument.name">type4</stringProp>
                <stringProp name="Argument.value">VIEWBARREDLIST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn1" elementType="Argument">
                <stringProp name="Argument.name">msisdn1</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="view bar list request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;fromDate&quot;:&quot;${CurrentDate}&quot; ,&quot;toDate&quot;: &quot;${FutureDate}&quot;,&quot;msisdn&quot;:&quot;${msisdn1}&quot;},&quot;type&quot;: &quot;${type4}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);

 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode +&quot;|MSISDN:&quot;+msisdn;

String resultcsvpath = vars.get(&quot;negative&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View barred list Negative Case 5" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 
import com.btsl.util.calendar.BTSLDateUtil;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yy&quot;);
Calendar c = Calendar.getInstance();
c.setTime(new Date()); // Now use today date.
c.add(Calendar.DATE, -5); // Adding 5 days
String output = sdf.format(c.getTime());

Date date = new Date();
String curr= sdf.format(date);
String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     curr = BTSLDateUtil.getSystemLocaleDate(curr);
     output = BTSLDateUtil.getSystemLocaleDate(output);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }


log.info(&quot;new&quot; +output);
log.info(&quot;OLD&quot; +curr);

vars.put(&quot;FutureDate&quot;,curr);
vars.put(&quot;CurrentDate&quot;,output);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;9981%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="view bar list" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ViewBarredList_NEGATIVE_5.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type4" elementType="Argument">
                <stringProp name="Argument.name">type4</stringProp>
                <stringProp name="Argument.value">VIEWBARREDLIST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn1" elementType="Argument">
                <stringProp name="Argument.name">msisdn1</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="view bar list request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;barredType&quot;: &quot;&quot;,&quot;fromDate&quot;:&quot;${CurrentDate}&quot; ,&quot;toDate&quot;: &quot;${FutureDate}&quot;,&quot;msisdn&quot;:&quot;${msisdn1}&quot;},&quot;type&quot;: &quot;${type4}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);

 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode +&quot;|MSISDN:&quot;+msisdn;

String resultcsvpath = vars.get(&quot;negative&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View barred list Negative Case 6" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 
import com.btsl.util.calendar.BTSLDateUtil;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yy&quot;);
Calendar c = Calendar.getInstance();
c.setTime(new Date()); // Now use today date.
c.add(Calendar.DATE, -5); // Adding 5 days
String output = sdf.format(c.getTime());

Date date = new Date();
String curr= sdf.format(date);
String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     curr = BTSLDateUtil.getSystemLocaleDate(curr);
     output = BTSLDateUtil.getSystemLocaleDate(output);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }


log.info(&quot;new&quot; +output);
log.info(&quot;OLD&quot; +curr);

vars.put(&quot;FutureDate&quot;,curr);
vars.put(&quot;CurrentDate&quot;,output);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;9981%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="view bar list" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ViewBarredList_NEGATIVE_6.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type4" elementType="Argument">
                <stringProp name="Argument.name">type4</stringProp>
                <stringProp name="Argument.value">VIEWBARREDLIST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="view bar list request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;fromDate&quot;:&quot;&quot; ,&quot;toDate&quot;: &quot;${FutureDate}&quot;,&quot;msisdn&quot;:&quot;${msisdn1}&quot;},&quot;type&quot;: &quot;${type4}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);

 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode +&quot;|MSISDN:&quot;+msisdn;

String resultcsvpath = vars.get(&quot;negative&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View barred list Negative Case 7" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 
import com.btsl.util.calendar.BTSLDateUtil;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yy&quot;);
Calendar c = Calendar.getInstance();
c.setTime(new Date()); // Now use today date.
c.add(Calendar.DATE, -5); // Adding 5 days
String output = sdf.format(c.getTime());

Date date = new Date();
String curr= sdf.format(date);
String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     curr = BTSLDateUtil.getSystemLocaleDate(curr);
     output = BTSLDateUtil.getSystemLocaleDate(output);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }


log.info(&quot;new&quot; +output);
log.info(&quot;OLD&quot; +curr);

vars.put(&quot;FutureDate&quot;,curr);
vars.put(&quot;CurrentDate&quot;,output);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;9981%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="view bar list" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ViewBarredList_NEGATIVE_7.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type4" elementType="Argument">
                <stringProp name="Argument.name">type4</stringProp>
                <stringProp name="Argument.value">VIEWBARREDLIST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn1" elementType="Argument">
                <stringProp name="Argument.name">msisdn1</stringProp>
                <stringProp name="Argument.value">sadjaskd </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="view bar list request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;fromDate&quot;:&quot;${CurrentDate}&quot; ,&quot;toDate&quot;: &quot;&quot;,&quot;msisdn&quot;:&quot;${msisdn1}&quot;},&quot;type&quot;: &quot;${type4}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);

 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode +&quot;|MSISDN:&quot;+msisdn;

String resultcsvpath = vars.get(&quot;negative&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View barred list Negative Case 8" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 
import com.btsl.util.calendar.BTSLDateUtil;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yy&quot;);
Calendar c = Calendar.getInstance();
c.setTime(new Date()); // Now use today date.
c.add(Calendar.DATE, -5); // Adding 5 days
String output = sdf.format(c.getTime());

Date date = new Date();
String curr= sdf.format(date);
String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     curr = BTSLDateUtil.getSystemLocaleDate(curr);
     output = BTSLDateUtil.getSystemLocaleDate(output);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }


log.info(&quot;new&quot; +output);
log.info(&quot;OLD&quot; +curr);

vars.put(&quot;FutureDate&quot;,curr);
vars.put(&quot;CurrentDate&quot;,output);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;9981%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="view bar list" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ViewBarredList_NEGATIVE_8.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type4" elementType="Argument">
                <stringProp name="Argument.name">type4</stringProp>
                <stringProp name="Argument.value">VIEWBARREDLIST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="view bar list request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;fromDate&quot;:&quot;${CurrentDate}&quot; ,&quot;toDate&quot;: &quot;${FutureDate}&quot;,&quot;msisdn&quot;:&quot;&quot;},&quot;type&quot;: &quot;${type4}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);

 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode +&quot;|MSISDN:&quot;+msisdn;

String resultcsvpath = vars.get(&quot;negative&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View barred list Negative Case 9" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 
import com.btsl.util.calendar.BTSLDateUtil;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yy&quot;);
Calendar c = Calendar.getInstance();
c.setTime(new Date()); // Now use today date.
c.add(Calendar.DATE, -5); // Adding 5 days
String output = sdf.format(c.getTime());

Date date = new Date();
String curr= sdf.format(date);
String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     curr = BTSLDateUtil.getSystemLocaleDate(curr);
     output = BTSLDateUtil.getSystemLocaleDate(output);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }


log.info(&quot;new&quot; +output);
log.info(&quot;OLD&quot; +curr);

vars.put(&quot;FutureDate&quot;,curr);
vars.put(&quot;CurrentDate&quot;,output);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;9981%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="view bar list" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ViewBarredList_NEGATIVE_9.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type4" elementType="Argument">
                <stringProp name="Argument.name">type4</stringProp>
                <stringProp name="Argument.value">VIEWBARREDLIST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn1" elementType="Argument">
                <stringProp name="Argument.name">msisdn1</stringProp>
                <stringProp name="Argument.value">sadjaskd </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="view bar list request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;fromDate&quot;:&quot;${CurrentDate}&quot; ,&quot;toDate&quot;: &quot;${FutureDate}&quot;,&quot;msisdn&quot;:&quot;&quot;},&quot;type&quot;: &quot;${type4}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);

 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode +&quot;|MSISDN:&quot;+msisdn;

String resultcsvpath = vars.get(&quot;negative&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="View barred list Negative Case 10" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat; 
import java.util.Date; 
import com.btsl.util.calendar.BTSLDateUtil;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yy&quot;);
Calendar c = Calendar.getInstance();
c.setTime(new Date()); // Now use today date.
c.add(Calendar.DATE, -5); // Adding 5 days
String output = sdf.format(c.getTime());

Date date = new Date();
String curr= sdf.format(date);
String CalendarType = vars.get(&quot;ExternalCalendarType&quot;);
     log.info(&quot;CalendarType  &quot; + CalendarType);
     if (!&quot;gregorian&quot;.equals(CalendarType)){
     curr = BTSLDateUtil.getSystemLocaleDate(curr);
     output = BTSLDateUtil.getSystemLocaleDate(output);
     log.info(&quot;Persian!!!!!!!!!!!!!!&quot;);
     }


log.info(&quot;new&quot; +output);
log.info(&quot;OLD&quot; +curr);

vars.put(&quot;FutureDate&quot;,curr);
vars.put(&quot;CurrentDate&quot;,output);</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">tail -50 ${Tomcat path}/logs/jmeterLogs.txt |less +11|egrep &apos;9981%&apos;|tail -1 </stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="view bar list" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ViewBarredList_NEGATIVE_10.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter"></stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="type4" elementType="Argument">
                <stringProp name="Argument.name">type4</stringProp>
                <stringProp name="Argument.value">VIEWBARREDLIST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn1" elementType="Argument">
                <stringProp name="Argument.name">msisdn1</stringProp>
                <stringProp name="Argument.value">sadjaskd </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="view bar list request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;barredType&quot;: &quot;${barredType}&quot;,&quot;fromDate&quot;:&quot;${FutureDate}&quot; ,&quot;toDate&quot;: &quot;${CurrentDate}&quot;,&quot;msisdn&quot;:&quot;&quot;},&quot;type&quot;: &quot;${type4}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

import org.apache.jmeter.util.JMeterUtils;


log.info(&quot;Hi1111111&quot;);

String jsonString = prev.getResponseDataAsString();

JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString);
String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();
String status = jsonObject.get(&quot;status&quot;).toString();
JSONObject dataObject =  jsonObject.get(&quot;dataObject&quot;);

 log.info(&quot;Hi1111111       2222222222&quot;);
String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;FAIL&quot;;
}else{
	statusCode = &quot;PASS&quot;;
}

String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);


PrintData=&quot;Test case ID:&quot;+TestCaseID+&quot;|Module:&quot;+Module+&quot;|Description:&quot;+Description+&quot;|Request:&quot;+CsvRequest+&quot;|Response:&quot;+jsonString+&quot;|Status:&quot;+statusCode +&quot;|MSISDN:&quot;+msisdn;

String resultcsvpath = vars.get(&quot;negative&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">kill `cat ~/jmeterLogs.pid`</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="SSH Command" enabled="false">
          <stringProp name="hostname">${Host name}</stringProp>
          <stringProp name="port">${Port}</stringProp>
          <stringProp name="username">${User name}</stringProp>
          <stringProp name="password">${Password}</stringProp>
          <stringProp name="command">&gt;${Tomcat path}/logs/jmeterLogs.txt</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="RegexExtractor.refname">sentsms</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default">default</stringProp>
            <stringProp name="RegexExtractor.match_number">-1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = prev.getResponseDataAsString();
var success_flag = false;
 
/*if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + ${TestcaseId}+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);
*/
//***************Code for displaying results in CSV file********************
int TXNSTATUS = Integer.parseInt(vars.get(&quot;TXNSTATUS&quot;));
String  sentsms1 = vars.get(&quot;sentsms_1_g0&quot;);
String  sentsms2 = vars.get(&quot;sentsms_2_g0&quot;);
String  testcaseid = vars.get(&quot;TestcaseId&quot;);
String  TestcaseType = vars.get(&quot;TestcaseType&quot;);
String  module = vars.get(&quot;Module&quot;);
String  MESSAGE = vars.get(&quot;MESSAGE&quot;);
int TOPUPVALUE = Integer.parseInt(vars.get(&quot;QTY&quot;));
//int  COMMISSION= vars.get(&quot;commission_1&quot;);
int ussdpreBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM1Value_1&quot;));
//int ussdpreBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpreBalanceM2Value_1&quot;));
int ussdpostBalanceM1Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM1Value_1&quot;));
//int ussdpostBalanceM2Value = Integer.parseInt(vars.get(&quot;ussdpostBalanceM2Value_1&quot;));

TOPUPVALUE= TOPUPVALUE*100;
int calcBalance1 = ussdpreBalanceM1Value + TOPUPVALUE;
//int calcBalance2 = ussdpreBalanceM2Value - TOPUPVALUE;

/*
System.out.println(&quot;Execution-11&quot;);
System.out.println(&quot;Pre Balance-M1&quot;);
System.out.println(ussdpreBalanceM1Value);
System.out.println(&quot;Calculated Balance M1&quot;);
System.out.println(calcBalance1);
System.out.println(&quot;Post Balance M1&quot;);
System.out.println(ussdpostBalanceM1Value);
System.out.println(&quot;TXN STATUS&quot;);
System.out.println(TXNSTATUS);
*/
f = new FileOutputStream(&quot;results.csv&quot;,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 

//System.out.println(ussdpostBalanceM1Value);
//System.out.println(&quot;file writing&quot;);

if (ussdpostBalanceM1Value==calcBalance1)
{
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,,,Sent SMS-1: ,&quot; + sentsms1 + &quot;,Sent SMS-2: ,&quot; + sentsms2 + &quot;,Module:,&quot; + module);
}
else
{

	if(TestcaseType.equals(&quot;Negative&quot;))
	{
	//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Pass, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
	}

	else
	{  
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
//print(&quot;TestCaseID: ,&quot; + testcaseid + &quot;,Result:,Fail, Txn Status:,&quot; + TXNSTATUS + &quot;,Response: ,&quot; + MESSAGE +&quot;,Sent SMS-1:,,Sent SMS-2:,,Module:,&quot; + module);
     }
}


p.close();
f.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UnBar List Negative RESTFul" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 1" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type2" elementType="Argument">
                <stringProp name="Argument.name">type2</stringProp>
                <stringProp name="Argument.value">UNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\UnBar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:${__property(MOBILENUMBER)},&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 2" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type2" elementType="Argument">
                <stringProp name="Argument.name">type2</stringProp>
                <stringProp name="Argument.value">UNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\UnBar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;&quot;,&quot;msisdn&quot;:${__property(MOBILENUMBER)},&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 3" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type2" elementType="Argument">
                <stringProp name="Argument.name">type2</stringProp>
                <stringProp name="Argument.value">UNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\UnBar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:&quot;&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 4" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type2" elementType="Argument">
                <stringProp name="Argument.name">type2</stringProp>
                <stringProp name="Argument.value">UNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\UnBar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:${__property(MOBILENUMBER)},&quot;barredReason&quot;: &quot;&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 5" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type2" elementType="Argument">
                <stringProp name="Argument.name">type2</stringProp>
                <stringProp name="Argument.value">UNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\UnBar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;&quot;,&quot;userType&quot;: &quot;&quot;,&quot;msisdn&quot;:&quot;&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 6" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type2" elementType="Argument">
                <stringProp name="Argument.name">type2</stringProp>
                <stringProp name="Argument.value">UNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="number" elementType="Argument">
                <stringProp name="Argument.name">number</stringProp>
                <stringProp name="Argument.value">9654402231 </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\UnBar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:&quot;${number}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 7" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type2" elementType="Argument">
                <stringProp name="Argument.name">type2</stringProp>
                <stringProp name="Argument.value">UNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="number" elementType="Argument">
                <stringProp name="Argument.name">number</stringProp>
                <stringProp name="Argument.value">6289563220</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\UnBar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:&quot;${number}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 8" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type2" elementType="Argument">
                <stringProp name="Argument.name">type2</stringProp>
                <stringProp name="Argument.value">UNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="number" elementType="Argument">
                <stringProp name="Argument.name">number</stringProp>
                <stringProp name="Argument.value">sdsad </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\UnBar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:&quot;${number}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 9" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type2" elementType="Argument">
                <stringProp name="Argument.name">type2</stringProp>
                <stringProp name="Argument.value">UNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="number" elementType="Argument">
                <stringProp name="Argument.name">number</stringProp>
                <stringProp name="Argument.value">^&amp;^* </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\UnBar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:&quot;${number}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 10" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type2" elementType="Argument">
                <stringProp name="Argument.name">type2</stringProp>
                <stringProp name="Argument.value">UNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="reason" elementType="Argument">
                <stringProp name="Argument.name">reason</stringProp>
                <stringProp name="Argument.value">Testinggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\UnBar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:${__property(MOBILENUMBER)},&quot;barredReason&quot;: &quot;${reason}&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 11" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type2" elementType="Argument">
                <stringProp name="Argument.name">type2</stringProp>
                <stringProp name="Argument.value">UNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="number" elementType="Argument">
                <stringProp name="Argument.name">number</stringProp>
                <stringProp name="Argument.value">7080904060</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\UnBar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:&quot;${number}&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 12" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type2" elementType="Argument">
                <stringProp name="Argument.name">type2</stringProp>
                <stringProp name="Argument.value">UNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\UnBar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
            <stringProp name="dataSource">O2CTransferRule</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">${Database URL}</stringProp>
            <stringProp name="driver"> ${Database Driver}</stringProp>
            <stringProp name="username">${Database User name}</stringProp>
            <stringProp name="password">${Database Password}</stringProp>
          </JDBCDataSource>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request suspend TCP" enabled="true">
            <stringProp name="dataSource">O2CTransferRule</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">UPDATE users
   SET status = &apos;N&apos;
 WHERE  msisdn=&apos;${__property(MOBILENUMBER)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller(For oracle driver)" enabled="true">
            <stringProp name="IfController.condition">&quot;${Database Driver}&quot;==&quot;oracle.jdbc.driver.OracleDriver&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to commit" enabled="true">
              <stringProp name="dataSource">O2CTransferRule</stringProp>
              <stringProp name="queryType">Commit</stringProp>
              <stringProp name="query">commit</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;:&quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:${__property(MOBILENUMBER)},&quot;barredReason&quot;: &quot;${barredReason}&quot;},&quot;type&quot;: &quot;${type2}&quot;, &quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request resume TCP" enabled="true">
            <stringProp name="dataSource">O2CTransferRule</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">UPDATE users
   SET status = &apos;Y&apos;
 WHERE  msisdn=&apos;${__property(MOBILENUMBER)}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller(For oracle driver)" enabled="true">
            <stringProp name="IfController.condition">&quot;${Database Driver}&quot;==&quot;oracle.jdbc.driver.OracleDriver&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request to commit" enabled="true">
              <stringProp name="dataSource">O2CTransferRule</stringProp>
              <stringProp name="queryType">Commit</stringProp>
              <stringProp name="query">commit</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Confirm UnBar Negative RESTFul" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1425388636000</longProp>
        <longProp name="ThreadGroup.end_time">1425388636000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 1" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type3" elementType="Argument">
                <stringProp name="Argument.name">type3</stringProp>
                <stringProp name="Argument.value">CONUNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="barredTypeList" elementType="Argument">
                <stringProp name="Argument.name">barredTypeList</stringProp>
                <stringProp name="Argument.value">SL017</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ConfirmUnbar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:${__property(MOBILENUMBER)},&quot;barredReason&quot;: &quot;${barredReason}&quot;,&quot;barredTypeList&quot;:[&quot;${barredTypeList}&quot;]},&quot;type&quot;: &quot;${type3}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String JMeterUtils.getPropDefault = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 2" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type3" elementType="Argument">
                <stringProp name="Argument.name">type3</stringProp>
                <stringProp name="Argument.value">CONUNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="barredTypeList" elementType="Argument">
                <stringProp name="Argument.name">barredTypeList</stringProp>
                <stringProp name="Argument.value">SL017</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ConfirmUnbar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;&quot;,&quot;msisdn&quot;:${__property(MOBILENUMBER)},&quot;barredReason&quot;: &quot;${barredReason}&quot;,&quot;barredTypeList&quot;:[&quot;${barredTypeList}&quot;]},&quot;type&quot;: &quot;${type3}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 3" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type3" elementType="Argument">
                <stringProp name="Argument.name">type3</stringProp>
                <stringProp name="Argument.value">CONUNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="barredTypeList" elementType="Argument">
                <stringProp name="Argument.name">barredTypeList</stringProp>
                <stringProp name="Argument.value">SL017</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ConfirmUnbar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:&quot;&quot;,&quot;barredReason&quot;: &quot;${barredReason}&quot;,&quot;barredTypeList&quot;:[&quot;${barredTypeList}&quot;]},&quot;type&quot;: &quot;${type3}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 4" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type3" elementType="Argument">
                <stringProp name="Argument.name">type3</stringProp>
                <stringProp name="Argument.value">CONUNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="barredTypeList" elementType="Argument">
                <stringProp name="Argument.name">barredTypeList</stringProp>
                <stringProp name="Argument.value">SL017</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ConfirmUnbar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:${__property(MOBILENUMBER)},&quot;barredReason&quot;: &quot;&quot;,&quot;barredTypeList&quot;:[&quot;${barredTypeList}&quot;]},&quot;type&quot;: &quot;${type3}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 5" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type3" elementType="Argument">
                <stringProp name="Argument.name">type3</stringProp>
                <stringProp name="Argument.value">CONUNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="barredTypeList" elementType="Argument">
                <stringProp name="Argument.name">barredTypeList</stringProp>
                <stringProp name="Argument.value">SL017</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ConfirmUnbar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:${__property(MOBILENUMBER)},&quot;barredReason&quot;: &quot;${barredReason}&quot;,&quot;barredTypeList&quot;:[&quot;&quot;]},&quot;type&quot;: &quot;${type3}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 6" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type3" elementType="Argument">
                <stringProp name="Argument.name">type3</stringProp>
                <stringProp name="Argument.value">CONUNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="barredTypeList" elementType="Argument">
                <stringProp name="Argument.name">barredTypeList</stringProp>
                <stringProp name="Argument.value">SL017</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ConfirmUnbar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;&quot;,&quot;userType&quot;: &quot;&quot;,&quot;msisdn&quot;:&quot;&quot;,&quot;barredReason&quot;: &quot;&quot;,&quot;barredTypeList&quot;:[&quot;&quot;]},&quot;type&quot;: &quot;${type3}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Negative test case 7" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="CsvTestCaseID" elementType="Argument">
                <stringProp name="Argument.name">CsvTestCaseID</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDescription" elementType="Argument">
                <stringProp name="Argument.name">CsvDescription</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvRequest" elementType="Argument">
                <stringProp name="Argument.name">CsvRequest</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvResponse" elementType="Argument">
                <stringProp name="Argument.name">CsvResponse</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPre_Processed" elementType="Argument">
                <stringProp name="Argument.name">CsvPre_Processed</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvPost_process" elementType="Argument">
                <stringProp name="Argument.name">CsvPost_process</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvMessages" elementType="Argument">
                <stringProp name="Argument.name">CsvMessages</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvDumpData" elementType="Argument">
                <stringProp name="Argument.name">CsvDumpData</stringProp>
                <stringProp name="Argument.value">==&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvCaseType" elementType="Argument">
                <stringProp name="Argument.name">CsvCaseType</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvStatus" elementType="Argument">
                <stringProp name="Argument.name">CsvStatus</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="CsvSMS" elementType="Argument">
                <stringProp name="Argument.name">CsvSMS</stringProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="type3" elementType="Argument">
                <stringProp name="Argument.name">type3</stringProp>
                <stringProp name="Argument.value">CONUNBARUSER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="barredTypeList" elementType="Argument">
                <stringProp name="Argument.name">barredTypeList</stringProp>
                <stringProp name="Argument.value">SL0173322</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Java/1.7.0_45</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Variable initaliser" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.util.JMeterUtils;

JMeterUtils.setProperty(&quot;name&quot;, &quot;value&quot;);

System.out.println(&quot;Transaction Started===================&quot;);
//
String newExtcode = vars.get(&quot;userExtNumber_1&quot;);
String code = vars.get(&quot;EXTTXNNUMBER&quot;);
System.out.println(&quot;sd&quot;+newExtcode);
vars.put(&quot;EXTTXNNUMBER&quot;,newExtcode);


log.info(&quot;Define User Variables&quot; + CsvTestCaseID);
//setting variables

String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
String _Description = vars.get(&quot;CsvDescription&quot;);
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);

String _CsvTestCaseID = vars.get(&quot;TestcaseId&quot;);
String _CsvDescription = vars.get(&quot;DESCRIPTION&quot;);
String _CsvCaseType = vars.get(&quot;TestcaseType&quot;);



public String dup =&quot;asdasdasdasdasd&quot;;
vars.put(&quot;_cc&quot;,&quot;sdfsdf&quot;);

vars.put(&quot;CsvTestCaseID&quot;,_CsvTestCaseID);
vars.put(&quot;CsvDescription&quot;,_CsvDescription);
//vars.put(&quot;CsvRequest&quot;,_CsvRequest);
//vars.put(&quot;CsvResponse&quot;,_CsvResponse);
//vars.put(&quot;CsvPre_Processed&quot;,_CsvPre_Processed);
//vars.put(&quot;CsvPost_process&quot;,_CsvPost_process);
//vars.put(&quot;CsvMessages&quot;,_CsvMessages);
//vars.put(&quot;CsvDumpData&quot;,_CsvDumpData);
vars.put(&quot;CsvCaseType&quot;,_CsvCaseType);

String sd = vars.get(&quot;CsvCaseType&quot;);
System.out.println(&quot; Test Type &quot;);






</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data set config" enabled="true">
            <stringProp name="filename">${CSV path}\ConfirmUnbar_Negative.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Confirm UnBar user request:${Description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;loginId&quot;: &quot;${loginId}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;data&quot;: {&quot;module&quot;: &quot;${module}&quot;,&quot;userType&quot;: &quot;${userType}&quot;,&quot;msisdn&quot;:${__property(MOBILENUMBER)},&quot;barredReason&quot;: &quot;${barredReason}&quot;,&quot;barredTypeList&quot;:[&quot;${barredTypeList}&quot;]},&quot;type&quot;: &quot;${type3}&quot;,&quot;externalCode&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/pretups/rest/common/rest-controller</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//set the exter number




var response = prev.getResponseDataAsString();

System.out.println(prev.getRequestHeaders());

vars.put(&quot;CsvResponse&quot;,prev.getResponseDataAsString());

var success_flag = false;
 
if(response.indexOf(&quot;&lt;TXNSTATUS&gt;200&lt;/TXNSTATUS&gt;&quot;) &gt; 0)
                success_flag = true;
 
log.info(&quot;&gt;&gt;&gt;&gt; Transaction Label :&quot; + prev.getSampleLabel()+&quot;## Post data:&quot; + prev.getSamplerData() + &quot;## Response data: &quot; + response + &quot;## Success: &quot; + success_flag);

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2115644327">&quot;statusCode&quot;:200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="TXNSTATUS" enabled="false">
              <stringProp name="XPathExtractor.default">NOVAL</stringProp>
              <stringProp name="XPathExtractor.refname">TXNSTATUS</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;TXNSTATUS&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="MESSAGE" enabled="false">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">MESSAGE</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//*[local-name()=&apos;MESSAGE&apos;]/text()</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RequestPreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">//-- SKD
// -- updating the valiables
var sampler = ctx.getCurrentSampler();
var Arguments = sampler.getArguments();
//getting the post request
System.out.println(sampler.getConcurrentPool());
//System.out.println(Arguments.getArgumentCount(0));
//setting the vars
System.out.println(&quot;Request&quot;+Arguments);
vars.put(&quot;CsvRequest&quot;,&quot;Request&quot;+Arguments);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Result Writer" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONArray;

String jsonString = prev.getResponseDataAsString();

log.info(jsonString.toString());
log.info(&quot;##################################################################2&quot;);
JSONObject jsonObject = new JSONObject();
JSONParser jsonParser = new JSONParser();

jsonObject = (JSONObject) jsonParser.parse(jsonString.toString());

String statusCodeReq = jsonObject.get(&quot;statusCode&quot;).toString();

String status = jsonObject.get(&quot;status&quot;).toString();

String statusCode = &quot;&quot;;
if(statusCodeReq.equalsIgnoreCase(&quot;400&quot;) &amp;&amp; status.equalsIgnoreCase(&quot;false&quot;)){
	statusCode = &quot;Pass&quot;;
}else{
	statusCode = &quot;Fail&quot;;
}
log.info(&quot;**********************statusCode***********&quot;+statusCode+&quot;*******************************&quot;);
String TestCaseID = vars.get(&quot;TestcaseId&quot;);//argument name must be same as defined in csv file
String Module = vars.get(&quot;Module&quot;);//argument name must be same as defined in csv file
String Description = vars.get(&quot;Description&quot;);//argument name must be same as defined in csv file
String CsvRequest = vars.get(&quot;CsvRequest&quot;);
String SVNRepositoryID = vars.get(&quot;SVNRepositoryID&quot;);
String LeadName = vars.get(&quot;LeadName&quot;);
String TestFrameworkIP = vars.get(&quot;TestFrameworkIP&quot;);
String TestFrameworkName = vars.get(&quot;TestFrameworkName&quot;);
String TestFrameworkSVNPath = vars.get(&quot;TestFrameworkSVNPath&quot;);
String TestExecutionDateTime = vars.get(&quot;TestExecutionDateTime&quot;);
String ProductInterface = vars.get(&quot;ProductInterface&quot;);
String CsvSMS1 = vars.get(&quot;CsvSMS1&quot;);
String CsvSMS2 = vars.get(&quot;CsvSMS2&quot;);
String ErrorCode= vars.get(&quot;ErrorCode&quot;);
String Analysis= vars.get(&quot;Analysis&quot;);
String DumpData= vars.get(&quot;DumpData&quot;);

log.info(SVNRepositoryID);
log.info(LeadName);
log.info(ProductInterface);
PrintData=&quot;&quot;+SVNRepositoryID+&quot;|&quot;+LeadName+&quot;|&quot;+TestFrameworkIP+&quot;|&quot;+TestFrameworkName+&quot;|&quot;+TestFrameworkSVNPath+&quot;|&quot;+TestExecutionDateTime+&quot;|&quot;+ProductInterface+&quot;|&quot;+TestCaseID+&quot;|&quot;+Module+&quot;|&quot;+Description+&quot;|&quot;+CsvRequest+&quot;|&quot;+jsonString+&quot;|&quot;+DumpData+&quot;|&quot;+CsvSMS1+&quot;|&quot;+CsvSMS2+&quot;|&quot;+statusCode+&quot;|&quot;+ErrorCode;

String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
print(PrintData);
f.close();
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Result Writer" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//log.info(&quot;DUMPED POST PROCESSOR&quot;);</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

//================== MAIN TEST CASE LOGIC
//get the test case type
// Type value should be &quot;N&quot; for negative and &quot;P&quot; for positive
String testType = vars.get(&quot;CsvCaseType&quot;);

//get the transaction status
String TxnStatus = vars.get(&quot;TXNSTATUS&quot;);

// initalise Dump data field
String DumpData = &quot;&quot;;
String PreProData = &quot;&quot;;
String PrintData = &quot;&quot;;


//String bal1=vars.get(&quot;ussdpreBalanceM1Value_1&quot;);
//String bal2=vars.get(&quot;ussdpostBalanceM1Value_1&quot;);
//String qty=vars.get(&quot;AMOUNT&quot;); //get the transfer amount
//String txnID = vars.get(&quot;TXNID&quot;);//get the transfer ID



//get the pre balance and post balance
//int ussdpreBalanceM1Value = Integer.parseInt(bal1);
//int ussdpostBalanceM1Value = Integer.parseInt(bal2);
// get the transaction amount
//int transferAmount = Integer.parseInt(qty);

//ussdpreBalanceM1Value = ussdpreBalanceM1Value/100;
//ussdpostBalanceM1Value = ussdpostBalanceM1Value/100;

//dumping the data
//DumpData+=&quot;Prebalance= &quot;+ussdpreBalanceM1Value+&quot;#postBalance = &quot;+ussdpostBalanceM1Value;

//check for the deduct balance
//int deduct = ussdpreBalanceM1Value-ussdpostBalanceM1Value;
//DumpData+=&quot;#deducted balance = &quot;+deduct;

System.out.println(&quot;TXNSTATUS = &quot;+TxnStatus);



//==== checker
if(testType.equals(&quot;null&quot;))
{
	System.out.println(&quot;Test type not present &quot;+testType);
	vars.put(&quot;CsvStatus&quot;,&quot;null&quot;);
}else if(testType.equals(&quot;P&quot;) || testType.equals(&quot;Positive&quot;))
{
	// if the test type is positive
	System.out.println(&quot;Positive = &quot;+testType);
	if(TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		

		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}
else if (testType.equals(&quot;N&quot;) || testType.equals(&quot;Negative&quot;))
{
	//if the test case is negative
	System.out.println(&quot;Negative = &quot;+testType);
	if(!TxnStatus.equals(&quot;200&quot;))
	{

		
		vars.put(&quot;CsvStatus&quot;,&quot;Pass&quot;);
		
	}
	else{
		vars.put(&quot;CsvStatus&quot;,&quot;Fail&quot;);
		}
	
	
}



//======================= END


// RESULT CSV WRITER
log.info(&quot;Define User Variables&quot; +vars.get(&quot;CsvTestCaseID&quot;));
log.info(&quot;POST PROCESSOR&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
log.info(&quot;DUMPED POST PROCESSOR&quot; + resultcsvpath);


log.info(&quot;&quot;+dup);
String xx = vars.get(&quot;_cc&quot;);
System.out.println(&quot;Dup = &quot;+value);
log.info(&quot;here1&quot;);
//saving the dump data
vars.put(&quot;CsvDumpData&quot;,DumpData);

log.info(&quot;here2&quot;);
//FILE FORMAT
//TestCaseID	Description	Request	Response	Pre_Processed	Post_process	Messages	DumpData
//CSV Writer Code
//Fetching shared vars;
String _TestCaseID = vars.get(&quot;CsvTestCaseID&quot;);
//String _Description = vars.get(&quot;CsvDescription&quot;);
String _Description = vars.get(&quot;Description&quot;); //directly read from Csv
String _Request = vars.get(&quot;CsvRequest&quot;);
String _Response = vars.get(&quot;CsvResponse&quot;);
String _Pre_Processed = vars.get(&quot;CsvPre_Processed&quot;);
String _Post_process = vars.get(&quot;CsvPost_process&quot;);
String _Messages = vars.get(&quot;CsvMessages&quot;);
String _DumpData = vars.get(&quot;CsvDumpData&quot;);
String _CsvStatus = vars.get(&quot;CsvStatus&quot;);
String _CsvSMS1 = vars.get(&quot;sentsms_1_g0&quot;);
String _CsvSMS2 = vars.get(&quot;sentsms_2_g0&quot;);

String _Module = vars.get(&quot;Module&quot;);
log.info(&quot;here3&quot;);
//Opening File
//Removing ,and white spaces
_Request = _Request.replace(&quot;\r&quot;,&quot;&quot;);
_Request = _Request.replace(&quot;\n&quot;,&quot;&quot;);

_Response = _Response.replace(&quot;\r&quot;,&quot;&quot;);
_Response = _Response.replace(&quot;\n&quot;,&quot;&quot;);

_Pre_Processed = _Pre_Processed.replace(&quot;\r&quot;,&quot;&quot;);
_Pre_Processed = _Pre_Processed.replace(&quot;\n&quot;,&quot;&quot;);
log.info(&quot;here4&quot;);
//_Messages = _Messages.replace(&quot;\r&quot;,&quot;&quot;);
//_Messages = _Messages.replace(&quot;\n&quot;,&quot;&quot;);

log.info(&quot;here5&quot;);
f = new FileOutputStream(resultcsvpath,  true);
p = new PrintStream(f); 
this.interpreter.setOut(p); 
//--&gt; writing data
//print(&quot;\&quot;&quot;+_TestCaseID+&quot;\&quot;,\&quot;&quot;+_Description+&quot;\&quot;,\&quot;&quot;+_Request+&quot;\&quot;,\&quot;&quot;+_Response+&quot;\&quot;,\&quot;&quot;+_Pre_Processed+&quot;\&quot;,\&quot;&quot;+_Post_process+&quot;\&quot;,\&quot;&quot;+_Messages+&quot;\&quot;,\&quot;&quot;+_DumpData+&quot;\&quot;&quot;);

PrintData=&quot;Test case ID:&quot;+_TestCaseID+&quot;|Module:&quot;+_Module+&quot;|Description:&quot;+_Description+&quot;|Request:&quot;+_Request+&quot;|Response:&quot;+_Response+&quot;|Status:&quot;+_CsvStatus;


print(PrintData);


f.close(); // close the file
// ------

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Convert csv to xls" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1490081607000</longProp>
        <longProp name="ThreadGroup.end_time">1490081607000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query"></stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import com.comviva.CSVToExcelConverter;
import org.apache.jmeter.util.JMeterUtils;

String value=JMeterUtils.getPropDefault(&quot;name&quot;,&quot;&quot;);

try {
    //your code here
    //String[] paths = {&quot;C:\\FINAL\\AddUserO2c.csv&quot;, &quot;C:\\FINAL\\abc.xls&quot;};
CSVToExcelConverter object = new CSVToExcelConverter();
log.info(&quot;asad11&quot;);
String resultcsvpath = vars.get(&quot;ResultCsvPath&quot;);
String resultxlspath = vars.get(&quot;ResultXlsPath&quot;);
log.info(resultcsvpath);
object.convertCsvToXLS(resultcsvpath, resultxlspath);
log.info(&quot;asad11&quot;);
}
catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySamplerProperties">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
