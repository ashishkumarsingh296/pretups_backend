package com.restapi.superadmin.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.mockito.Mockito.anyBoolean;
import static org.mockito.Mockito.anyInt;
import static org.mockito.Mockito.anyLong;
import static org.mockito.Mockito.atLeast;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import com.btsl.common.BTSLBaseException;
import com.btsl.common.ErrorMap;
import com.btsl.common.ListValueVO;
import com.restapi.superadmin.requestVO.ChannelTransferRuleRequestVO;
import com.restapi.superadmin.responseVO.ChannelTransferRuleViewResponseVO;
import com.restapi.superadminVO.ChannelTransferRuleVO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.Ignore;
import org.junit.Rule;

import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@ContextConfiguration(classes = {ChannelToChannelTransferRuleManagementServiceImpl.class})
@RunWith(SpringJUnit4ClassRunner.class)
public class ChannelToChannelTransferRuleManagementServiceImplTest {
    @Rule
    public ExpectedException thrown = ExpectedException.none();

    @Autowired
    private ChannelToChannelTransferRuleManagementServiceImpl channelToChannelTransferRuleManagementServiceImpl;

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#viewDomainList(Connection)}
     */
    @Test
    public void testViewDomainList() throws BTSLBaseException, SQLException {
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getString(Mockito.<String>any())).thenReturn("String");
        when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);
        assertEquals(2, channelToChannelTransferRuleManagementServiceImpl.viewDomainList(con).getDomainTypeList().size());
        verify(con).prepareStatement(Mockito.<String>any());
        verify(preparedStatement).executeQuery();
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement).close();
        verify(resultSet, atLeast(1)).next();
        verify(resultSet, atLeast(1)).getString(Mockito.<String>any());
        verify(resultSet).close();
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#loadChannelTransferRuleVOList(Connection, String, String, String, String)}
     */
    @Test
   //@Ignore("TODO: Complete this test")
    public void testLoadChannelTransferRuleVOList() throws BTSLBaseException {
      com.btsl.util.JUnitConfig.init();
        //   Reason: R013 No inputs found that don't throw a trivial exception.
        //   Diffblue Cover tried to run the arrange/act section, but the method under
        //   test threw
        //   java.lang.NullPointerException
        //       at java.util.Locale.<init>(Locale.java:648)
        //       at java.util.Locale.<init>(Locale.java:677)
        //       at com.restapi.superadmin.service.ChannelToChannelTransferRuleManagementServiceImpl.loadChannelTransferRuleVOList(ChannelToChannelTransferRuleManagementServiceImpl.java:95)
        //   See https://diff.blue/R013 to resolve this issue.

        channelToChannelTransferRuleManagementServiceImpl.loadChannelTransferRuleVOList(mock(Connection.class),
                "Network Code", "Domain Code", "To Domain Code", "Type");
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#updateChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
   //@Ignore("TODO: Complete this test")
    public void testUpdateChannelTransferRule() throws Exception {
      com.btsl.util.JUnitConfig.init();
        //   Reason: R013 No inputs found that don't throw a trivial exception.
        //   Diffblue Cover tried to run the arrange/act section, but the method under
        //   test threw
        //   com.btsl.common.BTSLBaseException: error.modify.true
        //       at com.restapi.superadmin.repository.ChannelTransferRuleWebDAO.updateChannelTransferRule(ChannelTransferRuleWebDAO.java:510)
        //       at com.restapi.superadmin.service.ChannelToChannelTransferRuleManagementServiceImpl.updateChannelTransferRule(ChannelToChannelTransferRuleManagementServiceImpl.java:145)
        //   See https://diff.blue/R013 to resolve this issue.

        Timestamp timestamp = mock(Timestamp.class);
        when(timestamp.getTime()).thenReturn(10L);
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getTimestamp(Mockito.<String>any())).thenReturn(timestamp);
        when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setLong(anyInt(), anyLong());
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);

        ChannelTransferRuleVO channelTransferRuleVO = new ChannelTransferRuleVO();
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        channelToChannelTransferRuleManagementServiceImpl.updateChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO);
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#updateChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
    public void testUpdateChannelTransferRule2() throws Exception {
        Timestamp timestamp = mock(Timestamp.class);
        when(timestamp.getTime()).thenReturn(1L);
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getTimestamp(Mockito.<String>any())).thenReturn(timestamp);
        when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        doNothing().when(preparedStatement).clearParameters();
        when(preparedStatement.executeUpdate()).thenReturn(1);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setLong(anyInt(), anyLong());
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);

        ChannelTransferRuleVO channelTransferRuleVO = new ChannelTransferRuleVO();
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        assertEquals(1,
                channelToChannelTransferRuleManagementServiceImpl.updateChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO)
                        .intValue());
        verify (com.btsl.util.JUnitConfig.getConnection(), atLeast(1)).prepareStatement(Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).executeUpdate();
        verify(preparedStatement).executeQuery();
        verify(preparedStatement).clearParameters();
        verify(preparedStatement, atLeast(1)).setLong(anyInt(), anyLong());
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        verify(preparedStatement, atLeast(1)).close();
        verify(resultSet).next();
        verify(resultSet).getTimestamp(Mockito.<String>any());
        verify(resultSet).close();
        verify(timestamp).getTime();
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#updateChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
    public void testUpdateChannelTransferRule3() throws Exception {
        Timestamp timestamp = mock(Timestamp.class);
        when(timestamp.getTime()).thenReturn(1L);
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getTimestamp(Mockito.<String>any())).thenReturn(timestamp);
        when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        when(preparedStatement.executeUpdate()).thenReturn(0);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setLong(anyInt(), anyLong());
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);

        ChannelTransferRuleVO channelTransferRuleVO = new ChannelTransferRuleVO();
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        assertEquals(0,
                channelToChannelTransferRuleManagementServiceImpl.updateChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO)
                        .intValue());
        verify (com.btsl.util.JUnitConfig.getConnection(), atLeast(1)).prepareStatement(Mockito.<String>any());
        verify(preparedStatement).executeUpdate();
        verify(preparedStatement).executeQuery();
        verify(preparedStatement, atLeast(1)).setLong(anyInt(), anyLong());
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        verify(preparedStatement, atLeast(1)).close();
        verify(resultSet).next();
        verify(resultSet).getTimestamp(Mockito.<String>any());
        verify(resultSet).close();
        verify(timestamp).getTime();
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#updateChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
   //@Ignore("TODO: Complete this test")
    public void testUpdateChannelTransferRule4() throws Exception {
      com.btsl.util.JUnitConfig.init();
        //   Reason: R013 No inputs found that don't throw a trivial exception.
        //   Diffblue Cover tried to run the arrange/act section, but the method under
        //   test threw
        //   com.btsl.common.BTSLBaseException: error.modify.true
        //       at com.restapi.superadmin.repository.ChannelTransferRuleWebDAO.updateChannelTransferRule(ChannelTransferRuleWebDAO.java:510)
        //       at com.restapi.superadmin.service.ChannelToChannelTransferRuleManagementServiceImpl.updateChannelTransferRule(ChannelToChannelTransferRuleManagementServiceImpl.java:145)
        //   See https://diff.blue/R013 to resolve this issue.

        Timestamp timestamp = mock(Timestamp.class);
        when(timestamp.getTime()).thenReturn(1L);
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getTimestamp(Mockito.<String>any())).thenReturn(timestamp);
        when(resultSet.next()).thenReturn(false).thenReturn(true).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        doNothing().when(preparedStatement).clearParameters();
        when(preparedStatement.executeUpdate()).thenReturn(1);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setLong(anyInt(), anyLong());
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);

        ChannelTransferRuleVO channelTransferRuleVO = new ChannelTransferRuleVO();
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        channelToChannelTransferRuleManagementServiceImpl.updateChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO);
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#updateChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
    public void testUpdateChannelTransferRule5() throws Exception {
        Timestamp timestamp = mock(Timestamp.class);
        when(timestamp.getTime()).thenReturn(1L);
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getTimestamp(Mockito.<String>any())).thenReturn(timestamp);
        when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        when(preparedStatement.executeUpdate()).thenReturn(1);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setLong(anyInt(), anyLong());
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);
        ChannelTransferRuleVO channelTransferRuleVO = mock(ChannelTransferRuleVO.class);
        when(channelTransferRuleVO.getFirstApprovalLimit()).thenReturn(42L);
        when(channelTransferRuleVO.getLastModifiedTime()).thenReturn(1L);
        when(channelTransferRuleVO.getSecondApprovalLimit()).thenReturn(42L);
        when(channelTransferRuleVO.getApprovalRequired()).thenReturn("Approval Required");
        when(channelTransferRuleVO.getCntrlReturnLevel()).thenReturn("Cntrl Return Level");
        when(channelTransferRuleVO.getCntrlTransferLevel()).thenReturn("Cntrl Transfer Level");
        when(channelTransferRuleVO.getCntrlWithdrawLevel()).thenReturn("Cntrl Withdraw Level");
        when(channelTransferRuleVO.getDirectTransferAllowed()).thenReturn("Direct Transfer Allowed");
        when(channelTransferRuleVO.getDpAllowed()).thenReturn("Dp Allowed");
        when(channelTransferRuleVO.getFixedReturnCategory()).thenReturn("Fixed Return Category");
        when(channelTransferRuleVO.getFixedReturnLevel()).thenReturn("Fixed Return Level");
        when(channelTransferRuleVO.getFixedTransferCategory()).thenReturn("Fixed Transfer Category");
        when(channelTransferRuleVO.getFixedTransferLevel()).thenReturn("Fixed Transfer Level");
        when(channelTransferRuleVO.getFixedWithdrawCategory()).thenReturn("Fixed Withdraw Category");
        when(channelTransferRuleVO.getFixedWithdrawLevel()).thenReturn("Fixed Withdraw Level");
        when(channelTransferRuleVO.getFocAllowed()).thenReturn("Foc Allowed");
        when(channelTransferRuleVO.getFocTransferType()).thenReturn("Foc Transfer Type");
        when(channelTransferRuleVO.getFromCategory()).thenReturn("jane.doe@example.org");
        when(channelTransferRuleVO.getModifiedBy()).thenReturn("Jan 1, 2020 9:00am GMT+0100");
        when(channelTransferRuleVO.getParentAssocationAllowed()).thenReturn("Parent Assocation Allowed");
        when(channelTransferRuleVO.getRestrictedMsisdnAccess()).thenReturn("Restricted Msisdn Access");
        when(channelTransferRuleVO.getRestrictedRechargeAccess()).thenReturn("Restricted Recharge Access");
        when(channelTransferRuleVO.getReturnAllowed()).thenReturn("Return Allowed");
        when(channelTransferRuleVO.getReturnChnlBypassAllowed()).thenReturn("Return Chnl Bypass Allowed");
        when(channelTransferRuleVO.getToCategory()).thenReturn("To Category");
        when(channelTransferRuleVO.getToDomainCode()).thenReturn("To Domain Code");
        when(channelTransferRuleVO.getTransferAllowed()).thenReturn("Transfer Allowed");
        when(channelTransferRuleVO.getTransferChnlBypassAllowed()).thenReturn("Transfer Chnl Bypass Allowed");
        when(channelTransferRuleVO.getTransferRuleID()).thenReturn("Transfer Rule ID");
        when(channelTransferRuleVO.getTransferType()).thenReturn("Transfer Type");
        when(channelTransferRuleVO.getUncntrlReturnAllowed()).thenReturn("Uncntrl Return Allowed");
        when(channelTransferRuleVO.getUncntrlReturnLevel()).thenReturn("Uncntrl Return Level");
        when(channelTransferRuleVO.getUncntrlTransferAllowed()).thenReturn("Uncntrl Transfer Allowed");
        when(channelTransferRuleVO.getUncntrlTransferLevel()).thenReturn("Uncntrl Transfer Level");
        when(channelTransferRuleVO.getUncntrlWithdrawAllowed()).thenReturn("Uncntrl Withdraw Allowed");
        when(channelTransferRuleVO.getUncntrlWithdrawLevel()).thenReturn("Uncntrl Withdraw Level");
        when(channelTransferRuleVO.getWithdrawAllowed()).thenReturn("Withdraw Allowed");
        when(channelTransferRuleVO.getWithdrawChnlBypassAllowed()).thenReturn("Withdraw Chnl Bypass Allowed");
        when(channelTransferRuleVO.getProductArray()).thenReturn(new String[]{});
        when(channelTransferRuleVO.getProductVOList()).thenReturn(new ArrayList());
        when(channelTransferRuleVO.getModifiedOn())
                .thenReturn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        doNothing().when(channelTransferRuleVO).setApprovalRequired(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCreatedBy(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCreatedOn(Mockito.<Date>any());
        doNothing().when(channelTransferRuleVO).setDirectTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setDomainCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setDpAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFirstApprovalLimit(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setFixedReturnCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedTransferCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedWithdrawCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFocAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFocTransferType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromCategoryDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromDomainDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromSeqNo(Mockito.<Integer>any());
        doNothing().when(channelTransferRuleVO).setLastModifiedTime(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setModifiedBy(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setModifiedOn(Mockito.<Date>any());
        doNothing().when(channelTransferRuleVO).setNetworkCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setParentAssocationAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setPreviousStatus(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setProductArray(Mockito.<String[]>any());
        doNothing().when(channelTransferRuleVO).setProductVOList(Mockito.<ArrayList<Object>>any());
        doNothing().when(channelTransferRuleVO).setRestrictedMsisdnAccess(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setRestrictedRechargeAccess(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setReturnAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setReturnChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setRuleType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setSecondApprovalLimit(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setStatus(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setStatusDesc(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToCategoryDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToDomainCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToDomainDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToSeqNo(Mockito.<Integer>any());
        doNothing().when(channelTransferRuleVO).setTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferRuleID(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferRuleType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlReturnAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferAllowedTmp(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlWithdrawAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setWithdrawAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setWithdrawChnlBypassAllowed(Mockito.<String>any());
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        assertEquals(1,
                channelToChannelTransferRuleManagementServiceImpl.updateChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO)
                        .intValue());
        verify (com.btsl.util.JUnitConfig.getConnection(), atLeast(1)).prepareStatement(Mockito.<String>any());
        verify(preparedStatement).executeUpdate();
        verify(preparedStatement).executeQuery();
        verify(preparedStatement, atLeast(1)).setLong(anyInt(), anyLong());
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        verify(preparedStatement, atLeast(1)).close();
        verify(resultSet).next();
        verify(resultSet).getTimestamp(Mockito.<String>any());
        verify(resultSet).close();
        verify(timestamp).getTime();
        verify(channelTransferRuleVO).getFirstApprovalLimit();
        verify(channelTransferRuleVO).getLastModifiedTime();
        verify(channelTransferRuleVO).getSecondApprovalLimit();
        verify(channelTransferRuleVO).getApprovalRequired();
        verify(channelTransferRuleVO).getCntrlReturnLevel();
        verify(channelTransferRuleVO).getCntrlTransferLevel();
        verify(channelTransferRuleVO).getCntrlWithdrawLevel();
        verify(channelTransferRuleVO).getDirectTransferAllowed();
        verify(channelTransferRuleVO).getDpAllowed();
        verify(channelTransferRuleVO).getFixedReturnCategory();
        verify(channelTransferRuleVO).getFixedReturnLevel();
        verify(channelTransferRuleVO).getFixedTransferCategory();
        verify(channelTransferRuleVO).getFixedTransferLevel();
        verify(channelTransferRuleVO).getFixedWithdrawCategory();
        verify(channelTransferRuleVO).getFixedWithdrawLevel();
        verify(channelTransferRuleVO).getFocAllowed();
        verify(channelTransferRuleVO).getFocTransferType();
        verify(channelTransferRuleVO).getFromCategory();
        verify(channelTransferRuleVO).getModifiedBy();
        verify(channelTransferRuleVO).getParentAssocationAllowed();
        verify(channelTransferRuleVO).getRestrictedMsisdnAccess();
        verify(channelTransferRuleVO).getRestrictedRechargeAccess();
        verify(channelTransferRuleVO).getReturnAllowed();
        verify(channelTransferRuleVO).getReturnChnlBypassAllowed();
        verify(channelTransferRuleVO).getToCategory();
        verify(channelTransferRuleVO).getToDomainCode();
        verify(channelTransferRuleVO).getTransferAllowed();
        verify(channelTransferRuleVO).getTransferChnlBypassAllowed();
        verify(channelTransferRuleVO, atLeast(1)).getTransferRuleID();
        verify(channelTransferRuleVO).getTransferType();
        verify(channelTransferRuleVO).getUncntrlReturnAllowed();
        verify(channelTransferRuleVO).getUncntrlReturnLevel();
        verify(channelTransferRuleVO).getUncntrlTransferAllowed();
        verify(channelTransferRuleVO).getUncntrlTransferLevel();
        verify(channelTransferRuleVO).getUncntrlWithdrawAllowed();
        verify(channelTransferRuleVO).getUncntrlWithdrawLevel();
        verify(channelTransferRuleVO).getWithdrawAllowed();
        verify(channelTransferRuleVO).getWithdrawChnlBypassAllowed();
        verify(channelTransferRuleVO, atLeast(1)).getProductArray();
        verify(channelTransferRuleVO, atLeast(1)).getProductVOList();
        verify(channelTransferRuleVO).getModifiedOn();
        verify(channelTransferRuleVO).setApprovalRequired(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCreatedBy(Mockito.<String>any());
        verify(channelTransferRuleVO).setCreatedOn(Mockito.<Date>any());
        verify(channelTransferRuleVO).setDirectTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setDomainCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setDpAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setFirstApprovalLimit(Mockito.<Long>any());
        verify(channelTransferRuleVO).setFixedReturnCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedTransferCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedWithdrawCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFocAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setFocTransferType(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromCategoryDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromDomainDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromSeqNo(Mockito.<Integer>any());
        verify(channelTransferRuleVO).setLastModifiedTime(Mockito.<Long>any());
        verify(channelTransferRuleVO).setModifiedBy(Mockito.<String>any());
        verify(channelTransferRuleVO).setModifiedOn(Mockito.<Date>any());
        verify(channelTransferRuleVO).setNetworkCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setParentAssocationAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setPreviousStatus(Mockito.<String>any());
        verify(channelTransferRuleVO).setProductArray(Mockito.<String[]>any());
        verify(channelTransferRuleVO).setProductVOList(Mockito.<ArrayList<Object>>any());
        verify(channelTransferRuleVO).setRestrictedMsisdnAccess(Mockito.<String>any());
        verify(channelTransferRuleVO).setRestrictedRechargeAccess(Mockito.<String>any());
        verify(channelTransferRuleVO).setReturnAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setReturnChnlBypassAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setRuleType(Mockito.<String>any());
        verify(channelTransferRuleVO).setSecondApprovalLimit(Mockito.<Long>any());
        verify(channelTransferRuleVO).setStatus(Mockito.<String>any());
        verify(channelTransferRuleVO).setStatusDesc(Mockito.<String>any());
        verify(channelTransferRuleVO).setToCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setToCategoryDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setToDomainCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setToDomainDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setToSeqNo(Mockito.<Integer>any());
        verify(channelTransferRuleVO).setTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferChnlBypassAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferRuleID(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferRuleType(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferType(Mockito.<String>any());
        verify(channelTransferRuleVO).setType(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlReturnAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferAllowedTmp(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlWithdrawAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setWithdrawAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setWithdrawChnlBypassAllowed(Mockito.<String>any());
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#updateChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
    public void testUpdateChannelTransferRule6() throws Exception {
        Timestamp timestamp = mock(Timestamp.class);
        when(timestamp.getTime()).thenReturn(1L);
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getTimestamp(Mockito.<String>any())).thenReturn(timestamp);
        when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        doNothing().when(preparedStatement).clearParameters();
        when(preparedStatement.executeUpdate()).thenReturn(1);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setLong(anyInt(), anyLong());
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);

        ArrayList arrayList = new ArrayList();
        arrayList.add("42");
        ChannelTransferRuleVO channelTransferRuleVO = mock(ChannelTransferRuleVO.class);
        when(channelTransferRuleVO.getFirstApprovalLimit()).thenReturn(42L);
        when(channelTransferRuleVO.getLastModifiedTime()).thenReturn(1L);
        when(channelTransferRuleVO.getSecondApprovalLimit()).thenReturn(42L);
        when(channelTransferRuleVO.getApprovalRequired()).thenReturn("Approval Required");
        when(channelTransferRuleVO.getCntrlReturnLevel()).thenReturn("Cntrl Return Level");
        when(channelTransferRuleVO.getCntrlTransferLevel()).thenReturn("Cntrl Transfer Level");
        when(channelTransferRuleVO.getCntrlWithdrawLevel()).thenReturn("Cntrl Withdraw Level");
        when(channelTransferRuleVO.getDirectTransferAllowed()).thenReturn("Direct Transfer Allowed");
        when(channelTransferRuleVO.getDpAllowed()).thenReturn("Dp Allowed");
        when(channelTransferRuleVO.getFixedReturnCategory()).thenReturn("Fixed Return Category");
        when(channelTransferRuleVO.getFixedReturnLevel()).thenReturn("Fixed Return Level");
        when(channelTransferRuleVO.getFixedTransferCategory()).thenReturn("Fixed Transfer Category");
        when(channelTransferRuleVO.getFixedTransferLevel()).thenReturn("Fixed Transfer Level");
        when(channelTransferRuleVO.getFixedWithdrawCategory()).thenReturn("Fixed Withdraw Category");
        when(channelTransferRuleVO.getFixedWithdrawLevel()).thenReturn("Fixed Withdraw Level");
        when(channelTransferRuleVO.getFocAllowed()).thenReturn("Foc Allowed");
        when(channelTransferRuleVO.getFocTransferType()).thenReturn("Foc Transfer Type");
        when(channelTransferRuleVO.getFromCategory()).thenReturn("jane.doe@example.org");
        when(channelTransferRuleVO.getModifiedBy()).thenReturn("Jan 1, 2020 9:00am GMT+0100");
        when(channelTransferRuleVO.getParentAssocationAllowed()).thenReturn("Parent Assocation Allowed");
        when(channelTransferRuleVO.getRestrictedMsisdnAccess()).thenReturn("Restricted Msisdn Access");
        when(channelTransferRuleVO.getRestrictedRechargeAccess()).thenReturn("Restricted Recharge Access");
        when(channelTransferRuleVO.getReturnAllowed()).thenReturn("Return Allowed");
        when(channelTransferRuleVO.getReturnChnlBypassAllowed()).thenReturn("Return Chnl Bypass Allowed");
        when(channelTransferRuleVO.getToCategory()).thenReturn("To Category");
        when(channelTransferRuleVO.getToDomainCode()).thenReturn("To Domain Code");
        when(channelTransferRuleVO.getTransferAllowed()).thenReturn("Transfer Allowed");
        when(channelTransferRuleVO.getTransferChnlBypassAllowed()).thenReturn("Transfer Chnl Bypass Allowed");
        when(channelTransferRuleVO.getTransferRuleID()).thenReturn("Transfer Rule ID");
        when(channelTransferRuleVO.getTransferType()).thenReturn("Transfer Type");
        when(channelTransferRuleVO.getUncntrlReturnAllowed()).thenReturn("Uncntrl Return Allowed");
        when(channelTransferRuleVO.getUncntrlReturnLevel()).thenReturn("Uncntrl Return Level");
        when(channelTransferRuleVO.getUncntrlTransferAllowed()).thenReturn("Uncntrl Transfer Allowed");
        when(channelTransferRuleVO.getUncntrlTransferLevel()).thenReturn("Uncntrl Transfer Level");
        when(channelTransferRuleVO.getUncntrlWithdrawAllowed()).thenReturn("Uncntrl Withdraw Allowed");
        when(channelTransferRuleVO.getUncntrlWithdrawLevel()).thenReturn("Uncntrl Withdraw Level");
        when(channelTransferRuleVO.getWithdrawAllowed()).thenReturn("Withdraw Allowed");
        when(channelTransferRuleVO.getWithdrawChnlBypassAllowed()).thenReturn("Withdraw Chnl Bypass Allowed");
        when(channelTransferRuleVO.getProductArray()).thenReturn(new String[]{"Product Array"});
        when(channelTransferRuleVO.getProductVOList()).thenReturn(arrayList);
        when(channelTransferRuleVO.getModifiedOn())
                .thenReturn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        doNothing().when(channelTransferRuleVO).setApprovalRequired(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCreatedBy(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCreatedOn(Mockito.<Date>any());
        doNothing().when(channelTransferRuleVO).setDirectTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setDomainCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setDpAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFirstApprovalLimit(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setFixedReturnCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedTransferCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedWithdrawCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFocAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFocTransferType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromCategoryDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromDomainDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromSeqNo(Mockito.<Integer>any());
        doNothing().when(channelTransferRuleVO).setLastModifiedTime(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setModifiedBy(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setModifiedOn(Mockito.<Date>any());
        doNothing().when(channelTransferRuleVO).setNetworkCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setParentAssocationAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setPreviousStatus(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setProductArray(Mockito.<String[]>any());
        doNothing().when(channelTransferRuleVO).setProductVOList(Mockito.<ArrayList<Object>>any());
        doNothing().when(channelTransferRuleVO).setRestrictedMsisdnAccess(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setRestrictedRechargeAccess(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setReturnAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setReturnChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setRuleType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setSecondApprovalLimit(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setStatus(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setStatusDesc(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToCategoryDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToDomainCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToDomainDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToSeqNo(Mockito.<Integer>any());
        doNothing().when(channelTransferRuleVO).setTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferRuleID(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferRuleType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlReturnAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferAllowedTmp(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlWithdrawAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setWithdrawAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setWithdrawChnlBypassAllowed(Mockito.<String>any());
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        assertEquals(1,
                channelToChannelTransferRuleManagementServiceImpl.updateChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO)
                        .intValue());
        verify (com.btsl.util.JUnitConfig.getConnection(), atLeast(1)).prepareStatement(Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).executeUpdate();
        verify(preparedStatement).executeQuery();
        verify(preparedStatement).clearParameters();
        verify(preparedStatement, atLeast(1)).setLong(anyInt(), anyLong());
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        verify(preparedStatement, atLeast(1)).close();
        verify(resultSet).next();
        verify(resultSet).getTimestamp(Mockito.<String>any());
        verify(resultSet).close();
        verify(timestamp).getTime();
        verify(channelTransferRuleVO).getFirstApprovalLimit();
        verify(channelTransferRuleVO).getLastModifiedTime();
        verify(channelTransferRuleVO).getSecondApprovalLimit();
        verify(channelTransferRuleVO).getApprovalRequired();
        verify(channelTransferRuleVO).getCntrlReturnLevel();
        verify(channelTransferRuleVO).getCntrlTransferLevel();
        verify(channelTransferRuleVO).getCntrlWithdrawLevel();
        verify(channelTransferRuleVO).getDirectTransferAllowed();
        verify(channelTransferRuleVO).getDpAllowed();
        verify(channelTransferRuleVO).getFixedReturnCategory();
        verify(channelTransferRuleVO).getFixedReturnLevel();
        verify(channelTransferRuleVO).getFixedTransferCategory();
        verify(channelTransferRuleVO).getFixedTransferLevel();
        verify(channelTransferRuleVO).getFixedWithdrawCategory();
        verify(channelTransferRuleVO).getFixedWithdrawLevel();
        verify(channelTransferRuleVO).getFocAllowed();
        verify(channelTransferRuleVO).getFocTransferType();
        verify(channelTransferRuleVO).getFromCategory();
        verify(channelTransferRuleVO).getModifiedBy();
        verify(channelTransferRuleVO).getParentAssocationAllowed();
        verify(channelTransferRuleVO).getRestrictedMsisdnAccess();
        verify(channelTransferRuleVO).getRestrictedRechargeAccess();
        verify(channelTransferRuleVO).getReturnAllowed();
        verify(channelTransferRuleVO).getReturnChnlBypassAllowed();
        verify(channelTransferRuleVO).getToCategory();
        verify(channelTransferRuleVO).getToDomainCode();
        verify(channelTransferRuleVO).getTransferAllowed();
        verify(channelTransferRuleVO).getTransferChnlBypassAllowed();
        verify(channelTransferRuleVO, atLeast(1)).getTransferRuleID();
        verify(channelTransferRuleVO).getTransferType();
        verify(channelTransferRuleVO).getUncntrlReturnAllowed();
        verify(channelTransferRuleVO).getUncntrlReturnLevel();
        verify(channelTransferRuleVO).getUncntrlTransferAllowed();
        verify(channelTransferRuleVO).getUncntrlTransferLevel();
        verify(channelTransferRuleVO).getUncntrlWithdrawAllowed();
        verify(channelTransferRuleVO).getUncntrlWithdrawLevel();
        verify(channelTransferRuleVO).getWithdrawAllowed();
        verify(channelTransferRuleVO).getWithdrawChnlBypassAllowed();
        verify(channelTransferRuleVO, atLeast(1)).getProductArray();
        verify(channelTransferRuleVO, atLeast(1)).getProductVOList();
        verify(channelTransferRuleVO).getModifiedOn();
        verify(channelTransferRuleVO).setApprovalRequired(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCreatedBy(Mockito.<String>any());
        verify(channelTransferRuleVO).setCreatedOn(Mockito.<Date>any());
        verify(channelTransferRuleVO).setDirectTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setDomainCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setDpAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setFirstApprovalLimit(Mockito.<Long>any());
        verify(channelTransferRuleVO).setFixedReturnCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedTransferCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedWithdrawCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFocAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setFocTransferType(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromCategoryDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromDomainDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromSeqNo(Mockito.<Integer>any());
        verify(channelTransferRuleVO).setLastModifiedTime(Mockito.<Long>any());
        verify(channelTransferRuleVO).setModifiedBy(Mockito.<String>any());
        verify(channelTransferRuleVO).setModifiedOn(Mockito.<Date>any());
        verify(channelTransferRuleVO).setNetworkCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setParentAssocationAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setPreviousStatus(Mockito.<String>any());
        verify(channelTransferRuleVO).setProductArray(Mockito.<String[]>any());
        verify(channelTransferRuleVO).setProductVOList(Mockito.<ArrayList<Object>>any());
        verify(channelTransferRuleVO).setRestrictedMsisdnAccess(Mockito.<String>any());
        verify(channelTransferRuleVO).setRestrictedRechargeAccess(Mockito.<String>any());
        verify(channelTransferRuleVO).setReturnAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setReturnChnlBypassAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setRuleType(Mockito.<String>any());
        verify(channelTransferRuleVO).setSecondApprovalLimit(Mockito.<Long>any());
        verify(channelTransferRuleVO).setStatus(Mockito.<String>any());
        verify(channelTransferRuleVO).setStatusDesc(Mockito.<String>any());
        verify(channelTransferRuleVO).setToCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setToCategoryDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setToDomainCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setToDomainDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setToSeqNo(Mockito.<Integer>any());
        verify(channelTransferRuleVO).setTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferChnlBypassAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferRuleID(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferRuleType(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferType(Mockito.<String>any());
        verify(channelTransferRuleVO).setType(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlReturnAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferAllowedTmp(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlWithdrawAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setWithdrawAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setWithdrawChnlBypassAllowed(Mockito.<String>any());
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#updateChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
    public void testUpdateChannelTransferRule7() throws Exception {
        Timestamp timestamp = mock(Timestamp.class);
        when(timestamp.getTime()).thenReturn(1L);
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getTimestamp(Mockito.<String>any())).thenReturn(timestamp);
        when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        doNothing().when(preparedStatement).clearParameters();
        when(preparedStatement.executeUpdate()).thenReturn(1);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setLong(anyInt(), anyLong());
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);
        ChannelTransferRuleVO channelTransferRuleVO = mock(ChannelTransferRuleVO.class);
        when(channelTransferRuleVO.getFirstApprovalLimit()).thenReturn(42L);
        when(channelTransferRuleVO.getLastModifiedTime()).thenReturn(1L);
        when(channelTransferRuleVO.getSecondApprovalLimit()).thenReturn(42L);
        when(channelTransferRuleVO.getApprovalRequired()).thenReturn("Approval Required");
        when(channelTransferRuleVO.getCntrlReturnLevel()).thenReturn("Cntrl Return Level");
        when(channelTransferRuleVO.getCntrlTransferLevel()).thenReturn("Cntrl Transfer Level");
        when(channelTransferRuleVO.getCntrlWithdrawLevel()).thenReturn("Cntrl Withdraw Level");
        when(channelTransferRuleVO.getDirectTransferAllowed()).thenReturn("Direct Transfer Allowed");
        when(channelTransferRuleVO.getDpAllowed()).thenReturn("Dp Allowed");
        when(channelTransferRuleVO.getFixedReturnCategory()).thenReturn("Fixed Return Category");
        when(channelTransferRuleVO.getFixedReturnLevel()).thenReturn("Fixed Return Level");
        when(channelTransferRuleVO.getFixedTransferCategory()).thenReturn("Fixed Transfer Category");
        when(channelTransferRuleVO.getFixedTransferLevel()).thenReturn("Fixed Transfer Level");
        when(channelTransferRuleVO.getFixedWithdrawCategory()).thenReturn("Fixed Withdraw Category");
        when(channelTransferRuleVO.getFixedWithdrawLevel()).thenReturn("Fixed Withdraw Level");
        when(channelTransferRuleVO.getFocAllowed()).thenReturn("Foc Allowed");
        when(channelTransferRuleVO.getFocTransferType()).thenReturn("Foc Transfer Type");
        when(channelTransferRuleVO.getFromCategory()).thenReturn("jane.doe@example.org");
        when(channelTransferRuleVO.getModifiedBy()).thenReturn("Jan 1, 2020 9:00am GMT+0100");
        when(channelTransferRuleVO.getParentAssocationAllowed()).thenReturn("Parent Assocation Allowed");
        when(channelTransferRuleVO.getRestrictedMsisdnAccess()).thenReturn("Restricted Msisdn Access");
        when(channelTransferRuleVO.getRestrictedRechargeAccess()).thenReturn("Restricted Recharge Access");
        when(channelTransferRuleVO.getReturnAllowed()).thenReturn("Return Allowed");
        when(channelTransferRuleVO.getReturnChnlBypassAllowed()).thenReturn("Return Chnl Bypass Allowed");
        when(channelTransferRuleVO.getToCategory()).thenReturn("To Category");
        when(channelTransferRuleVO.getToDomainCode()).thenReturn("To Domain Code");
        when(channelTransferRuleVO.getTransferAllowed()).thenReturn("Transfer Allowed");
        when(channelTransferRuleVO.getTransferChnlBypassAllowed()).thenReturn("Transfer Chnl Bypass Allowed");
        when(channelTransferRuleVO.getTransferRuleID()).thenReturn("Transfer Rule ID");
        when(channelTransferRuleVO.getTransferType()).thenReturn("Transfer Type");
        when(channelTransferRuleVO.getUncntrlReturnAllowed()).thenReturn("Uncntrl Return Allowed");
        when(channelTransferRuleVO.getUncntrlReturnLevel()).thenReturn("Uncntrl Return Level");
        when(channelTransferRuleVO.getUncntrlTransferAllowed()).thenReturn("Uncntrl Transfer Allowed");
        when(channelTransferRuleVO.getUncntrlTransferLevel()).thenReturn("Uncntrl Transfer Level");
        when(channelTransferRuleVO.getUncntrlWithdrawAllowed()).thenReturn("Uncntrl Withdraw Allowed");
        when(channelTransferRuleVO.getUncntrlWithdrawLevel()).thenReturn("Uncntrl Withdraw Level");
        when(channelTransferRuleVO.getWithdrawAllowed()).thenReturn("Withdraw Allowed");
        when(channelTransferRuleVO.getWithdrawChnlBypassAllowed()).thenReturn("Withdraw Chnl Bypass Allowed");
        when(channelTransferRuleVO.getProductArray()).thenReturn(new String[]{"Product Array"});
        when(channelTransferRuleVO.getProductVOList()).thenReturn(new ArrayList());
        when(channelTransferRuleVO.getModifiedOn()).thenReturn(null);
        doNothing().when(channelTransferRuleVO).setApprovalRequired(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCreatedBy(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCreatedOn(Mockito.<Date>any());
        doNothing().when(channelTransferRuleVO).setDirectTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setDomainCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setDpAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFirstApprovalLimit(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setFixedReturnCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedTransferCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedWithdrawCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFocAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFocTransferType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromCategoryDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromDomainDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromSeqNo(Mockito.<Integer>any());
        doNothing().when(channelTransferRuleVO).setLastModifiedTime(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setModifiedBy(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setModifiedOn(Mockito.<Date>any());
        doNothing().when(channelTransferRuleVO).setNetworkCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setParentAssocationAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setPreviousStatus(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setProductArray(Mockito.<String[]>any());
        doNothing().when(channelTransferRuleVO).setProductVOList(Mockito.<ArrayList<Object>>any());
        doNothing().when(channelTransferRuleVO).setRestrictedMsisdnAccess(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setRestrictedRechargeAccess(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setReturnAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setReturnChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setRuleType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setSecondApprovalLimit(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setStatus(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setStatusDesc(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToCategoryDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToDomainCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToDomainDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToSeqNo(Mockito.<Integer>any());
        doNothing().when(channelTransferRuleVO).setTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferRuleID(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferRuleType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlReturnAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferAllowedTmp(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlWithdrawAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setWithdrawAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setWithdrawChnlBypassAllowed(Mockito.<String>any());
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        assertEquals(1,
                channelToChannelTransferRuleManagementServiceImpl.updateChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO)
                        .intValue());
        verify (com.btsl.util.JUnitConfig.getConnection(), atLeast(1)).prepareStatement(Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).executeUpdate();
        verify(preparedStatement).executeQuery();
        verify(preparedStatement).clearParameters();
        verify(preparedStatement, atLeast(1)).setLong(anyInt(), anyLong());
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        verify(preparedStatement, atLeast(1)).close();
        verify(resultSet).next();
        verify(resultSet).getTimestamp(Mockito.<String>any());
        verify(resultSet).close();
        verify(timestamp).getTime();
        verify(channelTransferRuleVO).getFirstApprovalLimit();
        verify(channelTransferRuleVO).getLastModifiedTime();
        verify(channelTransferRuleVO).getSecondApprovalLimit();
        verify(channelTransferRuleVO).getApprovalRequired();
        verify(channelTransferRuleVO).getCntrlReturnLevel();
        verify(channelTransferRuleVO).getCntrlTransferLevel();
        verify(channelTransferRuleVO).getCntrlWithdrawLevel();
        verify(channelTransferRuleVO).getDirectTransferAllowed();
        verify(channelTransferRuleVO).getDpAllowed();
        verify(channelTransferRuleVO).getFixedReturnCategory();
        verify(channelTransferRuleVO).getFixedReturnLevel();
        verify(channelTransferRuleVO).getFixedTransferCategory();
        verify(channelTransferRuleVO).getFixedTransferLevel();
        verify(channelTransferRuleVO).getFixedWithdrawCategory();
        verify(channelTransferRuleVO).getFixedWithdrawLevel();
        verify(channelTransferRuleVO).getFocAllowed();
        verify(channelTransferRuleVO).getFocTransferType();
        verify(channelTransferRuleVO).getFromCategory();
        verify(channelTransferRuleVO).getModifiedBy();
        verify(channelTransferRuleVO).getParentAssocationAllowed();
        verify(channelTransferRuleVO).getRestrictedMsisdnAccess();
        verify(channelTransferRuleVO).getRestrictedRechargeAccess();
        verify(channelTransferRuleVO).getReturnAllowed();
        verify(channelTransferRuleVO).getReturnChnlBypassAllowed();
        verify(channelTransferRuleVO).getToCategory();
        verify(channelTransferRuleVO).getToDomainCode();
        verify(channelTransferRuleVO).getTransferAllowed();
        verify(channelTransferRuleVO).getTransferChnlBypassAllowed();
        verify(channelTransferRuleVO, atLeast(1)).getTransferRuleID();
        verify(channelTransferRuleVO).getTransferType();
        verify(channelTransferRuleVO).getUncntrlReturnAllowed();
        verify(channelTransferRuleVO).getUncntrlReturnLevel();
        verify(channelTransferRuleVO).getUncntrlTransferAllowed();
        verify(channelTransferRuleVO).getUncntrlTransferLevel();
        verify(channelTransferRuleVO).getUncntrlWithdrawAllowed();
        verify(channelTransferRuleVO).getUncntrlWithdrawLevel();
        verify(channelTransferRuleVO).getWithdrawAllowed();
        verify(channelTransferRuleVO).getWithdrawChnlBypassAllowed();
        verify(channelTransferRuleVO, atLeast(1)).getProductArray();
        verify(channelTransferRuleVO, atLeast(1)).getProductVOList();
        verify(channelTransferRuleVO).getModifiedOn();
        verify(channelTransferRuleVO).setApprovalRequired(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCreatedBy(Mockito.<String>any());
        verify(channelTransferRuleVO).setCreatedOn(Mockito.<Date>any());
        verify(channelTransferRuleVO).setDirectTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setDomainCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setDpAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setFirstApprovalLimit(Mockito.<Long>any());
        verify(channelTransferRuleVO).setFixedReturnCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedTransferCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedWithdrawCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFocAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setFocTransferType(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromCategoryDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromDomainDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromSeqNo(Mockito.<Integer>any());
        verify(channelTransferRuleVO).setLastModifiedTime(Mockito.<Long>any());
        verify(channelTransferRuleVO).setModifiedBy(Mockito.<String>any());
        verify(channelTransferRuleVO).setModifiedOn(Mockito.<Date>any());
        verify(channelTransferRuleVO).setNetworkCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setParentAssocationAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setPreviousStatus(Mockito.<String>any());
        verify(channelTransferRuleVO).setProductArray(Mockito.<String[]>any());
        verify(channelTransferRuleVO).setProductVOList(Mockito.<ArrayList<Object>>any());
        verify(channelTransferRuleVO).setRestrictedMsisdnAccess(Mockito.<String>any());
        verify(channelTransferRuleVO).setRestrictedRechargeAccess(Mockito.<String>any());
        verify(channelTransferRuleVO).setReturnAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setReturnChnlBypassAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setRuleType(Mockito.<String>any());
        verify(channelTransferRuleVO).setSecondApprovalLimit(Mockito.<Long>any());
        verify(channelTransferRuleVO).setStatus(Mockito.<String>any());
        verify(channelTransferRuleVO).setStatusDesc(Mockito.<String>any());
        verify(channelTransferRuleVO).setToCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setToCategoryDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setToDomainCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setToDomainDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setToSeqNo(Mockito.<Integer>any());
        verify(channelTransferRuleVO).setTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferChnlBypassAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferRuleID(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferRuleType(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferType(Mockito.<String>any());
        verify(channelTransferRuleVO).setType(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlReturnAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferAllowedTmp(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlWithdrawAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setWithdrawAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setWithdrawChnlBypassAllowed(Mockito.<String>any());
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#deleteChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
    public void testDeleteChannelTransferRule() throws Exception {
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);

        ChannelTransferRuleVO channelTransferRuleVO = new ChannelTransferRuleVO();
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        thrown.expect(BTSLBaseException.class);
        channelToChannelTransferRuleManagementServiceImpl.deleteChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO);
        verify(con).prepareStatement(Mockito.<String>any());
        verify(preparedStatement).executeQuery();
        verify(preparedStatement).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement).close();
        verify(resultSet).next();
        verify(resultSet).close();
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#deleteChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
    public void testDeleteChannelTransferRule2() throws Exception {
        Timestamp timestamp = mock(Timestamp.class);
        when(timestamp.getTime()).thenReturn(10L);
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getInt(Mockito.<String>any())).thenReturn(1);
        when(resultSet.getString(Mockito.<String>any())).thenReturn("String");
        when(resultSet.getTimestamp(Mockito.<String>any())).thenReturn(timestamp);
        when(resultSet.getLong(Mockito.<String>any())).thenReturn(1L);
        when(resultSet.next()).thenReturn(false).thenReturn(true).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);

        ChannelTransferRuleVO channelTransferRuleVO = new ChannelTransferRuleVO();
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        assertEquals(0,
                channelToChannelTransferRuleManagementServiceImpl.deleteChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO)
                        .intValue());
        verify (com.btsl.util.JUnitConfig.getConnection(), atLeast(1)).prepareStatement(Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).executeQuery();
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).close();
        verify(resultSet, atLeast(1)).next();
        verify(resultSet, atLeast(1)).getInt(Mockito.<String>any());
        verify(resultSet, atLeast(1)).getString(Mockito.<String>any());
        verify(resultSet).getTimestamp(Mockito.<String>any());
        verify(resultSet, atLeast(1)).getLong(Mockito.<String>any());
        verify(resultSet, atLeast(1)).close();
        verify(timestamp).getTime();
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#deleteChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
    public void testDeleteChannelTransferRule3() throws Exception {
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.next()).thenReturn(false).thenReturn(false).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);

        ChannelTransferRuleVO channelTransferRuleVO = new ChannelTransferRuleVO();
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        assertEquals(0,
                channelToChannelTransferRuleManagementServiceImpl.deleteChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO)
                        .intValue());
        verify (com.btsl.util.JUnitConfig.getConnection(), atLeast(1)).prepareStatement(Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).executeQuery();
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).close();
        verify(resultSet, atLeast(1)).next();
        verify(resultSet, atLeast(1)).close();
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#addChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
    public void testAddChannelTransferRule() throws Exception {
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        doNothing().when(preparedStatement).clearParameters();
        when(preparedStatement.executeUpdate()).thenReturn(1);
        doNothing().when(preparedStatement).setLong(anyInt(), anyLong());
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);

        ChannelTransferRuleVO channelTransferRuleVO = new ChannelTransferRuleVO();
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        assertEquals(1,
                channelToChannelTransferRuleManagementServiceImpl.addChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO));
        verify (com.btsl.util.JUnitConfig.getConnection(), atLeast(1)).prepareStatement(Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).executeUpdate();
        verify(preparedStatement).clearParameters();
        verify(preparedStatement, atLeast(1)).setLong(anyInt(), anyLong());
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        verify(preparedStatement, atLeast(1)).close();
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#addChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
    public void testAddChannelTransferRule2() throws Exception {
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        when(preparedStatement.executeUpdate()).thenReturn(0);
        doNothing().when(preparedStatement).setLong(anyInt(), anyLong());
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);

        ChannelTransferRuleVO channelTransferRuleVO = new ChannelTransferRuleVO();
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        assertEquals(0,
                channelToChannelTransferRuleManagementServiceImpl.addChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO));
        verify(con).prepareStatement(Mockito.<String>any());
        verify(preparedStatement).executeUpdate();
        verify(preparedStatement, atLeast(1)).setLong(anyInt(), anyLong());
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        verify(preparedStatement).close();
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#addChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
    public void testAddChannelTransferRule3() throws Exception {
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        when(preparedStatement.executeUpdate()).thenReturn(1);
        doNothing().when(preparedStatement).setLong(anyInt(), anyLong());
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);
        ChannelTransferRuleVO channelTransferRuleVO = mock(ChannelTransferRuleVO.class);
        when(channelTransferRuleVO.getFirstApprovalLimit()).thenReturn(42L);
        when(channelTransferRuleVO.getSecondApprovalLimit()).thenReturn(42L);
        when(channelTransferRuleVO.getApprovalRequired()).thenReturn("Approval Required");
        when(channelTransferRuleVO.getCntrlReturnLevel()).thenReturn("Cntrl Return Level");
        when(channelTransferRuleVO.getCntrlTransferLevel()).thenReturn("Cntrl Transfer Level");
        when(channelTransferRuleVO.getCntrlWithdrawLevel()).thenReturn("Cntrl Withdraw Level");
        when(channelTransferRuleVO.getCreatedBy()).thenReturn("Jan 1, 2020 8:00am GMT+0100");
        when(channelTransferRuleVO.getDirectTransferAllowed()).thenReturn("Direct Transfer Allowed");
        when(channelTransferRuleVO.getDomainCode()).thenReturn("Domain Code");
        when(channelTransferRuleVO.getDpAllowed()).thenReturn("Dp Allowed");
        when(channelTransferRuleVO.getFixedReturnCategory()).thenReturn("Fixed Return Category");
        when(channelTransferRuleVO.getFixedReturnLevel()).thenReturn("Fixed Return Level");
        when(channelTransferRuleVO.getFixedTransferCategory()).thenReturn("Fixed Transfer Category");
        when(channelTransferRuleVO.getFixedTransferLevel()).thenReturn("Fixed Transfer Level");
        when(channelTransferRuleVO.getFixedWithdrawCategory()).thenReturn("Fixed Withdraw Category");
        when(channelTransferRuleVO.getFixedWithdrawLevel()).thenReturn("Fixed Withdraw Level");
        when(channelTransferRuleVO.getFocAllowed()).thenReturn("Foc Allowed");
        when(channelTransferRuleVO.getFocTransferType()).thenReturn("Foc Transfer Type");
        when(channelTransferRuleVO.getFromCategory()).thenReturn("jane.doe@example.org");
        when(channelTransferRuleVO.getModifiedBy()).thenReturn("Jan 1, 2020 9:00am GMT+0100");
        when(channelTransferRuleVO.getNetworkCode()).thenReturn("Network Code");
        when(channelTransferRuleVO.getParentAssocationAllowed()).thenReturn("Parent Assocation Allowed");
        when(channelTransferRuleVO.getRestrictedMsisdnAccess()).thenReturn("Restricted Msisdn Access");
        when(channelTransferRuleVO.getRestrictedRechargeAccess()).thenReturn("Restricted Recharge Access");
        when(channelTransferRuleVO.getReturnAllowed()).thenReturn("Return Allowed");
        when(channelTransferRuleVO.getReturnChnlBypassAllowed()).thenReturn("Return Chnl Bypass Allowed");
        when(channelTransferRuleVO.getToCategory()).thenReturn("To Category");
        when(channelTransferRuleVO.getToDomainCode()).thenReturn("To Domain Code");
        when(channelTransferRuleVO.getTransferAllowed()).thenReturn("Transfer Allowed");
        when(channelTransferRuleVO.getTransferChnlBypassAllowed()).thenReturn("Transfer Chnl Bypass Allowed");
        when(channelTransferRuleVO.getTransferRuleID()).thenReturn("Transfer Rule ID");
        when(channelTransferRuleVO.getTransferType()).thenReturn("Transfer Type");
        when(channelTransferRuleVO.getType()).thenReturn("Type");
        when(channelTransferRuleVO.getUncntrlReturnAllowed()).thenReturn("Uncntrl Return Allowed");
        when(channelTransferRuleVO.getUncntrlReturnLevel()).thenReturn("Uncntrl Return Level");
        when(channelTransferRuleVO.getUncntrlTransferAllowed()).thenReturn("Uncntrl Transfer Allowed");
        when(channelTransferRuleVO.getUncntrlTransferLevel()).thenReturn("Uncntrl Transfer Level");
        when(channelTransferRuleVO.getUncntrlWithdrawAllowed()).thenReturn("Uncntrl Withdraw Allowed");
        when(channelTransferRuleVO.getUncntrlWithdrawLevel()).thenReturn("Uncntrl Withdraw Level");
        when(channelTransferRuleVO.getWithdrawAllowed()).thenReturn("Withdraw Allowed");
        when(channelTransferRuleVO.getWithdrawChnlBypassAllowed()).thenReturn("Withdraw Chnl Bypass Allowed");
        when(channelTransferRuleVO.getProductArray()).thenReturn(new String[]{});
        when(channelTransferRuleVO.getCreatedOn())
                .thenReturn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        when(channelTransferRuleVO.getModifiedOn())
                .thenReturn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        doNothing().when(channelTransferRuleVO).setApprovalRequired(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCreatedBy(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCreatedOn(Mockito.<Date>any());
        doNothing().when(channelTransferRuleVO).setDirectTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setDomainCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setDpAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFirstApprovalLimit(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setFixedReturnCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedTransferCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedWithdrawCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFocAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFocTransferType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromCategoryDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromDomainDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromSeqNo(Mockito.<Integer>any());
        doNothing().when(channelTransferRuleVO).setLastModifiedTime(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setModifiedBy(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setModifiedOn(Mockito.<Date>any());
        doNothing().when(channelTransferRuleVO).setNetworkCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setParentAssocationAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setPreviousStatus(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setProductArray(Mockito.<String[]>any());
        doNothing().when(channelTransferRuleVO).setProductVOList(Mockito.<ArrayList<Object>>any());
        doNothing().when(channelTransferRuleVO).setRestrictedMsisdnAccess(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setRestrictedRechargeAccess(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setReturnAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setReturnChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setRuleType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setSecondApprovalLimit(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setStatus(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setStatusDesc(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToCategoryDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToDomainCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToDomainDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToSeqNo(Mockito.<Integer>any());
        doNothing().when(channelTransferRuleVO).setTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferRuleID(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferRuleType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlReturnAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferAllowedTmp(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlWithdrawAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setWithdrawAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setWithdrawChnlBypassAllowed(Mockito.<String>any());
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        assertEquals(1,
                channelToChannelTransferRuleManagementServiceImpl.addChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO));
        verify(con).prepareStatement(Mockito.<String>any());
        verify(preparedStatement).executeUpdate();
        verify(preparedStatement, atLeast(1)).setLong(anyInt(), anyLong());
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        verify(preparedStatement).close();
        verify(channelTransferRuleVO).getFirstApprovalLimit();
        verify(channelTransferRuleVO).getSecondApprovalLimit();
        verify(channelTransferRuleVO).getApprovalRequired();
        verify(channelTransferRuleVO).getCntrlReturnLevel();
        verify(channelTransferRuleVO).getCntrlTransferLevel();
        verify(channelTransferRuleVO).getCntrlWithdrawLevel();
        verify(channelTransferRuleVO).getCreatedBy();
        verify(channelTransferRuleVO).getDirectTransferAllowed();
        verify(channelTransferRuleVO).getDomainCode();
        verify(channelTransferRuleVO).getDpAllowed();
        verify(channelTransferRuleVO).getFixedReturnCategory();
        verify(channelTransferRuleVO).getFixedReturnLevel();
        verify(channelTransferRuleVO).getFixedTransferCategory();
        verify(channelTransferRuleVO).getFixedTransferLevel();
        verify(channelTransferRuleVO).getFixedWithdrawCategory();
        verify(channelTransferRuleVO).getFixedWithdrawLevel();
        verify(channelTransferRuleVO).getFocAllowed();
        verify(channelTransferRuleVO).getFocTransferType();
        verify(channelTransferRuleVO).getFromCategory();
        verify(channelTransferRuleVO).getModifiedBy();
        verify(channelTransferRuleVO).getNetworkCode();
        verify(channelTransferRuleVO).getParentAssocationAllowed();
        verify(channelTransferRuleVO).getRestrictedMsisdnAccess();
        verify(channelTransferRuleVO).getRestrictedRechargeAccess();
        verify(channelTransferRuleVO).getReturnAllowed();
        verify(channelTransferRuleVO).getReturnChnlBypassAllowed();
        verify(channelTransferRuleVO).getToCategory();
        verify(channelTransferRuleVO).getToDomainCode();
        verify(channelTransferRuleVO).getTransferAllowed();
        verify(channelTransferRuleVO).getTransferChnlBypassAllowed();
        verify(channelTransferRuleVO).getTransferRuleID();
        verify(channelTransferRuleVO).getTransferType();
        verify(channelTransferRuleVO).getType();
        verify(channelTransferRuleVO).getUncntrlReturnAllowed();
        verify(channelTransferRuleVO).getUncntrlReturnLevel();
        verify(channelTransferRuleVO).getUncntrlTransferAllowed();
        verify(channelTransferRuleVO).getUncntrlTransferLevel();
        verify(channelTransferRuleVO).getUncntrlWithdrawAllowed();
        verify(channelTransferRuleVO).getUncntrlWithdrawLevel();
        verify(channelTransferRuleVO).getWithdrawAllowed();
        verify(channelTransferRuleVO).getWithdrawChnlBypassAllowed();
        verify(channelTransferRuleVO, atLeast(1)).getProductArray();
        verify(channelTransferRuleVO).getCreatedOn();
        verify(channelTransferRuleVO).getModifiedOn();
        verify(channelTransferRuleVO).setApprovalRequired(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCreatedBy(Mockito.<String>any());
        verify(channelTransferRuleVO).setCreatedOn(Mockito.<Date>any());
        verify(channelTransferRuleVO).setDirectTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setDomainCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setDpAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setFirstApprovalLimit(Mockito.<Long>any());
        verify(channelTransferRuleVO).setFixedReturnCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedTransferCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedWithdrawCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFocAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setFocTransferType(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromCategoryDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromDomainDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromSeqNo(Mockito.<Integer>any());
        verify(channelTransferRuleVO).setLastModifiedTime(Mockito.<Long>any());
        verify(channelTransferRuleVO).setModifiedBy(Mockito.<String>any());
        verify(channelTransferRuleVO).setModifiedOn(Mockito.<Date>any());
        verify(channelTransferRuleVO).setNetworkCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setParentAssocationAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setPreviousStatus(Mockito.<String>any());
        verify(channelTransferRuleVO).setProductArray(Mockito.<String[]>any());
        verify(channelTransferRuleVO).setProductVOList(Mockito.<ArrayList<Object>>any());
        verify(channelTransferRuleVO).setRestrictedMsisdnAccess(Mockito.<String>any());
        verify(channelTransferRuleVO).setRestrictedRechargeAccess(Mockito.<String>any());
        verify(channelTransferRuleVO).setReturnAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setReturnChnlBypassAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setRuleType(Mockito.<String>any());
        verify(channelTransferRuleVO).setSecondApprovalLimit(Mockito.<Long>any());
        verify(channelTransferRuleVO).setStatus(Mockito.<String>any());
        verify(channelTransferRuleVO).setStatusDesc(Mockito.<String>any());
        verify(channelTransferRuleVO).setToCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setToCategoryDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setToDomainCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setToDomainDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setToSeqNo(Mockito.<Integer>any());
        verify(channelTransferRuleVO).setTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferChnlBypassAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferRuleID(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferRuleType(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferType(Mockito.<String>any());
        verify(channelTransferRuleVO).setType(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlReturnAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferAllowedTmp(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlWithdrawAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setWithdrawAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setWithdrawChnlBypassAllowed(Mockito.<String>any());
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#addChannelTransferRule(Connection, ChannelTransferRuleVO)}
     */
    @Test
    public void testAddChannelTransferRule4() throws Exception {
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        doNothing().when(preparedStatement).clearParameters();
        when(preparedStatement.executeUpdate()).thenReturn(1);
        doNothing().when(preparedStatement).setLong(anyInt(), anyLong());
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);
        ChannelTransferRuleVO channelTransferRuleVO = mock(ChannelTransferRuleVO.class);
        when(channelTransferRuleVO.getFirstApprovalLimit()).thenReturn(42L);
        when(channelTransferRuleVO.getSecondApprovalLimit()).thenReturn(42L);
        when(channelTransferRuleVO.getApprovalRequired()).thenReturn("Approval Required");
        when(channelTransferRuleVO.getCntrlReturnLevel()).thenReturn("Cntrl Return Level");
        when(channelTransferRuleVO.getCntrlTransferLevel()).thenReturn("Cntrl Transfer Level");
        when(channelTransferRuleVO.getCntrlWithdrawLevel()).thenReturn("Cntrl Withdraw Level");
        when(channelTransferRuleVO.getCreatedBy()).thenReturn("Jan 1, 2020 8:00am GMT+0100");
        when(channelTransferRuleVO.getDirectTransferAllowed()).thenReturn("Direct Transfer Allowed");
        when(channelTransferRuleVO.getDomainCode()).thenReturn("Domain Code");
        when(channelTransferRuleVO.getDpAllowed()).thenReturn("Dp Allowed");
        when(channelTransferRuleVO.getFixedReturnCategory()).thenReturn("Fixed Return Category");
        when(channelTransferRuleVO.getFixedReturnLevel()).thenReturn("Fixed Return Level");
        when(channelTransferRuleVO.getFixedTransferCategory()).thenReturn("Fixed Transfer Category");
        when(channelTransferRuleVO.getFixedTransferLevel()).thenReturn("Fixed Transfer Level");
        when(channelTransferRuleVO.getFixedWithdrawCategory()).thenReturn("Fixed Withdraw Category");
        when(channelTransferRuleVO.getFixedWithdrawLevel()).thenReturn("Fixed Withdraw Level");
        when(channelTransferRuleVO.getFocAllowed()).thenReturn("Foc Allowed");
        when(channelTransferRuleVO.getFocTransferType()).thenReturn("Foc Transfer Type");
        when(channelTransferRuleVO.getFromCategory()).thenReturn("jane.doe@example.org");
        when(channelTransferRuleVO.getModifiedBy()).thenReturn("Jan 1, 2020 9:00am GMT+0100");
        when(channelTransferRuleVO.getNetworkCode()).thenReturn("Network Code");
        when(channelTransferRuleVO.getParentAssocationAllowed()).thenReturn("Parent Assocation Allowed");
        when(channelTransferRuleVO.getRestrictedMsisdnAccess()).thenReturn("Restricted Msisdn Access");
        when(channelTransferRuleVO.getRestrictedRechargeAccess()).thenReturn("Restricted Recharge Access");
        when(channelTransferRuleVO.getReturnAllowed()).thenReturn("Return Allowed");
        when(channelTransferRuleVO.getReturnChnlBypassAllowed()).thenReturn("Return Chnl Bypass Allowed");
        when(channelTransferRuleVO.getToCategory()).thenReturn("To Category");
        when(channelTransferRuleVO.getToDomainCode()).thenReturn("To Domain Code");
        when(channelTransferRuleVO.getTransferAllowed()).thenReturn("Transfer Allowed");
        when(channelTransferRuleVO.getTransferChnlBypassAllowed()).thenReturn("Transfer Chnl Bypass Allowed");
        when(channelTransferRuleVO.getTransferRuleID()).thenReturn("Transfer Rule ID");
        when(channelTransferRuleVO.getTransferType()).thenReturn("Transfer Type");
        when(channelTransferRuleVO.getType()).thenReturn("Type");
        when(channelTransferRuleVO.getUncntrlReturnAllowed()).thenReturn("Uncntrl Return Allowed");
        when(channelTransferRuleVO.getUncntrlReturnLevel()).thenReturn("Uncntrl Return Level");
        when(channelTransferRuleVO.getUncntrlTransferAllowed()).thenReturn("Uncntrl Transfer Allowed");
        when(channelTransferRuleVO.getUncntrlTransferLevel()).thenReturn("Uncntrl Transfer Level");
        when(channelTransferRuleVO.getUncntrlWithdrawAllowed()).thenReturn("Uncntrl Withdraw Allowed");
        when(channelTransferRuleVO.getUncntrlWithdrawLevel()).thenReturn("Uncntrl Withdraw Level");
        when(channelTransferRuleVO.getWithdrawAllowed()).thenReturn("Withdraw Allowed");
        when(channelTransferRuleVO.getWithdrawChnlBypassAllowed()).thenReturn("Withdraw Chnl Bypass Allowed");
        when(channelTransferRuleVO.getProductArray()).thenReturn(new String[]{"Product Array"});
        when(channelTransferRuleVO.getCreatedOn()).thenReturn(null);
        when(channelTransferRuleVO.getModifiedOn())
                .thenReturn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        doNothing().when(channelTransferRuleVO).setApprovalRequired(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCreatedBy(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setCreatedOn(Mockito.<Date>any());
        doNothing().when(channelTransferRuleVO).setDirectTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setDomainCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setDpAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFirstApprovalLimit(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setFixedReturnCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedTransferCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedWithdrawCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFixedWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFocAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFocTransferType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromCategoryDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromDomainDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setFromSeqNo(Mockito.<Integer>any());
        doNothing().when(channelTransferRuleVO).setLastModifiedTime(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setModifiedBy(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setModifiedOn(Mockito.<Date>any());
        doNothing().when(channelTransferRuleVO).setNetworkCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setParentAssocationAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setPreviousStatus(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setProductArray(Mockito.<String[]>any());
        doNothing().when(channelTransferRuleVO).setProductVOList(Mockito.<ArrayList<Object>>any());
        doNothing().when(channelTransferRuleVO).setRestrictedMsisdnAccess(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setRestrictedRechargeAccess(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setReturnAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setReturnChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setRuleType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setSecondApprovalLimit(Mockito.<Long>any());
        doNothing().when(channelTransferRuleVO).setStatus(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setStatusDesc(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToCategory(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToCategoryDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToDomainCode(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToDomainDes(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setToSeqNo(Mockito.<Integer>any());
        doNothing().when(channelTransferRuleVO).setTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferRuleID(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferRuleType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setTransferType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setType(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlReturnAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlReturnLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferAllowedTmp(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlTransferLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlWithdrawAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setUncntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setWithdrawAllowed(Mockito.<String>any());
        doNothing().when(channelTransferRuleVO).setWithdrawChnlBypassAllowed(Mockito.<String>any());
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        assertEquals(1,
                channelToChannelTransferRuleManagementServiceImpl.addChannelTransferRule (com.btsl.util.JUnitConfig.getConnection(), channelTransferRuleVO));
        verify (com.btsl.util.JUnitConfig.getConnection(), atLeast(1)).prepareStatement(Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).executeUpdate();
        verify(preparedStatement).clearParameters();
        verify(preparedStatement, atLeast(1)).setLong(anyInt(), anyLong());
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement, atLeast(1)).setTimestamp(anyInt(), Mockito.<Timestamp>any());
        verify(preparedStatement, atLeast(1)).close();
        verify(channelTransferRuleVO).getFirstApprovalLimit();
        verify(channelTransferRuleVO).getSecondApprovalLimit();
        verify(channelTransferRuleVO).getApprovalRequired();
        verify(channelTransferRuleVO).getCntrlReturnLevel();
        verify(channelTransferRuleVO).getCntrlTransferLevel();
        verify(channelTransferRuleVO).getCntrlWithdrawLevel();
        verify(channelTransferRuleVO).getCreatedBy();
        verify(channelTransferRuleVO).getDirectTransferAllowed();
        verify(channelTransferRuleVO).getDomainCode();
        verify(channelTransferRuleVO).getDpAllowed();
        verify(channelTransferRuleVO).getFixedReturnCategory();
        verify(channelTransferRuleVO).getFixedReturnLevel();
        verify(channelTransferRuleVO).getFixedTransferCategory();
        verify(channelTransferRuleVO).getFixedTransferLevel();
        verify(channelTransferRuleVO).getFixedWithdrawCategory();
        verify(channelTransferRuleVO).getFixedWithdrawLevel();
        verify(channelTransferRuleVO).getFocAllowed();
        verify(channelTransferRuleVO).getFocTransferType();
        verify(channelTransferRuleVO).getFromCategory();
        verify(channelTransferRuleVO).getModifiedBy();
        verify(channelTransferRuleVO).getNetworkCode();
        verify(channelTransferRuleVO).getParentAssocationAllowed();
        verify(channelTransferRuleVO).getRestrictedMsisdnAccess();
        verify(channelTransferRuleVO).getRestrictedRechargeAccess();
        verify(channelTransferRuleVO).getReturnAllowed();
        verify(channelTransferRuleVO).getReturnChnlBypassAllowed();
        verify(channelTransferRuleVO).getToCategory();
        verify(channelTransferRuleVO).getToDomainCode();
        verify(channelTransferRuleVO).getTransferAllowed();
        verify(channelTransferRuleVO).getTransferChnlBypassAllowed();
        verify(channelTransferRuleVO, atLeast(1)).getTransferRuleID();
        verify(channelTransferRuleVO).getTransferType();
        verify(channelTransferRuleVO).getType();
        verify(channelTransferRuleVO).getUncntrlReturnAllowed();
        verify(channelTransferRuleVO).getUncntrlReturnLevel();
        verify(channelTransferRuleVO).getUncntrlTransferAllowed();
        verify(channelTransferRuleVO).getUncntrlTransferLevel();
        verify(channelTransferRuleVO).getUncntrlWithdrawAllowed();
        verify(channelTransferRuleVO).getUncntrlWithdrawLevel();
        verify(channelTransferRuleVO).getWithdrawAllowed();
        verify(channelTransferRuleVO).getWithdrawChnlBypassAllowed();
        verify(channelTransferRuleVO, atLeast(1)).getProductArray();
        verify(channelTransferRuleVO).getCreatedOn();
        verify(channelTransferRuleVO).getModifiedOn();
        verify(channelTransferRuleVO).setApprovalRequired(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCntrlWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setCreatedBy(Mockito.<String>any());
        verify(channelTransferRuleVO).setCreatedOn(Mockito.<Date>any());
        verify(channelTransferRuleVO).setDirectTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setDomainCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setDpAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setFirstApprovalLimit(Mockito.<Long>any());
        verify(channelTransferRuleVO).setFixedReturnCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedTransferCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedWithdrawCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFixedWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setFocAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setFocTransferType(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromCategoryDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromDomainDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setFromSeqNo(Mockito.<Integer>any());
        verify(channelTransferRuleVO).setLastModifiedTime(Mockito.<Long>any());
        verify(channelTransferRuleVO).setModifiedBy(Mockito.<String>any());
        verify(channelTransferRuleVO).setModifiedOn(Mockito.<Date>any());
        verify(channelTransferRuleVO).setNetworkCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setParentAssocationAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setPreviousStatus(Mockito.<String>any());
        verify(channelTransferRuleVO).setProductArray(Mockito.<String[]>any());
        verify(channelTransferRuleVO).setProductVOList(Mockito.<ArrayList<Object>>any());
        verify(channelTransferRuleVO).setRestrictedMsisdnAccess(Mockito.<String>any());
        verify(channelTransferRuleVO).setRestrictedRechargeAccess(Mockito.<String>any());
        verify(channelTransferRuleVO).setReturnAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setReturnChnlBypassAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setRuleType(Mockito.<String>any());
        verify(channelTransferRuleVO).setSecondApprovalLimit(Mockito.<Long>any());
        verify(channelTransferRuleVO).setStatus(Mockito.<String>any());
        verify(channelTransferRuleVO).setStatusDesc(Mockito.<String>any());
        verify(channelTransferRuleVO).setToCategory(Mockito.<String>any());
        verify(channelTransferRuleVO).setToCategoryDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setToDomainCode(Mockito.<String>any());
        verify(channelTransferRuleVO).setToDomainDes(Mockito.<String>any());
        verify(channelTransferRuleVO).setToSeqNo(Mockito.<Integer>any());
        verify(channelTransferRuleVO).setTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferChnlBypassAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferRuleID(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferRuleType(Mockito.<String>any());
        verify(channelTransferRuleVO).setTransferType(Mockito.<String>any());
        verify(channelTransferRuleVO).setType(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlReturnAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlReturnLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferAllowedTmp(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlTransferLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlWithdrawAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setUncntrlWithdrawLevel(Mockito.<String>any());
        verify(channelTransferRuleVO).setWithdrawAllowed(Mockito.<String>any());
        verify(channelTransferRuleVO).setWithdrawChnlBypassAllowed(Mockito.<String>any());
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#loadProductList(Connection, String, String)}
     */
    @Test
    public void testLoadProductList() throws Exception {
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getString(Mockito.<String>any())).thenReturn("String");
        when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);
        assertEquals(2,
                channelToChannelTransferRuleManagementServiceImpl.loadProductList (com.btsl.util.JUnitConfig.getConnection(), "Network Code", "C2s Module").size());
        verify(con).prepareStatement(Mockito.<String>any());
        verify(preparedStatement).executeQuery();
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement).close();
        verify(resultSet, atLeast(1)).next();
        verify(resultSet, atLeast(1)).getString(Mockito.<String>any());
        verify(resultSet).close();
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#loadCategoryList(Connection, String)}
     */
    @Test
    public void testLoadCategoryList() throws Exception {
        ResultSet resultSet = mock(ResultSet.class);
        when(resultSet.getString(Mockito.<String>any())).thenReturn("String");
        when(resultSet.next()).thenReturn(true).thenReturn(true).thenReturn(false);
        doNothing().when(resultSet).close();
        PreparedStatement preparedStatement = mock(PreparedStatement.class);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
        doNothing().when(preparedStatement).setString(anyInt(), Mockito.<String>any());
        doNothing().when(preparedStatement).close();
        Connection con = mock(Connection.class);
        when(con.prepareStatement(Mockito.<String>any())).thenReturn(preparedStatement);
        assertEquals(2, channelToChannelTransferRuleManagementServiceImpl.loadCategoryList (com.btsl.util.JUnitConfig.getConnection(), "Domain Code").size());
        verify(con).prepareStatement(Mockito.<String>any());
        verify(preparedStatement).executeQuery();
        verify(preparedStatement, atLeast(1)).setString(anyInt(), Mockito.<String>any());
        verify(preparedStatement).close();
        verify(resultSet, atLeast(1)).next();
        verify(resultSet, atLeast(1)).getString(Mockito.<String>any());
        verify(resultSet).close();
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#getListValueVOFromLookupsVO(String, String)}
     */
    @Test
   //@Ignore("TODO: Complete this test")
    public void testGetListValueVOFromLookupsVO() throws BTSLBaseException {
      com.btsl.util.JUnitConfig.init();
        //   Reason: R013 No inputs found that don't throw a trivial exception.
        //   Diffblue Cover tried to run the arrange/act section, but the method under
        //   test threw
        //   java.lang.NullPointerException
        //       at com.btsl.pretups.master.businesslogic.LookupsCache.getObject(LookupsCache.java:427)
        //       at com.restapi.superadmin.service.ChannelToChannelTransferRuleManagementServiceImpl.getListValueVOFromLookupsVO(ChannelToChannelTransferRuleManagementServiceImpl.java:295)
        //   See https://diff.blue/R013 to resolve this issue.

        channelToChannelTransferRuleManagementServiceImpl.getListValueVOFromLookupsVO("P lookup Type", "P lookup Code");
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#getListValueVOFromLookupsVO(String, String)}
     */
    @Test
   //@Ignore("TODO: Complete this test")
    public void testGetListValueVOFromLookupsVO2() throws BTSLBaseException {
      com.btsl.util.JUnitConfig.init();
        //   Reason: R013 No inputs found that don't throw a trivial exception.
        //   Diffblue Cover tried to run the arrange/act section, but the method under
        //   test threw
        //   java.lang.NullPointerException
        //       at com.btsl.pretups.master.businesslogic.LookupsCache.getObject(LookupsCache.java:427)
        //       at com.restapi.superadmin.service.ChannelToChannelTransferRuleManagementServiceImpl.getListValueVOFromLookupsVO(ChannelToChannelTransferRuleManagementServiceImpl.java:295)
        //   See https://diff.blue/R013 to resolve this issue.

        channelToChannelTransferRuleManagementServiceImpl.getListValueVOFromLookupsVO("1100261", "P lookup Code");
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#getOptionDesc(String, List)}
     */
    @Test
    public void testGetOptionDesc() {
        ListValueVO actualOptionDesc = ChannelToChannelTransferRuleManagementServiceImpl.getOptionDesc("P code",
                new ArrayList<>());
        assertNull(actualOptionDesc.getCodeName());
        assertNull(actualOptionDesc.getValue());
        assertNull(actualOptionDesc.getLabel());
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#getOptionDesc(String, List)}
     */
    @Test
    public void testGetOptionDesc2() {
        ListValueVO actualOptionDesc = ChannelToChannelTransferRuleManagementServiceImpl.getOptionDesc(null,
                new ArrayList<>());
        assertNull(actualOptionDesc.getCodeName());
        assertNull(actualOptionDesc.getValue());
        assertNull(actualOptionDesc.getLabel());
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#requestVOToChangeDAOVO(ChannelTransferRuleRequestVO)}
     */
    @Test
    public void testRequestVOToChangeDAOVO() {
        ChannelTransferRuleRequestVO requestVO = new ChannelTransferRuleRequestVO();
        requestVO.setCntrlReturnLevel("Cntrl Return Level");
        requestVO.setCntrlTransferLevel("Cntrl Transfer Level");
        requestVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        requestVO.setDirectTransferAllowed("Direct Transfer Allowed");
        requestVO.setDomainCode("Domain Code");
        requestVO.setFixedReturnCategory("Fixed Return Category");
        requestVO.setFixedReturnLevel("Fixed Return Level");
        requestVO.setFixedTransferCategory("Fixed Transfer Category");
        requestVO.setFixedTransferLevel("Fixed Transfer Level");
        requestVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        requestVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        requestVO.setFromCategory("jane.doe@example.org");
        requestVO.setParentAssocationAllowed("Parent Assocation Allowed");
        requestVO.setProductArray(new String[]{"Product Array"});
        requestVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        requestVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        requestVO.setReturnAllowed("Return Allowed");
        requestVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        requestVO.setToCategory("To Category");
        requestVO.setToDomainCode("To Domain Code");
        requestVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        requestVO.setTransferType("Transfer Type");
        requestVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        requestVO.setUncntrlReturnLevel("Uncntrl Return Level");
        requestVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        requestVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        requestVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        requestVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        requestVO.setWithdrawAllowed("Withdraw Allowed");
        requestVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        ChannelTransferRuleVO actualRequestVOToChangeDAOVOResult = channelToChannelTransferRuleManagementServiceImpl
                .requestVOToChangeDAOVO(requestVO);
        assertEquals("N", actualRequestVOToChangeDAOVOResult.getApprovalRequired());
        assertEquals("CHANNEL", actualRequestVOToChangeDAOVOResult.getType());
        assertEquals("Transfer Type", actualRequestVOToChangeDAOVOResult.getTransferType());
        assertEquals("Transfer Chnl Bypass Allowed", actualRequestVOToChangeDAOVOResult.getTransferChnlBypassAllowed());
        assertEquals("Y", actualRequestVOToChangeDAOVOResult.getTransferAllowed());
        assertEquals("To Domain Code", actualRequestVOToChangeDAOVOResult.getToDomainCode());
        assertEquals("To Category", actualRequestVOToChangeDAOVOResult.getToCategory());
        assertEquals(999999998L, actualRequestVOToChangeDAOVOResult.getSecondApprovalLimit().longValue());
        assertEquals("Return Chnl Bypass Allowed", actualRequestVOToChangeDAOVOResult.getReturnChnlBypassAllowed());
        assertEquals("Return Allowed", actualRequestVOToChangeDAOVOResult.getReturnAllowed());
        assertEquals("Restricted Recharge Access", actualRequestVOToChangeDAOVOResult.getRestrictedRechargeAccess());
        assertEquals("Restricted Msisdn Access", actualRequestVOToChangeDAOVOResult.getRestrictedMsisdnAccess());
        assertEquals(1, actualRequestVOToChangeDAOVOResult.getProductArray().length);
        assertEquals("Cntrl Return Level", actualRequestVOToChangeDAOVOResult.getCntrlReturnLevel());
        assertEquals("Parent Assocation Allowed", actualRequestVOToChangeDAOVOResult.getParentAssocationAllowed());
        assertNull(actualRequestVOToChangeDAOVOResult.getModifiedOn());
        assertEquals(0L, actualRequestVOToChangeDAOVOResult.getLastModifiedTime().longValue());
        assertEquals(0, actualRequestVOToChangeDAOVOResult.getFromSeqNo().intValue());
        assertEquals("jane.doe@example.org", actualRequestVOToChangeDAOVOResult.getFromCategory());
        assertEquals("TRF", actualRequestVOToChangeDAOVOResult.getFocTransferType());
        assertEquals("N", actualRequestVOToChangeDAOVOResult.getFocAllowed());
        assertEquals("Cntrl Withdraw Level", actualRequestVOToChangeDAOVOResult.getCntrlWithdrawLevel());
        assertEquals("Fixed Withdraw Category", actualRequestVOToChangeDAOVOResult.getFixedWithdrawCategory());
        assertEquals("Fixed Transfer Level", actualRequestVOToChangeDAOVOResult.getFixedTransferLevel());
        assertEquals("Fixed Transfer Category", actualRequestVOToChangeDAOVOResult.getFixedTransferCategory());
        assertEquals("Fixed Return Level", actualRequestVOToChangeDAOVOResult.getFixedReturnLevel());
        assertEquals("Fixed Return Category", actualRequestVOToChangeDAOVOResult.getFixedReturnCategory());
        assertEquals(999999998L, actualRequestVOToChangeDAOVOResult.getFirstApprovalLimit().longValue());
        assertEquals("N", actualRequestVOToChangeDAOVOResult.getDpAllowed());
        assertEquals("Domain Code", actualRequestVOToChangeDAOVOResult.getDomainCode());
        assertEquals("Direct Transfer Allowed", actualRequestVOToChangeDAOVOResult.getDirectTransferAllowed());
        assertNull(actualRequestVOToChangeDAOVOResult.getCreatedOn());
        assertEquals("Fixed Withdraw Level", actualRequestVOToChangeDAOVOResult.getFixedWithdrawLevel());
        assertEquals("Cntrl Transfer Level", actualRequestVOToChangeDAOVOResult.getCntrlTransferLevel());
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#requestVOToChangeDAOVO(ChannelTransferRuleRequestVO)}
     */
    @Test
    public void testRequestVOToChangeDAOVO2() {
        ChannelTransferRuleRequestVO requestVO = mock(ChannelTransferRuleRequestVO.class);
        when(requestVO.getCntrlReturnLevel()).thenReturn("Cntrl Return Level");
        when(requestVO.getCntrlTransferLevel()).thenReturn("Cntrl Transfer Level");
        when(requestVO.getCntrlWithdrawLevel()).thenReturn("Cntrl Withdraw Level");
        when(requestVO.getDirectTransferAllowed()).thenReturn("Direct Transfer Allowed");
        when(requestVO.getDomainCode()).thenReturn("Domain Code");
        when(requestVO.getFixedReturnCategory()).thenReturn("Fixed Return Category");
        when(requestVO.getFixedReturnLevel()).thenReturn("Fixed Return Level");
        when(requestVO.getFixedTransferCategory()).thenReturn("Fixed Transfer Category");
        when(requestVO.getFixedTransferLevel()).thenReturn("Fixed Transfer Level");
        when(requestVO.getFixedWithdrawCategory()).thenReturn("Fixed Withdraw Category");
        when(requestVO.getFixedWithdrawLevel()).thenReturn("Fixed Withdraw Level");
        when(requestVO.getFromCategory()).thenReturn("jane.doe@example.org");
        when(requestVO.getParentAssocationAllowed()).thenReturn("Parent Assocation Allowed");
        when(requestVO.getRestrictedMsisdnAccess()).thenReturn("Restricted Msisdn Access");
        when(requestVO.getRestrictedRechargeAccess()).thenReturn("Restricted Recharge Access");
        when(requestVO.getReturnAllowed()).thenReturn("Return Allowed");
        when(requestVO.getReturnChnlBypassAllowed()).thenReturn("Return Chnl Bypass Allowed");
        when(requestVO.getToCategory()).thenReturn("To Category");
        when(requestVO.getToDomainCode()).thenReturn("To Domain Code");
        when(requestVO.getTransferChnlBypassAllowed()).thenReturn("Transfer Chnl Bypass Allowed");
        when(requestVO.getTransferType()).thenReturn("Transfer Type");
        when(requestVO.getUncntrlReturnAllowed()).thenReturn("Uncntrl Return Allowed");
        when(requestVO.getUncntrlReturnLevel()).thenReturn("Uncntrl Return Level");
        when(requestVO.getUncntrlTransferAllowed()).thenReturn("Uncntrl Transfer Allowed");
        when(requestVO.getUncntrlTransferLevel()).thenReturn("Uncntrl Transfer Level");
        when(requestVO.getUncntrlWithdrawAllowed()).thenReturn("Uncntrl Withdraw Allowed");
        when(requestVO.getUncntrlWithdrawLevel()).thenReturn("Uncntrl Withdraw Level");
        when(requestVO.getWithdrawAllowed()).thenReturn("Withdraw Allowed");
        when(requestVO.getWithdrawChnlBypassAllowed()).thenReturn("Withdraw Chnl Bypass Allowed");
        when(requestVO.getProductArray()).thenReturn(new String[]{"Product Array"});
        doNothing().when(requestVO).setCntrlReturnLevel(Mockito.<String>any());
        doNothing().when(requestVO).setCntrlTransferLevel(Mockito.<String>any());
        doNothing().when(requestVO).setCntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(requestVO).setDirectTransferAllowed(Mockito.<String>any());
        doNothing().when(requestVO).setDomainCode(Mockito.<String>any());
        doNothing().when(requestVO).setFixedReturnCategory(Mockito.<String>any());
        doNothing().when(requestVO).setFixedReturnLevel(Mockito.<String>any());
        doNothing().when(requestVO).setFixedTransferCategory(Mockito.<String>any());
        doNothing().when(requestVO).setFixedTransferLevel(Mockito.<String>any());
        doNothing().when(requestVO).setFixedWithdrawCategory(Mockito.<String>any());
        doNothing().when(requestVO).setFixedWithdrawLevel(Mockito.<String>any());
        doNothing().when(requestVO).setFromCategory(Mockito.<String>any());
        doNothing().when(requestVO).setParentAssocationAllowed(Mockito.<String>any());
        doNothing().when(requestVO).setProductArray(Mockito.<String[]>any());
        doNothing().when(requestVO).setRestrictedMsisdnAccess(Mockito.<String>any());
        doNothing().when(requestVO).setRestrictedRechargeAccess(Mockito.<String>any());
        doNothing().when(requestVO).setReturnAllowed(Mockito.<String>any());
        doNothing().when(requestVO).setReturnChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(requestVO).setToCategory(Mockito.<String>any());
        doNothing().when(requestVO).setToDomainCode(Mockito.<String>any());
        doNothing().when(requestVO).setTransferChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(requestVO).setTransferType(Mockito.<String>any());
        doNothing().when(requestVO).setUncntrlReturnAllowed(Mockito.<String>any());
        doNothing().when(requestVO).setUncntrlReturnLevel(Mockito.<String>any());
        doNothing().when(requestVO).setUncntrlTransferAllowed(Mockito.<String>any());
        doNothing().when(requestVO).setUncntrlTransferLevel(Mockito.<String>any());
        doNothing().when(requestVO).setUncntrlWithdrawAllowed(Mockito.<String>any());
        doNothing().when(requestVO).setUncntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(requestVO).setWithdrawAllowed(Mockito.<String>any());
        doNothing().when(requestVO).setWithdrawChnlBypassAllowed(Mockito.<String>any());
        requestVO.setCntrlReturnLevel("Cntrl Return Level");
        requestVO.setCntrlTransferLevel("Cntrl Transfer Level");
        requestVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        requestVO.setDirectTransferAllowed("Direct Transfer Allowed");
        requestVO.setDomainCode("Domain Code");
        requestVO.setFixedReturnCategory("Fixed Return Category");
        requestVO.setFixedReturnLevel("Fixed Return Level");
        requestVO.setFixedTransferCategory("Fixed Transfer Category");
        requestVO.setFixedTransferLevel("Fixed Transfer Level");
        requestVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        requestVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        requestVO.setFromCategory("jane.doe@example.org");
        requestVO.setParentAssocationAllowed("Parent Assocation Allowed");
        requestVO.setProductArray(new String[]{"Product Array"});
        requestVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        requestVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        requestVO.setReturnAllowed("Return Allowed");
        requestVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        requestVO.setToCategory("To Category");
        requestVO.setToDomainCode("To Domain Code");
        requestVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        requestVO.setTransferType("Transfer Type");
        requestVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        requestVO.setUncntrlReturnLevel("Uncntrl Return Level");
        requestVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        requestVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        requestVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        requestVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        requestVO.setWithdrawAllowed("Withdraw Allowed");
        requestVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        ChannelTransferRuleVO actualRequestVOToChangeDAOVOResult = channelToChannelTransferRuleManagementServiceImpl
                .requestVOToChangeDAOVO(requestVO);
        assertEquals("N", actualRequestVOToChangeDAOVOResult.getApprovalRequired());
        assertEquals("CHANNEL", actualRequestVOToChangeDAOVOResult.getType());
        assertEquals("Transfer Type", actualRequestVOToChangeDAOVOResult.getTransferType());
        assertEquals("Transfer Chnl Bypass Allowed", actualRequestVOToChangeDAOVOResult.getTransferChnlBypassAllowed());
        assertEquals("Y", actualRequestVOToChangeDAOVOResult.getTransferAllowed());
        assertEquals("To Domain Code", actualRequestVOToChangeDAOVOResult.getToDomainCode());
        assertEquals("To Category", actualRequestVOToChangeDAOVOResult.getToCategory());
        assertEquals(999999998L, actualRequestVOToChangeDAOVOResult.getSecondApprovalLimit().longValue());
        assertEquals("Return Chnl Bypass Allowed", actualRequestVOToChangeDAOVOResult.getReturnChnlBypassAllowed());
        assertEquals("Return Allowed", actualRequestVOToChangeDAOVOResult.getReturnAllowed());
        assertEquals("Restricted Recharge Access", actualRequestVOToChangeDAOVOResult.getRestrictedRechargeAccess());
        assertEquals("Restricted Msisdn Access", actualRequestVOToChangeDAOVOResult.getRestrictedMsisdnAccess());
        assertEquals(1, actualRequestVOToChangeDAOVOResult.getProductArray().length);
        assertEquals("Cntrl Return Level", actualRequestVOToChangeDAOVOResult.getCntrlReturnLevel());
        assertEquals("Parent Assocation Allowed", actualRequestVOToChangeDAOVOResult.getParentAssocationAllowed());
        assertNull(actualRequestVOToChangeDAOVOResult.getModifiedOn());
        assertEquals(0L, actualRequestVOToChangeDAOVOResult.getLastModifiedTime().longValue());
        assertEquals(0, actualRequestVOToChangeDAOVOResult.getFromSeqNo().intValue());
        assertEquals("jane.doe@example.org", actualRequestVOToChangeDAOVOResult.getFromCategory());
        assertEquals("TRF", actualRequestVOToChangeDAOVOResult.getFocTransferType());
        assertEquals("N", actualRequestVOToChangeDAOVOResult.getFocAllowed());
        assertEquals("Cntrl Withdraw Level", actualRequestVOToChangeDAOVOResult.getCntrlWithdrawLevel());
        assertEquals("Fixed Withdraw Category", actualRequestVOToChangeDAOVOResult.getFixedWithdrawCategory());
        assertEquals("Fixed Transfer Level", actualRequestVOToChangeDAOVOResult.getFixedTransferLevel());
        assertEquals("Fixed Transfer Category", actualRequestVOToChangeDAOVOResult.getFixedTransferCategory());
        assertEquals("Fixed Return Level", actualRequestVOToChangeDAOVOResult.getFixedReturnLevel());
        assertEquals("Fixed Return Category", actualRequestVOToChangeDAOVOResult.getFixedReturnCategory());
        assertEquals(999999998L, actualRequestVOToChangeDAOVOResult.getFirstApprovalLimit().longValue());
        assertEquals("N", actualRequestVOToChangeDAOVOResult.getDpAllowed());
        assertEquals("Domain Code", actualRequestVOToChangeDAOVOResult.getDomainCode());
        assertEquals("Direct Transfer Allowed", actualRequestVOToChangeDAOVOResult.getDirectTransferAllowed());
        assertNull(actualRequestVOToChangeDAOVOResult.getCreatedOn());
        assertEquals("Fixed Withdraw Level", actualRequestVOToChangeDAOVOResult.getFixedWithdrawLevel());
        assertEquals("Cntrl Transfer Level", actualRequestVOToChangeDAOVOResult.getCntrlTransferLevel());
        verify(requestVO, atLeast(1)).getCntrlReturnLevel();
        verify(requestVO).getCntrlTransferLevel();
        verify(requestVO).getCntrlWithdrawLevel();
        verify(requestVO, atLeast(1)).getDirectTransferAllowed();
        verify(requestVO).getDomainCode();
        verify(requestVO).getFixedReturnCategory();
        verify(requestVO).getFixedReturnLevel();
        verify(requestVO).getFixedTransferCategory();
        verify(requestVO).getFixedTransferLevel();
        verify(requestVO).getFixedWithdrawCategory();
        verify(requestVO).getFixedWithdrawLevel();
        verify(requestVO).getFromCategory();
        verify(requestVO).getParentAssocationAllowed();
        verify(requestVO).getRestrictedMsisdnAccess();
        verify(requestVO, atLeast(1)).getRestrictedRechargeAccess();
        verify(requestVO).getReturnAllowed();
        verify(requestVO).getReturnChnlBypassAllowed();
        verify(requestVO).getToCategory();
        verify(requestVO).getToDomainCode();
        verify(requestVO).getTransferChnlBypassAllowed();
        verify(requestVO).getTransferType();
        verify(requestVO).getUncntrlReturnAllowed();
        verify(requestVO).getUncntrlReturnLevel();
        verify(requestVO).getUncntrlTransferAllowed();
        verify(requestVO).getUncntrlTransferLevel();
        verify(requestVO).getUncntrlWithdrawAllowed();
        verify(requestVO).getUncntrlWithdrawLevel();
        verify(requestVO).getWithdrawAllowed();
        verify(requestVO).getWithdrawChnlBypassAllowed();
        verify(requestVO, atLeast(1)).getProductArray();
        verify(requestVO).setCntrlReturnLevel(Mockito.<String>any());
        verify(requestVO).setCntrlTransferLevel(Mockito.<String>any());
        verify(requestVO).setCntrlWithdrawLevel(Mockito.<String>any());
        verify(requestVO).setDirectTransferAllowed(Mockito.<String>any());
        verify(requestVO).setDomainCode(Mockito.<String>any());
        verify(requestVO).setFixedReturnCategory(Mockito.<String>any());
        verify(requestVO).setFixedReturnLevel(Mockito.<String>any());
        verify(requestVO).setFixedTransferCategory(Mockito.<String>any());
        verify(requestVO).setFixedTransferLevel(Mockito.<String>any());
        verify(requestVO).setFixedWithdrawCategory(Mockito.<String>any());
        verify(requestVO).setFixedWithdrawLevel(Mockito.<String>any());
        verify(requestVO).setFromCategory(Mockito.<String>any());
        verify(requestVO).setParentAssocationAllowed(Mockito.<String>any());
        verify(requestVO).setProductArray(Mockito.<String[]>any());
        verify(requestVO).setRestrictedMsisdnAccess(Mockito.<String>any());
        verify(requestVO).setRestrictedRechargeAccess(Mockito.<String>any());
        verify(requestVO).setReturnAllowed(Mockito.<String>any());
        verify(requestVO).setReturnChnlBypassAllowed(Mockito.<String>any());
        verify(requestVO).setToCategory(Mockito.<String>any());
        verify(requestVO).setToDomainCode(Mockito.<String>any());
        verify(requestVO).setTransferChnlBypassAllowed(Mockito.<String>any());
        verify(requestVO).setTransferType(Mockito.<String>any());
        verify(requestVO).setUncntrlReturnAllowed(Mockito.<String>any());
        verify(requestVO).setUncntrlReturnLevel(Mockito.<String>any());
        verify(requestVO).setUncntrlTransferAllowed(Mockito.<String>any());
        verify(requestVO).setUncntrlTransferLevel(Mockito.<String>any());
        verify(requestVO).setUncntrlWithdrawAllowed(Mockito.<String>any());
        verify(requestVO).setUncntrlWithdrawLevel(Mockito.<String>any());
        verify(requestVO).setWithdrawAllowed(Mockito.<String>any());
        verify(requestVO).setWithdrawChnlBypassAllowed(Mockito.<String>any());
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#responseVOToChangerequestVO(ChannelTransferRuleViewResponseVO, ChannelTransferRuleVO)}
     */
    @Test
    public void testResponseVOToChangerequestVO() {
        ChannelTransferRuleRequestVO channelTransferRuleRequestVO = new ChannelTransferRuleRequestVO();
        channelTransferRuleRequestVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleRequestVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleRequestVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleRequestVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleRequestVO.setDomainCode("Domain Code");
        channelTransferRuleRequestVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleRequestVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleRequestVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleRequestVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleRequestVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleRequestVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleRequestVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleRequestVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleRequestVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleRequestVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleRequestVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleRequestVO.setReturnAllowed("Return Allowed");
        channelTransferRuleRequestVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleRequestVO.setToCategory("To Category");
        channelTransferRuleRequestVO.setToDomainCode("To Domain Code");
        channelTransferRuleRequestVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleRequestVO.setTransferType("Transfer Type");
        channelTransferRuleRequestVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleRequestVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleRequestVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleRequestVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleRequestVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleRequestVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleRequestVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleRequestVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");

        ErrorMap errorMap = new ErrorMap();
        errorMap.setMasterErrorList(new ArrayList<>());
        errorMap.setRowErrorMsgLists(new ArrayList<>());

        ChannelTransferRuleViewResponseVO response = new ChannelTransferRuleViewResponseVO();
        response.setChannelTransferRuleRequestVO(channelTransferRuleRequestVO);
        response.setChnlByPassFlag(true);
        response.setCntrlReturnLevel("Cntrl Return Level");
        response.setCntrlReturnLevelDesc("Cntrl Return Level Desc");
        response.setCntrlTransferLevel("Cntrl Transfer Level");
        response.setCntrlTransferLevelDesc("Cntrl Transfer Level Desc");
        response.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        response.setCntrlWithdrawLevelDesc("Cntrl Withdraw Level Desc");
        response.setDirectTransferAllowed("Direct Transfer Allowed");
        response.setDomainCode("Domain Code");
        response.setDomainCodeDesc("Domain Code Desc");
        response.setErrorMap(errorMap);
        response.setFixedReturnCategory("Fixed Return Category");
        response.setFixedReturnCategoryDesc("Fixed Return Category Desc");
        response.setFixedReturnLevel("Fixed Return Level");
        response.setFixedReturnLevelDesc("Fixed Return Level Desc");
        response.setFixedTransferCategory("Fixed Transfer Category");
        response.setFixedTransferCategoryDesc("Fixed Transfer Category Desc");
        response.setFixedTransferLevel("Fixed Transfer Level");
        response.setFixedTransferLevelDesc("Fixed Transfer Level Desc");
        response.setFixedWithdrawCategory("Fixed Withdraw Category");
        response.setFixedWithdrawCategoryDesc("Fixed Withdraw Category Desc");
        response.setFixedWithdrawLevel("Fixed Withdraw Level");
        response.setFixedWithdrawLevelDesc("Fixed Withdraw Level Desc");
        response.setFromCategory("jane.doe@example.org");
        response.setFromCategoryDesc("jane.doe@example.org");
        response.setFromCategorySeqNumber(10);
        response.setMessage("Not all who wander are lost");
        response.setMessageCode("Message Code");
        response.setParentAssocationAllowed("Parent Assocation Allowed");
        response.setParentAssocationAllowedDesc("Parent Assocation Allowed Desc");
        response.setParentAssociationAllowedFlag(true);
        response.setProductArray(new String[]{"Product Array"});
        response.setProductArrayDesc(new String[]{"Product Array Desc"});
        response.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        response.setRestrictedMsisdnAccessFlag(true);
        response.setRestrictedRechargeAccess("Restricted Recharge Access");
        response.setRestrictedRechargeFlag(true);
        response.setReturnAllowed("Return Allowed");
        response.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        response.setStatus(1);
        response.setToCategory("To Category");
        response.setToCategoryDesc("To Category Desc");
        response.setToCategorySeqNumber(10);
        response.setToDomainCode("To Domain Code");
        response.setToDomainCodeDesc("To Domain Code Desc");
        response.setTransactionId("42");
        response.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        response.setTransferType("Transfer Type");
        response.setTransferTypeDesc("Transfer Type Desc");
        response.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        response.setUncntrlReturnLevel("Uncntrl Return Level");
        response.setUncntrlReturnLevelDesc("Uncntrl Return Level Desc");
        response.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        response.setUncntrlTransferAllowedFlag(true);
        response.setUncntrlTransferLevel("Uncntrl Transfer Level");
        response.setUncntrlTransferLevelDesc("Uncntrl Transfer Level Desc");
        response.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        response.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        response.setUncntrlWithdrawLevelDesc("Uncntrl Withdraw Level Desc");
        response.setWithdrawAllowed("Withdraw Allowed");
        response.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");

        ChannelTransferRuleVO channelTransferRuleVO = new ChannelTransferRuleVO();
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        ChannelTransferRuleViewResponseVO actualResponseVOToChangerequestVOResult = channelToChannelTransferRuleManagementServiceImpl
                .responseVOToChangerequestVO(response, channelTransferRuleVO);
        assertSame(response, actualResponseVOToChangerequestVOResult);
        assertEquals("Uncntrl Return Level", actualResponseVOToChangerequestVOResult.getUncntrlReturnLevel());
        assertEquals("Uncntrl Return Allowed", actualResponseVOToChangerequestVOResult.getUncntrlReturnAllowed());
        assertEquals("Transfer Type", actualResponseVOToChangerequestVOResult.getTransferType());
        assertEquals("Transfer Chnl Bypass Allowed",
                actualResponseVOToChangerequestVOResult.getTransferChnlBypassAllowed());
        assertEquals("To Domain Code", actualResponseVOToChangerequestVOResult.getToDomainCode());
        assertEquals("To Category", actualResponseVOToChangerequestVOResult.getToCategory());
        assertEquals("Return Chnl Bypass Allowed", actualResponseVOToChangerequestVOResult.getReturnChnlBypassAllowed());
        assertEquals("Return Allowed", actualResponseVOToChangerequestVOResult.getReturnAllowed());
        assertEquals("Restricted Recharge Access", actualResponseVOToChangerequestVOResult.getRestrictedRechargeAccess());
        assertEquals("Restricted Msisdn Access", actualResponseVOToChangerequestVOResult.getRestrictedMsisdnAccess());
        assertEquals(2, actualResponseVOToChangerequestVOResult.getProductArray().length);
        assertEquals("Cntrl Return Level", actualResponseVOToChangerequestVOResult.getCntrlReturnLevel());
        assertEquals("Cntrl Transfer Level", actualResponseVOToChangerequestVOResult.getCntrlTransferLevel());
        assertEquals("Direct Transfer Allowed", actualResponseVOToChangerequestVOResult.getDirectTransferAllowed());
        assertEquals("Parent Assocation Allowed", actualResponseVOToChangerequestVOResult.getParentAssocationAllowed());
        assertEquals("jane.doe@example.org", actualResponseVOToChangerequestVOResult.getFromCategory());
        assertEquals("Fixed Withdraw Level", actualResponseVOToChangerequestVOResult.getFixedWithdrawLevel());
        assertEquals("Fixed Withdraw Category", actualResponseVOToChangerequestVOResult.getFixedWithdrawCategory());
        assertEquals("Fixed Transfer Level", actualResponseVOToChangerequestVOResult.getFixedTransferLevel());
        assertEquals("Fixed Transfer Category", actualResponseVOToChangerequestVOResult.getFixedTransferCategory());
        assertEquals("Fixed Return Level", actualResponseVOToChangerequestVOResult.getFixedReturnLevel());
        assertEquals("Fixed Return Category", actualResponseVOToChangerequestVOResult.getFixedReturnCategory());
        assertEquals("Domain Code", actualResponseVOToChangerequestVOResult.getDomainCode());
        assertEquals("Cntrl Withdraw Level", actualResponseVOToChangerequestVOResult.getCntrlWithdrawLevel());
    }

    /**
     * Method under test: {@link ChannelToChannelTransferRuleManagementServiceImpl#responseVOToChangerequestVO(ChannelTransferRuleViewResponseVO, ChannelTransferRuleVO)}
     */
    @Test
    public void testResponseVOToChangerequestVO2() {
        ChannelTransferRuleRequestVO channelTransferRuleRequestVO = new ChannelTransferRuleRequestVO();
        channelTransferRuleRequestVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleRequestVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleRequestVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleRequestVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleRequestVO.setDomainCode("Domain Code");
        channelTransferRuleRequestVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleRequestVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleRequestVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleRequestVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleRequestVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleRequestVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleRequestVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleRequestVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleRequestVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleRequestVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleRequestVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleRequestVO.setReturnAllowed("Return Allowed");
        channelTransferRuleRequestVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleRequestVO.setToCategory("To Category");
        channelTransferRuleRequestVO.setToDomainCode("To Domain Code");
        channelTransferRuleRequestVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleRequestVO.setTransferType("Transfer Type");
        channelTransferRuleRequestVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleRequestVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleRequestVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleRequestVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleRequestVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleRequestVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleRequestVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleRequestVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");

        ErrorMap errorMap = new ErrorMap();
        errorMap.setMasterErrorList(new ArrayList<>());
        errorMap.setRowErrorMsgLists(new ArrayList<>());
        ChannelTransferRuleViewResponseVO response = mock(ChannelTransferRuleViewResponseVO.class);
        doNothing().when(response).setErrorMap(Mockito.<ErrorMap>any());
        doNothing().when(response).setMessage(Mockito.<String>any());
        doNothing().when(response).setMessageCode(Mockito.<String>any());
        doNothing().when(response).setStatus(anyInt());
        doNothing().when(response).setTransactionId(Mockito.<String>any());
        doNothing().when(response).setChannelTransferRuleRequestVO(Mockito.<ChannelTransferRuleRequestVO>any());
        doNothing().when(response).setChnlByPassFlag(anyBoolean());
        doNothing().when(response).setCntrlReturnLevel(Mockito.<String>any());
        doNothing().when(response).setCntrlReturnLevelDesc(Mockito.<String>any());
        doNothing().when(response).setCntrlTransferLevel(Mockito.<String>any());
        doNothing().when(response).setCntrlTransferLevelDesc(Mockito.<String>any());
        doNothing().when(response).setCntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(response).setCntrlWithdrawLevelDesc(Mockito.<String>any());
        doNothing().when(response).setDirectTransferAllowed(Mockito.<String>any());
        doNothing().when(response).setDomainCode(Mockito.<String>any());
        doNothing().when(response).setDomainCodeDesc(Mockito.<String>any());
        doNothing().when(response).setFixedReturnCategory(Mockito.<String>any());
        doNothing().when(response).setFixedReturnCategoryDesc(Mockito.<String>any());
        doNothing().when(response).setFixedReturnLevel(Mockito.<String>any());
        doNothing().when(response).setFixedReturnLevelDesc(Mockito.<String>any());
        doNothing().when(response).setFixedTransferCategory(Mockito.<String>any());
        doNothing().when(response).setFixedTransferCategoryDesc(Mockito.<String>any());
        doNothing().when(response).setFixedTransferLevel(Mockito.<String>any());
        doNothing().when(response).setFixedTransferLevelDesc(Mockito.<String>any());
        doNothing().when(response).setFixedWithdrawCategory(Mockito.<String>any());
        doNothing().when(response).setFixedWithdrawCategoryDesc(Mockito.<String>any());
        doNothing().when(response).setFixedWithdrawLevel(Mockito.<String>any());
        doNothing().when(response).setFixedWithdrawLevelDesc(Mockito.<String>any());
        doNothing().when(response).setFromCategory(Mockito.<String>any());
        doNothing().when(response).setFromCategoryDesc(Mockito.<String>any());
        doNothing().when(response).setFromCategorySeqNumber(Mockito.<Integer>any());
        doNothing().when(response).setParentAssocationAllowed(Mockito.<String>any());
        doNothing().when(response).setParentAssocationAllowedDesc(Mockito.<String>any());
        doNothing().when(response).setParentAssociationAllowedFlag(anyBoolean());
        doNothing().when(response).setProductArray(Mockito.<String[]>any());
        doNothing().when(response).setProductArrayDesc(Mockito.<String[]>any());
        doNothing().when(response).setRestrictedMsisdnAccess(Mockito.<String>any());
        doNothing().when(response).setRestrictedMsisdnAccessFlag(anyBoolean());
        doNothing().when(response).setRestrictedRechargeAccess(Mockito.<String>any());
        doNothing().when(response).setRestrictedRechargeFlag(anyBoolean());
        doNothing().when(response).setReturnAllowed(Mockito.<String>any());
        doNothing().when(response).setReturnChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(response).setToCategory(Mockito.<String>any());
        doNothing().when(response).setToCategoryDesc(Mockito.<String>any());
        doNothing().when(response).setToCategorySeqNumber(Mockito.<Integer>any());
        doNothing().when(response).setToDomainCode(Mockito.<String>any());
        doNothing().when(response).setToDomainCodeDesc(Mockito.<String>any());
        doNothing().when(response).setTransferChnlBypassAllowed(Mockito.<String>any());
        doNothing().when(response).setTransferType(Mockito.<String>any());
        doNothing().when(response).setTransferTypeDesc(Mockito.<String>any());
        doNothing().when(response).setUncntrlReturnAllowed(Mockito.<String>any());
        doNothing().when(response).setUncntrlReturnLevel(Mockito.<String>any());
        doNothing().when(response).setUncntrlReturnLevelDesc(Mockito.<String>any());
        doNothing().when(response).setUncntrlTransferAllowed(Mockito.<String>any());
        doNothing().when(response).setUncntrlTransferAllowedFlag(anyBoolean());
        doNothing().when(response).setUncntrlTransferLevel(Mockito.<String>any());
        doNothing().when(response).setUncntrlTransferLevelDesc(Mockito.<String>any());
        doNothing().when(response).setUncntrlWithdrawAllowed(Mockito.<String>any());
        doNothing().when(response).setUncntrlWithdrawLevel(Mockito.<String>any());
        doNothing().when(response).setUncntrlWithdrawLevelDesc(Mockito.<String>any());
        doNothing().when(response).setWithdrawAllowed(Mockito.<String>any());
        doNothing().when(response).setWithdrawChnlBypassAllowed(Mockito.<String>any());
        response.setChannelTransferRuleRequestVO(channelTransferRuleRequestVO);
        response.setChnlByPassFlag(true);
        response.setCntrlReturnLevel("Cntrl Return Level");
        response.setCntrlReturnLevelDesc("Cntrl Return Level Desc");
        response.setCntrlTransferLevel("Cntrl Transfer Level");
        response.setCntrlTransferLevelDesc("Cntrl Transfer Level Desc");
        response.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        response.setCntrlWithdrawLevelDesc("Cntrl Withdraw Level Desc");
        response.setDirectTransferAllowed("Direct Transfer Allowed");
        response.setDomainCode("Domain Code");
        response.setDomainCodeDesc("Domain Code Desc");
        response.setErrorMap(errorMap);
        response.setFixedReturnCategory("Fixed Return Category");
        response.setFixedReturnCategoryDesc("Fixed Return Category Desc");
        response.setFixedReturnLevel("Fixed Return Level");
        response.setFixedReturnLevelDesc("Fixed Return Level Desc");
        response.setFixedTransferCategory("Fixed Transfer Category");
        response.setFixedTransferCategoryDesc("Fixed Transfer Category Desc");
        response.setFixedTransferLevel("Fixed Transfer Level");
        response.setFixedTransferLevelDesc("Fixed Transfer Level Desc");
        response.setFixedWithdrawCategory("Fixed Withdraw Category");
        response.setFixedWithdrawCategoryDesc("Fixed Withdraw Category Desc");
        response.setFixedWithdrawLevel("Fixed Withdraw Level");
        response.setFixedWithdrawLevelDesc("Fixed Withdraw Level Desc");
        response.setFromCategory("jane.doe@example.org");
        response.setFromCategoryDesc("jane.doe@example.org");
        response.setFromCategorySeqNumber(10);
        response.setMessage("Not all who wander are lost");
        response.setMessageCode("Message Code");
        response.setParentAssocationAllowed("Parent Assocation Allowed");
        response.setParentAssocationAllowedDesc("Parent Assocation Allowed Desc");
        response.setParentAssociationAllowedFlag(true);
        response.setProductArray(new String[]{"Product Array"});
        response.setProductArrayDesc(new String[]{"Product Array Desc"});
        response.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        response.setRestrictedMsisdnAccessFlag(true);
        response.setRestrictedRechargeAccess("Restricted Recharge Access");
        response.setRestrictedRechargeFlag(true);
        response.setReturnAllowed("Return Allowed");
        response.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        response.setStatus(1);
        response.setToCategory("To Category");
        response.setToCategoryDesc("To Category Desc");
        response.setToCategorySeqNumber(10);
        response.setToDomainCode("To Domain Code");
        response.setToDomainCodeDesc("To Domain Code Desc");
        response.setTransactionId("42");
        response.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        response.setTransferType("Transfer Type");
        response.setTransferTypeDesc("Transfer Type Desc");
        response.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        response.setUncntrlReturnLevel("Uncntrl Return Level");
        response.setUncntrlReturnLevelDesc("Uncntrl Return Level Desc");
        response.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        response.setUncntrlTransferAllowedFlag(true);
        response.setUncntrlTransferLevel("Uncntrl Transfer Level");
        response.setUncntrlTransferLevelDesc("Uncntrl Transfer Level Desc");
        response.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        response.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        response.setUncntrlWithdrawLevelDesc("Uncntrl Withdraw Level Desc");
        response.setWithdrawAllowed("Withdraw Allowed");
        response.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");

        ChannelTransferRuleVO channelTransferRuleVO = new ChannelTransferRuleVO();
        channelTransferRuleVO.setApprovalRequired("Approval Required");
        channelTransferRuleVO.setCntrlReturnLevel("Cntrl Return Level");
        channelTransferRuleVO.setCntrlTransferLevel("Cntrl Transfer Level");
        channelTransferRuleVO.setCntrlWithdrawLevel("Cntrl Withdraw Level");
        channelTransferRuleVO.setCreatedBy("Jan 1, 2020 8:00am GMT+0100");
        channelTransferRuleVO
                .setCreatedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setDirectTransferAllowed("Direct Transfer Allowed");
        channelTransferRuleVO.setDomainCode("Domain Code");
        channelTransferRuleVO.setDpAllowed("Dp Allowed");
        channelTransferRuleVO.setFirstApprovalLimit(42L);
        channelTransferRuleVO.setFixedReturnCategory("Fixed Return Category");
        channelTransferRuleVO.setFixedReturnLevel("Fixed Return Level");
        channelTransferRuleVO.setFixedTransferCategory("Fixed Transfer Category");
        channelTransferRuleVO.setFixedTransferLevel("Fixed Transfer Level");
        channelTransferRuleVO.setFixedWithdrawCategory("Fixed Withdraw Category");
        channelTransferRuleVO.setFixedWithdrawLevel("Fixed Withdraw Level");
        channelTransferRuleVO.setFocAllowed("Foc Allowed");
        channelTransferRuleVO.setFocTransferType("Foc Transfer Type");
        channelTransferRuleVO.setFromCategory("jane.doe@example.org");
        channelTransferRuleVO.setFromCategoryDes("jane.doe@example.org");
        channelTransferRuleVO.setFromDomainDes("jane.doe@example.org");
        channelTransferRuleVO.setFromSeqNo(1);
        channelTransferRuleVO.setLastModifiedTime(1L);
        channelTransferRuleVO.setModifiedBy("Jan 1, 2020 9:00am GMT+0100");
        channelTransferRuleVO
                .setModifiedOn(Date.from(LocalDate.of(1970, 1, 1).atStartOfDay().atZone(ZoneOffset.UTC).toInstant()));
        channelTransferRuleVO.setNetworkCode("Network Code");
        channelTransferRuleVO.setParentAssocationAllowed("Parent Assocation Allowed");
        channelTransferRuleVO.setPreviousStatus("Previous Status");
        channelTransferRuleVO.setProductArray(new String[]{"Product Array"});
        channelTransferRuleVO.setProductVOList(new ArrayList());
        channelTransferRuleVO.setRestrictedMsisdnAccess("Restricted Msisdn Access");
        channelTransferRuleVO.setRestrictedRechargeAccess("Restricted Recharge Access");
        channelTransferRuleVO.setReturnAllowed("Return Allowed");
        channelTransferRuleVO.setReturnChnlBypassAllowed("Return Chnl Bypass Allowed");
        channelTransferRuleVO.setRuleType("Rule Type");
        channelTransferRuleVO.setSecondApprovalLimit(42L);
        channelTransferRuleVO.setStatus("Status");
        channelTransferRuleVO.setStatusDesc("Status Desc");
        channelTransferRuleVO.setToCategory("To Category");
        channelTransferRuleVO.setToCategoryDes("To Category Des");
        channelTransferRuleVO.setToDomainCode("To Domain Code");
        channelTransferRuleVO.setToDomainDes("To Domain Des");
        channelTransferRuleVO.setToSeqNo(1);
        channelTransferRuleVO.setTransferAllowed("Transfer Allowed");
        channelTransferRuleVO.setTransferChnlBypassAllowed("Transfer Chnl Bypass Allowed");
        channelTransferRuleVO.setTransferRuleID("Transfer Rule ID");
        channelTransferRuleVO.setTransferRuleType("Transfer Rule Type");
        channelTransferRuleVO.setTransferType("Transfer Type");
        channelTransferRuleVO.setType("Type");
        channelTransferRuleVO.setUncntrlReturnAllowed("Uncntrl Return Allowed");
        channelTransferRuleVO.setUncntrlReturnLevel("Uncntrl Return Level");
        channelTransferRuleVO.setUncntrlTransferAllowed("Uncntrl Transfer Allowed");
        channelTransferRuleVO.setUncntrlTransferAllowedTmp("Uncntrl Transfer Allowed Tmp");
        channelTransferRuleVO.setUncntrlTransferLevel("Uncntrl Transfer Level");
        channelTransferRuleVO.setUncntrlWithdrawAllowed("Uncntrl Withdraw Allowed");
        channelTransferRuleVO.setUncntrlWithdrawLevel("Uncntrl Withdraw Level");
        channelTransferRuleVO.setWithdrawAllowed("Withdraw Allowed");
        channelTransferRuleVO.setWithdrawChnlBypassAllowed("Withdraw Chnl Bypass Allowed");
        assertSame(response, channelToChannelTransferRuleManagementServiceImpl.responseVOToChangerequestVO(response,
                channelTransferRuleVO));
        verify(response).setErrorMap(Mockito.<ErrorMap>any());
        verify(response).setMessage(Mockito.<String>any());
        verify(response).setMessageCode(Mockito.<String>any());
        verify(response).setStatus(anyInt());
        verify(response).setTransactionId(Mockito.<String>any());
        verify(response).setChannelTransferRuleRequestVO(Mockito.<ChannelTransferRuleRequestVO>any());
        verify(response).setChnlByPassFlag(anyBoolean());
        verify(response, atLeast(1)).setCntrlReturnLevel(Mockito.<String>any());
        verify(response).setCntrlReturnLevelDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setCntrlTransferLevel(Mockito.<String>any());
        verify(response).setCntrlTransferLevelDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setCntrlWithdrawLevel(Mockito.<String>any());
        verify(response).setCntrlWithdrawLevelDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setDirectTransferAllowed(Mockito.<String>any());
        verify(response, atLeast(1)).setDomainCode(Mockito.<String>any());
        verify(response).setDomainCodeDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setFixedReturnCategory(Mockito.<String>any());
        verify(response).setFixedReturnCategoryDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setFixedReturnLevel(Mockito.<String>any());
        verify(response).setFixedReturnLevelDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setFixedTransferCategory(Mockito.<String>any());
        verify(response).setFixedTransferCategoryDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setFixedTransferLevel(Mockito.<String>any());
        verify(response).setFixedTransferLevelDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setFixedWithdrawCategory(Mockito.<String>any());
        verify(response).setFixedWithdrawCategoryDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setFixedWithdrawLevel(Mockito.<String>any());
        verify(response).setFixedWithdrawLevelDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setFromCategory(Mockito.<String>any());
        verify(response).setFromCategoryDesc(Mockito.<String>any());
        verify(response).setFromCategorySeqNumber(Mockito.<Integer>any());
        verify(response, atLeast(1)).setParentAssocationAllowed(Mockito.<String>any());
        verify(response).setParentAssocationAllowedDesc(Mockito.<String>any());
        verify(response).setParentAssociationAllowedFlag(anyBoolean());
        verify(response, atLeast(1)).setProductArray(Mockito.<String[]>any());
        verify(response).setProductArrayDesc(Mockito.<String[]>any());
        verify(response, atLeast(1)).setRestrictedMsisdnAccess(Mockito.<String>any());
        verify(response).setRestrictedMsisdnAccessFlag(anyBoolean());
        verify(response, atLeast(1)).setRestrictedRechargeAccess(Mockito.<String>any());
        verify(response).setRestrictedRechargeFlag(anyBoolean());
        verify(response, atLeast(1)).setReturnAllowed(Mockito.<String>any());
        verify(response, atLeast(1)).setReturnChnlBypassAllowed(Mockito.<String>any());
        verify(response, atLeast(1)).setToCategory(Mockito.<String>any());
        verify(response).setToCategoryDesc(Mockito.<String>any());
        verify(response).setToCategorySeqNumber(Mockito.<Integer>any());
        verify(response, atLeast(1)).setToDomainCode(Mockito.<String>any());
        verify(response).setToDomainCodeDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setTransferChnlBypassAllowed(Mockito.<String>any());
        verify(response, atLeast(1)).setTransferType(Mockito.<String>any());
        verify(response).setTransferTypeDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setUncntrlReturnAllowed(Mockito.<String>any());
        verify(response, atLeast(1)).setUncntrlReturnLevel(Mockito.<String>any());
        verify(response).setUncntrlReturnLevelDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setUncntrlTransferAllowed(Mockito.<String>any());
        verify(response).setUncntrlTransferAllowedFlag(anyBoolean());
        verify(response, atLeast(1)).setUncntrlTransferLevel(Mockito.<String>any());
        verify(response).setUncntrlTransferLevelDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setUncntrlWithdrawAllowed(Mockito.<String>any());
        verify(response, atLeast(1)).setUncntrlWithdrawLevel(Mockito.<String>any());
        verify(response).setUncntrlWithdrawLevelDesc(Mockito.<String>any());
        verify(response, atLeast(1)).setWithdrawAllowed(Mockito.<String>any());
        verify(response, atLeast(1)).setWithdrawChnlBypassAllowed(Mockito.<String>any());
    }
}

