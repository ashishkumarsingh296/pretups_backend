// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.inter.iat.client;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.xsd.XSDConstants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.encoding.literal.DetailFragmentDeserializer;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.util.List;
import java.util.ArrayList;

public class CheckStatusResult_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable {
    private static final javax.xml.namespace.QName ns1_IatReasonCode_QNAME = new QName("java:com.wha.iat.pretups.ws", "IatReasonCode");
    private static final javax.xml.namespace.QName ns2_int_TYPE_QNAME = SchemaConstants.QNAME_TYPE_INT;
    private CombinedSerializer ns2_myns2__int__int_Int_Serializer;
    private static final javax.xml.namespace.QName ns1_IatReasonMessage_QNAME = new QName("java:com.wha.iat.pretups.ws", "IatReasonMessage");
    private static final javax.xml.namespace.QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns2_myns2_string__java_lang_String_String_Serializer;
    private static final javax.xml.namespace.QName ns1_Level_QNAME = new QName("java:com.wha.iat.pretups.ws", "Level");
    private static final javax.xml.namespace.QName ns1_ProvRatio_QNAME = new QName("java:com.wha.iat.pretups.ws", "ProvRatio");
    private static final javax.xml.namespace.QName ns2_double_TYPE_QNAME = SchemaConstants.QNAME_TYPE_DOUBLE;
    private CombinedSerializer ns2_myns2__double__double_Double_Serializer;
    private static final javax.xml.namespace.QName ns1_RNwReasonCode_QNAME = new QName("java:com.wha.iat.pretups.ws", "RNwReasonCode");
    private static final javax.xml.namespace.QName ns1_RNwReasonMessage_QNAME = new QName("java:com.wha.iat.pretups.ws", "RNwReasonMessage");
    private static final javax.xml.namespace.QName ns1_Status_QNAME = new QName("java:com.wha.iat.pretups.ws", "Status");
    private static final javax.xml.namespace.QName ns1_ExchangeRate_QNAME = new QName("java:com.wha.iat.pretups.ws", "ExchangeRate");
    private static final javax.xml.namespace.QName ns1_IatReceivedAmount_QNAME = new QName("java:com.wha.iat.pretups.ws", "IatReceivedAmount");
    private static final javax.xml.namespace.QName ns1_RPfReceivedAmount_QNAME = new QName("java:com.wha.iat.pretups.ws", "RPfReceivedAmount");
    private static final javax.xml.namespace.QName ns1_Fees_QNAME = new QName("java:com.wha.iat.pretups.ws", "Fees");
    private static final javax.xml.namespace.QName ns1_RBonus_QNAME = new QName("java:com.wha.iat.pretups.ws", "RBonus");
    private static final javax.xml.namespace.QName ns1_RecipientReceivedAmount_QNAME = new QName("java:com.wha.iat.pretups.ws", "RecipientReceivedAmount");
    private static final javax.xml.namespace.QName ns1_RNwId_QNAME = new QName("java:com.wha.iat.pretups.ws", "RNwId");

    public CheckStatusResult_LiteralSerializer(javax.xml.namespace.QName type, java.lang.String encodingStyle) {
        this(type, encodingStyle, false);
    }

    public CheckStatusResult_LiteralSerializer(javax.xml.namespace.QName type, java.lang.String encodingStyle, boolean encodeType) {
        super(type, true, encodingStyle, encodeType);
    }

    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns2_myns2__int__int_Int_Serializer = (CombinedSerializer) registry.getSerializer("", int.class, ns2_int_TYPE_QNAME);
        ns2_myns2_string__java_lang_String_String_Serializer = (CombinedSerializer) registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        ns2_myns2__double__double_Double_Serializer = (CombinedSerializer) registry.getSerializer("", double.class, ns2_double_TYPE_QNAME);
    }

    public java.lang.Object doDeserialize(XMLReader reader, SOAPDeserializationContext context) throws java.lang.Exception {
        com.inter.iat.client.CheckStatusResult instance = new com.inter.iat.client.CheckStatusResult();
        java.lang.Object member = null;
        javax.xml.namespace.QName elementName;
        java.util.List values;
        java.lang.Object value;

        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_IatReasonCode_QNAME)) {
                member = ns2_myns2__int__int_Int_Serializer.deserialize(ns1_IatReasonCode_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setIatReasonCode(((java.lang.Integer) member).intValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_IatReasonCode_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_IatReasonMessage_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_IatReasonMessage_QNAME, reader, context);
                instance.setIatReasonMessage((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_IatReasonMessage_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Level_QNAME)) {
                member = ns2_myns2__int__int_Int_Serializer.deserialize(ns1_Level_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setLevel(((java.lang.Integer) member).intValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_Level_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_ProvRatio_QNAME)) {
                member = ns2_myns2__double__double_Double_Serializer.deserialize(ns1_ProvRatio_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setProvRatio(((Double) member).doubleValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_ProvRatio_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_RNwReasonCode_QNAME)) {
                member = ns2_myns2__int__int_Int_Serializer.deserialize(ns1_RNwReasonCode_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setRNwReasonCode(((java.lang.Integer) member).intValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_RNwReasonCode_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_RNwReasonMessage_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_RNwReasonMessage_QNAME, reader, context);
                instance.setRNwReasonMessage((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_RNwReasonMessage_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Status_QNAME)) {
                member = ns2_myns2__int__int_Int_Serializer.deserialize(ns1_Status_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setStatus(((java.lang.Integer) member).intValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_Status_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_ExchangeRate_QNAME)) {
                member = ns2_myns2__double__double_Double_Serializer.deserialize(ns1_ExchangeRate_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setExchangeRate(((Double) member).doubleValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_ExchangeRate_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_IatReceivedAmount_QNAME)) {
                member = ns2_myns2__double__double_Double_Serializer.deserialize(ns1_IatReceivedAmount_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setIatReceivedAmount(((Double) member).doubleValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_IatReceivedAmount_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_RPfReceivedAmount_QNAME)) {
                member = ns2_myns2__double__double_Double_Serializer.deserialize(ns1_RPfReceivedAmount_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setRPfReceivedAmount(((Double) member).doubleValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_RPfReceivedAmount_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Fees_QNAME)) {
                member = ns2_myns2__double__double_Double_Serializer.deserialize(ns1_Fees_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setFees(((Double) member).doubleValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_Fees_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_RBonus_QNAME)) {
                member = ns2_myns2__double__double_Double_Serializer.deserialize(ns1_RBonus_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setRBonus(((Double) member).doubleValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_RBonus_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_RecipientReceivedAmount_QNAME)) {
                member = ns2_myns2__double__double_Double_Serializer.deserialize(ns1_RecipientReceivedAmount_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setRecipientReceivedAmount(((Double) member).doubleValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_RecipientReceivedAmount_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_RNwId_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_RNwId_QNAME, reader, context);
                instance.setRNwId((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_RNwId_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }

        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (java.lang.Object) instance;
    }

    public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        com.inter.iat.client.CheckStatusResult instance = (com.inter.iat.client.CheckStatusResult) obj;

    }

    public void doSerialize(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        com.inter.iat.client.CheckStatusResult instance = (com.inter.iat.client.CheckStatusResult) obj;

        if (new java.lang.Integer(instance.getIatReasonCode()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__int__int_Int_Serializer.serialize(new java.lang.Integer(instance.getIatReasonCode()), ns1_IatReasonCode_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getIatReasonMessage(), ns1_IatReasonMessage_QNAME, null, writer, context);
        if (new java.lang.Integer(instance.getLevel()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__int__int_Int_Serializer.serialize(new java.lang.Integer(instance.getLevel()), ns1_Level_QNAME, null, writer, context);
        if (new Double(instance.getProvRatio()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__double__double_Double_Serializer.serialize(new Double(instance.getProvRatio()), ns1_ProvRatio_QNAME, null, writer, context);
        if (new java.lang.Integer(instance.getRNwReasonCode()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__int__int_Int_Serializer.serialize(new java.lang.Integer(instance.getRNwReasonCode()), ns1_RNwReasonCode_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getRNwReasonMessage(), ns1_RNwReasonMessage_QNAME, null, writer, context);
        if (new java.lang.Integer(instance.getStatus()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__int__int_Int_Serializer.serialize(new java.lang.Integer(instance.getStatus()), ns1_Status_QNAME, null, writer, context);
        if (new Double(instance.getExchangeRate()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__double__double_Double_Serializer.serialize(new Double(instance.getExchangeRate()), ns1_ExchangeRate_QNAME, null, writer, context);
        if (new Double(instance.getIatReceivedAmount()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__double__double_Double_Serializer.serialize(new Double(instance.getIatReceivedAmount()), ns1_IatReceivedAmount_QNAME, null, writer, context);
        if (new Double(instance.getRPfReceivedAmount()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__double__double_Double_Serializer.serialize(new Double(instance.getRPfReceivedAmount()), ns1_RPfReceivedAmount_QNAME, null, writer, context);
        if (new Double(instance.getFees()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__double__double_Double_Serializer.serialize(new Double(instance.getFees()), ns1_Fees_QNAME, null, writer, context);
        if (new Double(instance.getRBonus()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__double__double_Double_Serializer.serialize(new Double(instance.getRBonus()), ns1_RBonus_QNAME, null, writer, context);
        if (new Double(instance.getRecipientReceivedAmount()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__double__double_Double_Serializer.serialize(new Double(instance.getRecipientReceivedAmount()), ns1_RecipientReceivedAmount_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getRNwId(), ns1_RNwId_QNAME, null, writer, context);
    }
}
