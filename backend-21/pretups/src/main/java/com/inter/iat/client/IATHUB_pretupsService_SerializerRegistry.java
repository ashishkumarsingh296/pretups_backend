// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.inter.iat.client;

import com.sun.xml.rpc.client.BasicService;
import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.*;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.soap.SOAPVersion;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.rpc.*;
import javax.xml.rpc.encoding.*;
import javax.xml.namespace.QName;

public class IATHUB_pretupsService_SerializerRegistry implements SerializerConstants {
    public IATHUB_pretupsService_SerializerRegistry() {
    }

    public TypeMappingRegistry getRegistry() {

        TypeMappingRegistry registry = BasicService.createStandardTypeMappingRegistry();
        TypeMapping mapping12 = registry.getTypeMapping(SOAP12Constants.NS_SOAP_ENCODING);
        TypeMapping mapping = registry.getTypeMapping(SOAPConstants.NS_SOAP_ENCODING);
        TypeMapping mapping2 = registry.getTypeMapping("");
        {
            QName type = new QName("http://com/wha/iat/pretups/ws", "checkStatusRequest");
            CombinedSerializer serializer = new com.inter.iat.client.CheckStatusRequest_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.inter.iat.client.CheckStatusRequest.class, type, serializer);
        }
        {
            QName type = new QName("http://com/wha/iat/pretups/ws", "checkStatusRequestResponse");
            CombinedSerializer serializer = new com.inter.iat.client.CheckStatusRequestResponse_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.inter.iat.client.CheckStatusRequestResponse.class, type, serializer);
        }
        {
            QName type = new QName("java:com.wha.iat.pretups.ws", "CheckStatusParam");
            CombinedSerializer serializer = new com.inter.iat.client.CheckStatusParam_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.inter.iat.client.CheckStatusParam.class, type, serializer);
        }
        {
            QName type = new QName("java:com.wha.iat.pretups.ws", "RechargeResult");
            CombinedSerializer serializer = new com.inter.iat.client.RechargeResult_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.inter.iat.client.RechargeResult.class, type, serializer);
        }
        {
            QName type = new QName("http://com/wha/iat/pretups/ws", "rechargeRequest");
            CombinedSerializer serializer = new com.inter.iat.client.RechargeRequest_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.inter.iat.client.RechargeRequest.class, type, serializer);
        }
        {
            QName type = new QName("http://com/wha/iat/pretups/ws", "quotationRequestResponse");
            CombinedSerializer serializer = new com.inter.iat.client.QuotationRequestResponse_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.inter.iat.client.QuotationRequestResponse.class, type, serializer);
        }
        {
            QName type = new QName("java:com.wha.iat.pretups.ws", "CheckStatusResult");
            CombinedSerializer serializer = new com.inter.iat.client.CheckStatusResult_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.inter.iat.client.CheckStatusResult.class, type, serializer);
        }
        {
            QName type = new QName("http://com/wha/iat/pretups/ws", "rechargeRequestResponse");
            CombinedSerializer serializer = new com.inter.iat.client.RechargeRequestResponse_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.inter.iat.client.RechargeRequestResponse.class, type, serializer);
        }
        {
            QName type = new QName("java:com.wha.iat.pretups.ws", "QuotationParam");
            CombinedSerializer serializer = new com.inter.iat.client.QuotationParam_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.inter.iat.client.QuotationParam.class, type, serializer);
        }
        {
            QName type = new QName("java:com.wha.iat.pretups.ws", "RechargeParam");
            CombinedSerializer serializer = new com.inter.iat.client.RechargeParam_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.inter.iat.client.RechargeParam.class, type, serializer);
        }
        {
            QName type = new QName("http://com/wha/iat/pretups/ws", "quotationRequest");
            CombinedSerializer serializer = new com.inter.iat.client.QuotationRequest_LiteralSerializer(type, "", DONT_ENCODE_TYPE);
            registerSerializer(mapping2, com.inter.iat.client.QuotationRequest.class, type, serializer);
        }
        return registry;
    }

    private static void registerSerializer(TypeMapping mapping, java.lang.Class javaType, javax.xml.namespace.QName xmlType, Serializer ser) {
        mapping.register(javaType, xmlType, new SingletonSerializerFactory(ser), new SingletonDeserializerFactory((Deserializer) ser));
    }

}
