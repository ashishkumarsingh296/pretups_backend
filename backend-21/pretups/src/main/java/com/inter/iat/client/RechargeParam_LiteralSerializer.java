// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JAX-RPC Standard Implementation (1.1.3, build R1)
// Generated source version: 1.1.3

package com.inter.iat.client;

import com.sun.xml.rpc.encoding.*;
import com.sun.xml.rpc.encoding.xsd.XSDConstants;
import com.sun.xml.rpc.encoding.literal.*;
import com.sun.xml.rpc.encoding.literal.DetailFragmentDeserializer;
import com.sun.xml.rpc.encoding.simpletype.*;
import com.sun.xml.rpc.encoding.soap.SOAPConstants;
import com.sun.xml.rpc.encoding.soap.SOAP12Constants;
import com.sun.xml.rpc.streaming.*;
import com.sun.xml.rpc.wsdl.document.schema.SchemaConstants;
import javax.xml.namespace.QName;
import java.util.List;
import java.util.ArrayList;

public class RechargeParam_LiteralSerializer extends LiteralObjectSerializerBase implements Initializable {
    private static final javax.xml.namespace.QName ns1_Amount_QNAME = new QName("java:com.wha.iat.pretups.ws", "Amount");
    private static final javax.xml.namespace.QName ns2_double_TYPE_QNAME = SchemaConstants.QNAME_TYPE_DOUBLE;
    private CombinedSerializer ns2_myns2__double__double_Double_Serializer;
    private static final javax.xml.namespace.QName ns1_DeviceId_QNAME = new QName("java:com.wha.iat.pretups.ws", "DeviceId");
    private static final javax.xml.namespace.QName ns2_string_TYPE_QNAME = SchemaConstants.QNAME_TYPE_STRING;
    private CombinedSerializer ns2_myns2_string__java_lang_String_String_Serializer;
    private static final javax.xml.namespace.QName ns1_Ext1_QNAME = new QName("java:com.wha.iat.pretups.ws", "Ext1");
    private static final javax.xml.namespace.QName ns1_Ext2_QNAME = new QName("java:com.wha.iat.pretups.ws", "Ext2");
    private static final javax.xml.namespace.QName ns1_Ext3_QNAME = new QName("java:com.wha.iat.pretups.ws", "Ext3");
    private static final javax.xml.namespace.QName ns1_MSISDN1_QNAME = new QName("java:com.wha.iat.pretups.ws", "MSISDN1");
    private static final javax.xml.namespace.QName ns1_MSISDN2_QNAME = new QName("java:com.wha.iat.pretups.ws", "MSISDN2");
    private static final javax.xml.namespace.QName ns1_MSISDN3_QNAME = new QName("java:com.wha.iat.pretups.ws", "MSISDN3");
    private static final javax.xml.namespace.QName ns1_RCountryCode_QNAME = new QName("java:com.wha.iat.pretups.ws", "RCountryCode");
    private static final javax.xml.namespace.QName ns2_int_TYPE_QNAME = SchemaConstants.QNAME_TYPE_INT;
    private CombinedSerializer ns2_myns2__int__int_Int_Serializer;
    private static final javax.xml.namespace.QName ns1_RechargeType_QNAME = new QName("java:com.wha.iat.pretups.ws", "RechargeType");
    private static final javax.xml.namespace.QName ns1_RetailerId_QNAME = new QName("java:com.wha.iat.pretups.ws", "RetailerId");
    private static final javax.xml.namespace.QName ns1_SCountryCode_QNAME = new QName("java:com.wha.iat.pretups.ws", "SCountryCode");
    private static final javax.xml.namespace.QName ns1_SendingBearer_QNAME = new QName("java:com.wha.iat.pretups.ws", "SendingBearer");
    private static final javax.xml.namespace.QName ns1_ServiceType_QNAME = new QName("java:com.wha.iat.pretups.ws", "ServiceType");
    private static final javax.xml.namespace.QName ns1_SNwId_QNAME = new QName("java:com.wha.iat.pretups.ws", "SNwId");
    private static final javax.xml.namespace.QName ns1_SNwTimeStamp_QNAME = new QName("java:com.wha.iat.pretups.ws", "SNwTimeStamp");
    private static final javax.xml.namespace.QName ns2_dateTime_TYPE_QNAME = SchemaConstants.QNAME_TYPE_DATE_TIME;
    private CombinedSerializer ns2_myns2_dateTime__java_util_Calendar_DateTimeCalendar_Serializer;
    private static final javax.xml.namespace.QName ns1_SNwTrxId_QNAME = new QName("java:com.wha.iat.pretups.ws", "SNwTrxId");
    private static final javax.xml.namespace.QName ns1_SNwType_QNAME = new QName("java:com.wha.iat.pretups.ws", "SNwType");

    public RechargeParam_LiteralSerializer(javax.xml.namespace.QName type, java.lang.String encodingStyle) {
        this(type, encodingStyle, false);
    }

    public RechargeParam_LiteralSerializer(javax.xml.namespace.QName type, java.lang.String encodingStyle, boolean encodeType) {
        super(type, true, encodingStyle, encodeType);
    }

    public void initialize(InternalTypeMappingRegistry registry) throws Exception {
        ns2_myns2__double__double_Double_Serializer = (CombinedSerializer) registry.getSerializer("", double.class, ns2_double_TYPE_QNAME);
        ns2_myns2_string__java_lang_String_String_Serializer = (CombinedSerializer) registry.getSerializer("", java.lang.String.class, ns2_string_TYPE_QNAME);
        ns2_myns2__int__int_Int_Serializer = (CombinedSerializer) registry.getSerializer("", int.class, ns2_int_TYPE_QNAME);
        ns2_myns2_dateTime__java_util_Calendar_DateTimeCalendar_Serializer = (CombinedSerializer) registry.getSerializer("", java.util.Calendar.class, ns2_dateTime_TYPE_QNAME);
    }

    public java.lang.Object doDeserialize(XMLReader reader, SOAPDeserializationContext context) throws java.lang.Exception {
        com.inter.iat.client.RechargeParam instance = new com.inter.iat.client.RechargeParam();
        java.lang.Object member = null;
        javax.xml.namespace.QName elementName;
        java.util.List values;
        java.lang.Object value;

        reader.nextElementContent();
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Amount_QNAME)) {
                member = ns2_myns2__double__double_Double_Serializer.deserialize(ns1_Amount_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setAmount(((Double) member).doubleValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_Amount_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_DeviceId_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_DeviceId_QNAME, reader, context);
                instance.setDeviceId((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_DeviceId_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Ext1_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Ext1_QNAME, reader, context);
                instance.setExt1((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_Ext1_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Ext2_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Ext2_QNAME, reader, context);
                instance.setExt2((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_Ext2_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_Ext3_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_Ext3_QNAME, reader, context);
                instance.setExt3((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_Ext3_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_MSISDN1_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_MSISDN1_QNAME, reader, context);
                instance.setMSISDN1((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_MSISDN1_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_MSISDN2_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_MSISDN2_QNAME, reader, context);
                instance.setMSISDN2((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_MSISDN2_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_MSISDN3_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_MSISDN3_QNAME, reader, context);
                instance.setMSISDN3((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_MSISDN3_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_RCountryCode_QNAME)) {
                member = ns2_myns2__int__int_Int_Serializer.deserialize(ns1_RCountryCode_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setRCountryCode(((java.lang.Integer) member).intValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_RCountryCode_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_RechargeType_QNAME)) {
                member = ns2_myns2__int__int_Int_Serializer.deserialize(ns1_RechargeType_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setRechargeType(((java.lang.Integer) member).intValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_RechargeType_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_RetailerId_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_RetailerId_QNAME, reader, context);
                instance.setRetailerId((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_RetailerId_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_SCountryCode_QNAME)) {
                member = ns2_myns2__int__int_Int_Serializer.deserialize(ns1_SCountryCode_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setSCountryCode(((java.lang.Integer) member).intValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_SCountryCode_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_SendingBearer_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_SendingBearer_QNAME, reader, context);
                instance.setSendingBearer((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_SendingBearer_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_ServiceType_QNAME)) {
                member = ns2_myns2__int__int_Int_Serializer.deserialize(ns1_ServiceType_QNAME, reader, context);
                if (member == null) {
                    throw new DeserializationException("literal.unexpectedNull");
                }
                instance.setServiceType(((java.lang.Integer) member).intValue());
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_ServiceType_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_SNwId_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_SNwId_QNAME, reader, context);
                instance.setSNwId((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_SNwId_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_SNwTimeStamp_QNAME)) {
                member = ns2_myns2_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.deserialize(ns1_SNwTimeStamp_QNAME, reader, context);
                instance.setSNwTimeStamp((java.util.Calendar) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_SNwTimeStamp_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_SNwTrxId_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_SNwTrxId_QNAME, reader, context);
                instance.setSNwTrxId((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_SNwTrxId_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }
        elementName = reader.getName();
        if (reader.getState() == XMLReader.START) {
            if (elementName.equals(ns1_SNwType_QNAME)) {
                member = ns2_myns2_string__java_lang_String_String_Serializer.deserialize(ns1_SNwType_QNAME, reader, context);
                instance.setSNwType((java.lang.String) member);
                reader.nextElementContent();
            } else {
                throw new DeserializationException("literal.unexpectedElementName", new Object[] { ns1_SNwType_QNAME, reader.getName() });
            }
        } else {
            throw new DeserializationException("literal.expectedElementName", reader.getName().toString());
        }

        XMLReaderUtil.verifyReaderState(reader, XMLReader.END);
        return (java.lang.Object) instance;
    }

    public void doSerializeAttributes(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        com.inter.iat.client.RechargeParam instance = (com.inter.iat.client.RechargeParam) obj;

    }

    public void doSerialize(java.lang.Object obj, XMLWriter writer, SOAPSerializationContext context) throws java.lang.Exception {
        com.inter.iat.client.RechargeParam instance = (com.inter.iat.client.RechargeParam) obj;

        if (new Double(instance.getAmount()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__double__double_Double_Serializer.serialize(new Double(instance.getAmount()), ns1_Amount_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getDeviceId(), ns1_DeviceId_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getExt1(), ns1_Ext1_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getExt2(), ns1_Ext2_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getExt3(), ns1_Ext3_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getMSISDN1(), ns1_MSISDN1_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getMSISDN2(), ns1_MSISDN2_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getMSISDN3(), ns1_MSISDN3_QNAME, null, writer, context);
        if (new java.lang.Integer(instance.getRCountryCode()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__int__int_Int_Serializer.serialize(new java.lang.Integer(instance.getRCountryCode()), ns1_RCountryCode_QNAME, null, writer, context);
        if (new java.lang.Integer(instance.getRechargeType()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__int__int_Int_Serializer.serialize(new java.lang.Integer(instance.getRechargeType()), ns1_RechargeType_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getRetailerId(), ns1_RetailerId_QNAME, null, writer, context);
        if (new java.lang.Integer(instance.getSCountryCode()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__int__int_Int_Serializer.serialize(new java.lang.Integer(instance.getSCountryCode()), ns1_SCountryCode_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getSendingBearer(), ns1_SendingBearer_QNAME, null, writer, context);
        if (new java.lang.Integer(instance.getServiceType()) == null) {
            throw new SerializationException("literal.unexpectedNull");
        }
        ns2_myns2__int__int_Int_Serializer.serialize(new java.lang.Integer(instance.getServiceType()), ns1_ServiceType_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getSNwId(), ns1_SNwId_QNAME, null, writer, context);
        ns2_myns2_dateTime__java_util_Calendar_DateTimeCalendar_Serializer.serialize(instance.getSNwTimeStamp(), ns1_SNwTimeStamp_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getSNwTrxId(), ns1_SNwTrxId_QNAME, null, writer, context);
        ns2_myns2_string__java_lang_String_String_Serializer.serialize(instance.getSNwType(), ns1_SNwType_QNAME, null, writer, context);
    }
}
