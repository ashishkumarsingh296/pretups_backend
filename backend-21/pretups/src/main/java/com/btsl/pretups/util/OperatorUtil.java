/**
 * @(#)OperatorUtil.java
 *                       Copyright(c) 2005, Bharti Telesoft Ltd.
 *                       All Rights Reserved
 * 
 *                       <description>
 *                       ------------------------------------------------------
 *                       -------------------------------------------
 *                       Author Date History
 *                       ------------------------------------------------------
 *                       -------------------------------------------
 *                       avinash.kamthan Aug 5, 2005 Initital Creation
 *                       Abhijit Jul 21 2006 Modified By
 *                       Ankit Zindal Nov 20,2006 ChangeID=LOCALEMASTER
 *                       Sourabh Gupta Dec 14,2006 ChangeId=TATASKYRCHG
 *                       ------------------------------------------------------
 *                       -------------------------------------------
 * 
 */

package com.btsl.pretups.util;

import com.btsl.common.*;
import com.btsl.event.*;
import com.btsl.logging.Log;
import com.btsl.logging.LogFactory;
import com.btsl.pretups.cardgroup.businesslogic.BonusBundleCache;
import com.btsl.pretups.cardgroup.businesslogic.BonusBundleDetailVO;
import com.btsl.pretups.cardgroup.businesslogic.CardGroupDetailsVO;
import com.btsl.pretups.channel.profile.businesslogic.LoanProfileDetailsVO;
import com.btsl.pretups.channel.profile.businesslogic.ProfileSetDetailsVO;
import com.btsl.pretups.channel.profile.businesslogic.ProfileSetVO;
import com.btsl.pretups.channel.profile.businesslogic.ProfileSetVersionVO;
import com.btsl.pretups.channel.transfer.businesslogic.*;
import com.btsl.pretups.common.PretupsErrorCodesI;
import com.btsl.pretups.common.PretupsI;
import com.btsl.pretups.currencyconversion.businesslogic.CurrencyConversionCache;
import com.btsl.pretups.currencyconversion.businesslogic.CurrencyConversionVO;
import com.btsl.pretups.iat.transfer.businesslogic.IATTransferItemVO;
import com.btsl.pretups.loyaltymgmt.businesslogic.LoyaltyPointsRedemptionVO;
import com.btsl.pretups.master.businesslogic.LocaleMasterCache;
import com.btsl.pretups.master.businesslogic.LookupsCache;
import com.btsl.pretups.master.businesslogic.ServiceSelectorMappingCache;
import com.btsl.pretups.master.businesslogic.ServiceSelectorMappingVO;
import com.btsl.pretups.network.businesslogic.NetworkInterfaceModuleCache;
import com.btsl.pretups.network.businesslogic.NetworkInterfaceModuleVO;
import com.btsl.pretups.network.businesslogic.NetworkPrefixCache;
import com.btsl.pretups.network.businesslogic.NetworkPrefixVO;
import com.btsl.pretups.networkstock.businesslogic.NetworkStockTxnVO;
import com.btsl.pretups.p2p.subscriber.businesslogic.BuddyVO;
import com.btsl.pretups.p2p.subscriber.businesslogic.P2PBuddiesDAO;
import com.btsl.pretups.p2p.subscriber.businesslogic.SubscriberBL;
import com.btsl.pretups.p2p.subscriber.businesslogic.SubscriberDAO;
import com.btsl.pretups.p2p.transfer.businesslogic.MCDListVO;
import com.btsl.pretups.p2p.transfer.businesslogic.P2PTransferVO;
import com.btsl.pretups.payment.businesslogic.PaymentMethodCache;
import com.btsl.pretups.payment.businesslogic.PaymentMethodKeywordVO;
import com.btsl.pretups.payment.businesslogic.ServicePaymentMappingCache;
import com.btsl.pretups.preference.businesslogic.PreferenceCache;
import com.btsl.pretups.preference.businesslogic.PreferenceI;
import com.btsl.pretups.preference.businesslogic.SystemPreferences;
import com.btsl.pretups.privaterecharge.businesslogic.PrivateRchrgDAO;
import com.btsl.pretups.privaterecharge.businesslogic.PrivateRchrgVO;
import com.btsl.pretups.processes.businesslogic.ActivationBonusVO;
import com.btsl.pretups.processes.businesslogic.UserTransactionVO;
import com.btsl.pretups.receiver.RequestVO;
import com.btsl.pretups.restrictedsubs.businesslogic.RestrictedSubscriberDAO;
import com.btsl.pretups.restrictedsubs.businesslogic.RestrictedSubscriberVO;
import com.btsl.pretups.routing.subscribermgmt.businesslogic.RoutingDAO;
import com.btsl.pretups.scheduletopup.businesslogic.ScheduleBatchMasterVO;
import com.btsl.pretups.subscriber.businesslogic.ReceiverVO;
import com.btsl.pretups.subscriber.businesslogic.SenderVO;
import com.btsl.pretups.transfer.businesslogic.TransferItemVO;
import com.btsl.pretups.transfer.businesslogic.TransferVO;
import com.btsl.pretups.user.businesslogic.ChannelUserBL;
import com.btsl.pretups.user.businesslogic.ChannelUserDAO;
import com.btsl.pretups.user.businesslogic.ChannelUserVO;
import com.btsl.pretups.user.businesslogic.UserLevelTrfRuleDAO;
import com.btsl.user.businesslogic.UserDAO;
import com.btsl.user.businesslogic.UserLoanVO;
import com.btsl.user.businesslogic.UserPhoneVO;
import com.btsl.util.BTSLDateUtil;
import com.btsl.util.BTSLUtil;
import com.btsl.util.Constants;
import com.btsl.voms.util.VomsUtil;
import com.btsl.voms.vomscommon.VOMSI;
import com.ibm.icu.util.Calendar;
import com.restapi.networkadmin.networkStock.NetworkStockTxnVO1;
import com.web.pretups.channel.transfer.businesslogic.ChannelTransferWebDAO;
import org.passay.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.apache.commons.lang.StringUtils.leftPad;



/**
 * @author avinash.kamthan This class must be extended if Operator specific
 *         implementation would be required Tax 1 Rate (Service Tax)= x % Tax2
 *         Rate (Withholding tax) = y % Distributor Margin Rate= z%
 * 
 * 
 *         Tax1 Value=(x/(100+x))*MRP (tax in inclusive in MRP) Distributor
 *         Margin Value = (z/1000)*Transfer MRP Tax 2 Value =
 *         (y/100)*Distributor Margin Value Distributor Amount Payable = MRP �
 *         Distributor Margin Value �Tax2
 * 
 */
public class OperatorUtil implements OperatorUtilI {
    /**
     * Field C2S_TRANSFER_ID_PAD_LENGTH. for the TXN_ID of the C2S TXN
     */
    protected int C2S_TRANSFER_ID_PAD_LENGTH = 4;
    /**
     * Field P2P_TRANSFER_ID_PAD_LENGTH. for the TXN_ID of the P2P TXN
     */
    protected int P2P_TRANSFER_ID_PAD_LENGTH = 4;
    /**
     * Field CHANEL_TRANSFER_ID_LENGTH. for the TXN_ID of the
     * Channel(O2C/FOC/C2C) TXN
     */
    protected int CHANEL_TRANSFER_ID_PAD_LENGTH = 4;
    /**
     * Field NETWORK_STOCK_TXN_ID_LENGTH. for the TXN_ID of the NetworkStock TXN
     */
    protected int NETWORK_STOCK_TXN_ID_PAD_LENGTH = 4;
    /**
     * Field SCHEDULE_BATCH_ID_PAD_LENGTH.
     */
    protected int SCHEDULE_BATCH_ID_PAD_LENGTH = 4;
    /**
     * Field FOC_BATCH_MASTER_ID_PAD_LENGTH. for the TXN_ID of the FOC BATCH
     * MASTER
     */
    protected int FOC_BATCH_MASTER_ID_PAD_LENGTH = 3;

    /**
     * Field FOC_BATCH_DETAIL_ID_PAD_LENGTH. for the TXN_ID of the FOC BATCH
     * DETAILS
     */

    private int FOC_BATCH_DETAIL_ID_PAD_LENGTH = 5;
    /**
     * Field ADJUSTMENT_ID_PAD_LENGTH.
     */
    private int ADJUSTMENT_ID_PAD_LENGTH = 4;

    private int BATCH_ID_LENGTH = Integer.parseInt(Constants.getProperty("BATCH_PADDING_LENGTH"));

    /**
     * Field C2C_BATCH_DETAIL_ID_PAD_LENGTH. for the TXN_ID of the C2C BATCH
     * DETAILS
     */

    private int C2C_BATCH_DETAIL_ID_PAD_LENGTH = 5;

    /**
     * Field _log.
     */
    private static final Log _log = LogFactory.getLog(OperatorUtil.class.getName()); //made log final
    private static SecureRandom rn = new SecureRandom();

    // added by Lohit For Direct Payout
    private int DP_BATCH_MASTER_ID_PAD_LENGTH = 3;
    private int DP_BATCH_DETAIL_ID_PAD_LENGTH = 5;
    // end
    private int SALE_BATCH_NUMBER_PAD_LENGTH = 5;

    private int CRBT_REG__TRANSFER_ID_PAD_LENGTH = 4;

    /**
     * Field O2C_BATCH_MASTER_ID_PAD_LENGTH. for the TXN_ID of the FOC BATCH
     * MASTER
     */
    private int O2C_BATCH_MASTER_ID_PAD_LENGTH = 3;
    /**
     * Field O2C_BATCH_DETAIL_ID_PAD_LENGTH. for the TXN_ID of the FOC BATCH
     * DETAILS
     */
    private int O2C_BATCH_DETAIL_ID_PAD_LENGTH = 5;
    /**
     * Field PPB_TRANSFER_ID_PAD_LENGTH. for the TXN_ID of the PPB TXN
     */
    private static final int PPB_TRANSFER_ID_PAD_LENGTH = 7;

    /**
     * Field LPT_BATCH_MASTER_ID_PAD_LENGTH. for the TXN_ID of the LPT BATCH
     * MASTER
     */
    private static final int LPT_BATCH_MASTER_ID_PAD_LENGTH = 3;

    /**
     * Field LPT_BATCH_DETAIL_ID_PAD_LENGTH. for the TXN_ID of the LPT BATCH
     * DETAILS
     */

    private static final int LPT_BATCH_DETAIL_ID_PAD_LENGTH = 5;
    
    private static int C2S_TRANSFER_ID_PAD_LENGTH_COMMON = 4;
    
	private static int _transactionIDCounter=0;
	
	private static int  _prevMinut=0;
    
	private static SimpleDateFormat _sdfCompare = new SimpleDateFormat ("mm");
	
	 private long seed;
	private static String ENCKEY = null;
	    
    /**
     * Method calculateTax1.
     * 
     * @param p_type
     *            String
     * @param p_rate
     *            double
     * @param p_productCost
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateTax1(String, double,
     *      long)
     */
    @Override
    public long calculateTax1(String p_type, double p_rate, long p_productCost) throws BTSLBaseException {
        if (_log.isDebugEnabled()) {
            _log.debug("calculateTax1()", "Entered  p_type: " + p_type + " p_rate: " + p_rate + " p_productCost: " + p_productCost);
        }
        double taxCalculatedValue = 0;
        if (PretupsI.AMOUNT_TYPE_PERCENTAGE.equals(p_type)) {
            taxCalculatedValue = ((p_rate * p_productCost)/ (100 + p_rate));
            taxCalculatedValue = Math.round(taxCalculatedValue);
        } else if (PretupsI.SYSTEM_AMOUNT.equals(p_type)) {
            taxCalculatedValue = Double.valueOf(p_rate).longValue();
        } else {
            if (_log.isDebugEnabled()) {
                _log.debug("calculateTax1()", "Exception p_type is not define in the system p_type=" + p_type);
            }
            throw new BTSLBaseException(this, "calculateTax1", "error.invalid.ratetype");
        }

        if (_log.isDebugEnabled()) {
            _log.debug("calculateTax1()", "Exited  Tax1 Calculated Value " + taxCalculatedValue);
        }
        //return (long) taxCalculatedValue;
        return BTSLUtil.parseDoubleToLong(taxCalculatedValue);
    }


  

    /**
     * Method calculateTax2.
     * 
     * @param p_type
     *            String
     * @param p_rate
     *            double
     * @param p_value
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateTax2(String, double,
     *      long)
     */
    @Override
    public long calculateTax2(String p_type, double p_rate, long p_value) throws BTSLBaseException {
        if (_log.isDebugEnabled()) {
            _log.debug("calculateTax2()", "Entered  p_type: " + p_type + " p_rate: " + p_rate + " p_productCost: " + p_value);
        }

        double taxCalculatedValue = 0;
        if (PretupsI.AMOUNT_TYPE_PERCENTAGE.equals(p_type)) {
            taxCalculatedValue = ((p_rate * p_value)/ 100);
            taxCalculatedValue = Math.round(taxCalculatedValue);
        } else if (PretupsI.SYSTEM_AMOUNT.equals(p_type)) {
            taxCalculatedValue = Double.valueOf(p_rate).longValue();
        } else {
            if (_log.isDebugEnabled()) {
                _log.debug("calculateTax2()", "Exception p_type is not define in the system p_type=" + p_type);
            }
            throw new BTSLBaseException(this, "calculateTax2", "error.invalid.ratetype");
        }

        if (_log.isDebugEnabled()) {
            _log.debug("calculateTax2()", "Exited  Tax2 Calculated Value " + taxCalculatedValue);
        }
        //return (long) taxCalculatedValue;
        return BTSLUtil.parseDoubleToLong(taxCalculatedValue);
    }
    
    

    /**
     * Method calculateTax3.
     * 
     * @param p_type
     *            String
     * @param p_rate
     * @param p_rate
     *            double
     * @param p_value
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateTax3(String, double,
     *      long)
     */
    @Override
    public long calculateTax3(String p_type, double p_rate, long p_value) throws BTSLBaseException {
        if (_log.isDebugEnabled()) {
            _log.debug("calculateTax3()", "Entered  p_type: " + p_type + " p_rate: " + p_rate + " p_cost: " + p_value);
        }
        double taxCalculatedValue = 0;
        if (PretupsI.AMOUNT_TYPE_PERCENTAGE.equals(p_type)) {
            taxCalculatedValue = ((p_rate * p_value)/ 100) ;
            taxCalculatedValue = Math.round(taxCalculatedValue);
        } else if (PretupsI.SYSTEM_AMOUNT.equals(p_type)) {
            taxCalculatedValue = Double.valueOf(p_rate).longValue();
        } else {
            if (_log.isDebugEnabled()) {
                _log.debug("calculateTax3()", "Exception p_type is not define in the system p_type=" + p_type);
            }
            throw new BTSLBaseException(this, "calculateTax3", "error.invalid.ratetype");
        }

        if (_log.isDebugEnabled()) {
            _log.debug("calculateTax3()", "Exited  Tax3 Calculated Value " + taxCalculatedValue);
        }
        //return (long) taxCalculatedValue;
        return BTSLUtil.parseDoubleToLong(taxCalculatedValue);
    }
    
    

    /**
     * Method calculateDiscount.
     * 
     * @param p_discountType
     *            String
     * @param p_discountRate
     *            double
     * @param p_productCost
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateDiscount(String,
     *      double, long)
     */
    @Override
    public long calculateDiscount(String p_discountType, double p_discountRate, long p_productCost) throws BTSLBaseException {
        if (_log.isDebugEnabled()) {
            _log.debug("calculateCommission()", "Entered  p_type: " + p_discountType + " p_rate: " + p_discountRate + " p_cost: " + p_productCost);
        }

        double discountValue = 0;
        if (PretupsI.AMOUNT_TYPE_PERCENTAGE.equals(p_discountType)) {
            discountValue = ((p_discountRate * p_productCost)/ 100) ;
        } else if (PretupsI.SYSTEM_AMOUNT.equals(p_discountType)) {
            //discountValue = (long) (p_discountRate);
        	discountValue = p_discountRate;
        	
        } else {
            if (_log.isDebugEnabled()) {
                _log.debug("calculateDiscount()", "Exception p_discountType is not define in the system p_discountType=" + p_discountType);
            }
            throw new BTSLBaseException(this, "calculateDiscount", "error.invalid.ratetype");
        }

        if (_log.isDebugEnabled()) {
            _log.debug("calculateTax3()", "Exited  Discount Calculated Value " + discountValue);
        }

        return BTSLUtil.parseDoubleToLong( discountValue );
    }
    
    

    /**
     * Method calculateCommission.
     * 
     * @param p_commissionType
     *            String
     * @param p_commissionRate
     *            double
     * @param p_productCost
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateCommission(String,
     *      double, long)
     */
    @Override
    public long calculateCommission(String p_commissionType, double p_commissionRate, long p_productCost) throws BTSLBaseException {
        if (_log.isDebugEnabled()) {
            _log.debug("calculateCommission()", "Entered  p_type: " + p_commissionType + " p_rate: " + p_commissionRate + " p_cost: " + p_productCost);
        }

        double commValue = 0;
        if (PretupsI.AMOUNT_TYPE_PERCENTAGE.equals(p_commissionType)) {
            commValue = ((p_commissionRate * p_productCost)/100);
            //commValue = Math.round(commValue);
        } else if (PretupsI.SYSTEM_AMOUNT.equals(p_commissionType)) {
            commValue = (p_commissionRate);
        } else {
            if (_log.isDebugEnabled()) {
                _log.debug("calculateCommission()", "Exception p_commissionType is not define in the system p_commissionType=" + p_commissionType);
            }
            throw new BTSLBaseException(this, "calculateCommission", "error.invalid.ratetype");
        }

        if (_log.isDebugEnabled()) {
            _log.debug("calculateCommission()", "Exited Commission Clculated value " + commValue);
        }

        //return (long) commValue;
        return BTSLUtil.parseDoubleToLong(commValue);
    }
    
    

    /**
     * Method calculatePayableAmount.
     * 
     * @param p_unitValue
     *            long
     * @param p_requestedQuantity
     *            double
     * @param p_commissionValue
     *            long
     * @param p_discountValue
     *            long
     * @return long
     * @see com.btsl.pretups.util.OperatorUtilI#calculatePayableAmount(long,
     *      double, long, long)
     */
    @Override
    public long calculatePayableAmount(long p_unitValue, double p_requestedQuantity, long p_commissionValue, long p_discountValue) {

        if (_log.isDebugEnabled()) {
            _log.debug(
                "calculatePayableAmount()",
                "p_unitValue:" + p_unitValue + " p_requestedQuantity: " + p_requestedQuantity + " p_commissionValue: " + p_commissionValue + " p_discountValue: " + p_discountValue);
        }
        
        final long payableAmount = (long) (Math.round(p_unitValue * p_requestedQuantity) - p_commissionValue - p_discountValue);

        if (_log.isDebugEnabled()) {
            _log.debug("calculatePayableAmount()", "Exited Payable Amount value " + payableAmount);
        }

        return payableAmount;
    }
    
    

    /**
     * Method calculateNetPayableAmount.
     * 
     * @param p_payableAmount
     *            long
     * @param p_tax3Value
     *            long
     * @return long
     * @see com.btsl.pretups.util.OperatorUtilI#calculateNetPayableAmount(long,
     *      long)
     */
    @Override
    public long calculateNetPayableAmount(long p_payableAmount, long p_tax3Value) {

        if (_log.isDebugEnabled()) {
            _log.debug("calculateNetPayableAmount()", " p_payableAmount:" + p_payableAmount + " p_tax3Value: " + p_tax3Value);
        }

        final long netPayableAmount = p_payableAmount + p_tax3Value;

        if (_log.isDebugEnabled()) {
            _log.debug("calculateNetPayableAmount()", "Exited Payable Amount value " + netPayableAmount);
        }

        return netPayableAmount;
    }
    
    

    /**
     * Method calculateAccessFee.
     * 
     * @param p_accessFeeValue
     *            double
     * @param p_accessFeeType
     *            String
     * @param p_requestedValue
     *            long
     * @param p_minAccessFee
     *            long
     * @param p_maxAccessFee
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateAccessFee(double,
     *      String, long, long, long)
     */
    @Override
    public long calculateAccessFee(double p_accessFeeValue, String p_accessFeeType, long p_requestedValue, long p_minAccessFee, long p_maxAccessFee) throws BTSLBaseException {
        final String methodName = "calculateAccessFee";
        if (_log.isDebugEnabled()) {
            _log.debug(
                methodName,
                "Entered with p_accessFeeValue=" + p_accessFeeValue + " p_accessFeeType=" + p_accessFeeType + " p_minAccessFee=" + p_minAccessFee + " p_minAccessFee=" + p_minAccessFee);
        }
        long calculatedAccessFee = 0;
        try {
            if (p_accessFeeType.equalsIgnoreCase(PretupsI.SYSTEM_AMOUNT)) {
                //calculatedAccessFee = (long) p_accessFeeValue;
            	calculatedAccessFee = BTSLUtil.parseDoubleToLong(p_accessFeeValue);
            } else if (p_accessFeeType.equalsIgnoreCase(PretupsI.AMOUNT_TYPE_PERCENTAGE)) {
                // calculatedAccessFee=(long)((p_accessFeeValue*p_requestedValue)/(100+p_accessFeeValue))
                calculatedAccessFee = BTSLUtil.parseDoubleToLong(((p_accessFeeValue * p_requestedValue) / 100));
                if (calculatedAccessFee < p_minAccessFee) {
                    calculatedAccessFee = p_minAccessFee;
                } else if (calculatedAccessFee > p_maxAccessFee) {
                    calculatedAccessFee = p_maxAccessFee;
                }
            } else {
                if (_log.isDebugEnabled()) {
                    _log.debug("calculateAccessFee()", "Exception p_accessFeeType is not define in the system p_accessFeeType=" + p_accessFeeType);
                }
                throw new BTSLBaseException(this, methodName, "error.invalid.ratetype");
            }
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "CardGroupBL[calculateAccessFee]", "", "", " ",
                "Not able to calculate the access fee applicable getting Exception=" + e.getMessage());
            throw new BTSLBaseException("OperatorUtil", methodName, PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exiting with calculatedAccessFee=" + calculatedAccessFee);
        }
        return calculatedAccessFee;
    }

    /**
     * Method calculateCardGroupTax1.
     * 
     * @param p_type
     *            String
     * @param p_rate
     *            double
     * @param p_requestValue
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateCardGroupTax1(String,
     *      double, long)
     */
    @Override
    public long calculateCardGroupTax1(String p_type, double p_rate, long p_requestValue) throws BTSLBaseException {
        long calculatedTax1Value = 0;
        if (p_type.equalsIgnoreCase(PretupsI.SYSTEM_AMOUNT)) {
            calculatedTax1Value = Double.valueOf(p_rate).longValue();
        } else if (p_type.equalsIgnoreCase(PretupsI.AMOUNT_TYPE_PERCENTAGE)) {
            calculatedTax1Value = Double.valueOf(((p_rate * p_requestValue) / (100 + p_rate))).longValue();
        } else {
            if (_log.isDebugEnabled()) {
                _log.debug("calculateCardGroupTax1()", "Exception p_type is not define in the system p_type=" + p_type);
            }
            throw new BTSLBaseException(this, "calculateCardGroupTax1", "error.invalid.ratetype");
        }
        return calculatedTax1Value;
    }

    /**
     * Method calculateCardGroupTax2.
     * 
     * @param p_type
     *            String
     * @param p_rate
     *            double
     * @param p_requestValue
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateCardGroupTax2(String,
     *      double, long)
     */
    @Override
    public long calculateCardGroupTax2(String p_type, double p_rate, long p_requestValue) throws BTSLBaseException {
        long calculatedTax2Value = 0;
        if (p_type.equalsIgnoreCase(PretupsI.SYSTEM_AMOUNT)) {
            calculatedTax2Value = Double.valueOf(p_rate).longValue();
        } else if (p_type.equalsIgnoreCase(PretupsI.AMOUNT_TYPE_PERCENTAGE)) {
            calculatedTax2Value = Double.valueOf(((p_rate * p_requestValue) / 100)).longValue();
        } else {
            if (_log.isDebugEnabled()) {
                _log.debug("calculateCardGroupTax2()", "Exception p_type is not define in the system p_type=" + p_type);
            }
            throw new BTSLBaseException(this, "calculateCardGroupTax2", "error.invalid.ratetype");
        }
        return calculatedTax2Value;
    }

    /**
     * Method calculateCardGroupBonus.
     * 
     * @param p_type
     *            String
     * @param p_rate
     *            double
     * @param p_requestValue
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateCardGroupBonus(String,
     *      double, long)
     */
    @Override
    public long calculateCardGroupBonus(String p_type, double p_rate, long p_requestValue) throws BTSLBaseException {
        long calculatedBonusValue = 0;
        if (p_type.equalsIgnoreCase(PretupsI.SYSTEM_AMOUNT)) {
            calculatedBonusValue = Double.valueOf(p_rate).longValue();
        } else if (p_type.equalsIgnoreCase(PretupsI.AMOUNT_TYPE_PERCENTAGE)) {
            calculatedBonusValue = Double.valueOf(((p_requestValue * p_rate) / 100)).longValue();
        } else {
            if (_log.isDebugEnabled()) {
                _log.debug("calculateCardGroupBonus()", "Exception p_type is not define in the system p_type=" + p_type);
            }
            throw new BTSLBaseException(this, "calculateCardGroupBonus", "error.invalid.ratetype");
        }
        return calculatedBonusValue;
    }

    /**
     * Method calculateSenderTransferValue.
     * 
     * @param p_requestedValue
     *            long
     * @param p_calculatedTax1Value
     *            long
     * @param p_calculatedTax2Value
     *            long
     * @param p_calculatedAccessFee
     *            long
     * @return long
     * @see com.btsl.pretups.util.OperatorUtilI#calculateSenderTransferValue(long,
     *      long, long, long)
     */
    @Override
    public long calculateSenderTransferValue(long p_requestedValue, long p_calculatedTax1Value, long p_calculatedTax2Value, long p_calculatedAccessFee) {
        final long transferValue = p_requestedValue + p_calculatedTax1Value + p_calculatedTax2Value + p_calculatedAccessFee;
        return transferValue;
    }

    /**
     * Method calculateReceiverTransferValue.
     * 
     * @param p_requestedValue
     *            long
     * @param p_calculatedAccessFee
     *            long
     * @param p_calculatedTax1Value
     *            long
     * @param p_calculatedTax2Value
     *            long
     * @param p_calculatedBonusTalkTimeValue
     *            long
     * @return long
     * @see com.btsl.pretups.util.OperatorUtilI#calculateReceiverTransferValue(long,
     *      long, long, long, long)
     */
    @Override
    public long calculateReceiverTransferValue(long p_requestedValue, long p_calculatedAccessFee, long p_calculatedTax1Value, long p_calculatedTax2Value, long p_calculatedBonusTalkTimeValue) {
        final long transferValue = p_requestedValue - p_calculatedAccessFee - p_calculatedTax1Value - p_calculatedTax2Value + p_calculatedBonusTalkTimeValue;
        return transferValue;
    }

    /**
     * Method calculateValidity.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_transferDateTime
     *            Date
     * @param p_previousExpiry
     *            Date
     * @param p_valPeriodType
     *            String
     * @param p_validityPeriod
     *            int
     * @param p_bonusValidity
     *            int
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateValidity(TransferVO,
     *      Date, Date, String, int, int)
     */
    @Override
    public void calculateValidity(TransferVO p_transferVO, Date p_transferDateTime, Date p_previousExpiry, String p_valPeriodType, int p_validityPeriod, int p_bonusValidity) throws BTSLBaseException {
        final String methodName = "calculateValidity";
        if (_log.isDebugEnabled()) {
            _log.debug(
                methodName,
                "Entered with p_transferDateTime=" + p_transferDateTime + " p_previousExpiry=" + p_previousExpiry + " p_valPeriodType=" + p_valPeriodType + " p_validityPeriod=" + p_validityPeriod + " p_bonusValidity=" + p_bonusValidity);
        }
        try {
            java.util.Date newDate = null;
            // set the receiver Validity by adding the bonus validity.
            p_transferVO.setReceiverValidity(p_validityPeriod + p_bonusValidity);

            // Today + no of days or Previous Expiry which ever is higher
            if (p_previousExpiry != null && p_valPeriodType.equals(PretupsI.VALPERIOD_HIGHEST_TYPE)) {
                newDate = BTSLUtil.addDaysInUtilDate(p_transferDateTime, p_validityPeriod + p_bonusValidity);
                if (newDate.after(p_previousExpiry)) {
                    p_transferVO.setValidityDateToBeSet(newDate);
                } else {
                    p_transferVO.setValidityDateToBeSet(p_previousExpiry);
                }
            }
            // Today + no of days or Previous Expiry + no of days which ever is
            // higher
            else if (p_previousExpiry != null && p_valPeriodType.equals(PretupsI.VALPERIOD_CUMMULATIVE_TYPE)) {
                newDate = BTSLUtil.addDaysInUtilDate(p_transferDateTime, p_validityPeriod + p_bonusValidity);
                java.util.Date newDate2 = null;
                newDate2 = BTSLUtil.addDaysInUtilDate(p_previousExpiry, p_validityPeriod + p_bonusValidity);
                if (newDate2.after(newDate)) {
                    p_transferVO.setValidityDateToBeSet(newDate2);
                } else {
                    p_transferVO.setValidityDateToBeSet(newDate);
                }
            }
            // Today + no of days
            else if (p_valPeriodType.equals(PretupsI.VALPERIOD_LOWEST_TYPE)) {
                newDate = BTSLUtil.addDaysInUtilDate(p_transferDateTime, p_validityPeriod + p_bonusValidity);
                p_transferVO.setValidityDateToBeSet(newDate);
            }
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "CardGroupBL[calculateValidity]", p_transferVO
                .getTransferID(), p_transferVO.getReceiverMsisdn(), " ", "Not able to calculate the new validity period getting Exception=" + e.getMessage());
            throw new BTSLBaseException("CardGroupBL", methodName, PretupsErrorCodesI.ERROR_EXCEPTION);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exiting");
        }
    }

    /**
     * Method checkRechargeInGraceAllowed.
     * 
     * @param p_msisdn
     *            String
     * @param p_graceValue
     *            long
     * @param p_previousExpiry
     *            Date
     * @param p_currentDate
     *            Date
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#checkRechargeInGraceAllowed(String,
     *      long, Date, Date)
     */
    @Override
    public void checkRechargeInGraceAllowed(String p_msisdn, long p_graceValue, Date p_previousExpiry, Date p_currentDate) throws BTSLBaseException {
        final String methodName = "checkRechargeInGraceAllowed";
        if (_log.isDebugEnabled()) {
            _log.debug(methodName,
                "Entered with p_msisdn=" + p_msisdn + " p_graceValue=" + p_graceValue + " p_previousExpiry=" + p_previousExpiry + " p_currentDate=" + p_currentDate);
        }
        try {
            if (p_previousExpiry != null) {
                //final Date newDate = BTSLUtil.addDaysInUtilDate(p_previousExpiry, (int) (p_graceValue));
            	final Date newDate = BTSLUtil.addDaysInUtilDate(p_previousExpiry, BTSLUtil.parseLongToInt (p_graceValue));
            	
                if (p_currentDate.after(newDate)) {
                    final String strArr[] = { p_msisdn, String.valueOf(p_graceValue), BTSLUtil.getDateStringFromDate(p_previousExpiry) };
                    throw new BTSLBaseException("CardGroupBL", methodName, PretupsErrorCodesI.CARD_GROUP_MSISDN_INGRACE_NOT_ALLOWED, 0, strArr, null);
                }
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "CardGroupBL[calculateValidity]", "", "", " ",
                "Not able to check whether recharge allowed in grace or not getting Exception=" + e.getMessage());
            throw new BTSLBaseException("CardGroupBL", methodName, PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exiting ");
        }
    }

    /**
     * Request Value though passed are not being used currenly passed just for
     * future use if reqd
     * 
     * @param p_type
     *            String
     * @param p_rate
     *            double
     * @param p_commValue
     *            long
     * @param p_requestValue
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateDifferentialTax1(String,
     *      double, long, long)
     */
    @Override
    public long calculateDifferentialTax1(String p_type, double p_rate, long p_commValue, long p_requestValue) throws BTSLBaseException {
        long calculatedTax1Value = 0;
        if (p_type.equalsIgnoreCase(PretupsI.SYSTEM_AMOUNT)) {
            calculatedTax1Value = Double.valueOf(p_rate).longValue();
        } else if (p_type.equalsIgnoreCase(PretupsI.AMOUNT_TYPE_PERCENTAGE)) {
            calculatedTax1Value = Double.valueOf(((p_rate * p_commValue) / (100 + p_rate))).longValue();
        } else {
            if (_log.isDebugEnabled()) {
                _log.debug("calculateDifferentialTax1()", "Exception p_type is not define in the system p_type=" + p_type);
            }
            throw new BTSLBaseException(this, "calculateDifferentialTax1", "error.invalid.ratetype");
        }
        return calculatedTax1Value;
    }

    /**
     * Method calculateDifferentialTax2.
     * 
     * @param p_type
     *            String
     * @param p_rate
     *            double
     * @param p_requestValue
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateDifferentialTax2(String,
     *      double, long)
     */
    @Override
    public long calculateDifferentialTax2(String p_type, double p_rate, long p_requestValue) throws BTSLBaseException {
        long calculatedTax2Value = 0;
        if (p_type.equalsIgnoreCase(PretupsI.SYSTEM_AMOUNT)) {
            calculatedTax2Value = Double.valueOf(p_rate).longValue();
        } else if (p_type.equalsIgnoreCase(PretupsI.AMOUNT_TYPE_PERCENTAGE)) {
            calculatedTax2Value = Double.valueOf(((p_rate * p_requestValue) / 100)).longValue();
        } else {
            if (_log.isDebugEnabled()) {
                _log.debug("calculateDifferentialTax2()", "Exception p_type is not define in the system p_type=" + p_type);
            }
            throw new BTSLBaseException(this, "calculateDifferentialTax2", "error.invalid.ratetype");
        }
        return calculatedTax2Value;
    }

    /**
     * Method calculateDifferentialComm.
     * 
     * @param p_type
     *            String
     * @param p_rate
     *            double
     * @param p_requestValue
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateDifferentialComm(String,
     *      double, long)
     */
    @Override
    public long calculateDifferentialComm(String p_type, double p_rate, long p_requestValue) throws BTSLBaseException {
        long calculatedComm2Value = 0;
        if (PretupsI.SYSTEM_AMOUNT.equalsIgnoreCase(p_type)) {
            calculatedComm2Value = Double.valueOf(p_rate).longValue();
        } else if (PretupsI.AMOUNT_TYPE_PERCENTAGE.equalsIgnoreCase(p_type)) {
            calculatedComm2Value = Double.valueOf(((p_requestValue * p_rate) / 100)).longValue();
        } else {
            if (_log.isDebugEnabled()) {
                _log.debug("calculateDifferentialComm()", "Exception p_type is not define in the system p_type=" + p_type);
            }
            throw new BTSLBaseException(this, "calculateDifferentialComm", "error.invalid.ratetype");
        }

        return calculatedComm2Value;
    }

    /**
     * Method calculateDifferentialTransferValue.
     * 
     * @param p_requestAmount
     *            long
     * @param p_afterMultipleFact
     *            long
     * @param p_calculatedTax1Value
     *            long
     * @param p_calculatedTax2Value
     *            long
     * @return long
     * @see com.btsl.pretups.util.OperatorUtilI#calculateDifferentialTransferValue(long,
     *      long, long, long)
     */
    @Override
    public long calculateDifferentialTransferValue(long p_requestAmount, long p_afterMultipleFact, long p_calculatedTax1Value, long p_calculatedTax2Value) {
        final long transferValue = p_afterMultipleFact - p_calculatedTax1Value - p_calculatedTax2Value;
        return transferValue;
    }

    /**
     * Method formatC2STransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatC2STransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatC2STransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatC2STransferID";
        String returnStr = null;
        try {
            // ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO()
            // String currentYear=BTSLUtil.getFinancialYearLastDigits(2)
            // String
            // paddedTransferIDStr=BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID),C2S_TRANSFER_ID_PAD_LENGTH)
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(Long.toHexString(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            // returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr
            // returnStr="R"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr
            returnStr = "R" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatP2PTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatP2PTransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatP2PTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatP2PTransferID";
        String returnStr = null;
        try {
            // ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO()
            // String currentYear=BTSLUtil.getFinancialYearLastDigits(2)
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), P2P_TRANSFER_ID_PAD_LENGTH);
            // returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr
            // returnStr="C"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr
            returnStr = "C" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }
    /**
     * Method formatVoucherTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatVoucherTransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatVoucherTransferID(TransferVO p_transferVO, long p_tempTransferID) {
    	final String methodName = "formatVoucherTransferID";
    	String returnStr = null;
    	try {
    		// ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO()
    		// String currentYear=BTSLUtil.getFinancialYearLastDigits(2)
    		final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), P2P_TRANSFER_ID_PAD_LENGTH);
    		// returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr
    		// returnStr="C"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr
    		returnStr = "V" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
    				.getProperty("INSTANCE_ID") + paddedTransferIDStr;
    		p_transferVO.setTransferID(returnStr);
    	} catch (Exception e) {
    		_log.errorTrace(methodName, e);
    		EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
    				"Not able to generate Transfer ID:" + e.getMessage());
    		returnStr = null;
    	}
    	return returnStr;
    }

    /**
     * Method formatP2PTransferIDWithValidityExt.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatP2PTransferIDWithValidityExt(TransferVO,
     *      long)
     */
    @Override
    public String formatP2PTransferIDWithValidityExt(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatP2PTransferIDWithValidityExt";
        String returnStr = null;
        try {
            // ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO()
            // String currentYear=BTSLUtil.getFinancialYearLastDigits(2)
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), P2P_TRANSFER_ID_PAD_LENGTH);
            // returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr
            // returnStr="C"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr
            returnStr = currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            // p_transferVO.setTransferID(returnStr)
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method currentDateTimeFormatString.
     * 
     * @param p_date
     *            Date
     * @return String
     * @throws ParseException
     */
    @Override
    public String currentDateTimeFormatString(Date p_date) throws ParseException {
    	String dateString;
    	String calenderType = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.CALENDAR_TYPE);
    	if(BTSLUtil.isNullString(calenderType) || 
				PretupsI.GREGORIAN.equalsIgnoreCase(calenderType)) {
    		final SimpleDateFormat sdf = new SimpleDateFormat("yyMMdd");
            dateString = sdf.format(p_date);
            return dateString;
    	} else {
    		dateString = BTSLDateUtil.getSystemLocaleDate(p_date, false);
    	}
    	return dateString;
    }

    /**
     * Method currentTimeFormatString.
     * 
     * @param p_date
     *            Date
     * @return String
     * @throws ParseException
     */
    @Override
    public String currentTimeFormatString(Date p_date) throws ParseException {
    	String dateString;
    	String calenderType = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.CALENDAR_TYPE);
    	if(BTSLUtil.isNullString(calenderType) || 
				PretupsI.GREGORIAN.equalsIgnoreCase(calenderType)) {
    		final SimpleDateFormat sdf = new SimpleDateFormat("HHmm");
            dateString = sdf.format(p_date);
    	} else {
    		dateString = BTSLDateUtil.getSystemLocaleTime(p_date, false);
    	}
    	return dateString;
    }

    /**
     * Method formatChannelTransferID.
     * 
     * @param p_channelTransferVO
     *            ChannelTransferVO
     * @param p_tempTransferStr
     *            String
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatChannelTransferID(ChannelTransferVO,
     *      String, long)
     */
    @Override
    public String formatChannelTransferID(ChannelTransferVO p_channelTransferVO, String p_tempTransferStr, long p_tempTransferID) {
        final String methodName = "formatChannelTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(Long.toHexString(p_tempTransferID), CHANEL_TRANSFER_ID_PAD_LENGTH);

            // changes added by Satakshi
            returnStr = p_tempTransferStr + currentDateTimeFormatString(p_channelTransferVO.getCreatedOn()) + "." + currentTimeFormatString(p_channelTransferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            // changes ended
            p_channelTransferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatChannelTransferID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatNetworkStockTxnID.
     * 
     * @param p_networkStockTxnVO
     *            NetworkStockTxnVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatNetworkStockTxnID(Date,
     *      long)
     */
    @Override
    public String formatNetworkStockTxnID(NetworkStockTxnVO p_networkStockTxnVO, long p_tempTransferID) {
        // changes added on 28-01-2015 to change format of Network Stock Txn Id
        final String methodName = "formatNetworkStockTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(Long.toHexString(p_tempTransferID), NETWORK_STOCK_TXN_ID_PAD_LENGTH);
            if(!BTSLUtil.isNullString(p_networkStockTxnVO.getNetworkCode()))
            {
            	returnStr = PretupsI.NETWORK_STOCK_TRANSACTION_ID + p_networkStockTxnVO.getNetworkCode() + currentDateTimeFormatString(p_networkStockTxnVO.getCreatedOn()) + "." + currentTimeFormatString(p_networkStockTxnVO
                        .getCreatedOn()) + "." + Constants.getProperty("INSTANCE_ID") + paddedTransferIDStr;
            } 
            else
            returnStr = PretupsI.NETWORK_STOCK_TRANSACTION_ID + currentDateTimeFormatString(p_networkStockTxnVO.getCreatedOn()) + "." + currentTimeFormatString(p_networkStockTxnVO
                .getCreatedOn()) + "." + Constants.getProperty("INSTANCE_ID") + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatNetworkStockTxnID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
        // changes ended
        /*
         * final String methodName = "formatNetworkStockTxnID" String
         * returnStr=null try { String
         * paddedTransferIDStr=BTSLUtil.padZeroesToLeft(String.valueOf(
         * p_tempTransferID),NETWORK_STOCK_TXN_ID_PAD_LENGTH)
         * //returnStr=PretupsI.NETWORK_STOCK_TRANSACTION_ID+
         * currentDateTimeFormatString
         * (p_networkStockTxnVO.getCreatedOn())+"."+currentTimeFormatString
         * (p_networkStockTxnVO.getCreatedOn())+"."+paddedTransferIDStr
         * returnStr=PretupsI.NETWORK_STOCK_TRANSACTION_ID+
         * currentDateTimeFormatString
         * (p_networkStockTxnVO.getDBDateTime())+"."+currentTimeFormatString
         * (p_networkStockTxnVO.getDBDateTime())+"."+paddedTransferIDStr }
         * catch(Exception e) { _log.errorTrace(methodName, e)
         * EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,
         * EventStatusI
         * .RAISED,EventLevelI.FATAL,"OperatorUtil[formatNetworkStockTxnID]"
         * ,"","","","Not able to generate Transaction ID:"+e.getMessage())
         * returnStr=null } return returnStr
         */
    }

    @Override
    public String formatNetworkStockTxnID1(NetworkStockTxnVO1 p_networkStockTxnVO, long p_tempTransferID) {
        final String methodName = "formatNetworkStockTxnID1";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(Long.toHexString(p_tempTransferID), NETWORK_STOCK_TXN_ID_PAD_LENGTH);
            if(!BTSLUtil.isNullString(p_networkStockTxnVO.getNetworkCode()))
            {
                returnStr = PretupsI.NETWORK_STOCK_TRANSACTION_ID + p_networkStockTxnVO.getNetworkCode() + currentDateTimeFormatString(p_networkStockTxnVO.getCreatedOn()) + "." + currentTimeFormatString(p_networkStockTxnVO
                        .getCreatedOn()) + "." + Constants.getProperty("INSTANCE_ID") + paddedTransferIDStr;
            }
            else
                returnStr = PretupsI.NETWORK_STOCK_TRANSACTION_ID + currentDateTimeFormatString(p_networkStockTxnVO.getCreatedOn()) + "." + currentTimeFormatString(p_networkStockTxnVO
                        .getCreatedOn()) + "." + Constants.getProperty("INSTANCE_ID") + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatNetworkStockTxnID.
     * 
     * @param p_scheduleMasterVO
     *            ScheduleBatchMasterVO
     * @param p_tempTransferStr
     *            String
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatNetworkStockTxnID(Date,
     *      long)
     */
    @Override
    public String formatScheduleBatchID(ScheduleBatchMasterVO p_scheduleMasterVO, String p_tempTransferStr, long p_tempTransferID, String networkID) {
        final String methodName = "formatScheduleBatchID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), SCHEDULE_BATCH_ID_PAD_LENGTH);
            // returnStr=p_tempTransferStr+currentDateTimeFormatString(p_scheduleMasterVO.getCreatedOn())+"."+currentTimeFormatString(p_scheduleMasterVO.getCreatedOn())+"."+paddedTransferIDStr
            returnStr = p_tempTransferStr +networkID+ currentDateTimeFormatString(p_scheduleMasterVO.getCreatedOn()) + "." + paddedTransferIDStr;
            p_scheduleMasterVO.setBatchID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatChannelTransferID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method to perform validation of start and end range for card group.
     * cuerrently this method do no validation. But if any operator wants to run
     * the system on CVG concept then we will check start range and end range in
     * case of VG should be same. added for CRE_INT_CR00029 by ankit Zindal
     * 
     * @param p_startRange
     *            String
     * @param p_endRange
     *            String
     * @param p_subService
     *            String
     * 
     * @throws Exception
     * @see com.btsl.pretups.util.OperatorUtilI#validateCardGroupDetails(String,
     *      String, String)
     */
    @Override
    public void validateCardGroupDetails(String p_startRange, String p_endRange, String p_subService) throws Exception {
        try {
            // This implementation is comented because not needed at this time.
            // Will be implemented for any operator.
            /*if (p_subService.split(":")[1].equals((String.valueOf(PretupsI.CHNL_SELECTOR_VG_VALUE)))) {
                if (Double.parseDouble(p_startRange) != Double.parseDouble(p_endRange)) {
                    throw new BTSLBaseException(this, "validateCardGroupDetails", "cardgroup.addc2scardgroup.error.invalidstartandendrange");
                }

            }*/
        } catch (Exception e) {
            throw new BTSLBaseException(e);
        }
    }

    /**
     * Method to set the value for transfer. This methos is called from
     * CardGroupBL. At this time this method set various values in the
     * transferVO For any other operator who wants to run system on CVG mode, we
     * can change values setting based on subservice. added for CRE_INT_CR00029
     * by ankit Zindal
     * 
     * @param p_subService
     *            String
     * @param p_cardGroupDetailVO
     *            CardGroupDetailsVO
     * @param p_transferVO
     *            TransferVO
     * 
     * @throws Exception
     * @see com.btsl.pretups.util.OperatorUtilI#setCalculatedCardGroupValues(String,
     *      CardGroupDetailsVO, TransferVO)
     */
    @Override
    public void setCalculatedCardGroupValues(String p_subService, CardGroupDetailsVO p_cardGroupDetailVO, TransferVO p_transferVO) throws Exception {
    	final String methodName="setCalculatedCardGroupValues";
        try {
            /**
             * In case of CVG all values are set as calculated. In case of VG
             * transfer value is set to 0. In case of C, validity and grace will
             * be set to 0.
             * 
             */
            TransferItemVO transferItemVO = null;
            final int bonusValidityValue = Integer.parseInt(String.valueOf(p_cardGroupDetailVO.getBonusValidityValue()));
            final int validityPeriodValue = p_cardGroupDetailVO.getValidityPeriod();
            final long transferValue = p_cardGroupDetailVO.getTransferValue();
            final long bonusValue = p_cardGroupDetailVO.getBonusTalkTimeValue();
            transferItemVO = (TransferItemVO) p_transferVO.getTransferItemList().get(1);

            // This feature is specific to the operator
            // if operator wants, amount is needed to be deducted for Get number
            // back service
            // so transfer the value to user after amount deducted for number
            // back feature
            // so net transfer value is
            // transferValue=transferValue-amountDeducted
            // and accessFee is normalAccessFee+amountDeducted

            /*
             * int amountDeducted; if(transferItemVO.isNumberBackAllowed()) {
             * amountDeducted= transferItemVO.getAmountDeducted()
             * transferValue=transferValue-amountDeducted if(!(transferValue>0)
             * throw new BTSLBaseException(this,"setCalculatedCardGroupValues",
             * PretupsErrorCodesI.TRANSFER_VALUE_IS_NOT_VALID)
             * p_cardGroupDetailVO.setTransferValue(transferValue)
             * p_transferVO.setReceiverAccessFee
             * (p_transferVO.getReceiverAccessFee () + amountDeducted) } }
             */

            if ((String.valueOf(PretupsI.CHNL_SELECTOR_CVG_VALUE)).equals(p_subService))// CVG
            {
                p_transferVO.setReceiverBonusValidity(bonusValidityValue);
                p_transferVO.setReceiverGracePeriod(p_cardGroupDetailVO.getGracePeriod());
                p_transferVO.setReceiverValidity(validityPeriodValue);
                // Is Bonus Validity on Requested Value ??
                calculateValidity(p_transferVO, transferItemVO.getTransferDateTime(), transferItemVO.getPreviousExpiry(), p_cardGroupDetailVO.getValidityPeriodType(),
                    validityPeriodValue, bonusValidityValue);
                p_transferVO.setReceiverTransferValue(transferValue);
                transferItemVO.setTransferValue(transferValue);
                transferItemVO.setGraceDaysStr(String.valueOf(p_cardGroupDetailVO.getGracePeriod()));
                transferItemVO.setValidity(validityPeriodValue);
                p_transferVO.setReceiverBonusValue(bonusValue);
            }
            else if ((String.valueOf(PretupsI.CHNL_SELECTOR_C_VALUE)).equals(p_subService))// C
            {
                p_transferVO.setReceiverBonusValidity(0);
                p_transferVO.setReceiverGracePeriod(0);
                p_transferVO.setReceiverValidity(0);
                p_transferVO.setReceiverTransferValue(transferValue);
                transferItemVO.setTransferValue(transferValue);
                transferItemVO.setGraceDaysStr("0");
                transferItemVO.setValidity(0);
                p_transferVO.setReceiverBonusValue(bonusValue);
            }
            else if ((String.valueOf(PretupsI.CHNL_SELECTOR_VG_VALUE)).equals(p_subService))// VG
            {
                p_transferVO.setReceiverBonusValidity(bonusValidityValue);
                p_transferVO.setReceiverGracePeriod(p_cardGroupDetailVO.getGracePeriod());
                p_transferVO.setReceiverValidity(validityPeriodValue);
                // Is Bonus Validity on Requested Value ??
                calculateValidity(p_transferVO, transferItemVO.getTransferDateTime(), transferItemVO.getPreviousExpiry(), p_cardGroupDetailVO.getValidityPeriodType(),
                    validityPeriodValue, bonusValidityValue);
                p_transferVO.setReceiverTransferValue(0);
                transferItemVO.setTransferValue(0);
                transferItemVO.setGraceDaysStr(String.valueOf(p_cardGroupDetailVO.getGracePeriod()));
                transferItemVO.setValidity(validityPeriodValue);
                p_transferVO.setReceiverBonusValue(0);
            } else // PRCMDA
            {
                p_transferVO.setReceiverBonusValidity(0);
                p_transferVO.setReceiverGracePeriod(0);
                p_transferVO.setReceiverValidity(0);
                p_transferVO.setReceiverTransferValue(transferValue);
                transferItemVO.setTransferValue(transferValue);
                transferItemVO.setGraceDaysStr("0");
                transferItemVO.setValidity(0);
                p_transferVO.setReceiverBonusValue(bonusValue);
            }

        } catch (Exception e) {
        	_log.error(methodName, "exception"); 
        	throw new BTSLBaseException(e);
        }
    }

    /**
     * Kapil Method that will validate the user message sent
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateC2SRechargeRequestSms(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateC2SRechargeRequestSms(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "validateC2SRechargeRequestSms";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "messageLen: " + messageLen);
            }
            
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
            // MESSAGE FORMAT:PS RecieverMSISDN Amount, Example: PS 9810811189
            // 100
                case PretupsI.SMS_RECHARGE_MESSAGE_LENGTH:
                    {
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        p_requestVO.setReqAmount(requestAmtStr);
                        PretupsBL.validateAmountViaSMS1(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        // Picking Default Selector and Language
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }
                // MESSAGE FORMAT:PS RecieverMSISDN Amount Langage, Example: PS
                // 9810811189 100 0
                case PretupsI.SMS_RECHARGE_MESSAGE_LENGTH + 1:
                    {
                        final ReceiverVO receiverVO = new ReceiverVO();

                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        p_requestVO.setReqAmount(requestAmtStr);
                        PretupsBL.validateAmountViaSMS1(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        // Language Validation
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }

                        // Picking Default Selector
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }
                // MESSAGE FORMAT:PS RecieverMSISDN Amount Selector Langage,
                // Example: PS 9810811189 100 1 0
                case PretupsI.SMS_RECHARGE_MESSAGE_LENGTH + 2:
                    {
                        final ReceiverVO receiverVO = new ReceiverVO();

                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        p_requestVO.setReqAmount(requestAmtStr);
                        PretupsBL.validateAmountViaSMS1(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        // Language and Selector Validation
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.CHNL_ERROR_CHLAN_INVALIDMESSAGEFORMAT, 0, new String[] { p_requestVO
                        .getActualMessageFormat() }, null);
            }// end of switch

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validateC2SRechargeRequestSms]", "", "",
                "", "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exiting ");
        }
    }

    /**
     * Method that will validate the Subscriber message sent
     * 
     * @param p_con
     * @param p_p2pTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateCreditRequestSms(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateCreditRequestSms(Connection p_con, P2PTransferVO p_p2pTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateCreditRequestSms";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            String custMsisdn1 = null;
            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
            // MESSAGE FORMAT:PR RecieverMSISDN, Example: PS 9810811189
                case PretupsI.SMS_RECHARGE_MESSAGE_LENGTH - 1:
                    {
                        final ReceiverVO receiverVO = new ReceiverVO();
                        custMsisdn = p_requestArr[1];
                        // Finding PreferedAmount from p2p_buddies table
                        // BuddyVO buddyVO=new
                        // SubscriberDAO().loadBuddyAmount(p_con,((SenderVO)p_requestVO.getSenderVO()).getUserID(),custMsisdn,p_requestVO.getRequestMSISDN())
                        final BuddyVO buddyVO = null;
                        if (buddyVO == null) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CREDITREQVIASMS_BUDDY_AMOUNT_NOT_AVAILABLE, 0, null);
                        }
                        requestAmtStr = Long.toString(buddyVO.getPreferredAmount());
                        custMsisdn1 = buddyVO.getBuddyMsisdn();
                        // Customer MSISDN Validation
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_p2pTransferVO.getRequestID(), custMsisdn1);
                        // Recharge amount Validation
                        p_requestVO.setReqAmount(requestAmtStr);
                        PretupsBL.validateAmountViaSMS(p_p2pTransferVO, requestAmtStr);
                        p_p2pTransferVO.setReceiverVO(receiverVO);
                        p_p2pTransferVO.setBuddy(custMsisdn);

                        // Picking Default Selector and Language
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_p2pTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }
                // MESSAGE FORMAT:PR RecieverMSISDN Amount, Example: PR
                // 9810811189
                // 100
                case PretupsI.SMS_RECHARGE_MESSAGE_LENGTH:
                    {
                        final ReceiverVO receiverVO = new ReceiverVO();
                        custMsisdn = p_requestArr[1];
                        // Finding PreferedAmount from p2p_buddies table
                        final BuddyVO buddyVO = null;
                        // new
                        // SubscriberDAO().loadBuddyAmount(p_con,((SenderVO)p_requestVO.getSenderVO()).getUserID(),custMsisdn,p_requestVO.getRequestMSISDN())
                        if (buddyVO == null) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CREDITREQVIASMS_BUDDY_AMOUNT_NOT_AVAILABLE, 0, null);
                        }
                        custMsisdn1 = buddyVO.getBuddyMsisdn();
                        // Customer MSISDN Validation
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_p2pTransferVO.getRequestID(), custMsisdn1);
                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        p_requestVO.setReqAmount(requestAmtStr);
                        PretupsBL.validateAmountViaSMS(p_p2pTransferVO, requestAmtStr);
                        p_p2pTransferVO.setReceiverVO(receiverVO);
                        p_p2pTransferVO.setBuddy(custMsisdn);

                        // Picking Default Selector and Language
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_p2pTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }
                // MESSAGE FORMAT:PR RecieverMSISDN Amount Langage, Example: PR
                // 9810811189 100 0
                case PretupsI.SMS_RECHARGE_MESSAGE_LENGTH + 1:
                    {
                        final ReceiverVO receiverVO = new ReceiverVO();
                        custMsisdn = p_requestArr[1];

                        // Finding PreferedAmount from p2p_buddies table
                        final BuddyVO buddyVO = null;
                        // new
                        // SubscriberDAO().loadBuddyAmount(p_con,((SenderVO)p_requestVO.getSenderVO()).getUserID(),custMsisdn,p_requestVO.getRequestMSISDN())
                        if (buddyVO == null) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CREDITREQVIASMS_BUDDY_AMOUNT_NOT_AVAILABLE, 0, null);
                        }
                        custMsisdn1 = buddyVO.getBuddyMsisdn();
                        // Customer MSISDN Validation
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_p2pTransferVO.getRequestID(), custMsisdn1);
                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        p_requestVO.setReqAmount(requestAmtStr);
                        PretupsBL.validateAmountViaSMS(p_p2pTransferVO, requestAmtStr);
                        p_p2pTransferVO.setReceiverVO(receiverVO);
                        p_p2pTransferVO.setBuddy(custMsisdn);

                        // Language Validation
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }

                        // Picking Default Selector
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_p2pTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }
                // MESSAGE FORMAT:PR RecieverMSISDN Amount Selector Langage,
                // Example: PR 9810811189 100 1 0
                case PretupsI.SMS_RECHARGE_MESSAGE_LENGTH + 2:
                    {
                        final ReceiverVO receiverVO = new ReceiverVO();
                        custMsisdn = p_requestArr[1];
                        // Finding PreferedAmount from p2p_buddies table
                        final BuddyVO buddyVO = null;
                        // new
                        // SubscriberDAO().loadBuddyAmount(p_con,((SenderVO)p_requestVO.getSenderVO()).getUserID(),custMsisdn,p_requestVO.getRequestMSISDN())
                        if (buddyVO == null) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CREDITREQVIASMS_BUDDY_AMOUNT_NOT_AVAILABLE, 0, null);
                        }
                        custMsisdn1 = buddyVO.getBuddyMsisdn();
                        // Customer MSISDN Validation
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_p2pTransferVO.getRequestID(), custMsisdn1);
                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        p_requestVO.setReqAmount(requestAmtStr);
                        PretupsBL.validateAmountViaSMS(p_p2pTransferVO, requestAmtStr);
                        p_p2pTransferVO.setReceiverVO(receiverVO);
                        p_p2pTransferVO.setBuddy(custMsisdn);

                        // Language and Selector Validation
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_p2pTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_p2pTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CHNL_ERROR_CHLAN_INVALIDMESSAGEFORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() },
                        null);
            }// end of switch

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validateCreditRequestSms]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /**
     * This method used to validate the SID exist or not in the database If
     * exist it will return the details
     */
    @Override
    public PrivateRchrgVO getPrivateRechargeDetails(Connection p_con, String p_sid) throws BTSLBaseException {
        final String obj = "getPrivateRechargeDetails";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Entering   p_sid=" + p_sid);
        }
        Boolean isPrivateSidServiceAllow = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.PRIVATE_SID_SERVICE_ALLOW);
        String prvtRcMsisdnPrefixList = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.PRVT_RC_MSISDN_PREFIX_LIST);
        PrivateRchrgVO prvo = null;
        try {
            final PrivateRchrgDAO prdao = new PrivateRchrgDAO();
            if (isPrivateSidServiceAllow) {
                final String sidprefixes = prvtRcMsisdnPrefixList;// comma
                // seperated
                // field
                // values
                final String[] sidprefix = sidprefixes.split(",");
                for (int i = 0; i < sidprefix.length; i++) {
                    if (p_sid.startsWith(sidprefix[i].trim())) {
                        prvo = prdao.loadUserDetailsBySID(p_con, p_sid);
                        break;
                    }
                }
            }

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SRechargeRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
        return prvo;
    }

    /**
     * Method that will validate the user message sent
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateC2SRechargeRequest(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateC2SRechargeRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateC2SRechargeRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            // String [] strArr=null
            // double requestAmt=0
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }
            
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
			PretupsBL.validatePromoBonus(p_c2sTransferVO , p_requestVO.getPromoBonus());
            switch (messageLen) {
                case 4:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))

                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {

                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                        if(!BTSLUtil.isNullString(p_requestVO.getReqSelector()) && !serviceSelectorMappingVO.getSelectorCode().equals(p_requestVO.getReqSelector())){
                        	throw new BTSLBaseException(this, obj, PretupsErrorCodesI.ERROR_INVALID_SELECTOR_VALUE);
                        } else {
                        	  p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 5:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }

                        break;
                    }

                case 6:
                    {
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                            // changed for CRE_INT_CR00029 by ankit Zindal
                            // in case of binary message we will set default
                            // value after
                            // calling getselectorvaluefromcode method
                            /*
                             * else
                             * p_requestVO.setReqSelector((Constants.getProperty
                             * (
                             * "CVG_UNICODE_"
                             * +p_requestVO.getLocale().getLanguage().toUpperCase
                             * ())));
                             */} else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 7:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        custMsisdn = p_requestArr[1];
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }

        } catch (BTSLBaseException be) {
            throw be;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SRechargeRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /**
     * Method that will validate the user message sent in case of postpaid bill
     * payment This method is added on 15/05/06 for postpaid bill payment.
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateC2SBillPmtRequest(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateC2SBillPmtRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateC2SBillPmtRequest";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "entered:p_c2sTransferVO=" + p_c2sTransferVO + " p_requestVO: " + p_requestVO);
        }
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            // get the message length
            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
			PretupsBL.validatePromoBonus(p_c2sTransferVO , p_requestVO.getPromoBonus());
			String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
			String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
                case 4:// message format expected:
                       // keyword#receivernumber#amount#pin
                    {
                        // If pin required flag is Y for the sender in user
                        // phones table
                        // then validate the user pin
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN_BILLPAY)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK_BILLPAY)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Cange for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        // validate msisdn
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        // validate the amount
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_DEF_SELECTOR_CODE_BILLPAY))
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        // set the default local of receiver
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 5:// message format expected:
                       // keyword#receivernumber#amount#receiverNotificationlang#pin
                    {
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                // validate pin
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN_BILLPAY)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK_BILLPAY)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                   
                        // set selector
                        if (!BTSLUtil.isNullString(p_requestArr[3])) {
                        	p_requestVO.setReqSelector(p_requestArr[3]);
                        
                        }
                        //set default language
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }
                case 6:// message format expected:
                       // keyword#receivernumber#amount#selector#receiverNotificationlang#pin
                    {
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN_BILLPAY)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK_BILLPAY)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if (PretupsI.LOCALE_LANGAUGE_EN.equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_DEF_SELECTOR_CODE_BILLPAY))
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_DEF_SELECTOR_CODE_BILLPAY))
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.BILLPAY_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 7:// message format expected:
                       // keyword#receivernumber#amount#selector#senderlang#receiverNotificationlang#pin
                    {
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN_BILLPAY)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK_BILLPAY)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if (PretupsI.LOCALE_LANGAUGE_EN.equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_DEF_SELECTOR_CODE_BILLPAY))
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_DEF_SELECTOR_CODE_BILLPAY))
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }

                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            // ChangeID=LOCALEMASTER
                            // Sender locale has to be overwritten in transferVO
                            // also.
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(obj, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.BILLPAY_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.BILLPAY_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validateC2SBillPmtRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /**
     * Method formatFOCBatchMasterTxnID. This method generate the batch ID for
     * the FOC batch master transfer.
     * 
     * @param p_batchMasterVO
     *            FOCBatchMasterVO
     * @param p_tempTransferID
     *            long
     * @return String
     * 
     * @see com.btsl.pretups.util.OperatorUtilI#formatFOCBatchMasterTxnID(FOCBatchMasterVO,
     *      long)
     */
    @Override
    public String formatFOCBatchMasterTxnID(FOCBatchMasterVO p_batchMasterVO, long p_tempTransferID) {
        final String methodName = "formatFOCBatchMasterTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), FOC_BATCH_MASTER_ID_PAD_LENGTH);
            returnStr =p_batchMasterVO.getNetworkCode()+ PretupsI.FOC_BATCH_TRANSACTION_ID + currentDateTimeFormatString(p_batchMasterVO.getCreatedOn()) + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatFOCBatchMasterTxnID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatFOCBatchDetailsTxnID. This method generate the batch details
     * ID for the FOC batch items.
     * 
     * @param p_batchMasterID
     *            String
     * @param p_tempTransferID
     *            long
     * @return String
     * 
     * @see com.btsl.pretups.util.OperatorUtilI#formatFOCBatchDetailsTxnID(String,
     *      long)
     */
    @Override
    public String formatFOCBatchDetailsTxnID(String p_batchMasterID, long p_tempTransferID) {
        final String methodName = "formatFOCBatchDetailsTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), FOC_BATCH_DETAIL_ID_PAD_LENGTH);
            returnStr = p_batchMasterID + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatFOCBatchDetailsTxnID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatAdjustmentTxnID. This method generate ID for the C2S
     * Adjustment transactions.
     * 
     * @param p_networkCode
     *            String
     * @param p_currentDate
     *            Date
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatAdjustmentTxnID(String,
     *      Date, long)
     */
    @Override
    public String formatAdjustmentTxnID(String p_networkCode, Date p_currentDate, long p_tempTransferID) {
        final String methodName = "formatAdjustmentTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), ADJUSTMENT_ID_PAD_LENGTH);
            returnStr = p_networkCode + PretupsI.ADJUSTMENT_TRANSACTION_ID + currentDateTimeFormatString(p_currentDate) + "." + currentTimeFormatString(p_currentDate) + "." + paddedTransferIDStr;

        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatAdjustmentTxnID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * This method is used to append the Netwok code into Subscriber id and
     * refferenced in the RestrictedSubscriberDAO to make the subscriber id as
     * unique for the different networks while processing the restricted
     * subscriber file.
     */
    @Override
    public String getRestrictedSubscriberID(String p_subsId, String p_networkCode) throws BTSLBaseException {
        final String obj = "getRestrictedSubscriberID";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Entered: p_subsId::" + p_subsId + " p_networkCode::" + p_networkCode);
        }
        String returnStr = null;
        try {
            returnStr = BTSLUtil.padZeroesToLeft(p_subsId, 12);
            returnStr = p_networkCode + returnStr;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[getRestrictedSubscriberID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION);

        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exited returnStr:" + returnStr);
        }
        return returnStr;
    }

    /**
     * This method will convert operator specific msisdn to system specific
     * msisdn.
     * 
     * @param p_msisdn
     * @return
     * @throws BTSLBaseException
     */
    @Override
    public String getSystemFilteredMSISDN(String p_msisdn) throws BTSLBaseException {
        final String obj = "getSystemFilteredMSISDN";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Entered p_msisdn:" + p_msisdn);
        }
        String msisdn = null;
        boolean prefixFound = false;
        String prefix = null;
        String msisdnPrefixList = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.MSISDN_PREFIX_LIST_CODE);
        Integer minMsisdnLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH_CODE);
        Integer maxMsisdnLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE);

        try {

            if (!BTSLUtil.isNullString(p_msisdn) && p_msisdn.length() > (int)minMsisdnLength) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "msisdnPrefixList:" + msisdnPrefixList);
                }

                final StringTokenizer strTok = new StringTokenizer(msisdnPrefixList, ",");
                while (strTok.hasMoreTokens()) {
                    prefix = strTok.nextToken();
                    if (p_msisdn.startsWith(prefix, 0)) {
                        prefixFound = true;
                        break;
                    } else {
                        continue;
                    }
                }
                if (prefixFound) {
                    msisdn = p_msisdn.substring(prefix.length());
                } else {
                    msisdn = p_msisdn;
                }
            } else {
                msisdn = p_msisdn;
            }
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[getSystemFilteredMSISDN]", "", p_msisdn,
                "", "Exception:" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.P2P_ERROR_EXCEPTION,e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "Exiting Filtered msisdn=" + msisdn);
            }
        }
        return msisdn;
    }

    /**
     * This method will convert system specific msisdn to operater specific
     * msisdn
     * 
     * @param p_msisdn
     * @return
     */
    @Override
    public String getOperatorFilteredMSISDN(String p_msisdn) {
        return Constants.getProperty("COUNTRY_CODE") + p_msisdn;
    }

    /**
     * This method will parse the request message for utility bill payment
     * request and validate various fields. This method is created by sourabh
     * for tatasky rechage process ChangeID=TATASKYRCHG
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * 
     */
    @Override
    public void validateUtilityBillPaymentRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        if (_log.isDebugEnabled()) {
            _log.debug("validateC2SbillPaymentRequest", "entered:p_c2sTransferVO=" + p_c2sTransferVO + " p_requestVO: " + p_requestVO);
        }
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }
            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug("validateC2SbillPaymentRequest", "messageLen: " + messageLen);
            }
            if (_log.isDebugEnabled()) {
                for (int i = 0; i < messageLen; i++) {
                    _log.debug("validateC2SbillPaymentRequest", "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
            /*
             * Parse the request message based on the length of request string.
             * Five types of request messages are currently supported by this
             * method. 1)If request message is of length 4 then it could be
             * "ServiceKeyword    AccountId    Amount    PIN" i.e. first
             * parameter will be treated as Service keyword second parameter
             * will be treated as Account id Third parameter will be treated as
             * Amount Fourth parameter will be treated as PIN 2)If request
             * message is of length 5 then it could be
             * "Keyword    AccountId    Amount    NotificationMSISDN    PIN"
             * i.e. first parameter will be treated as Service keyword Second
             * parameter will be Account id Third parameter will be Amount
             * Fourth parameter will be Notification MSISDN. Fifth parameter
             * will be PIN 3)If request message will be of length 6 then it
             * could be
             * "Keyword    AccountId    Amount    NotificationMSISDN    NotificationLanguage    PIN"
             * i.e. first parameter will be treated as service keyword Second
             * parameter will be Account id Third parameter will be Amount
             * Fourth parameter will be Notification MSISDN Fifth parameter will
             * be Notification language Sixth parameter will be PIN 4)If request
             * message will be of length 7 then it could be
             * "Keyword    AccountId    Amount    selector NotificationMSISDN    NotificationLanguage    PIN"
             * i.e. first parameter will be treated as service keyword Second
             * parameter will be Account id Third parameter will be Amount Forth
             * parameter will be selector Fifth parameter will be Sender
             * Notification language Sixth parameter will be Receiver
             * Notification language Seventh parameter will be PIN 5)If request
             * message will be of length 8(for web) then it could be
             * "Keyword    AccountId    Amount    selector senderlanguage NotificationMSISDN    NotificationLanguage    PIN"
             * i.e. first parameter will be treated as service keyword Second
             * parameter will be Account id Third parameter will be Amount Forth
             * parameter will be selector Fifth parameter will be sender
             * language Sixth parameter will be Notification MSISDN Seventh
             * parameter will be Notification language Eighth parameter will be
             * PIN
             */

                case 4:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Receiver Identification Validation
                        custMsisdn = p_requestArr[1];
                        PretupsBL.validateReceiverIdentification(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_DEF_SELECTOR_CODE_UB))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 5:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Receiver Identification Validation
                        custMsisdn = p_requestArr[1];
                        PretupsBL.validateReceiverIdentification(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        final String receiverNotificationMSISDN = p_requestArr[3];
                        if (!BTSLUtil.isNullString(receiverNotificationMSISDN)) {
                            if (BTSLUtil.isValidMSISDN(receiverNotificationMSISDN)) {
                                p_requestVO.setNotificationMSISDN(receiverNotificationMSISDN);
                            } else {
                                throw new BTSLBaseException(this, "validateC2SbillPaymentRequest", PretupsErrorCodesI.INVALID_PAYEE_NOTIF_NUMBER);
                            }
                        }

                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_DEF_SELECTOR_CODE_UB))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 6:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        PretupsBL.validateReceiverIdentification(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        final String receiverNotificationMSISDN = p_requestArr[3];
                        if (!BTSLUtil.isNullString(receiverNotificationMSISDN)) {
                            if (BTSLUtil.isValidMSISDN(receiverNotificationMSISDN)) {
                                p_requestVO.setNotificationMSISDN(receiverNotificationMSISDN);
                            } else {
                                throw new BTSLBaseException(this, "validateC2SbillPaymentRequest", PretupsErrorCodesI.INVALID_PAYEE_NOTIF_NUMBER);
                            }
                        }

                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_DEF_SELECTOR_CODE_UB))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, "validateC2SbillPaymentRequest", PretupsErrorCodesI.INVALID_PAYEE_NOTIF_LANG_UB);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 7:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        PretupsBL.validateReceiverIdentification(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_DEF_SELECTOR_CODE_UB))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }
                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_DEF_SELECTOR_CODE_UB))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }

                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            // ChangeID=LOCALEMASTER
                            // Sender locale has to be overwritten in transferVO
                            // also.
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());

                        }

                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, "validateC2SbillPaymentRequest", PretupsErrorCodesI.INVALID_PAYEE_NOTIF_LANG_UB);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }

                case 8:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[7]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        PretupsBL.validateReceiverIdentification(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        final String receiverNotificationMSISDN = p_requestArr[5];
                        if (!BTSLUtil.isNullString(receiverNotificationMSISDN)) {
                            if (BTSLUtil.isValidMSISDN(receiverNotificationMSISDN)) {
                                p_requestVO.setNotificationMSISDN(receiverNotificationMSISDN);
                            } else {
                                throw new BTSLBaseException(this, "validateC2SbillPaymentRequest", PretupsErrorCodesI.INVALID_PAYEE_NOTIF_NUMBER);
                            }
                        }
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_DEF_SELECTOR_CODE_UB))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }
                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_DEF_SELECTOR_CODE_UB))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }

                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            // ChangeID=LOCALEMASTER
                            // Sender locale has to be overwritten in transferVO
                            // also.
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());

                        }
                        if (BTSLUtil.isNullString(p_requestArr[6])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[6]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, "validateC2SbillPaymentRequest", PretupsErrorCodesI.INVALID_PAYEE_NOTIF_LANG_UB);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, "validateC2SbillPaymentRequest", PretupsErrorCodesI.INVALID_MESSAGE_FORMAT_UB, 0, new String[] { p_requestVO
                        .getActualMessageFormat() }, null);
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            final String obj = "validateUtilityBillPaymentRequest";
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SRechargeRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, "validateC2SbillPaymentRequest", PretupsErrorCodesI.C2S_ERR_EXCEPTION_UB);
        }
        if (_log.isDebugEnabled()) {
            _log.debug("validateC2SbillPaymentRequest", "Exiting ");
        }
    }

    /**
     * This method is called from the tata sky recharge process for the
     * validation of receiverNotification Number returned from the IN.
     * 
     * @param p_notificationMSISDN
     * @return
     * @throws BTSLBaseException
     */
    @Override
    public String validateReceiverNotificationNumber(String p_notificationMSISDN) {
        final String methodName = "validateReceiverNotificationNumber";
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Entered with Notication No =" + p_notificationMSISDN);
        }
        boolean isValid = false;
        String msisdn = null;
        if (!BTSLUtil.isNullString(p_notificationMSISDN)) {
            try {
                if (BTSLUtil.isValidMSISDN(p_notificationMSISDN)) {
                    isValid = true;
                    msisdn = p_notificationMSISDN;
                } else {
                    EventHandler.handle(EventIDI.SYSTEM_INFO, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.INFO,
                        "OperatorUtil[validateReceiverNotificationNumber]", "", "", "", "Notification no =" + p_notificationMSISDN + " is not valid ");
                }
            } catch (Exception e) {
                _log.errorTrace(methodName, e);
            }
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exited isValid=" + isValid);
        }
        return msisdn;
    }

    /***
     * method used to check whether decimal amount is validate in the system
     * also validate decimal amount
     * 
     * @author sourabh.gupta
     */
    @Override
    public void validateDecimalAmount(String p_serviceType, long p_amount) throws Exception {
        if (_log.isDebugEnabled()) {
            _log.debug("validateDecimalAmount", "Entered p_serviceType =" + p_serviceType + " p_amount=" + p_amount);
        }
        String decimalAllowedInServices = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DECIMAL_ALLOW_SERVICES);
        if (!BTSLUtil.isStringIn(p_serviceType, decimalAllowedInServices)) {
            try {
                final String displayAmt = PretupsBL.getDisplayAmount(p_amount);
                Long.parseLong(displayAmt);
            } catch (Exception e) {
                throw new BTSLBaseException(e);
            }
        }
    }

    /**
     * Method to generate Batch ID for Batches Table
     */
    @Override
    public String formatBatchesID(String p_networkCode, String p_prefix, Date p_currenDate, long p_tempTransferID) {
        final String methodName = "formatBatchesID";
        if (_log.isDebugEnabled()) {
            _log.debug(methodName,
                "Entered p_networkCode =" + p_networkCode + " p_prefix=" + p_prefix + "p_currenDate=" + p_currenDate + " p_tempTransferID=" + p_tempTransferID);
        }
        String paddedTransferIDStr = "";
        String returnStr = null;
        ;
        try {
            paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), BATCH_ID_LENGTH);
            returnStr = p_networkCode + p_prefix + currentDateTimeFormatString(p_currenDate) + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate Batch ID:" + e.getMessage());
            returnStr = null;
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exiting with returnStr=" + returnStr);
        }
        return returnStr;
    }

    /**
     * Method that will validate the user message sent
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateEVDRequestFormat(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateEVDRequestFormat(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateEVDRequestFormat";
        final String methodName = obj;
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }
            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(methodName, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
                case 4:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 5:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }

                case 6:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if (PretupsI.LOCALE_LANGAUGE_EN.equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 7:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if (PretupsI.LOCALE_LANGAUGE_EN.equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                        	if(p_requestArr[0].equals("EVR"))
                        		 p_requestVO.setReqSelector(p_requestArr[5]);
                        	else
                        	{
                  
                            p_requestVO.setReqSelector(p_requestArr[3]);}
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                            	  p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));                            }
                            else{
                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));}
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                            	 p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));                        }
                            else{
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));}
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() },
                        null);
            }
            // Self EVR Allowed Check
            final String senderMSISDN = (channelUserVO.getUserPhoneVO()).getMsisdn();
            final String receiverMSISDN = ((ReceiverVO) p_c2sTransferVO.getReceiverVO()).getMsisdn();
            Boolean isAllowSelfEvr = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.ALLOW_SELF_EVR);
            if (p_c2sTransferVO.getServiceType().equals(PretupsI.SERVICE_TYPE_EVR)) {
                if (receiverMSISDN.equals(senderMSISDN) && !isAllowSelfEvr) {
                    throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.CHNL_ERROR_SELF_TOPUP_NTALLOWD);
                }
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validateEVDRequestFormat]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exiting ");
        }

    }

    /**
     * This method will be used to handle transfer message format
     * 
     * @param p_con
     * @param requestMessageArray
     * @param p_transferVO
     * @throws BTSLBaseException
     * @throws Exception
     */
    @Override
    public void handleTransferMessageFormat(Connection p_con, RequestVO p_requestVO, TransferVO p_transferVO) throws Exception {
        if (_log.isDebugEnabled()) {
            _log.debug("handleTransferMessageFormat", "Entered p_requestVO=" + p_requestVO + " p_transferVO=" + p_transferVO);// requestMessageArray
            // length:"+requestMessageArray.length)
        }
        try {
            if (!checkIfBuddy(p_con, p_requestVO, p_transferVO)) {
                validateIfNotBuddy(p_con, p_requestVO, p_transferVO);
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            throw new BTSLBaseException(e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug("handleTransferMessageFormat", "Exiting :::" + p_transferVO.getIncomingSmsStr());
            }
        }
    }

    /**
     * Method to validate the request for Non Buddy transfers
     * 
     * @param p_con
     * @param p_senderVO
     * @throws BTSLBaseException
     * @throws Exception
     */
    private void validateIfNotBuddy(Connection p_con, RequestVO p_requestVO, TransferVO p_transferVO) throws BTSLBaseException, Exception {
        final String METHOD_NAME = "validateIfNotBuddy";
        final String[] requestMessageArray = p_requestVO.getRequestMessageArray();
        if (_log.isDebugEnabled()) {
            _log.debug("validateIfNotBuddy", " requestMessageArray length:" + requestMessageArray);
        }
        if (requestMessageArray.length < 3 || requestMessageArray.length > 7) {
            throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() },
                null);
        }
        final String serviceKeyword = requestMessageArray[0];
        final String senderSubscriberType = ((SenderVO) p_transferVO.getSenderVO()).getSubscriberType();
        final StringBuffer incomingSmsStr = new StringBuffer(serviceKeyword + " ");
        final int messageLength = requestMessageArray.length;
        final SenderVO senderVO = (SenderVO) p_transferVO.getSenderVO();
        // if pin Invalid return with error(PIN is Mandatory)
        final String actualPin = BTSLUtil.decryptText(senderVO.getPin());
        if (_log.isDebugEnabled()) {
            _log.debug("validateIfNotBuddy", " actualPin:" + actualPin);
        }
        
        Boolean isCP2PPinValidationRequired = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CP2P_PIN_VALIDATION_REQUIRED);
        String p2pDefaultSmsPin = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_DEFAULT_SMSPIN);
        String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
        String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

        String paymentMethodType = null;
        String pin = null;
        String paymentMethodKeyword = null;
        switch (messageLength) {
            case 3:
                {
                    // whether PIN validation is required or not.
                    if (isCP2PPinValidationRequired) {
                        if (!actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                            throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO
                                .getActualMessageFormat() }, null);
                        }
                        // requesting to change PIN using default PIN
                        else {
                            throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.P2P_PIN_REQUIRED_ERROR, 0,
                                new String[] { p2pDefaultSmsPin }, null);
                        }
                    }
                    paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
                    if (paymentMethodType == null) {
                        // return with error message, no default payment method
                        // defined
                        throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
                    }
                    p_transferVO.setPaymentMethodType(paymentMethodType);
                    incomingSmsStr.append(paymentMethodType + " ");
                    checkAfterPaymentMethod(p_con, 1, requestMessageArray, incomingSmsStr, p_transferVO);
                    break;
                }
            case 4:
                {
                    // Validate 2nd Argument for PIN.
                    pin = requestMessageArray[3];

                    incomingSmsStr.append("****" + " ");
                    // if(actualPin.equalsIgnoreCase(PretupsI.DEFAULT_P2P_PIN))
                    // whether PIN validation is required or not.
                    if (isCP2PPinValidationRequired) {
                        if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                            if (!BTSLUtil.isNullString(requestMessageArray[3])) {
                                if (BTSLUtil.isNumeric(requestMessageArray[3]) && requestMessageArray[3].length() == 1) {
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(requestMessageArray[3]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                                    }
                                } else {
                                    if (!BTSLUtil.isNullString(pin) && !pin.equals(p2pDefaultSmsPin)) {
                                        validatePIN(pin);
                                        senderVO.setPin(BTSLUtil.encryptText(pin));
                                        senderVO.setPinUpdateReqd(true);
                                        senderVO.setActivateStatusReqd(true);
                                    }

                                }

                            }
                        } else {
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                    }

                    paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
                    if (paymentMethodType == null) {
                        // return with error message, no default payment method
                        // defined
                        throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
                    }
                    p_transferVO.setPaymentMethodType(paymentMethodType);
                    incomingSmsStr.append(paymentMethodType + " ");
                    checkAfterPaymentMethod(p_con, 1, requestMessageArray, incomingSmsStr, p_transferVO);
                    break;
                }
            case 5:
                {

                    // Validate 2nd Argument for PIN.
                    pin = requestMessageArray[4];
                    incomingSmsStr.append("****" + " ");
                    // if pin Invalid return with error(PIN is Mandatory)
                    // if(actualPin.equalsIgnoreCase(PretupsI.DEFAULT_P2P_PIN))
                    // whether PIN validation is required or not.
                    if (isCP2PPinValidationRequired) {
                        if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                            // if(!pin.equals(PretupsI.DEFAULT_P2P_PIN))
                            if (!BTSLUtil.isNullString(pin) && !pin.equals(p2pDefaultSmsPin)) {
                                validatePIN(pin);
                                senderVO.setPin(BTSLUtil.encryptText(pin));
                                senderVO.setPinUpdateReqd(true);
                                senderVO.setActivateStatusReqd(true);
                            }
                        } else {
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                    }

                    // if PIN valid
                    // Validate next Argument for Payment Method.

                    // killed by sanjay as payemnt method table does not exists
                    PaymentMethodKeywordVO paymentMethodKeywordVO = null;
                    paymentMethodKeyword = requestMessageArray[1];
                    // if paymentMethod invalid , Validate next Argument for
                    // Receiver
                    // No(MSISDN).
                    paymentMethodKeywordVO = PaymentMethodCache.getObject(paymentMethodKeyword, p_transferVO.getServiceType(), p_transferVO.getNetworkCode());

                    if (paymentMethodKeywordVO == null) {
                        paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
                        if (paymentMethodType == null) {
                            // return with error message, no default payment
                            // method
                            // defined
                            throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
                        }
                        p_transferVO.setPaymentMethodType(paymentMethodType);
                        p_transferVO.setDefaultPaymentMethod("Y");
                        incomingSmsStr.append(paymentMethodType + " ");
                        checkAfterPaymentMethod(p_con, 1, requestMessageArray, incomingSmsStr, p_transferVO);
                        try {
                            // _requestVO.setReqSelector(""+SystemPreferences.P2P_TRANSFER_DEF_SELECTOR_CODE)
                            if (!BTSLUtil.isNullString(requestMessageArray[3])) {
                                final int localeValue = Integer.parseInt(requestMessageArray[3]);
                                p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(requestMessageArray[3]));
                                if (p_requestVO.getReceiverLocale() == null) {
                                    throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    // _requestVO.setReceiverLocale(new
                                    // Locale(defaultLanguage,defaultCountry))
                                }

                            }
                        } catch (Exception e) {
                            _log.errorTrace(METHOD_NAME, e);
                            throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                        }
                    } else {
                        paymentMethodType = paymentMethodKeywordVO.getPaymentMethodType();
                        p_transferVO.setPaymentMethodType(paymentMethodType);
                        p_transferVO.setPaymentMethodKeywordVO(paymentMethodKeywordVO);
                        p_transferVO.setDefaultPaymentMethod(PretupsI.NO);
                        incomingSmsStr.append(paymentMethodType + " ");
                        checkAfterPaymentMethod(p_con, 2, requestMessageArray, incomingSmsStr, p_transferVO);
                        // _requestVO.setReqSelector(""+SystemPreferences.P2P_TRANSFER_DEF_SELECTOR_CODE)
                    }

                    break;
                }
            case 6:
                {
                    // Validate 2nd Argument for PIN.
                    pin = requestMessageArray[5];
                    incomingSmsStr.append("****" + " ");
                    // if pin Invalid return with error(PIN is Mandatory)
                    // if(actualPin.equalsIgnoreCase(PretupsI.DEFAULT_P2P_PIN))
                    // whether PIN validation is required or not.
                    if (isCP2PPinValidationRequired) {
                        if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                            // if(!pin.equals(PretupsI.DEFAULT_P2P_PIN))
                            if (!BTSLUtil.isNullString(pin) && !pin.equals(p2pDefaultSmsPin)) {
                                validatePIN(pin);
                                senderVO.setPin(BTSLUtil.encryptText(pin));
                                senderVO.setPinUpdateReqd(true);
                                senderVO.setActivateStatusReqd(true);
                            }
                        } else {
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                    }
                    // if PIN valid as
                    // Validate next Argument for Payment Method.
                    paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
                    if (paymentMethodType == null) {
                        // return with error message, no default payment method
                        // defined
                        throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
                    }
                    incomingSmsStr.append(paymentMethodType + " ");

                    p_transferVO.setPaymentMethodType(paymentMethodType);
                    p_transferVO.setDefaultPaymentMethod("Y");

                    // if paymentMethod valid , Validate next Argument for
                    // Receiver
                    // No(MSISDN).
                    checkAfterPaymentMethod(p_con, 1, requestMessageArray, incomingSmsStr, p_transferVO);
                    try {
                        if (!BTSLUtil.isNullString(requestMessageArray[3])) {
                            final int selectorValue = Integer.parseInt(requestMessageArray[3]);
                            p_requestVO.setReqSelector(Integer.toString(selectorValue));
                        }
                    } catch (Exception e) {
                        _log.errorTrace(METHOD_NAME, e);
                        throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_INVALID_SELECTOR_VALUE);
                    }
                    try {
                        if (!BTSLUtil.isNullString(requestMessageArray[4])) {
                            final int localeValue = Integer.parseInt(requestMessageArray[4]);
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(requestMessageArray[4]));
                            if (p_requestVO.getReceiverLocale() == null) {
                                throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                            }
                        }
                    } catch (Exception e) {
                        _log.errorTrace(METHOD_NAME, e);
                        throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                    }
                    break;
                }
            case 7:
                {
                    // Validate 2nd Argument for PIN.
                    pin = requestMessageArray[6];
                    incomingSmsStr.append("****" + " ");
                    // if pin Invalid return with error(PIN is Mandatory)
                    // if(actualPin.equalsIgnoreCase(PretupsI.DEFAULT_P2P_PIN))
                    // whether PIN validation is required or not.
                    if (isCP2PPinValidationRequired) {
                        if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                            // if(!pin.equals(PretupsI.DEFAULT_P2P_PIN))
                            if (!BTSLUtil.isNullString(pin) && !pin.equals(p2pDefaultSmsPin)) {
                                validatePIN(pin);
                                senderVO.setPin(BTSLUtil.encryptText(pin));
                                senderVO.setPinUpdateReqd(true);
                                senderVO.setActivateStatusReqd(true);
                            }
                        } else {
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                    }
                    // if PIN valid as
                    // Validate next Argument for Payment Method.

                    PaymentMethodKeywordVO paymentMethodKeywordVO = null;
                    paymentMethodKeyword = requestMessageArray[1];
                    // if paymentMethod invalid , Validate next Argument for
                    // Receiver
                    // No(MSISDN).
                    paymentMethodKeywordVO = PaymentMethodCache.getObject(paymentMethodKeyword, p_transferVO.getServiceType(), p_transferVO.getNetworkCode());

                    if (paymentMethodKeywordVO == null) {
                        throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_SERVICEPAYMENTMETHOD);
                    } else {
                        paymentMethodType = paymentMethodKeywordVO.getPaymentMethodType();
                        p_transferVO.setPaymentMethodType(paymentMethodType);
                        p_transferVO.setPaymentMethodKeywordVO(paymentMethodKeywordVO);
                        p_transferVO.setDefaultPaymentMethod(PretupsI.NO);
                        incomingSmsStr.append(paymentMethodType + " ");
                        checkAfterPaymentMethod(p_con, 2, requestMessageArray, incomingSmsStr, p_transferVO);
                        try {
                            if (!BTSLUtil.isNullString(requestMessageArray[4])) {
                                final int selectorValue = Integer.parseInt(requestMessageArray[4]);
                                p_requestVO.setReqSelector(Integer.toString(selectorValue));
                            }
                        } catch (Exception e) {
                            _log.errorTrace(METHOD_NAME, e);
                            throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_INVALID_SELECTOR_VALUE,e);
                        }
                        try {
                            if (!BTSLUtil.isNullString(requestMessageArray[5])) {

                                p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(requestMessageArray[5]));
                                if (p_requestVO.getReceiverLocale() == null) {
                                    throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                }
                            }
                        } catch (Exception e) {
                            _log.errorTrace(METHOD_NAME, e);
                            throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                        }
                    }
                    break;
                }
        }
        p_transferVO.setIncomingSmsStr(incomingSmsStr.toString());
    }

    /**
     * Check After Payment Method
     * 
     * @param p_con
     * @param i
     * @throws BTSLBaseException
     * @throws Exception
     */
    public void checkAfterPaymentMethod(Connection p_con, int i, String[] p_requestMessageArray, StringBuffer incomingSmsStr, TransferVO p_transferVO) throws BTSLBaseException, Exception {
        if (_log.isDebugEnabled()) {
            _log.debug("checkAfterPaymentMethod", " i=" + i + " requestMessageArray length:" + p_requestMessageArray.length);
        }
        String receiverMSISDN = p_requestMessageArray[i];
        receiverMSISDN = addRemoveDigitsFromMSISDN(PretupsBL.getFilteredMSISDN(receiverMSISDN));
        if (!BTSLUtil.isValidMSISDN(receiverMSISDN)) {
            throw new BTSLBaseException(this, "checkAfterPaymentMethod", PretupsErrorCodesI.ERROR_INVALID_MSISDN, 0, new String[] { receiverMSISDN }, null);
        }
        // This block will check if the user is sending the PIN but is also a
        // buddy then that request should go through
        /*
         * BuddyVO buddyVO=new
         * SubscriberDAO().loadBuddyDetails(p_con,((SenderVO)
         * p_transferVO.getSenderVO()).getUserID(),receiverMSISDN)
         * if(buddyVO!=null) { receiverMSISDN=buddyVO.getMsisdn()
         * incomingSmsStr.append(receiverMSISDN+" ") NetworkPrefixVO
         * networkPrefixVO=PretupsBL.getNetworkDetails(receiverMSISDN
         * ,PretupsI.USER_TYPE_RECEIVER) if(networkPrefixVO==null) throw new
         * BTSLBaseException("","parseRequest",PretupsErrorCodesI.
         * ERROR_NOTFOUND_RECEIVERNETWORK,0,new String[]{receiverMSISDN},null)
         * buddyVO.setNetworkCode(networkPrefixVO.getNetworkCode())
         * buddyVO.setPrefixID(networkPrefixVO.getPrefixID())
         * buddyVO.setSubscriberType(networkPrefixVO.getSeriesType())
         * p_transferVO.setReceiverVO(buddyVO) long amount=0
         * amount=PretupsBL.getSystemAmount(p_requestMessageArray[i+1])
         * if(amount<0) throw new
         * BTSLBaseException("","parseRequest",PretupsErrorCodesI.
         * P2P_ERROR_AMOUNT_LESSZERO) p_transferVO.setTransferValue(amount)
         * p_transferVO.setRequestedAmount(amount)
         * incomingSmsStr.append(amount+" ")
         * 
         * } else {
         */
        incomingSmsStr.append(receiverMSISDN + " ");
        final ReceiverVO _receiverVO = new ReceiverVO();
        _receiverVO.setMsisdn(receiverMSISDN);
        _receiverVO.setSid(receiverMSISDN);
        final NetworkPrefixVO networkPrefixVO = PretupsBL.getNetworkDetails(receiverMSISDN, PretupsI.USER_TYPE_RECEIVER);
        if (networkPrefixVO == null) {
            throw new BTSLBaseException(this, "checkAfterPaymentMethod", PretupsErrorCodesI.ERROR_NOTFOUND_RECEIVERNETWORK, 0, new String[] { receiverMSISDN }, null);
        }
        _receiverVO.setNetworkCode(networkPrefixVO.getNetworkCode());
        _receiverVO.setPrefixID(networkPrefixVO.getPrefixID());
        _receiverVO.setSubscriberType(networkPrefixVO.getSeriesType());
        p_transferVO.setReceiverVO(_receiverVO);
        long amount = 0;
        amount = PretupsBL.getSystemAmount(p_requestMessageArray[i + 1]);
        if (amount < 0) {
            throw new BTSLBaseException(this, "checkAfterPaymentMethod", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
        }
        p_transferVO.setTransferValue(amount);
        p_transferVO.setRequestedAmount(amount);
        incomingSmsStr.append(amount + " ");
        // }
    }

    /**
     * Check If Buddy
     * 
     * @param p_con
     * @return
     * @throws BTSLBaseException
     * @throws Exception
     */
    public boolean checkIfBuddy(Connection p_con, RequestVO p_requestVO, TransferVO p_transferVO) throws BTSLBaseException, Exception {
        final String[] requestMessageArray = p_requestVO.getRequestMessageArray();
        if (_log.isDebugEnabled()) {
            _log.debug("checkIfBuddy", " requestMessageArray length:" + requestMessageArray.length);
        }
        final String serviceKeyword = requestMessageArray[0];
        final String senderSubscriberType = ((SenderVO) p_transferVO.getSenderVO()).getSubscriberType();
        boolean cBuddy = false;
        final StringBuffer incomingSmsStr = new StringBuffer(serviceKeyword + " ");
        if (requestMessageArray.length < 2 || requestMessageArray.length > 7) {
            throw new BTSLBaseException(this, "checkIfBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
        }

        // if receiver buddy
        // Validate 2nd Argument for Payment Method Keyword.
        final String paymentMethodKeyword = requestMessageArray[1];

        // if paymentMethod invalid , Validate 2nd Argument for Receiver
        // No(MSISDN).
        final PaymentMethodKeywordVO paymentMethodKeywordVO = PaymentMethodCache.getObject(paymentMethodKeyword, p_transferVO.getServiceType(), p_transferVO.getNetworkCode());
        String paymentMethodType = null;
        if (paymentMethodKeywordVO == null) {
            paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
            if (paymentMethodType == null) {
                // return with error message, no default payment method defined
                throw new BTSLBaseException(this, "checkIfBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
            }
            p_transferVO.setPaymentMethodType(paymentMethodType);
            p_transferVO.setDefaultPaymentMethod("Y");
            incomingSmsStr.append(paymentMethodType + " ");
            cBuddy = checkAfterPaymentMethodForBuddy(p_con, 1, requestMessageArray, incomingSmsStr, p_transferVO, p_requestVO);
        } else {
            paymentMethodType = paymentMethodKeywordVO.getPaymentMethodType();
            p_transferVO.setPaymentMethodType(paymentMethodType);
            p_transferVO.setPaymentMethodKeywordVO(paymentMethodKeywordVO);
            p_transferVO.setDefaultPaymentMethod(PretupsI.NO);
            incomingSmsStr.append(paymentMethodType + " ");
            // if paymentMethod valid , Validate 3rd Argument for Receiver
            // No(MSISDN).
            if (requestMessageArray.length < 3) {
                throw new BTSLBaseException(this, "checkIfBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }

            cBuddy = checkAfterPaymentMethodForBuddy(p_con, 2, requestMessageArray, incomingSmsStr, p_transferVO, p_requestVO);
        }
        p_transferVO.setIncomingSmsStr(incomingSmsStr.toString());
        if (_log.isDebugEnabled()) {
            _log.debug("checkIfBuddy", " return value:" + cBuddy);
        }
        return cBuddy;
    }

    /**
     * Check After Payment Method For Buddy
     * 
     * @param p_con
     * @param i
     * @return
     * @throws BTSLBaseException
     * @throws Exception
     **/
    public boolean checkAfterPaymentMethodForBuddy(Connection p_con, int i, String[] p_requestMessageArray, StringBuffer incomingSmsStr, TransferVO p_transferVO, RequestVO p_requestVO) throws BTSLBaseException, Exception {
        final String METHOD_NAME = "checkAfterPaymentMethodForBuddy";
        if (_log.isDebugEnabled()) {
            _log.debug("checkAfterPaymentMethodForBuddy", " i=" + i + " requestMessageArray length:" + p_requestMessageArray.length + " i=" + i);
        }
        int incReq = 0;
        if (i == 2) {
            incReq = 1;
        }
        final String receiverMSISDN_NAME = p_requestMessageArray[1 + incReq];
        final BuddyVO buddyVO = new P2PBuddiesDAO().loadBuddyDetails(p_con, ((SenderVO) p_transferVO.getSenderVO()).getUserID(), receiverMSISDN_NAME);
        if (buddyVO == null) {
            return false;
        }
        final String receiverMSISDN = buddyVO.getMsisdn();
        final NetworkPrefixVO networkPrefixVO = PretupsBL.getNetworkDetails(receiverMSISDN, PretupsI.USER_TYPE_RECEIVER);
        if (networkPrefixVO == null) {
            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_RECEIVERNETWORK, 0, new String[] { receiverMSISDN }, null);
        }
        
        Boolean isCP2PPinValidationRequired = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CP2P_PIN_VALIDATION_REQUIRED);
        String p2pDefaultSmsPin = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_DEFAULT_SMSPIN);
        
        buddyVO.setNetworkCode(networkPrefixVO.getNetworkCode());
        buddyVO.setPrefixID(networkPrefixVO.getPrefixID());
        buddyVO.setSubscriberType(networkPrefixVO.getSeriesType());
        p_transferVO.setReceiverVO(buddyVO);
        incomingSmsStr.append(receiverMSISDN_NAME + " ");
        final int messageLength = p_requestMessageArray.length;
        String pin = null;
        long amount = 0;
        final SenderVO senderVO = (SenderVO) p_transferVO.getSenderVO();
        final String actualPin = BTSLUtil.decryptText(senderVO.getPin());

        /*
         * Message format that are supported are as: Message length 2: PRC Name
         * If pin required the PIN should be default Amount will always be
         * default Message length 3: PIN required and pin is not default PRC
         * Name PIN (PIN required and actual pin=default pin) OR PIN not
         * required PRC HDFC Name PRC Name Amount Message length 4: PIN Required
         * actual pin!=default pin PRC Name Amount PIN PRC HDFC NAme PIN
         * actual=default PRC HDFC Name Amount PRC Name Amount langCode PIN not
         * required PRC HDFC name Amount PRC Name Amount langCode Message length
         * 5: PIN Required actual!=default PRC HDFC Name Amount PIN PRC Name
         * Amount langCode PIN Actual=default PRC HDFC Name Amount langCode PRC
         * Name Amount selector lang PIN not required PRC HDFC Name Amount
         * LangCode PRC Name Amount selector LangCode Message length 6: PIN
         * Required Actual!=default PRC HDFC Name Amount langCode PIN PRC Name
         * Amount selector langCode PIN Actual=default PRC HDFC Name Amount
         * selector langCode PRC Name Amount selector langCode PIN(Update with
         * new PIN) PIN not required PRC HDFC Name Amount selector langCode PRC
         * Name Amount Selector langCode PIN( Update with new PIN) Message
         * length 7: PIN Required Actual!=default PRC HDFC Name Amount selector
         * langCode PIN Actual=default PRC HDFC Name Amount selector langCode
         * PIN(Update with new PIN) PIN not required PRC HDFC Name Amount
         * selector langCode PIN (Update with new PIN)
         */
        switch (messageLength) {
            case 2:
                {
                    if (((Boolean) PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED, networkPrefixVO.getNetworkCode())).booleanValue()) {
                        // whether PIN validation is required or not.
                        if (isCP2PPinValidationRequired) {
                            if (!actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0,
                                    new String[] { p_requestVO.getActualMessageFormat() }, null);
                            }
                        }
                    }
                    amount = buddyVO.getPreferredAmount();
                    if (amount < 0) {
                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                    }
                    p_transferVO.setTransferValue(amount);
                    p_transferVO.setRequestedAmount(amount);
                    incomingSmsStr.append(amount + " ");
                    break;
                }
            case 3:
                {
                    // if((((Boolean)PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED,networkPrefixVO.getNetworkCode())).booleanValue())&&!actualPin.equalsIgnoreCase(p2pDefaultSmsPin))
                    if ((isCP2PPinValidationRequired) && ((((Boolean) PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED,
                        networkPrefixVO.getNetworkCode())).booleanValue()) && !actualPin.equalsIgnoreCase(p2pDefaultSmsPin))) {
                        if (i == 2) {
                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO
                                .getActualMessageFormat() }, null);
                        } else {
                            pin = p_requestMessageArray[2];
                            incomingSmsStr.append("****" + " ");
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                            amount = buddyVO.getPreferredAmount();
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                            p_transferVO.setTransferValue(amount);
                            p_transferVO.setRequestedAmount(amount);
                            incomingSmsStr.append(amount + " ");
                        }
                    } else {
                        if (i == 2) {
                            amount = buddyVO.getPreferredAmount();
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                        } else {
                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                        }
                        p_transferVO.setTransferValue(amount);
                        p_transferVO.setRequestedAmount(amount);
                        incomingSmsStr.append(amount + " ");
                    }
                    break;
                }
            case 4:
                {
                    if (((Boolean) PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED, networkPrefixVO.getNetworkCode())).booleanValue()) {
                        // if(!actualPin.equalsIgnoreCase(p2pDefaultSmsPin))
                        if ((isCP2PPinValidationRequired) && !(actualPin.equalsIgnoreCase(p2pDefaultSmsPin))) {
                            pin = p_requestMessageArray[3];
                            incomingSmsStr.append("****" + " ");
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                            if (i == 2) {
                                amount = buddyVO.getPreferredAmount();
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                            } else {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }

                            }
                        } else {
                            if (i == 2) {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                            } else {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[3]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[3]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                            }
                        }
                        p_transferVO.setTransferValue(amount);
                        p_transferVO.setRequestedAmount(amount);
                        incomingSmsStr.append(amount + " ");
                    } else {
                        if (i == 2) {
                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                        } else {
                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                            try {
                                if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {

                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[3]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    }
                                }
                            } catch (Exception e) {
                                _log.errorTrace(METHOD_NAME, e);
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                            }
                        }
                        p_transferVO.setTransferValue(amount);
                        p_transferVO.setRequestedAmount(amount);
                        incomingSmsStr.append(amount + " ");
                    }
                    break;
                }
            case 5:
                {
                    if (((Boolean) PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED, networkPrefixVO.getNetworkCode())).booleanValue()) {
                        // if(!actualPin.equalsIgnoreCase(p2pDefaultSmsPin))
                        if ((isCP2PPinValidationRequired) && !(actualPin.equalsIgnoreCase(p2pDefaultSmsPin))) {
                            pin = p_requestMessageArray[4];
                            incomingSmsStr.append("****" + " ");
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                            if (i == 2) {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                            } else {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[3]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[3]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                }
                            }
                            p_transferVO.setTransferValue(amount);
                            p_transferVO.setRequestedAmount(amount);
                            incomingSmsStr.append(amount + " ");
                        } else {
                            if (i == 2) {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                }
                            } else {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }

                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                                if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                    final int selectorValue = Integer.parseInt(p_requestMessageArray[3]);
                                    p_requestVO.setReqSelector(Integer.toString(selectorValue));
                                }
                            }
                            p_transferVO.setTransferValue(amount);
                            p_transferVO.setRequestedAmount(amount);
                            incomingSmsStr.append(amount + " ");
                        }
                    } else {
                        if (i == 2) {
                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                            try {
                                if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                    final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    }
                                }
                            } catch (Exception e) {
                                _log.errorTrace(METHOD_NAME, e);
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                            }
                        } else {
                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                            try {
                                if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                    final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    }
                                }
                            } catch (Exception e) {
                                _log.errorTrace(METHOD_NAME, e);
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                            }
                            if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                final int selectorValue = Integer.parseInt(p_requestMessageArray[3]);
                                p_requestVO.setReqSelector(Integer.toString(selectorValue));
                            }
                        }
                        p_transferVO.setTransferValue(amount);
                        p_transferVO.setRequestedAmount(amount);
                        incomingSmsStr.append(amount + " ");
                    }
                    break;
                }
            case 6:
                {
                    if (((Boolean) PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED, networkPrefixVO.getNetworkCode())).booleanValue()) {
                        // if(!actualPin.equalsIgnoreCase(p2pDefaultSmsPin))
                        if ((isCP2PPinValidationRequired) && !(actualPin.equalsIgnoreCase(p2pDefaultSmsPin))) {
                            pin = p_requestMessageArray[5];
                            incomingSmsStr.append("****" + " ");
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                            if (i == 2) {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                            } else {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                                if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                    final int selectorValue = Integer.parseInt(p_requestMessageArray[3]);
                                    p_requestVO.setReqSelector(Integer.toString(selectorValue));
                                }
                            }
                        } else {
                            if (i == 2) {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[5])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[5]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[5]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                                if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                    final int selectorValue = Integer.parseInt(p_requestMessageArray[4]);
                                    p_requestVO.setReqSelector(Integer.toString(selectorValue));
                                }
                            } else {
                                pin = p_requestMessageArray[5];
                                incomingSmsStr.append("****" + " ");
                                validatePIN(pin);
                                senderVO.setPin(BTSLUtil.encryptText(pin));
                                senderVO.setPinUpdateReqd(true);

                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                                if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                    final int selectorValue = Integer.parseInt(p_requestMessageArray[3]);
                                    p_requestVO.setReqSelector(Integer.toString(selectorValue));
                                }
                            }
                        }
                        p_transferVO.setTransferValue(amount);
                        p_transferVO.setRequestedAmount(amount);
                        incomingSmsStr.append(amount + " ");
                    } else {
                        if (i == 2) {
                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                            try {
                                if (!BTSLUtil.isNullString(p_requestMessageArray[5])) {
                                    final int localeValue = Integer.parseInt(p_requestMessageArray[5]);
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[5]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    }
                                }
                            } catch (Exception e) {
                                _log.errorTrace(METHOD_NAME, e);
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                            }
                            if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                final int selectorValue = Integer.parseInt(p_requestMessageArray[4]);
                                p_requestVO.setReqSelector(Integer.toString(selectorValue));
                            }
                        } else {
                            // To check whether PIN validation is required or
                            // not.
                            if (isCP2PPinValidationRequired) {
                                if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                                    pin = p_requestMessageArray[5];
                                    incomingSmsStr.append("****" + " ");
                                    validatePIN(pin);
                                    senderVO.setPin(BTSLUtil.encryptText(pin));
                                    senderVO.setPinUpdateReqd(true);
                                }
                            }

                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                            try {
                                if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                    final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    }
                                }
                            } catch (Exception e) {
                                _log.errorTrace(METHOD_NAME, e);
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                            }
                            if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                final int selectorValue = Integer.parseInt(p_requestMessageArray[3]);
                                p_requestVO.setReqSelector(Integer.toString(selectorValue));
                            }
                        }
                        p_transferVO.setTransferValue(amount);
                        p_transferVO.setRequestedAmount(amount);
                        incomingSmsStr.append(amount + " ");
                    }
                    break;
                }
            case 7:
                {
                    /*
                     * Actual!=default PRC HDFC Name Amount selector langCode
                     * PIN
                     * Actual=default PRC HDFC Name Amount selector langCode
                     * PIN(Update
                     * with new PIN)
                     */
                    if (i == 1) {
                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO
                            .getActualMessageFormat() }, null);
                    } else {
                        // if(((Boolean)PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED,networkPrefixVO.getNetworkCode())).booleanValue())
                        if ((isCP2PPinValidationRequired) && ((Boolean) PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED,
                            networkPrefixVO.getNetworkCode())).booleanValue()) {
                            if (!actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                                pin = p_requestMessageArray[6];
                                incomingSmsStr.append("****" + " ");
                                try {
                                    SubscriberBL.validatePIN(p_con, senderVO, pin);
                                } catch (BTSLBaseException be) {
                                    if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                        .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                        p_con.commit();
                                    }
                                    throw be;
                                }

                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[5])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[5]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[5]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                                if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                    final int selectorValue = Integer.parseInt(p_requestMessageArray[4]);
                                    p_requestVO.setReqSelector(Integer.toString(selectorValue));
                                }
                            } else {
                                // To check whether PIN validation is required
                                // or not.
                                if (isCP2PPinValidationRequired) {
                                    pin = p_requestMessageArray[6];
                                    incomingSmsStr.append("****" + " ");
                                    validatePIN(pin);
                                    senderVO.setPin(BTSLUtil.encryptText(pin));
                                    senderVO.setPinUpdateReqd(true);
                                }

                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[5])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[5]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[5]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                                if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                    final int selectorValue = Integer.parseInt(p_requestMessageArray[4]);
                                    p_requestVO.setReqSelector(Integer.toString(selectorValue));
                                }
                            }
                            p_transferVO.setTransferValue(amount);
                            p_transferVO.setRequestedAmount(amount);
                            incomingSmsStr.append(amount + " ");
                        } else {
                            // To check whether PIN validation is required or
                            // not.
                            if (isCP2PPinValidationRequired) {
                                if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                                    pin = p_requestMessageArray[6];
                                    incomingSmsStr.append("****" + " ");
                                    validatePIN(pin);
                                    senderVO.setPin(BTSLUtil.encryptText(pin));
                                    senderVO.setPinUpdateReqd(true);
                                }
                            }

                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                            try {
                                if (!BTSLUtil.isNullString(p_requestMessageArray[5])) {
                                    final int localeValue = Integer.parseInt(p_requestMessageArray[5]);
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[5]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    }
                                }
                            } catch (Exception e) {
                                _log.errorTrace(METHOD_NAME, e);
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                            }
                            if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                final int selectorValue = Integer.parseInt(p_requestMessageArray[4]);
                                p_requestVO.setReqSelector(Integer.toString(selectorValue));
                            }

                            p_transferVO.setTransferValue(amount);
                            p_transferVO.setRequestedAmount(amount);
                            incomingSmsStr.append(amount + " ");
                        }
                        break;
                    }
                }
            default:
                {
                    throw new BTSLBaseException(this, "checkIfBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() },
                        null);
                }

        }
        return true;
    }

    /**
     * Method that will validate the user message sent for multiple evd
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateMVDRequestFormat(Connection,
     *      C2STransferVO, RequestVO) @
     */
    @Override
    public int validateMVDRequestFormat(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateMVDRequestFormat";
        _log.debug(obj, "Entered");
        String[] p_requestArr = null;
        try {
            // Keyword#Receiver MSISDN#VoucherMRP#Quantity#pin
            p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            int requiredQuantity = 0;

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen + " Request Gateway::= " + p_requestVO.getMessageGatewayVO().getGatewayType());
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            Integer mvdMaxVoucher = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MVD_MAX_VOUCHER);
            Integer mvdMaxVoucherExtgw = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MVD_MAX_VOUCHER_EXTGW);
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
            case 7:
            {
                // Do the 000 check Default PIN
                if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                    try {
                        ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                    } catch (BTSLBaseException be) {
                        if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                            .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                            p_con.commit();
                        }
                        throw be;
                    }
                }
                // 2 is the minimum number of vouchers that can be
                // downloaded
                try {
                    requiredQuantity = Integer.parseInt(p_requestArr[3]);
                } catch (Exception e) {
                    _log.errorTrace(obj, e);
                    final String strArr[] = new String[] { p_requestArr[3] };
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.INVALID_QUANTITY, 0, strArr, null);
                } // Changes done by ashishT for validating the number
                  // of
                  // vouchers for web.
                if (p_requestVO.getMessageGatewayVO().getGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_WEB)) {
                    if (requiredQuantity > (int)mvdMaxVoucher || requiredQuantity < 2) {
                        final String strArr[] = { String.valueOf((int)mvdMaxVoucher), String.valueOf(requiredQuantity), String.valueOf(2) };
                        throw new BTSLBaseException(this, obj, PretupsErrorCodesI.MVD_REQ_MORE_THAN_ALLOWED, 0, strArr, null);
                    }
                } // Changes done for validating the number
                  // of
                  // vouchers for SMS/STK/USSD GW.
                if ((p_requestVO.getMessageGatewayVO().getGatewayType().equalsIgnoreCase(PretupsI.GATEWAY_TYPE_SMSC)) || (p_requestVO.getMessageGatewayVO()
                    .getGatewayType().equalsIgnoreCase(PretupsI.GATEWAY_TYPE_USSD)) || (p_requestVO.getMessageGatewayVO().getGatewayType()
                    .equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_STK)) || (p_requestVO.getMessageGatewayVO().getGatewayType()
                            .equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_REST))) {
                    if (requiredQuantity > (int)mvdMaxVoucherExtgw || requiredQuantity < 2) {
                        final String strArr[] = { String.valueOf((int)mvdMaxVoucherExtgw), String.valueOf(requiredQuantity), String.valueOf(2) };
                        throw new BTSLBaseException(this, obj, PretupsErrorCodesI.MVD_REQ_MORE_THAN_ALLOWED, 0, strArr, null);
                    }
                } // Changes ends for voucher nuber validation.
                final ReceiverVO receiverVO = new ReceiverVO();
                // Customer MSISDN Validation
                custMsisdn = p_requestArr[1];
                // Change for the SID logic
                p_requestVO.setSid(custMsisdn);
                receiverVO.setSid(custMsisdn);
                PrivateRchrgVO prvo = null;
                if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                    p_c2sTransferVO.setSubscriberSID(custMsisdn);
                    custMsisdn = prvo.getMsisdn();
                }
                PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                // Recharge amount Validation
                requestAmtStr = p_requestArr[2];
                PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                p_c2sTransferVO.setReceiverVO(receiverVO);
               
                p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                
                
                if (BTSLUtil.isNullString(p_requestArr[4])) {
                    if (PretupsI.LOCALE_LANGAUGE_EN.equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                    }
                } else {
                    p_requestVO.setReqSelector(p_requestArr[4]);
                }

                PretupsBL.getSelectorValueFromCode(p_requestVO);
                if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                    final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                        .getServiceType());
                    if (serviceSelectorMappingVO != null) {
                        p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                    }
                }
                if (BTSLUtil.isNullString(p_requestArr[5])) {
                    p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                } else {
                    final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                    if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                        throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                    }
                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                }
                break;
            }
            case 6:
            {
                // Do the 000 check Default PIN
                if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                    try {
                        ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                    } catch (BTSLBaseException be) {
                        if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                            .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                            p_con.commit();
                        }
                        throw be;
                    }
                }
                // 2 is the minimum number of vouchers that can be
                // downloaded
                try {
                    requiredQuantity = Integer.parseInt(p_requestArr[3]);
                } catch (Exception e) {
                    _log.errorTrace(obj, e);
                    final String strArr[] = new String[] { p_requestArr[3] };
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.INVALID_QUANTITY, 0, strArr, null);
                } // Changes done by ashishT for validating the number
                  // of
                  // vouchers for web.
                if (p_requestVO.getMessageGatewayVO().getGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_WEB)) {
                    if (requiredQuantity > (int)mvdMaxVoucher || requiredQuantity < 2) {
                        final String strArr[] = { String.valueOf((int)mvdMaxVoucher), String.valueOf(requiredQuantity), String.valueOf(2) };
                        throw new BTSLBaseException(this, obj, PretupsErrorCodesI.MVD_REQ_MORE_THAN_ALLOWED, 0, strArr, null);
                    }
                } // Changes done for validating the number
                  // of
                  // vouchers for SMS/STK/USSD GW.
                if ((p_requestVO.getMessageGatewayVO().getGatewayType().equalsIgnoreCase(PretupsI.GATEWAY_TYPE_SMSC)) || (p_requestVO.getMessageGatewayVO()
                    .getGatewayType().equalsIgnoreCase(PretupsI.GATEWAY_TYPE_USSD)) || (p_requestVO.getMessageGatewayVO().getGatewayType()
                    .equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_STK)) || (p_requestVO.getMessageGatewayVO().getGatewayType()
                            .equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_REST))) {
                    if (requiredQuantity > (int)mvdMaxVoucherExtgw || requiredQuantity < 2) {
                        final String strArr[] = { String.valueOf((int)mvdMaxVoucher), String.valueOf(requiredQuantity), String.valueOf(2) };
                        throw new BTSLBaseException(this, obj, PretupsErrorCodesI.MVD_REQ_MORE_THAN_ALLOWED, 0, strArr, null);
                    }
                } // Changes ends for voucher nuber validation.
                final ReceiverVO receiverVO = new ReceiverVO();
                // Customer MSISDN Validation
                custMsisdn = p_requestArr[1];
                // Change for the SID logic
                p_requestVO.setSid(custMsisdn);
                receiverVO.setSid(custMsisdn);
                PrivateRchrgVO prvo = null;
                if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                    p_c2sTransferVO.setSubscriberSID(custMsisdn);
                    custMsisdn = prvo.getMsisdn();
                }
                PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                // Recharge amount Validation
                requestAmtStr = p_requestArr[2];
                PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                p_c2sTransferVO.setReceiverVO(receiverVO);
               
                p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                
                
                if (BTSLUtil.isNullString(p_requestArr[4])) {
                    if (PretupsI.LOCALE_LANGAUGE_EN.equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                    }
                } else {
                    p_requestVO.setReqSelector(p_requestArr[4]);
                }

                PretupsBL.getSelectorValueFromCode(p_requestVO);
                if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                    final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                        .getServiceType());
                    if (serviceSelectorMappingVO != null) {
                        p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                    }
                }
                p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                break;
            }
            // Keyword#Receiver MSISDN#VoucherMRP#Quantity#pin
                case 5:
                    {
                        // Do the 000 check Default PIN
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        // 2 is the minimum number of vouchers that can be
                        // downloaded
                        try {
                            requiredQuantity = Integer.parseInt(p_requestArr[3]);
                        } catch (Exception e) {
                            _log.errorTrace(obj, e);
                            final String strArr[] = new String[] { p_requestArr[3] };
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.INVALID_QUANTITY, 0, strArr, null);
                        } // Changes done by ashishT for validating the number
                          // of
                          // vouchers for web.
                        if (p_requestVO.getMessageGatewayVO().getGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_WEB)) {
                            if (requiredQuantity > (int)mvdMaxVoucher || requiredQuantity < 2) {
                                final String strArr[] = { String.valueOf((int)mvdMaxVoucher), String.valueOf(requiredQuantity), String.valueOf(2) };
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.MVD_REQ_MORE_THAN_ALLOWED, 0, strArr, null);
                            }
                        } // Changes done by ashishT for validating the number
                          // of
                          // vouchers for SMS/STK/USSD GW.
                        if ((p_requestVO.getMessageGatewayVO().getGatewayType().equalsIgnoreCase(PretupsI.GATEWAY_TYPE_SMSC)) || (p_requestVO.getMessageGatewayVO()
                            .getGatewayType().equalsIgnoreCase(PretupsI.GATEWAY_TYPE_USSD)) || (p_requestVO.getMessageGatewayVO().getGatewayType()
                            .equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_STK)) || (p_requestVO.getMessageGatewayVO().getGatewayType()
                                    .equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_REST))) {
                            if (requiredQuantity > (int)mvdMaxVoucherExtgw || requiredQuantity < 2) {
                                final String strArr[] = { String.valueOf((int)mvdMaxVoucher), String.valueOf(requiredQuantity), String.valueOf(2) };
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.MVD_REQ_MORE_THAN_ALLOWED, 0, strArr, null);
                            }
                        } // Changes ends for voucher nuber validation.
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }
                // Keyword##VoucherMRP#Quantity#pin
                case 4:
                    {
                        // Do the 000 check Default PIN
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        // 2 is the minimum number of vouchers that can be
                        // downloaded
                        try {
                            requiredQuantity = Integer.parseInt(p_requestArr[2]);
                        } catch (Exception e) {
                            _log.errorTrace(obj, e);
                            final String strArr[] = new String[] { p_requestArr[2] };
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.INVALID_QUANTITY, 0, strArr, null);
                        }// Changes done by ashishT for validating the number of
                         // vouchers for web.
                        if (p_requestVO.getMessageGatewayVO().getGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_WEB)) {
                            if (requiredQuantity > (int)mvdMaxVoucher || requiredQuantity < 2) {
                                final String strArr[] = { String.valueOf((int)mvdMaxVoucher), String.valueOf(requiredQuantity), String.valueOf(2) };
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.MVD_REQ_MORE_THAN_ALLOWED, 0, strArr, null);
                            }
                        } // Changes done by ashishT for validating the number
                          // of
                          // vouchers for SMS/STK/USSD GW.
                        if ((p_requestVO.getMessageGatewayVO().getGatewayType().equalsIgnoreCase(PretupsI.GATEWAY_TYPE_SMSC)) || (p_requestVO.getMessageGatewayVO()
                            .getGatewayType().equalsIgnoreCase(PretupsI.GATEWAY_TYPE_USSD)) || (p_requestVO.getMessageGatewayVO().getGatewayType()
                            .equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_STK))|| (p_requestVO.getMessageGatewayVO().getGatewayType()
                                    .equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_REST))) {
                            if (requiredQuantity > (int)mvdMaxVoucherExtgw || requiredQuantity < 2) {
                                final String strArr[] = { String.valueOf((int)mvdMaxVoucher), String.valueOf(requiredQuantity), String.valueOf(2) };
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.MVD_REQ_MORE_THAN_ALLOWED, 0, strArr, null);
                            }
                        } // Changes ends for voucher nuber validation.
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_c2sTransferVO.getSenderMsisdn();
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);// change
                        // done
                        // by
                        // ashishT
                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[1];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }
            return requiredQuantity;
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validateMVDRequestFormat]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "Exiting ");
            }
        }
    }

    /**
     * Method formatEVDTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatC2STransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatEVDTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatEVDTransferID";
        String returnStr = null;
        try {
            // ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO()
            // String currentYear=BTSLUtil.getFinancialYearLastDigits(2)
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            // returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr
            // returnStr="E"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr
            returnStr = "E" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }




    private static boolean checkCommon(String password){
        try{
            BufferedReader br = new BufferedReader(new FileReader(Constants.getProperty("WEAK_PASSWORDS_DICTIONARY")));

            String str = null;
            while((str=br.readLine()) != null){
                if(str.toUpperCase().equals(password.toUpperCase())){
                   // System.out.println("Common word found: "+str);
                    return false;
                }

            }
        }catch(Exception e){
            //e.printStacktrace();
        }

        return true;

    }

    public  void additionalSecurity(HashMap messageMap ,  String passwordIn) {

        List<Rule> rules = new ArrayList<>();
        //Commenting rule 1 & 2 as these are being already checked
        //Rule 1: Password length should be in between
//        rules.add(new LengthRule(Integer.parseInt(Constants.getProperty("PASSWORD_POLICY_MIN_LENGTH")), Integer.parseInt(Constants.getProperty("PASSWORD_POLICY_MAX_LENGTH"))));
        //Rule 2: No whitespace allowed
//        rules.add(new WhitespaceRule());
        //Rule 3.a: At least one Upper-case character
        rules.add(new CharacterRule(EnglishCharacterData.UpperCase, Integer.parseInt(Constants.getProperty("PASSWORD_POLICY_MIN_NUM_UPPERCHAR"))));
        //Rule 3.b: At least one Lower-case character
        rules.add(new CharacterRule(EnglishCharacterData.LowerCase, Integer.parseInt(Constants.getProperty("PASSWORD_POLICY_MIN_NUM_LOWERCHAR"))));
        //Rule 3.c: At least one digit
        rules.add(new CharacterRule(EnglishCharacterData.Digit, Integer.parseInt(Constants.getProperty("PASSWORD_POLICY_MIN_NUM_DIGIT"))));
        //Rule 3.d: At least one special character
        rules.add(new CharacterRule(EnglishCharacterData.Special, Integer.parseInt(Constants.getProperty("PASSWORD_POLICY_MIN_NUM_SPECIAL"))));

        PasswordValidator validator = new PasswordValidator(rules);

        PasswordData password = new PasswordData(passwordIn);
        RuleResult result = validator.validate(password);

        if(result.isValid()){

            boolean checkForCommon = checkCommon(passwordIn);
            if(!checkForCommon){
                messageMap.put("weak.password", null);
            }else{
                checkForCommon = checkCommon(passwordIn.split(Constants.getProperty("PASSWORD_POLICY_SPECIAL_REGEX"))[0]);
                if(!checkForCommon){
                    messageMap.put("weak.password", null);
                }else{
                    //System.out.println("Password validated.");

                }
            }

        }else{
            //System.out.println("Invalid Password: " + validator.getMessages(result));
            messageMap.put("invald.password", validator.getMessages(result));
        }
    }



    /**
     * This method used for Password validation. While creating or modifying the
     * user Password This method will be used. Method validatePassword.
     * 
     * @author sanjeew.kumar
     * @created on 12/07/07
     * @param p_loginID
     *            String
     * @param p_password
     *            String
     * @return HashMap
     */
    @Override
    public HashMap validatePassword(String p_loginID, String p_password) {
        //_log.debug("validatePassword", "Entered, p_userID= ", new String(p_loginID));
        final HashMap messageMap = new HashMap();
        Integer minLoginPwdLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_LOGIN_PWD_LENGTH);
        Integer maxLoginPwdLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_LOGIN_PWD_LENGTH);
        Boolean isLoginPasswordAllowed = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.LOGIN_PASSWORD_ALLOWED);
        
        String defaultPin = BTSLUtil.getDefaultPasswordNumeric(p_password);

        if (defaultPin.equals(p_password)) {
            return messageMap;
        }
        defaultPin = BTSLUtil.getDefaultPasswordText(p_password);

        if (defaultPin.equals(p_password)) {
            return messageMap;
        }
        
        if (p_password.length() < (int)minLoginPwdLength || p_password.length() > (int)maxLoginPwdLength) {
            final String[] args = { String.valueOf((int)minLoginPwdLength), String.valueOf((int)maxLoginPwdLength) };
            messageMap.put("operatorutil.validatepassword.error.passwordlenerr", args);
        }
        final int result = BTSLUtil.isSMSPinValid(p_password);// for consecutive
                                                              // and
        // same characters
        if (result == -1) {
            messageMap.put("operatorutil.validatepassword.error.passwordsamedigit", null);
        } else if (result == 1) {
            messageMap.put("operatorutil.validatepassword.error.passwordconsecutive", null);
        }        
        if (isLoginPasswordAllowed && p_password.contains(" ")){
        	messageMap.put("user.adduser.error.password.space.not.allowed", null);
        }
        /*
         * // For OCI Password Should contains atleast one character
         * if(!BTSLUtil.containsChar(p_password)) messageMap.put(
         * "operatorutil.validatepassword.error.passwordnotcontainschar",null)
         * 
         * // for special character String
         * specialChar=Constants.getProperty("SPECIAL_CHARACTER_PASSWORD_VALIDATION"
         * ) if(!BTSLUtil.isNullString(specialChar)) { String[]
         * specialCharArray={specialChar} String[]
         * passwordCharArray=specialChar.split(",") boolean
         * specialCharFlag=false for(int i=0,j=passwordCharArray.length;i<j;i++)
         * { if(p_password.contains(passwordCharArray[i])) {
         * specialCharFlag=true break } } if(!specialCharFlag)
         * messageMap.put("operatorutil.validatepassword.error.passwordspecialchar"
         * ,specialCharArray) } // for number
         * String[]passwordNumberStrArray={"0"
         * ,"1","2","3","4","5","6","7","8","9" } boolean numberStrFlag=false
         * for(int i=0,j=passwordNumberStrArray.length;i<j;i++) {
         * if(p_password.contains(passwordNumberStrArray[i])) {
         * numberStrFlag=true break } } if(!numberStrFlag)
         * messageMap.put("operatorutil.validatepassword.error.passwordnumberchar"
         * ,null) if(p_loginID.equals(p_password))
         * messageMap.put("operatorutil.validatepassword.error.sameusernamepassword"
         * ,null) if(!BTSLUtil.containsCapChar(p_password))// for korek
         * messageMap.put(
         * "operatorutil.validatepassword.error.passwordnotcontaincapschar"
         * ,null)
         */
        
        
        if(!BTSLUtil.containsChar(p_password))
	        messageMap.put("operatorutil.validatepassword.error.passwordnotcontainschar",null);
	   
	    // for special character
	    String specialChar=Constants.getProperty("SPECIAL_CHARACTER_PASSWORD_VALIDATION");
	    if(!BTSLUtil.isNullString(specialChar))
	    {
		    String[] specialCharArray={specialChar};
		    String[] passwordCharArray=specialChar.split(",");
		    boolean specialCharFlag=false;
		    for(int i=0,j=passwordCharArray.length;i<j;i++)
		    {
		        if(p_password.contains(passwordCharArray[i]))
		        {
		            specialCharFlag=true;
		            break;
		        }
		    }
		    if(!specialCharFlag)
		        messageMap.put("operatorutil.validatepassword.error.passwordspecialchar",specialCharArray);
	    }
	    // for number
	    String[]passwordNumberStrArray={"0","1","2","3","4","5","6","7","8","9"};
	    boolean numberStrFlag=false;
	    for(int i=0,j=passwordNumberStrArray.length;i<j;i++)
	    {
	        if(p_password.contains(passwordNumberStrArray[i]))
	        {
	            numberStrFlag=true;
	            break;
	        }
	    }
	    if(!numberStrFlag)
	        messageMap.put("operatorutil.validatepassword.error.passwordnumberchar",null);
	    if(p_loginID.equals(p_password))
	        messageMap.put("operatorutil.validatepassword.error.sameusernamepassword",null);
        /*removing check for username check in password
        UserDAO userDao = new UserDAO();
        String username = null;
        try{
            username = userDao.loadUserNamebyLoginId(p_loginID);
        }catch(BTSLBaseException be){
            messageMap.put("password.validation.fail",null);
        }
        if(username == null){
            messageMap.put("password.validation.fail",null);
        }else{
            String[] usernameSplit = username.split(" ");
            for(String split: usernameSplit){
                if(p_password.toLowerCase().contains(split.toLowerCase())){
                    messageMap.put("weak.password",null);
                }
            }
        }
         */
	    if(!BTSLUtil.containsCapChar(p_password))
		messageMap.put("operatorutil.validatepassword.error.passwordnotcontaincapschar",null);
        int maxSuccessionAllowed = Integer.parseInt(Constants.getProperty("MAX_SUCCESSIONS_ALLOWED_IN_PASSWORD"));
        int maxConsecutiveAllowed = Integer.parseInt(Constants.getProperty("MAX_CONSECUTIVES_ALLOWED_IN_PASSWORD"));
        if(containsCharactersinSuccession(p_password,maxSuccessionAllowed)){
            messageMap.put("weak.password",null);
        }
        if(containsConsecutiveCharacters(p_password,maxConsecutiveAllowed)){
            messageMap.put("weak.password",null);
        }
	
        if (_log.isDebugEnabled()) {
            _log.debug("validatePassword", "Exiting messageMap.size()=" + messageMap.size());
        }

        additionalSecurity(messageMap, p_password);

        return messageMap;
    }
    public boolean containsCharactersinSuccession(String p_password, int maxSuccessionAllowed){
        String defaultCharacterString = "abcdefghijklmnopqrstuvwxyz";
        String defaultDigitString = "01234567890";
        ArrayList<String> checkList = new ArrayList<>();
        int i=0;
        int j=defaultCharacterString.length()-maxSuccessionAllowed-1;
        while(i<=j){
            checkList.add(defaultCharacterString.substring(i,i+maxSuccessionAllowed+1));
            i++;
        }
        i=0;
        j=defaultDigitString.length()-maxSuccessionAllowed-1;
        while(i<=j){
            checkList.add(defaultDigitString.substring(i,i+maxSuccessionAllowed+1));
            i++;
        }
        for(String succession : checkList){
            if(p_password.toLowerCase().contains(succession)){
                return true;
            }
        }
        return false;
    }

    public boolean containsConsecutiveCharacters(String p_password , int maxConsecutiveAllowed){
        String[] baseArray = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9"};
        ArrayList<String> checkList = new ArrayList<>();
        for(String symbol: baseArray){
            StringBuilder sb = new StringBuilder();
            for(int i=0 ; i<=maxConsecutiveAllowed ; i++){
                sb.append(symbol);
            }
            checkList.add(sb.toString());
        }
        for(String consecutive : checkList){
            if(p_password.toLowerCase().contains(consecutive)){
                return true;
            }
        }
        return false;
    }

    /**
     * Method to validate the PIN that is sent by user and that stored in
     * database
     * 
     * @param p_con
     * @param p_channelUserVO
     * @param p_requestPin
     * @throws BTSLBaseException
     */
    @Override
    public void validatePIN(Connection p_con, ChannelUserVO p_channelUserVO, String p_requestPin) throws BTSLBaseException {
        final String obj = "validatePIN";
        final String methodName = obj;
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Entered with p_userPhoneVO:" + p_channelUserVO.toString() + " p_requestPin=" + BTSLUtil.maskParam(p_requestPin));
        }
        int updateStatus = 0;
        boolean increaseInvalidPinCount = false;
        boolean isUserBarred = false;
        final int mintInDay = 24 * 60;
        String pinpasEnDeCryptionType = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.PINPAS_EN_DE_CRYPTION_TYPE);
        Integer c2sPinMaxLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.C2S_PIN_MAX_LENGTH);
        try {
            UserPhoneVO userPhoneVO = new UserPhoneVO();
            userPhoneVO = p_channelUserVO.getUserPhoneVO();
            // Force the user to change PIN if he has not changed the same in
            // the defined no of days
            if (_log.isDebugEnabled()) {
                _log.debug(
                    methodName,
                    "Modified Time=:" + userPhoneVO.getModifiedOn() + " userPhoneVO.getPinModifiedOn()=" + userPhoneVO.getPinModifiedOn() + "userPhoneVO.getCreatedOn()" + userPhoneVO
                        .getCreatedOn() + ", Service Type=" + p_channelUserVO.getServiceTypes() + ", Reset PIN=" + p_channelUserVO.getPinReset());
            }
            final int daysAfterChngPn = ((Integer) PreferenceCache.getControlPreference(PreferenceI.C2S_DAYS_AFTER_CHANGE_PIN, p_channelUserVO.getNetworkID(), p_channelUserVO
                .getCategoryCode())).intValue();
            if (userPhoneVO.isForcePinCheckReqd() && userPhoneVO.getPinModifiedOn() != null && ((userPhoneVO.getModifiedOn().getTime() - userPhoneVO.getPinModifiedOn()
                .getTime()) / (24 * 60 * 60 * 1000)) > daysAfterChngPn) {
                // Force the user to change PIN if he has not changed the same
                // in the defined no of days
                if (_log.isDebugEnabled()) {
                    _log.debug(methodName,
                        "Modified Time=:" + userPhoneVO.getModifiedOn() + " userPhoneVO.getPinModifiedOn()=" + userPhoneVO.getPinModifiedOn() + " Difference=" + ((userPhoneVO
                            .getModifiedOn().getTime() - userPhoneVO.getPinModifiedOn().getTime()) / (24 * 60 * 60 * 1000)));
                }
                EventHandler.handle(EventIDI.SYSTEM_INFO, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.INFO, "OperatorUtil[validatePIN]", "", userPhoneVO
                    .getMsisdn(), "", "Force User to change PIN after " + daysAfterChngPn + " days as last changed on " + userPhoneVO.getPinModifiedOn());
                final String strArr[] = { String.valueOf(daysAfterChngPn) };
                throw new BTSLBaseException("OperatorUtil", methodName, PretupsErrorCodesI.CHNL_ERROR_SNDR_FORCE_CHANGEPIN, 0, strArr, null);
            }
            // added to force user to change pin in case pin has been reset for
            // all the request except change pin request
            else if ("Y".equalsIgnoreCase(p_channelUserVO.getPinReset()) && p_channelUserVO.getServiceTypes()!=null && !PretupsI.CHANGE_PIN_SERVICE_TYPE.contains(p_channelUserVO.getServiceTypes())) {
                if (_log.isDebugEnabled()) {
                    _log.debug(methodName,
                        "Modified Time=" + userPhoneVO.getModifiedOn() + ", Pin Modified On=" + userPhoneVO.getPinModifiedOn() + ", Difference=" + ((userPhoneVO
                            .getModifiedOn().getTime() - userPhoneVO.getPinModifiedOn().getTime()) / (24 * 60 * 60 * 1000)));
                }
                EventHandler.handle(EventIDI.SYSTEM_INFO, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.INFO, "OperatorUtil[validatePIN]", "", userPhoneVO
                    .getMsisdn(), "", "Force User to change new reset PIN.");
                throw new BTSLBaseException("OperatorUtil", methodName, PretupsErrorCodesI.CHNL_ERROR_SNDR_FORCE_CHANGE_RESETPIN, 0, null);
            } 
            else if(PretupsI.YES.equalsIgnoreCase(p_channelUserVO.getPinReset()) && p_channelUserVO.getServicesTypes()==null) {
            	 EventHandler.handle(EventIDI.PIN_BLOCKED,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"OperatorUtil[validatePIN]","","","","Sender Pin Blocked.");
                 
                 throw new BTSLBaseException("OperatorUtil", methodName, PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK);
            }
            // added for temp pin expiry 
            else if(PretupsI.YES.equalsIgnoreCase(p_channelUserVO.getPinReset()) && PretupsI.CHANGE_PIN_SERVICE_TYPE.contains(p_channelUserVO.getServiceTypes())) {
            	int expiryInterval = SystemPreferences.TEMP_PIN_EXPIRY_DURATION;
            	if(expiryInterval>0) {
                	Date currentDate = new Date();
                	Date expiryTime = new Date(userPhoneVO.getPinModifiedOn().getTime() + (expiryInterval*60*60*1000));
                	if(_log.isDebugEnabled()) {
                		_log.debug(methodName, "Temp pin expiry block: Pin Modified time=" + userPhoneVO.getPinModifiedOn() + " current time=" + currentDate + " expiry interval in hours=" + expiryInterval);
                	}
                	
                	if(_log.isDebugEnabled()) {
                		_log.debug(methodName, "Expiry time=" + expiryTime.getTime() + " CurrentTime=" + currentDate.getTime());
                	}
                	
                	
                	if(currentDate.getTime() >= expiryTime.getTime()) {
                		// temp pin has expired
                		throw new BTSLBaseException("OperatorUtil", methodName, PretupsErrorCodesI.TEMP_PIN_EXPIRED);
                	}
            	}

            }
            
            
            
            
            else {
                final String decryptedPin = BTSLUtil.decryptText(userPhoneVO.getSmsPin());
                if (_log.isDebugEnabled()) {
                    _log.debug(methodName, "Sender MSISDN:" + userPhoneVO.getMsisdn() + " decrypted PIN of database=" + decryptedPin + " p_requestPin =" + BTSLUtil.maskParam(p_requestPin));
                }
                /*
                 * done by ashishT for checking the value in p_requestPin is
                 * hashvalue or actual value.
                 */
                boolean checkpin;
                if ("SHA".equalsIgnoreCase(pinpasEnDeCryptionType)) {
                    if (p_requestPin.length() > (int)c2sPinMaxLength) {
                        checkpin = decryptedPin.equals(p_requestPin);
                    } else {
                        checkpin = (!PretupsI.FALSE.equalsIgnoreCase(BTSLUtil.compareHash2String(decryptedPin, p_requestPin)));
                    }
                } else {
                    checkpin = decryptedPin.equals(p_requestPin);
                }

                if (!checkpin) {
                    increaseInvalidPinCount = true;
                    if (userPhoneVO.getFirstInvalidPinTime() != null) {
                        // Check if PIN counters needs to be reset after the
                        // reset duration
                        final long pnBlckRstDuration = ((Long) PreferenceCache.getControlPreference(PreferenceI.C2S_PIN_BLK_RST_DURATION, p_channelUserVO.getNetworkID(),
                            p_channelUserVO.getCategoryCode())).longValue();
                        if (_log.isDebugEnabled()) {
                            _log.debug(
                                methodName,
                                "p_userPhoneVO.getModifiedOn().getTime()=" + userPhoneVO.getModifiedOn().getTime() + " p_userPhoneVO.getFirstInvalidPinTime().getTime()=" + userPhoneVO
                                    .getFirstInvalidPinTime().getTime() + " Diff=" + ((userPhoneVO.getModifiedOn().getTime() - userPhoneVO.getFirstInvalidPinTime().getTime()) / (60 * 1000)) + " Allowed=" + pnBlckRstDuration);
                        }
                        final Calendar cal = BTSLDateUtil.getInstance();
                        cal.setTime(userPhoneVO.getModifiedOn());
                        final int d1 = cal.get(Calendar.DAY_OF_YEAR);
                        cal.setTime(userPhoneVO.getFirstInvalidPinTime());
                        final int d2 = cal.get(Calendar.DAY_OF_YEAR);
                        if (_log.isDebugEnabled()) {
                            _log.debug(methodName, "Day Of year of Modified On=" + d1 + " Day Of year of FirstInvalidPinTime=" + d2);
                        }
                        if (d1 != d2 && pnBlckRstDuration <= mintInDay) {
                            // reset
                            userPhoneVO.setInvalidPinCount(1);
                            userPhoneVO.setFirstInvalidPinTime(userPhoneVO.getModifiedOn());
                        } else if (d1 != d2 && pnBlckRstDuration > mintInDay && (d1 - d2) >= (pnBlckRstDuration / mintInDay)) {
                            // Reset
                            userPhoneVO.setInvalidPinCount(1);
                            userPhoneVO.setFirstInvalidPinTime(userPhoneVO.getModifiedOn());
                        } else if (((userPhoneVO.getModifiedOn().getTime() - userPhoneVO.getFirstInvalidPinTime().getTime()) / (60 * 1000)) < pnBlckRstDuration) {
                            final int maxPinBlckCnt = ((Integer) PreferenceCache.getControlPreference(PreferenceI.C2S_MAX_PIN_BLOCK_COUNT_CODE,
                                p_channelUserVO.getNetworkID(), p_channelUserVO.getCategoryCode())).intValue();
                            if ((userPhoneVO.getInvalidPinCount() - maxPinBlckCnt) == -1) {
                                // Set The flag that indicates that we need to
                                // bar the user because of PIN Change
                                userPhoneVO.setInvalidPinCount(0);
                                userPhoneVO.setFirstInvalidPinTime(null);
                                //Handling of Barred User Based on configuration in case of reaching the maximum Invalid PIN count
                                String onMaxInvalidPinPassUserBarredReq = Constants.getProperty("ONMAX_INVALID_PIN_PASSWORD_USER_BARRED_REQUIRED");
                                if (BTSLUtil.isNullString(onMaxInvalidPinPassUserBarredReq) || "null".equalsIgnoreCase(onMaxInvalidPinPassUserBarredReq) || PretupsI.NO.equals(onMaxInvalidPinPassUserBarredReq)) {
                                	onMaxInvalidPinPassUserBarredReq = PretupsI.NO;
                                } else if(PretupsI.YES.equals(onMaxInvalidPinPassUserBarredReq)){
                                	onMaxInvalidPinPassUserBarredReq = PretupsI.YES;
                                } else {
                                	onMaxInvalidPinPassUserBarredReq = PretupsI.NO;
                                }
                                if(PretupsI.YES.equalsIgnoreCase(onMaxInvalidPinPassUserBarredReq)) {
                                	userPhoneVO.setBarUserForInvalidPin(true);
                                	{
                                		isUserBarred = true;
                                		userPhoneVO.setPinReset("Y");
                                	}
                                } else {
                                	isUserBarred = false;
                                }
                                
                            } else {
                                userPhoneVO.setInvalidPinCount(userPhoneVO.getInvalidPinCount() + 1);
                            }

                            if (userPhoneVO.getInvalidPinCount() == 0) {
                                userPhoneVO.setFirstInvalidPinTime(userPhoneVO.getModifiedOn());
                            }
                        } else {
                            userPhoneVO.setInvalidPinCount(1);
                            userPhoneVO.setFirstInvalidPinTime(userPhoneVO.getModifiedOn());
                        }
                    } else {
                        userPhoneVO.setInvalidPinCount(1);
                        userPhoneVO.setFirstInvalidPinTime(userPhoneVO.getModifiedOn());
                    }
                } else {
                    // initilize PIN Counters if ifPinCount>0
                    if (userPhoneVO.getInvalidPinCount() > 0) {
                        userPhoneVO.setInvalidPinCount(0);
                        userPhoneVO.setFirstInvalidPinTime(null);
                        updateStatus = new ChannelUserDAO().updateSmsPinCounter(p_con, userPhoneVO);
                        if (updateStatus < 0) {
                            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validatePIN]", "",
                                userPhoneVO.getMsisdn(), "", "Not able to update invalid PIN count for users");
                            throw new BTSLBaseException("OperatorUtil", methodName, PretupsErrorCodesI.ERROR_EXCEPTION);
                        }
                    }
                }
                if (increaseInvalidPinCount) {
                    updateStatus = new ChannelUserDAO().updateSmsPinCounter(p_con, userPhoneVO);
                    if (updateStatus > 0 && !isUserBarred) {
                    	 EventHandler.handle(EventIDI.INVALID_PIN,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"OperatorUtil[validatePIN]","","","","Sender Invalid Pin.");
                         
                        throw new BTSLBaseException("OperatorUtil", methodName, PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN);
                    } else if (updateStatus > 0 && isUserBarred) {
                    	 EventHandler.handle(EventIDI.PIN_BLOCKED,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"OperatorUtil[validatePIN]","","","","Sender Pin Blocked.");
                         
                        throw new BTSLBaseException("OperatorUtil", methodName, PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK);
                    } else {
                        EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validatePIN]", "",
                            userPhoneVO.getMsisdn(), "", "Not able to update invalid PIN count for users");
                        throw new BTSLBaseException("OperatorUtil", methodName, PretupsErrorCodesI.ERROR_EXCEPTION);
                    }
                }
            }
            if (p_con != null) {
                p_con.commit();
            }

        } catch (BTSLBaseException bex) {
            throw bex;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validatePIN]", "", "", "",
                "Exception:" + e.getMessage());
            throw new BTSLBaseException("OperatorUtil", methodName, PretupsErrorCodesI.ERROR_EXCEPTION,e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "Exiting with increase invalid Pin Count flag=" + increaseInvalidPinCount);
            }

            try {
                if (p_con != null) {
                    p_con.commit();
                }
            } catch (SQLException e) {
                _log.errorTrace(methodName, e);
            }
        }
    }

    /**
     * This method used for pin validation. While creating or modifying the user
     * PIN This method will be used. Method validatePIN.
     * 
     * @author sanjeew.kumar
     * @created on 19/07/07
     * @param p_pin
     *            String
     * @return HashMap
     */
    @Override
    public HashMap pinValidate(String p_pin) {
        _log.debug("pinValidate", "Entered, PIN= " + BTSLUtil.maskParam(p_pin));
        final HashMap messageMap = new HashMap();
        Integer minSmsPinLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_SMS_PIN_LENGTH);
        Integer maxSmsPinLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_SMS_PIN_LENGTH);
        String defaultPin = BTSLUtil.getDefaultPasswordNumeric(p_pin);
        if (defaultPin.equals(p_pin)) {
            return messageMap;
        }

        defaultPin = BTSLUtil.getDefaultPasswordText(p_pin);
        if (defaultPin.equals(p_pin)) {
            return messageMap;
        }

        if (!BTSLUtil.isNumeric(p_pin)) {
            messageMap.put("operatorutil.validatepin.error.pinnotnumeric", null);
        }
        if (p_pin.length() < (int)minSmsPinLength || p_pin.length() > (int)maxSmsPinLength) {
            final String[] args = { String.valueOf((int)minSmsPinLength), String.valueOf((int)maxSmsPinLength) };
            messageMap.put("operatorutil.validatepin.error.smspinlenerr", args);
        }
        final int result = BTSLUtil.isSMSPinValid(p_pin);
        if (result == -1) {
            messageMap.put("operatorutil.validatepin.error.pinsamedigit", null);
        } else if (result == 1) {
            messageMap.put("operatorutil.validatepin.error.pinconsecutive", null);
        }
        if (_log.isDebugEnabled()) {
            _log.debug("validatePIN", "Exiting messageMap.size()=" + messageMap.size());
        }
        return messageMap;
    }

    /**
     * Date : Jul 23, 2007 Discription : Method : validateTransactionPassword
     * 
     * @param p_channelUserVO
     * @param p_password
     * @throws BTSLBaseException
     * @return void
     * @author ved.sharma
     */
    @Override
    public boolean validateTransactionPassword(ChannelUserVO p_channelUserVO, String p_password) throws BTSLBaseException {
        final String obj = "validateTransactionPassword";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, " Entered p_channelUserVO=:" + p_channelUserVO + " p_password=" + BTSLUtil.maskParam(p_password));
        }
        boolean passwordValidation = true;
        String pinpasEnDeCryptionType = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.PINPAS_EN_DE_CRYPTION_TYPE);
        Integer minLoginPwdLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_LOGIN_PWD_LENGTH);
        Integer maxLoginPwdLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_LOGIN_PWD_LENGTH);

        try {
            if (p_channelUserVO != null) {
                /*
                 * change done by ashishT for hashing implementation comparing
                 * the password hashvlue from db to the password sent by user.
                 */
                // if(!BTSLUtil.isNullString(p_channelUserVO.getPassword()) &&
                // (PretupsI.FALSE.equalsIgnoreCase(BTSLUtil.compareHash2String(p_channelUserVO.getPassword(),
                // p_password))))
                if ("SHA".equalsIgnoreCase(pinpasEnDeCryptionType)) {
                    boolean checkpassword;
                    if (p_password.length() > maxLoginPwdLength) {
                        checkpassword = BTSLUtil.decryptText(p_channelUserVO.getPassword()).equals(p_password);
                    } else {
                        checkpassword = (!PretupsI.FALSE.equalsIgnoreCase(BTSLUtil.compareHash2String(p_channelUserVO.getPassword(), p_password)));
                        checkpassword = true;
                    }
                    if (!BTSLUtil.isNullString(p_channelUserVO.getPassword()) && (!checkpassword)) {
                        passwordValidation = false;
                    }
                } else {
                    if (!BTSLUtil.isNullString(p_channelUserVO.getPassword()) && (PretupsI.FALSE.equalsIgnoreCase(BTSLUtil.compareHash2String(p_channelUserVO.getPassword(),
                        p_password)))) {
                        passwordValidation = false;
                    }
                }

                // if(!BTSLUtil.isNullString(p_password) &&
                // ((String) PreferenceCache.getSystemPreferenceValue(PreferenceI.C2S_DEFAULT_PASSWORD)).equals(p_password))
                // throw new BTSLBaseException(this, "loadValidateUserDetails",
                // PretupsErrorCodesI.XML_ERROR_CHANGE_DEFAULT_PASSWD)
            } else {
                throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.XML_ERROR_NO_SUCH_USER);
            }

        } catch (BTSLBaseException bex) {
            throw bex;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validateTransactionPassword]", "", "",
                "", "Exception:" + e.getMessage());
            throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.ERROR_EXCEPTION,e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, " Exiting passwordValidation=" + passwordValidation);
            }
        }
        return passwordValidation;
    }

    /**
     * Date : Aug 16, 2007 Discription : Method : getReceiverConversionRate
     * 
     * @param p_senderInterfaceID
     * @param p_receiverInterfaceID
     * @throws BTSLBaseException
     * @return double
     * @author ved.sharma
     */
    /*
     * This code was commented on 01/04/08 to eliminate fetch conversion rate
     * step. Now Moldova will support single currency. Previously conversion
     * rate was required to support multiple currency for moldova.
     * 
     * public double getReceiverConversionRate(String p_senderInterfaceID,String
     * p_receiverInterfaceID) throws BTSLBaseException { if
     * (_log.isDebugEnabled()) _log.debug("getReceiverConversionRate",
     * " Entered p_senderInterfaceID=:" +p_senderInterfaceID +
     * " p_receiverInterfaceID=" +p_receiverInterfaceID) double conversionRate=1
     * double senderConversionRateDouble=0 double receiverConversionRateDouble=0
     * try { String senderConversionRate=ConversionRateCache
     * .getConversionRate(p_senderInterfaceID) try {
     * senderConversionRateDouble=Double.parseDouble(senderConversionRate) }
     * catch (Exception e) { _log.error("getReceiverConversionRate",
     * "senderConversionRate="+senderConversionRate+" Exception " +
     * e.getMessage()) e.printStackTrace()
     * EventHandler.handle(EventIDI.SYSTEM_ERROR
     * ,EventComponentI.SYSTEM,EventStatusI .
     * RAISED,EventLevelI.FATAL,"OperatorUtil[getReceiverConversionRate]","","",
     * "","Exception:"+e.getMessage()) throw new
     * BTSLBaseException("OperatorUtil", "getReceiverConversionRate",
     * PretupsErrorCodesI.SENDER_CONVERSION_RATE_NOTFOUND) } String
     * receiverConversionRate=ConversionRateCache
     * .getConversionRate(p_receiverInterfaceID) try {
     * receiverConversionRateDouble=Double.parseDouble(receiverConversionRate) }
     * catch (Exception e) { _log.error("getReceiverConversionRate",
     * "receiverConversionRate="+receiverConversionRate
     * +"receiverConversionRate="+receiverConversionRate+" Exception " +
     * e.getMessage()) e.printStackTrace()
     * EventHandler.handle(EventIDI.SYSTEM_ERROR
     * ,EventComponentI.SYSTEM,EventStatusI .
     * RAISED,EventLevelI.FATAL,"OperatorUtil[getReceiverConversionRate]","","",
     * "","Exception:"+e.getMessage()) throw new
     * BTSLBaseException("OperatorUtil", "getReceiverConversionRate",
     * PretupsErrorCodesI.RECEIVER_CONVERSION_RATE_NOTFOUND) }
     * conversionRate=senderConversionRateDouble/receiverConversionRateDouble }
     * catch (Exception e) { _log.error("getReceiverConversionRate",
     * "senderConversionRateDouble="+senderConversionRateDouble
     * +",receiverConversionRateDouble="
     * +receiverConversionRateDouble+"Exception " + e.getMessage())
     * e.printStackTrace()
     * EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI
     * .SYSTEM,EventStatusI .
     * RAISED,EventLevelI.FATAL,"OperatorUtil[getReceiverConversionRate]","","",
     * "","Exception:"+e.getMessage()) throw new
     * BTSLBaseException("OperatorUtil", "getReceiverConversionRate",
     * PretupsErrorCodesI.ERROR_EXCEPTION) } if (_log.isDebugEnabled())
     * _log.debug("getReceiverConversionRate", " Exiting p_senderInterfaceID=:"
     * +p_senderInterfaceID + " p_receiverInterfaceID="
     * +p_receiverInterfaceID+" conversionRate="+conversionRate) return
     * conversionRate }
     */
    /**
     * Date : Aug 23, 2007 Discription : Method : getReceiverConversionRate
     * 
     * @param p_receiverInterfaceID
     * @throws BTSLBaseException
     * @return double
     * @author ved.sharma
     */
    /*
     * This code was commented on 01/04/08 to eliminate fetch conversion rate
     * step. Now Moldova will support single currency. Previously conversion
     * rate was required to support multiple currency for moldova.
     * 
     * public double getReceiverConversionRate(String p_receiverInterfaceID)
     * throws BTSLBaseException { if (_log.isDebugEnabled())
     * _log.debug("getReceiverConversionRate",
     * " Entered  p_receiverInterfaceID=" +p_receiverInterfaceID) double
     * conversionRate=1 double receiverConversionRateDouble=0 try {
     * 
     * String receiverConversionRate=ConversionRateCache
     * .getConversionRate(p_receiverInterfaceID) try {
     * receiverConversionRateDouble=Double.parseDouble(receiverConversionRate) }
     * catch (Exception e) { _log.error("getReceiverConversionRate",
     * "receiverConversionRate="+receiverConversionRate
     * +"receiverConversionRate="+receiverConversionRate+" Exception " +
     * e.getMessage()) e.printStackTrace()
     * EventHandler.handleEventIDI.SYSTEM_ERROR
     * ,EventComponentI.SYSTEM,EventStatusI .
     * RAISED,EventLevelI.FATAL,"OperatorUtil[getReceiverConversionRate]","","",
     * "","Exception:"+e.getMessage()) throw new
     * BTSLBaseException("OperatorUtil", "getReceiverConversionRate",
     * PretupsErrorCodesI.RECEIVER_CONVERSION_RATE_NOTFOUND) }
     * conversionRate=receiverConversionRateDouble } catch (Exception e) {
     * _log.error("getReceiverConversionRate",
     * "receiverConversionRateDouble="+receiverConversionRateDouble+"Exception "
     * + e.getMessage()) e.printStackTrace()
     * EventHandler.handle(EventIDI.SYSTEM_ERROR
     * ,EventComponentI.SYSTEM,EventStatusI .
     * RAISED,EventLevelI.FATAL,"OperatorUtil[getReceiverConversionRate]","","",
     * "","Exception:"+e.getMessage()) throw new
     * BTSLBaseException("OperatorUtil", "getReceiverConversionRate",
     * PretupsErrorCodesI.ERROR_EXCEPTION) } if (_log.isDebugEnabled())
     * _log.debug("getReceiverConversionRate",
     * " Exiting  p_receiverInterfaceID="
     * +p_receiverInterfaceID+" conversionRate="+conversionRate) return
     * conversionRate }
     */
    // End of single currency request change

    @Override
    public String addRemoveDigitsFromMSISDN(String msisdn) {
        // this block is for Operator specific
        /*
         * if((msisdn.substring(0,1)).equals("0"))
         * msisdn=msisdn.substring(1,msisdn.length())
         */
        return msisdn;
    }

    /**
     * P2P This method validates the requested PIN with that available in DB,
     * also checks whether to block user or reset the counter or not
     * 
     * @param p_con
     * @param p_senderVO
     * @param p_requestPin
     * @throws BTSLBaseException
     * @author ved.sharma
     */
    @Override
    public void validatePIN(Connection p_con, SenderVO p_senderVO, String p_requestPin) throws BTSLBaseException {
        final String obj = "validatePIN";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Entered with p_senderVO:" + p_senderVO.toString() + " p_requestPin=" + p_requestPin);
        }
        int updateStatus = 0;
        boolean updatePinCount = false;
        boolean isUserBarred = false;
        
        Integer p2pDaysAfterChangePin = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_DAYS_AFTER_CHANGE_PIN);
        Integer p2pMaxPinBlockcount = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_MAX_PIN_BLOCK_COUNT);
        Integer p2pPinBlkRstDuration = Integer.valueOf(String.valueOf(PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_PIN_BLK_RST_DURATION)));
        String  p2pDefaultSmsPin = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_DEFAULT_SMSPIN);
        Integer c2sPinMaxLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.C2S_PIN_MAX_LENGTH);
        String pinpasEnDeCryptionType = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.PINPAS_EN_DE_CRYPTION_TYPE);
        
        try {
            // added changes regarding to change PIN on 1st request
            // if(p_senderVO.isForcePinCheckReqd() &&
            // (p_senderVO.getPinModifiedOn()==null ||
            // (p_senderVO.getPinModifiedOn().getTime())==(p_senderVO.getCreatedOn().getTime())))
            // throw new BTSLBaseException("OperatorUtil", "validatePIN",
            // PretupsErrorCodesI.CHNL_FIRST_REQUEST_PIN_CHANGE)

            if (_log.isDebugEnabled()) {
                _log.debug(obj, "Modified Time=:" + p_senderVO.getModifiedOn() + " p_senderVO.getPinModifiedOn()=" + p_senderVO.getPinModifiedOn());
            }
            if (p_senderVO.isForcePinCheckReqd() && p_senderVO.getPinModifiedOn() != null && ((p_senderVO.getModifiedOn().getTime() - p_senderVO.getPinModifiedOn().getTime()) / (24 * 60 * 60 * 1000)) > (int)p2pDaysAfterChangePin) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj,
                        "Modified Time=:" + p_senderVO.getModifiedOn() + " p_senderVO.getPinModifiedOn()=" + p_senderVO.getPinModifiedOn() + " Difference=" + ((p_senderVO
                            .getModifiedOn().getTime() - p_senderVO.getPinModifiedOn().getTime()) / (24 * 60 * 60 * 1000)));
                }
                EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.INFO, "SubscriberBL[validatePIN]", "", p_senderVO
                    .getMsisdn(), "", "Force User to change PIN after " + (int)p2pDaysAfterChangePin + " days as last changed on " + p_senderVO
                    .getPinModifiedOn());
                final String strArr[] = { String.valueOf((int)p2pDaysAfterChangePin) };
                throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.CHNL_ERROR_SNDR_FORCE_CHANGEPIN, 0, strArr, null);
            } else {
                final SubscriberDAO subscriberDAO = new SubscriberDAO();
                final String decryptedPin = BTSLUtil.decryptText(p_senderVO.getPin());

                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "Sender MSISDN:" + p_senderVO.getMsisdn() + " decrypted PIN=" + decryptedPin + " p_requestPin=" + p_requestPin);
                }

                // added for Change the default PIN
                if (p_senderVO.isForcePinCheckReqd() && p2pDefaultSmsPin.equals(decryptedPin)) {
                    throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.CHNLUSR_CHANGE_DEFAULT_PIN);
                }
                // if (!decryptedPin.equalsIgnoreCase(p_requestPin))
                /*
                 * done by ashishT for checking the value in p_requestPin is
                 * hashvalue or actual value.
                 */
                boolean checkpin;
                if ("SHA".equalsIgnoreCase(pinpasEnDeCryptionType)) {
                    if (p_requestPin.length() > (int)c2sPinMaxLength) {
                        checkpin = decryptedPin.equals(p_requestPin);
                    } else {
                        checkpin = (!PretupsI.FALSE.equalsIgnoreCase(BTSLUtil.compareHash2String(decryptedPin, p_requestPin)));
                    }
                } else {
                    checkpin = decryptedPin.equals(p_requestPin);
                }
                if (!checkpin) {
                    updatePinCount = true;
                    final int mintInDay = 24 * 60;
                    if (p_senderVO.getFirstInvalidPinTime() != null) {
                        // Check if PIN counters needs to be reset after the
                        // reset duration
                        if (_log.isDebugEnabled()) {
                            _log.debug(
                                obj,
                                "p_senderVO.getModifiedOn().getTime()=" + p_senderVO.getModifiedOn().getTime() + " p_senderVO.getFirstInvalidPinTime().getTime()=" + p_senderVO
                                    .getFirstInvalidPinTime().getTime() + " Diff=" + ((p_senderVO.getModifiedOn().getTime() - p_senderVO.getFirstInvalidPinTime().getTime()) / (60 * 1000)) + " Allowed=" + p2pPinBlkRstDuration.intValue());
                        }
                        final Calendar cal = BTSLDateUtil.getInstance();
                        cal.setTime(p_senderVO.getModifiedOn());
                        final int d1 = cal.get(Calendar.DAY_OF_YEAR);
                        cal.setTime(p_senderVO.getFirstInvalidPinTime());
                        final int d2 = cal.get(Calendar.DAY_OF_YEAR);
                        if (_log.isDebugEnabled()) {
                            _log.debug(obj, "Day Of year of Modified On=" + d1 + " Day Of year of FirstInvalidPinTime=" + d2);
                        }
                        if (d1 != d2 && p2pPinBlkRstDuration.intValue() <= mintInDay) {
                            // reset
                            p_senderVO.setPinBlockCount(1);
                            p_senderVO.setFirstInvalidPinTime(p_senderVO.getModifiedOn());
                        } else if (d1 != d2 && p2pPinBlkRstDuration.intValue() >= mintInDay && (d1 - d2) >= (p2pPinBlkRstDuration.intValue() / mintInDay)) {
                            // Reset
                            p_senderVO.setPinBlockCount(1);
                            p_senderVO.setFirstInvalidPinTime(p_senderVO.getModifiedOn());
                        } else if (((p_senderVO.getModifiedOn().getTime() - p_senderVO.getFirstInvalidPinTime().getTime()) / (60 * 1000)) < p2pPinBlkRstDuration.intValue()) {
                            if (p_senderVO.getPinBlockCount() - (int)p2pMaxPinBlockcount == 0) {
                                // isStatusUpdate = true
                                // p_senderVO.setStatus(PretupsI.USER_STATUS_BLOCK)
                                // Set The flag that indicates that we need to
                                // bar the user because of PIN Change
                                p_senderVO.setPinBlockCount(0);
                                // p_senderVO.setFirstInvalidPinTime(null)
                                isUserBarred = true;
                            } else {
                                p_senderVO.setPinBlockCount(p_senderVO.getPinBlockCount() + 1);
                            }

                            if (p_senderVO.getPinBlockCount() == 0) {
                                p_senderVO.setFirstInvalidPinTime(p_senderVO.getModifiedOn());
                            }
                        } else {
                            p_senderVO.setPinBlockCount(1);
                            p_senderVO.setFirstInvalidPinTime(p_senderVO.getModifiedOn());
                        }
                    } else {
                        p_senderVO.setPinBlockCount(1);
                        p_senderVO.setFirstInvalidPinTime(p_senderVO.getModifiedOn());
                    }
                } else {
                    // initilize PIN Counters if ifPinCount>0
                    if (p_senderVO.getPinBlockCount() > 0) {
                        p_senderVO.setPinBlockCount(0);
                        p_senderVO.setFirstInvalidPinTime(null);
                        updateStatus = subscriberDAO.updatePinStatus(p_con, p_senderVO, false);
                        if (updateStatus < 0) {
                            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validatePIN]", "",
                                p_senderVO.getMsisdn(), "", "Not able to update invalid PIN count for users");
                            throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
                        }
                    }
                }
                if (updatePinCount) {
                    updateStatus = subscriberDAO.updatePinStatus(p_con, p_senderVO, false);
                    if (updateStatus > 0 && !isUserBarred) {
                    	 EventHandler.handle(EventIDI.INVALID_PIN,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"OperatorUtil[validatePIN]","","","","Sender Pin Invalid.");
                         
                        throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.ERROR_INVALID_PIN);
                    } else if (updateStatus > 0 && isUserBarred) {
                        p_senderVO.setBarUserForInvalidPin(true);
                        EventHandler.handle(EventIDI.PIN_BLOCKED,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"OperatorUtil[validatePIN]","","","","Sender Pin Blocked.");
                        
                        throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.ERROR_SNDR_PINBLOCK, 0, new String[] { String
                            .valueOf((int)p2pMaxPinBlockcount), String.valueOf(p2pPinBlkRstDuration.intValue()) }, null);
                    } else if (updateStatus < 0) {
                        EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validatePIN]", "", p_senderVO
                            .getMsisdn(), "", "Not able to update invalid PIN count for users");
                        throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
                    }
                }
            }
        } catch (BTSLBaseException bex) {
            throw bex;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validatePIN]", "", "", "",
                "Exception:" + e.getMessage());
            throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.P2P_ERROR_EXCEPTION,e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "Exiting with increase Pin Count flag=" + updatePinCount + " Barred Update Flag:" + isUserBarred);
            }
        }
    }

    /**
     * Method checkDisallowedServiceClass.
     * 
     * @param p_con
     * @param p_msisdn
     * @param p_serviceType
     * @param p_serviceClass
     * @param p_module
     * @param p_userType
     * @throws BTSLBaseException
     * @return boolean
     */
    @Override
    public boolean checkMsisdnServiceClassMapping(Connection p_con, String p_msisdn, String p_serviceType, String p_serviceClass, String p_module, String p_userType) throws BTSLBaseException {
        if (_log.isDebugEnabled()) {
            _log.debug(
                "checkMsisdndServiceClassMapping",
                "Entered with p_msisdn=" + p_msisdn + " p_serviceType=" + p_serviceType + " p_serviceClass=" + p_serviceClass + " p_module=" + p_module + " p_userType=" + p_userType);
        }
        final RoutingDAO routingDAO = new RoutingDAO();
        boolean isExist = false;
        // If the value of status is 'Y', it means database is searched for
        // allowed users of specified service class and service type.
        // If the value of status is 'N', it means database is searched for
        // disallowed users of specified service class and service type.
        final String status = PretupsI.YES;
        final String methodName = "checkMsisdnServiceClassMapping";
        try {
            isExist = routingDAO.isMsisdnServiceClassMapped(p_con, p_msisdn, p_serviceType, p_serviceClass, status, p_module, p_userType);
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[checkMsisdnServiceClassMapping]", "", "",
                " ", "Not able to check whether msisdn is mapped with service type and service class Exception=" + e.getMessage());
            throw new BTSLBaseException("OperatorUtil", methodName, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exiting with isExist=" + isExist);
        }
        return isExist;
    }

    /**
     * Method that will validate the user c2s enquiry message sent
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateC2SEnquiryRequest(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateC2SEnquiryRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String METHOD_NAME = "validateC2SEnquiryRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;

            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug("validateC2SEnquiryRequest", "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug("validateC2SEnquiryRequest", "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            final String extTxnDate = (String) p_requestVO.getRequestMap().get("EXTTXNDATE");

            if (_log.isDebugEnabled()) {
                _log.debug("validateC2SEnquiryRequest", "extTxnDate from requestMap= " + extTxnDate);
            }
            // check on ext. txn. date
            if (BTSLUtil.isNullString(extTxnDate)) {
                throw new BTSLBaseException("OperatorUtil", "validateC2SEnquiryRequest", PretupsErrorCodesI.ERROR_EXT_DATE_BLANK);
            }
            String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            try {
                final String extDateFormat = externalDateFormat;
                if (extDateFormat.length() != extTxnDate.length()) {
                    throw new ParseException(extDateFormat, 0);
                }
                final SimpleDateFormat sdf = new SimpleDateFormat(extDateFormat);
                sdf.setLenient(false); // this is required else it will convert
            } catch (java.text.ParseException e1) {
                _log.errorTrace(METHOD_NAME, e1);
                throw new BTSLBaseException("OperatorUtil", "validateC2SEnquiryRequest", PretupsErrorCodesI.ERROR_EXT_DATE_NOT_PROPER);
            }
            
            if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                try {
                	if(messageLen == 4) {
                		if(!BTSLUtil.isNullString(p_requestArr[2])&& !"null".equalsIgnoreCase(p_requestArr[2])){
                			p_requestVO.setReqSelector(p_requestArr[2]);
                		} else {
                			final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO.getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            } else {
                            	p_requestVO.setReqSelector(PretupsI.SERVICE_DEFAULT_SELECTOR);
                            }
                		}
                		ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                	} else if(messageLen == 3){
                		final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO.getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        } else {
                        	p_requestVO.setReqSelector(PretupsI.SERVICE_DEFAULT_SELECTOR);
                        }
                		ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[2]);
                	}
                	if (_log.isDebugEnabled()) {
                        _log.debug("validateC2SEnquiryRequest", "p_requestVO.getReqSelector()= " + p_requestVO.getReqSelector());
                    }
                } catch (BTSLBaseException be) {
                    if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                        .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                        p_con.commit();
                    }
                    throw be;
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            final ReceiverVO receiverVO = new ReceiverVO();
            // Customer MSISDN Validation
            custMsisdn = p_requestArr[1];

            PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
            p_c2sTransferVO.setReceiverVO(receiverVO);
            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
			//p_requestVO.setReqSelector(p_requestArr[2]);
            // //////////////////////////////////////
            // this service c2s enquiry is not allow to this network
            String allowNetworkServices = null;
            try {
                allowNetworkServices = Constants.getProperty("NETWORK_SERVICES_ALLOWED_FOR_C2S_ENQ");
            } catch (Exception e) {
                allowNetworkServices = "";
                _log.error(this, "please define NETWORK_SERVICES_ALLOWED_FOR_C2S_ENQ parameter into Constants.props");
                _log.errorTrace(METHOD_NAME, e);
            }
            final String str = p_requestVO.getRequestNetworkCode() + "_" + p_requestVO.getEnquiryServiceType();
            if (allowNetworkServices.indexOf(str) == -1) {
                _log.error(this, "Enqueiry Service Type =" + p_requestVO.getEnquiryServiceType() + " Not allow to this network. ");
                EventHandler.handle(EventIDI.SYSTEM_INFO, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.INFO, "OperatorUtil[validateC2SEnquiryRequest]", "", "",
                    "", "Enqueiry Service Type =" + p_requestVO.getEnquiryServiceType() + " Not allow to this network. ");
                throw new BTSLBaseException("", "validateC2SEnquiryRequest", PretupsErrorCodesI.SERVICE_NOT_ALLOW_FOR_C2S_ENQUIRY_TO_THIS_NETWORK, 0,
                    new String[] { p_requestVO.getEnquiryServiceType() }, null);
            }
            // /// c2s enquiry service should be allow to the channel user who
            // is going for enquiry.
            boolean serviceAlowFlag = false;
            final Iterator itr = ((ChannelUserVO) p_requestVO.getSenderVO()).getAssociatedServiceTypeList().iterator();
            ListValueVO vo = null;
            while (itr.hasNext()) {
                vo = (ListValueVO) itr.next();
                if ((p_requestVO.getEnquiryServiceType()).equalsIgnoreCase(vo.getValue()) && PretupsI.STATUS_ACTIVE.equalsIgnoreCase(vo.getLabel())) {
                    serviceAlowFlag = true;
                    break;
                }
            }
            if (!serviceAlowFlag) {
                _log.error(this, "Enqueiry Service Type =" + p_requestVO.getEnquiryServiceType() + " Not allow to this user. ");
                EventHandler.handle(EventIDI.SYSTEM_INFO, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.INFO, "OperatorUtil[validateC2SEnquiryRequest]", "", "",
                    "", "Enqueiry Service Type =" + p_requestVO.getEnquiryServiceType() + " Not allow to this user. ");
                throw new BTSLBaseException("", "validateC2SEnquiryRequest", PretupsErrorCodesI.SERVICE_NOT_ALLOW_FOR_C2S_ENQUIRY_TO_USER, 0, new String[] { p_requestVO
                    .getEnquiryServiceType() }, null);
            }
            // ///////////////////////////////////////

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace("validateC2SEnquiryRequest", e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SEnquiryRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, "validateC2SEnquiryRequest", PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug("validateC2SEnquiryRequest", "Exiting ");
        }
    }

    /**
     * This method is used to check whether the restricted MSISDN is Black
     * listed as a CP2P Pair or CP2P Payee or C2S Payee. Method
     * :isRestrictedSubscriberAllowed
     * 
     * @param p_con
     *            java.sql.Connection
     * @param p_msisdn
     *            String
     * @param p_blacklist_type
     *            String
     * @return boolean
     * @throws BTSLBaseException
     */
    @Override
    public boolean isRestrictedSubscriberAllowed(Connection p_con, String p_msisdn, String p_senderMsisdn) throws BTSLBaseException {
        final String obj = "isRestrictedSubscriberAllowed";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Entered with p_msisdn=" + p_msisdn + " p_senderMsisdn=" + p_senderMsisdn);
        }
        HashMap map = new HashMap();
        RestrictedSubscriberVO restrictedSenderSubscriberVO = null;
        RestrictedSubscriberVO restrictedReceiverSubscriberVO = null;
        String errorcode = null;
        boolean isAllow = false;
        /*
         * if(PretupsI.CP2P_PAYER.equals(p_blacklist_type))
         * errorcode=PretupsErrorCodesI.
         * RM_ERROR_RESTRICTED_SUB_NOT_ALLOWED_CP2P_PAYER else
         * if(PretupsI.CP2P_PAYEE.equals(p_blacklist_type))
         * errorcode=PretupsErrorCodesI.
         * RM_ERROR_RESTRICTED_SUB_NOT_ALLOWED_CP2P_PAYEE else
         * errorcode=PretupsErrorCodesI
         * .RM_ERROR_RESTRICTED_SUB_RECHARGE_NOT_ALLOWED
         */
        errorcode = PretupsErrorCodesI.RM_ERROR_RESTRICTED_SUB_RECHARGE_NOT_ALLOWED_P2P;
        try {
            final RestrictedSubscriberDAO restrictedSubscriberDao = new RestrictedSubscriberDAO();
            map = restrictedSubscriberDao.loadRestrictedMsisdnDetail(p_con, p_msisdn, p_senderMsisdn);
            if (map != null && map.size() == 2) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "Entered with map size 2=");
                }
                restrictedSenderSubscriberVO = (RestrictedSubscriberVO) map.get(p_senderMsisdn);
                restrictedReceiverSubscriberVO = (RestrictedSubscriberVO) map.get(p_msisdn);
                // If CP2P_WITHIN_LIST is �N� for sender AND CP2P_PAYER is �N�
                // for sender AND CP2P_WITHIN_LIST is �N� AND CP2P_Payee is �N�
                // for receiver, allow credit transfer.
                if (PretupsI.STATUS_DELETE.equals(restrictedSenderSubscriberVO.getCp2pWithInList()) && PretupsI.STATUS_DELETE.equals(restrictedSenderSubscriberVO
                    .getCp2pPayerStatus()) && PretupsI.STATUS_DELETE.equals(restrictedReceiverSubscriberVO.getCp2pWithInList()) && PretupsI.STATUS_DELETE
                    .equals(restrictedReceiverSubscriberVO.getCp2pPayeeStatus())) {
                    if (_log.isDebugEnabled()) {
                        _log.debug(obj,
                            "If CP2P_WITHIN_LIST is �N� for sender AND CP2P_PAYER is �N� for sender AND CP2P_WITHIN_LIST is �N� AND CP2P_Payee is �N� for receiver");
                    }
                    isAllow = true;
                }

                // Else If both receiver and sender are in the same domain.
                else if (restrictedSenderSubscriberVO.getSubscriberDomainCode().equals(restrictedReceiverSubscriberVO.getSubscriberDomainCode())) {
                    if (_log.isDebugEnabled()) {
                        _log.debug(obj, "both receiver and sender are in the same domain");
                    }
                    // a. If sender and receiver have the same owner.
                    if (restrictedSenderSubscriberVO.getOwnerID().equals(restrictedReceiverSubscriberVO.getOwnerID())) {
                        if (_log.isDebugEnabled()) {
                            _log.debug(obj, "If sender and receiver have the same owner.");
                            /*
                             * i. Is CP2P-WITHIN_LIST is Y for both sender and
                             * receiver. 1. If Sender and receiver belong to the
                             * same parent allow Credit Transfer. 2. ELSE IF
                             * sender and receiver belong to different parent,
                             * check if CP2P_WITHIN_LIST_LEVEL is �O� for both
                             * sender and receiver, allow credit transfer
                             * between Sender and receiver. 3. ELSE reject the
                             * request
                             */
                        }

                        if (PretupsI.STATUS_ACTIVE.equals(restrictedSenderSubscriberVO.getCp2pWithInList()) && PretupsI.STATUS_ACTIVE.equals(restrictedReceiverSubscriberVO
                            .getCp2pWithInList())) {
                            if (_log.isDebugEnabled()) {
                                _log.debug(obj, "Is CP2P-WITHIN_LIST is Y for both sender and receiver.");
                            }
                            if (restrictedSenderSubscriberVO.getChannelUserID().equals(restrictedReceiverSubscriberVO.getChannelUserID())) {
                                isAllow = true;
                            } else if (!(restrictedSenderSubscriberVO.getChannelUserID().equals(restrictedReceiverSubscriberVO.getChannelUserID())) && (PretupsI.CP2P_WITHIN_LIST_LEVEL_OWNER
                                .equals(restrictedReceiverSubscriberVO.getCp2pListLevel()) || PretupsI.CP2P_WITHIN_LIST_LEVEL_DOMAIN.equals(restrictedReceiverSubscriberVO
                                .getCp2pListLevel())) && (PretupsI.CP2P_WITHIN_LIST_LEVEL_OWNER.equals(restrictedSenderSubscriberVO.getCp2pListLevel()) || PretupsI.CP2P_WITHIN_LIST_LEVEL_DOMAIN
                                .equals(restrictedSenderSubscriberVO.getCp2pListLevel()))) {
                                isAllow = true;
                            }
                        }
                        // ii. If CP2P_WITHIN_LIST is �Y� for only sender AND
                        // CP2P_WITHIN_LIST_LEVEL is �O� for sender AND
                        // CP2P_WITHIN_LIST is �N� for receiver AND CP2P_Payee
                        // is N for receiver allow credit transfer.
                        else if (PretupsI.STATUS_ACTIVE.equals(restrictedSenderSubscriberVO.getCp2pWithInList()) && (PretupsI.CP2P_WITHIN_LIST_LEVEL_OWNER
                            .equals(restrictedSenderSubscriberVO.getCp2pListLevel()) || PretupsI.CP2P_WITHIN_LIST_LEVEL_DOMAIN.equals(restrictedSenderSubscriberVO
                            .getCp2pListLevel())) && PretupsI.STATUS_DELETE.equals(restrictedReceiverSubscriberVO.getCp2pWithInList()) && PretupsI.STATUS_DELETE
                            .equals(restrictedReceiverSubscriberVO.getCp2pPayeeStatus())) {
                            isAllow = true;
                        }
                        // iii. If CP2P_WITHIN_LIST is �N� for sender AND
                        // CP2P_PAYER is �Y� for sender reject the request
                        // already done default value false
                        // iv. ELSE IF CP2P_WITHIN_LIST is �N� for sender AND
                        // CP2P_PAYER is �N� AND CP2P_WITHIN_LIST is �Y� AND
                        // CP2P_WITHIN_LIST_LEVEL is �O� for receiver, allow
                        // credit transfer.
                        else if (PretupsI.STATUS_DELETE.equals(restrictedSenderSubscriberVO.getCp2pWithInList()) && PretupsI.STATUS_DELETE.equals(restrictedSenderSubscriberVO
                            .getCp2pPayerStatus()) && PretupsI.STATUS_ACTIVE.equals(restrictedReceiverSubscriberVO.getCp2pWithInList()) && (PretupsI.CP2P_WITHIN_LIST_LEVEL_OWNER
                            .equals(restrictedReceiverSubscriberVO.getCp2pListLevel()) || PretupsI.CP2P_WITHIN_LIST_LEVEL_DOMAIN.equals(restrictedReceiverSubscriberVO
                            .getCp2pListLevel()))) {
                            isAllow = true;
                        }
                    } else {
                        /*
                         * i. Is CP2P-WITHIN_LIST is Y for both sender and
                         * receiver. 1. IF sender and receiver belong to
                         * different parent, check if CP2P_WITHIN_LIST_LEVEL is
                         * �D� for both sender and receiver, allow credit
                         * transfer between Sender and receiver. 2. ELSE reject
                         * the request
                         */
                        if (PretupsI.STATUS_ACTIVE.equals(restrictedSenderSubscriberVO.getCp2pWithInList()) && PretupsI.STATUS_ACTIVE.equals(restrictedReceiverSubscriberVO
                            .getCp2pWithInList())) {
                            if (_log.isDebugEnabled()) {
                                _log.debug(obj, "Is CP2P-WITHIN_LIST is Y for both sender and receiver.");
                            }

                            if (!(restrictedSenderSubscriberVO.getChannelUserID().equals(restrictedReceiverSubscriberVO.getChannelUserID())) && PretupsI.CP2P_WITHIN_LIST_LEVEL_DOMAIN
                                .equals(restrictedReceiverSubscriberVO.getCp2pListLevel()) && PretupsI.CP2P_WITHIN_LIST_LEVEL_DOMAIN.equals(restrictedSenderSubscriberVO
                                .getCp2pListLevel())) {
                                isAllow = true;
                            }
                        }
                        // If CP2P_WITHIN_LIST is �Y� for only sender AND
                        // CP2P_WITHIN_LIST_LEVEL is �D� for sender AND
                        // CP2P_WITHIN_LIST is �N� for receiver AND CP2P_Payee
                        // is N for receiver allow credit transfer.
                        else if (PretupsI.STATUS_ACTIVE.equals(restrictedSenderSubscriberVO.getCp2pWithInList()) && PretupsI.CP2P_WITHIN_LIST_LEVEL_DOMAIN
                            .equals(restrictedSenderSubscriberVO.getCp2pListLevel()) && PretupsI.STATUS_DELETE.equals(restrictedReceiverSubscriberVO.getCp2pWithInList()) && PretupsI.STATUS_DELETE
                            .equals(restrictedReceiverSubscriberVO.getCp2pPayeeStatus())) {
                            isAllow = true;
                        }
                        // ELSE IF CP2P_WITHIN_LIST is �N� for sender AND
                        // CP2P_PAYER is �N� AND CP2P_WITHIN_LIST is �Y� for
                        // receiver AND CP2P_WITHIN_LIST_LEVEL is �D� for
                        // receiver, allow credit transfer.
                        else if (PretupsI.STATUS_DELETE.equals(restrictedSenderSubscriberVO.getCp2pWithInList()) && PretupsI.STATUS_DELETE.equals(restrictedSenderSubscriberVO
                            .getCp2pPayerStatus()) && PretupsI.STATUS_ACTIVE.equals(restrictedReceiverSubscriberVO.getCp2pWithInList()) && PretupsI.CP2P_WITHIN_LIST_LEVEL_DOMAIN
                            .equals(restrictedReceiverSubscriberVO.getCp2pListLevel())) {
                            isAllow = true;
                        }
                    }
                } else {
                    // b. If CP2P_Payer is �N� for sender AND CP2P_PAYEE is �N�
                    // for receiver allowthe request.
                    if (PretupsI.STATUS_DELETE.equals(restrictedSenderSubscriberVO.getCp2pPayerStatus()) && PretupsI.STATUS_DELETE.equals(restrictedReceiverSubscriberVO
                        .getCp2pPayeeStatus())) {
                        if (_log.isDebugEnabled()) {
                            _log.debug(obj, "If CP2P_Payer is �N� for sender AND CP2P_PAYEE is �N� for receiver allowthe request.");
                        }
                        isAllow = true;
                    }
                }
            }
            if (map != null && map.size() == 1) {
                restrictedSenderSubscriberVO = (RestrictedSubscriberVO) map.get(p_senderMsisdn);
                restrictedReceiverSubscriberVO = (RestrictedSubscriberVO) map.get(p_msisdn);
                if (restrictedSenderSubscriberVO != null && PretupsI.STATUS_DELETE.equals(restrictedSenderSubscriberVO.getCp2pPayerStatus())) {
                    isAllow = true;
                }
                if (restrictedReceiverSubscriberVO != null && PretupsI.STATUS_DELETE.equals(restrictedReceiverSubscriberVO.getCp2pPayeeStatus())) {
                    isAllow = true;
                }

            }
            if (map != null && map.isEmpty()) {
                isAllow = true;
            }
            if (!isAllow) {
                throw new BTSLBaseException(this, obj, errorcode);
            }
        } catch (BTSLBaseException be) {
            _log.errorTrace(obj, be);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[isRestrictedSubscriberAllowed]", "", "",
                "", "Exception:" + e.getMessage());
            throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.RM_ERROR_RESTRICTED_SUB_EXCEPTION_UB,e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "returning isAllow=" + isAllow + map.size());
            }
        }
        return isAllow;
    }

    /**
     * 
     * This method validates the requested PIN business rules
     * 
     * @param p_requestPin
     * @throws BTSLBaseException
     * @author santanu.sharma
     */
    @Override
    public void validatePINRules(String p_requestPin) throws BTSLBaseException {
        if (_log.isDebugEnabled()) {
            _log.debug("validatePINRules", "Entered with p_requestPin=" + p_requestPin);
        }
        validatePIN(p_requestPin);
        if (_log.isDebugEnabled()) {
            _log.debug("validatePINRules", "Exiting from OperatorUtil ");
        }
    }

    /**
     * Method that will validate the user message sent Message
     * array:-SERVICE_KEYWORD(M) RECEIVEAR_MSISDN(M) AMOUNT(M) SELECTOR(O)
     * RECEIVER_LOCALE(O) SENDER_LOCALE(O) GIFTER_MSISDN(M) GIFTER_NAME(M)
     * GIFTER_LOCALE(O) MPIN
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateC2SGiftRechargeRequest(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateC2SGiftRechargeRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateC2SGiftRechargeRequest";
        try {
            // get message array from requestVO
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String gifterMsisdn = null;
            String gifterName = null;
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }
            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
                case 6: // SERVICE_KEYWORD(M) RECEIVEAR_MSISDN(M) AMOUNT(M)
                    // GIFTER_MSISDN(M) GIFTER_NAME(M) MPIN
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        // validate customer(receiver) mobile numbers
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        gifterMsisdn = p_requestArr[3];
                        gifterName = p_requestArr[4];
                        // validate gifter msisdn or not(To be decided)
                        // p_reqquestArr[3]0
                        validateGifterMsisdn(p_requestVO, p_c2sTransferVO.getRequestID(), gifterMsisdn);

                        // validate gifter name or not(To be decided)
                        // p_reqquestArr[4]
                        if (BTSLUtil.isNullString(gifterName)) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CHNL_ERROR_GIFTER_NAME_NULL_GIFTRECHARGE);
                        }
                        p_requestVO.setGifterMSISDN(gifterMsisdn);
                        p_requestVO.setGifterName(gifterName);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        p_requestVO.setGifterLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 7: // SERVICE_KEYWORD(M) RECEIVEAR_MSISDN(M) AMOUNT(M)
                    // RECEIVER_LOCALE(O) GIFTER_MSISDN(M) GIFTER_NAME(M) MPIN
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }

                        gifterMsisdn = p_requestArr[4];
                        gifterName = p_requestArr[5];
                        // validate gifter msisdn or not(To be decided)
                        // p_reqquestArr[3]0
                        validateGifterMsisdn(p_requestVO, p_c2sTransferVO.getRequestID(), gifterMsisdn);

                        // validate gifter name or not(To be decided)
                        // p_reqquestArr[4]
                        if (BTSLUtil.isNullString(gifterName)) {
                            throw new BTSLBaseException(this, "validateC2SRechargeRequest", PretupsErrorCodesI.CHNL_ERROR_GIFTER_NAME_NULL_GIFTRECHARGE);
                        }
                        p_requestVO.setGifterMSISDN(gifterMsisdn);
                        p_requestVO.setGifterName(gifterName);
                        p_requestVO.setGifterLocale(new Locale(defaultLanguage, defaultCountry));
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }

                case 8: // SERVICE_KEYWORD(M) RECEIVEAR_MSISDN(M) AMOUNT(M)
                    // SELECTOR(O) RECEIVER_LOCALE(O) GIFTER_MSISDN(M)
                    // GIFTER_NAME(M) MPIN
                    {
                        // validate pin if required
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[7]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        // validate customer(giftee) msisdn
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }

                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }

                        p_requestVO.setGifterLocale(new Locale(defaultLanguage, defaultCountry));
                        gifterMsisdn = p_requestArr[5];
                        gifterName = p_requestArr[6];
                        // validate gifter msisdn or not(To be decided)
                        // p_reqquestArr[5]
                        validateGifterMsisdn(p_requestVO, p_c2sTransferVO.getRequestID(), gifterMsisdn);

                        // validate gifter name or not(To be decided)
                        // p_reqquestArr[6]
                        if (BTSLUtil.isNullString(gifterName)) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CHNL_ERROR_GIFTER_NAME_NULL_GIFTRECHARGE);
                        }

                        p_requestVO.setGifterMSISDN(gifterMsisdn);
                        p_requestVO.setGifterName(gifterName);
                        break;
                    }
                case 9: // SERVICE_KEYWORD(M) RECEIVEAR_MSISDN(M) AMOUNT(M)
                    // SELECTOR(O) RECEIVER_LOCALE(O) SENDER_LOCALE(O)
                    // GIFTER_MSISDN(M) GIFTER_NAME(M) MPIN
                    {
                        // validate pin if required
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[8]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();

                        custMsisdn = p_requestArr[1];

                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        // Customer MSISDN Validation
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            // ChangeID=LOCALEMASTER
                            // Sender locale has to be overwritten in transferVO
                            // also.
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        gifterMsisdn = p_requestArr[6];
                        gifterName = p_requestArr[7];
                        // validate gifter msisdn or not(To be decided)
                        // p_reqquestArr[7]
                        validateGifterMsisdn(p_requestVO, p_c2sTransferVO.getRequestID(), gifterMsisdn);

                        // validate gifter name or not(To be decided)
                        // p_reqquestArr[8]
                        if (BTSLUtil.isNullString(gifterName)) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CHNL_ERROR_GIFTER_NAME_NULL_GIFTRECHARGE);
                        }

                        p_requestVO.setGifterLocale(new Locale(defaultLanguage, defaultCountry));
                        p_requestVO.setGifterMSISDN(gifterMsisdn);
                        p_requestVO.setGifterName(gifterName);
                        break;
                    }
                case 10: // SERVICE_KEYWORD(M) RECEIVEAR_MSISDN(M) AMOUNT(M)
                    // SELECTOR(O) RECEIVER_LOCALE(O) SENDER_LOCALE(O)
                    // GIFTER_MSISDN(M) GIFTER_NAME(M) GIFTER_LOCALE(O) MPIN
                    {
                        //
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[9]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            // ChangeID=LOCALEMASTER
                            // Sender locale has to be overwritten in transferVO
                            // also.
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        gifterMsisdn = p_requestArr[6];
                        gifterName = p_requestArr[7];
                        // validate gifter msisdn or not(To be decided)
                        // p_reqquestArr[7]
                        validateGifterMsisdn(p_requestVO, p_c2sTransferVO.getRequestID(), gifterMsisdn);

                        // validate gifter name or not(To be decided)
                        // p_reqquestArr[8]
                        if (BTSLUtil.isNullString(gifterName)) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CHNL_ERROR_GIFTER_NAME_NULL_GIFTRECHARGE);
                        }

                        p_requestVO.setGifterMSISDN(gifterMsisdn);
                        p_requestVO.setGifterName(gifterName);

                        if (BTSLUtil.isNullString(p_requestArr[8])) {
                            p_requestVO.setGifterLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[8]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setGifterLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SRechargeRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, "validateC2SRechargeRequest", PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug("validateC2SRechargeRequest", "Exiting ");
        }
    }

    /**
     * 
     * @param p_RequestVO
     * @param p_requestID
     * @param p_gifterMsisdn
     * @throws BTSLBaseException
     */
    private void validateGifterMsisdn(RequestVO p_RequestVO, String p_requestID, String p_gifterMsisdn) throws BTSLBaseException {
        final String obj = "validateGifterMsisdn";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, p_requestID, "Entered for p_gifterMsisdn= " + p_gifterMsisdn);
        }
        String[] strArr = null;
        Integer minMsisdnLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH_CODE);
        Integer maxMsisdnLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE);

        try {
            if (BTSLUtil.isNullString(p_gifterMsisdn)) {
                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_BLANK);
            }
            p_gifterMsisdn = PretupsBL.getFilteredMSISDN(p_gifterMsisdn);
            if ((p_gifterMsisdn.length() < (int)minMsisdnLength || p_gifterMsisdn.length() > (int)maxMsisdnLength)) {
                if ((int)minMsisdnLength != (int)maxMsisdnLength) {
                    strArr = new String[] { p_gifterMsisdn, String.valueOf((int)minMsisdnLength), String.valueOf((int)maxMsisdnLength) };
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CHNL_ERROR_GIFTER_MSISDN_NOTINRANGE_GIFTRECHARGE, 0, strArr, null);
                } else {
                    strArr = new String[] { p_gifterMsisdn, String.valueOf((int)minMsisdnLength) };
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CHNL_ERROR_GIFTER_MSISDN_LEN_NOTSAME_GIFTRECHARGE, 0, strArr, null);
                }
            }
            try {
                final long lng = Long.parseLong(p_gifterMsisdn);
            } catch (Exception e) {
                _log.errorTrace(obj, e);
                strArr = new String[] { p_gifterMsisdn };
                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.CHNL_ERROR_GIFTER_MSISDN_NOTNUMERIC_GIFTRECHARGE, 0, strArr, null);
            }
            p_RequestVO.setGifterMSISDN(p_gifterMsisdn);
            if (_log.isDebugEnabled() && p_RequestVO.getGifterMSISDN() != null) {
                _log.debug("", "*********************" + p_RequestVO.getGifterMSISDN());
            }

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateMsisdn]", "", "", "",
                "Exception while validating gifter msisdn" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, p_requestID, "Exiting for p_gifterMsisdn= " + p_gifterMsisdn);
        }
    }

    /**
     * handleConfirmTransferMessageFormat
     * 
     * @param p_requestVO
     * @param p_transferVO
     * @throws BTSLBaseException
     *             ,Exception
     */
    @Override
    public void handleConfirmTransferMessageFormat(RequestVO p_requestVO, TransferVO p_transferVO) throws BTSLBaseException,Exception {
        if (_log.isDebugEnabled()) {
            _log.debug("handleConfirmTransferMessageFormat", "Entered p_requestVO=" + p_requestVO + " p_transferVO=" + p_transferVO);// requestMessageArray
            // length:"+requestMessageArray.length)
        }
        try {

            final String[] requestMessageArray = p_requestVO.getRequestMessageArray();
            if (_log.isDebugEnabled()) {
                _log.debug("handleConfirmTransferMessageFormat", " requestMessageArray length:" + requestMessageArray);
            }
            if (requestMessageArray.length < 3 || requestMessageArray.length > 7) {
                throw new BTSLBaseException(this, "handleConfirmTransferMessageFormat", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO
                    .getActualMessageFormat() }, null);
            }

            final int messageLength = requestMessageArray.length;
            String pin = null;
            long amount = 0;
            String receiverMSISDN = null;

            switch (messageLength) {
                case 3:
                    {
                        receiverMSISDN = requestMessageArray[1];
                        amount = PretupsBL.getSystemAmount(requestMessageArray[2]);
                        break;
                    }
                case 4:
                    {
                        pin = requestMessageArray[3];
                        receiverMSISDN = requestMessageArray[1];
                        amount = PretupsBL.getSystemAmount(requestMessageArray[2]);
                        break;
                    }
                case 5:
                    {
                        // Validate 2nd Argument for PIN.
                        pin = requestMessageArray[4];
                        receiverMSISDN = requestMessageArray[2];
                        amount = PretupsBL.getSystemAmount(requestMessageArray[3]);
                        break;
                    }
                case 6:
                    {
                        // Validate 2nd Argument for PIN.
                        pin = requestMessageArray[5];
                        receiverMSISDN = requestMessageArray[2];
                        amount = PretupsBL.getSystemAmount(requestMessageArray[3]);
                        break;
                    }
                case 7:
                    {
                        // Validate 2nd Argument for PIN.
                        pin = requestMessageArray[6];
                        receiverMSISDN = requestMessageArray[2];
                        amount = PretupsBL.getSystemAmount(requestMessageArray[3]);
                        break;
                    }
            }

            if (messageLength != 3) {
                validatePIN(pin);
            }
            receiverMSISDN = PretupsBL.getFilteredMSISDN(receiverMSISDN);
            if (!BTSLUtil.isValidMSISDN(receiverMSISDN)) {
                throw new BTSLBaseException(this, "handleConfirmTransferMessageFormat", PretupsErrorCodesI.ERROR_INVALID_MSISDN, 0, new String[] { receiverMSISDN }, null);
            }
            final ReceiverVO _receiverVO = new ReceiverVO();
            _receiverVO.setMsisdn(receiverMSISDN);
            final NetworkPrefixVO networkPrefixVO = PretupsBL.getNetworkDetails(receiverMSISDN, PretupsI.USER_TYPE_RECEIVER);
            if (networkPrefixVO == null) {
                throw new BTSLBaseException(this, "handleConfirmTransferMessageFormat", PretupsErrorCodesI.ERROR_NOTFOUND_RECEIVERNETWORK, 0, new String[] { receiverMSISDN },
                    null);
            }
            _receiverVO.setNetworkCode(networkPrefixVO.getNetworkCode());
            _receiverVO.setPrefixID(networkPrefixVO.getPrefixID());
            _receiverVO.setSubscriberType(networkPrefixVO.getSeriesType());
            p_transferVO.setReceiverVO(_receiverVO);

            if (amount < 0) {
                throw new BTSLBaseException(this, "handleConfirmTransferMessageFormat", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
            }
            p_transferVO.setTransferValue(amount);
            p_transferVO.setRequestedAmount(amount);

        } catch (BTSLBaseException be) {
            throw new BTSLBaseException(be);
        } catch (Exception e) {
            throw new BTSLBaseException(e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug("handleConfirmTransferMessageFormat", "Exiting...");
            }
        }
    }

    /**
     * Method formatBillPayTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatBillPayTransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatBillPayTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatBillPayTransferID";
        String returnStr = null;
        try {
            // ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO()
            // String currentYear=BTSLUtil.getFinancialYearLastDigits(2)
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            // returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr
            // returnStr="R"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr
            returnStr = "B" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate BillPay Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatPostpaidBillPayTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatPostpaidBillPayTransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatPostpaidBillPayTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatPostpaidBillPayTransferID";
        String returnStr = null;
        try {
            // ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO()
            // String currentYear=BTSLUtil.getFinancialYearLastDigits(2)
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            // returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr
            // returnStr="R"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr
            returnStr = "P" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate PostpaidBillPay Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatGiftRechargeTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatGiftRechargeTransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatGiftRechargeTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatGiftRechargeTransferID";
        String returnStr = null;
        try {
            // ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO()
            // String currentYear=BTSLUtil.getFinancialYearLastDigits(2)
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            // returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr
            // returnStr="R"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr
            returnStr = "G" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate GiftRecharge Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatMVDTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatMVDTransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatMVDTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatMVDTransferID";
        String returnStr = null;
        try {
            // ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO()
            // String currentYear=BTSLUtil.getFinancialYearLastDigits(2)
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            // returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr
            // returnStr="E"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr
            returnStr = "M" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate MVD Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method processPostBillPayment.
     * 
     * @param p_requestedAmt
     *            long
     * @param p_prevBal
     *            long
     * @return boolean
     */
    @Override
    public boolean processPostBillPayment(long p_requestedAmt, long p_prevBal) {
        final boolean processBillPay = true;
        return processBillPay;
    }

    /**
     * Method formatC2CBatchMasterTxnID. This method generate the batch ID for
     * the C2C batch master transfer.
     * 
     * @param p_batchMasterVO
     *            C2CBatchMasterVO
     * @param p_tempTransferID
     *            long
     * @return String
     * 
     * @see com.btsl.pretups.util.OperatorUtilI#formatC2CBatchMasterTxnID(C2CBatchMasterVO,
     *      long)
     */
    @Override
    public String formatC2CBatchMasterTxnID(C2CBatchMasterVO p_batchMasterVO, long p_tempTransferID) {
        final String methodName = "formatC2CBatchMasterTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), FOC_BATCH_MASTER_ID_PAD_LENGTH);
            returnStr = p_batchMasterVO.getNetworkCode()+PretupsI.C2C_BATCH_TRANSACTION_ID + currentDateTimeFormatString(p_batchMasterVO.getCreatedOn()) + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatC2CBatchMasterTxnID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatC2CBatchDetailsTxnID. This method generate the batch details
     * ID for the FOC batch items.
     * 
     * @param p_batchMasterID
     *            String
     * @param p_tempTransferID
     *            long
     * @return String
     * 
     * @see com.btsl.pretups.util.OperatorUtilI#formatFOCBatchDetailsTxnID(String,
     *      long)
     */
    @Override
    public String formatC2CBatchDetailsTxnID(String p_batchMasterID, long p_tempTransferID) {
        final String methodName = "formatC2CBatchDetailsTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2C_BATCH_DETAIL_ID_PAD_LENGTH);
            returnStr = p_batchMasterID + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatC2CBatchDetailsTxnID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method to validate C2S fix line Recharge Request. Receiver locale of
     * notification msisdn C2S Fixline recharge message array will be like::
     * Here we are handling the cases with PIN, if we want the cases without
     * PIN,it will be written in Operator specific util
     * 
     * FRC MSISDN AMT N_MSISDN PIN FRC MSISDN AMT N_MSISDN SEL PIN FRC MSISDN
     * AMT N_MSISDN SEL REC PIN FRC MSISDN AMT N_MSISDN SEL SEN REC PIN
     * 
     * @param p_con
     *            Connection
     * @param p_c2sTransferVO
     *            C2STransferVO
     * @param p_requestVO
     *            RequestVO
     */
    @Override
    public void validateC2SFixLineRechargeRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        if (_log.isDebugEnabled()) {
            _log.debug("validateC2SFixLineRechargeRequest, p_requestVO" + p_requestVO.toString(), "");
        }
        final String obj = "validateC2SFixLineRechargeRequest";
        try {
            String receiverMsisdn = null;
            String requestedAmt = null;
            String notificationMsisdn = null;
            final String[] msgArray = p_requestVO.getRequestMessageArray();
            final int msgLength = msgArray.length;
            for (int i = 0; i < msgLength; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i=" + i + " ,value=" + msgArray[i]);
                }
            }
            if (msgLength < 5) {
                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT);
            }
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (msgLength) {
            // message Length 5, then message would be
            // FRC_MSISDN_Amt_NotificationMSISDN_PIN
                case 5:
                    {
                        // check the sender PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, msgArray[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Receiver MSISDN Validation
                        receiverMsisdn = msgArray[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), receiverMsisdn);

                        // Recharge amount Validation
                        requestedAmt = msgArray[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestedAmt);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        notificationMsisdn = msgArray[3];
                        validateNotificationMsisdn(p_requestVO, p_requestVO.getRequestIDStr(), notificationMsisdn);

                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                // message Length 6, then message would be
                // FRC_MSISDN_Amt_NotificationMSISDN_selector_PIN
                case 6:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, msgArray[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        receiverMsisdn = msgArray[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), receiverMsisdn);

                        // Recharge amount Validation
                        requestedAmt = msgArray[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestedAmt);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        notificationMsisdn = msgArray[3];
                        validateNotificationMsisdn(p_requestVO, p_requestVO.getRequestIDStr(), notificationMsisdn);

                        if (BTSLUtil.isNullString(msgArray[4])) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        } else {
                            p_requestVO.setReqSelector(msgArray[4]);
                        }

                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }

                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));

                        break;
                    }

                case 7:
                    {
                        // message Length 7, then message would be
                        // FRC_MSISDN_Amt_NotificationMSISDN_selector_receiverlocale_PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, msgArray[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        receiverMsisdn = msgArray[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), receiverMsisdn);

                        requestedAmt = msgArray[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestedAmt);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        notificationMsisdn = msgArray[3];
                        p_requestVO.setNotificationMSISDN(notificationMsisdn);

                        if (BTSLUtil.isNullString(msgArray[4])) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        } else {
                            p_requestVO.setReqSelector(msgArray[4]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(msgArray[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, msgArray[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 8:
                    {
                        // message Length 8, then message would be
                        // FRC_MSISDN_Amt_NotificationMSISDN_selector_receiverlocale_senderlocale_PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, msgArray[7]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        receiverMsisdn = msgArray[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), receiverMsisdn);
                        requestedAmt = msgArray[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestedAmt);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        notificationMsisdn = msgArray[3];
                        validateNotificationMsisdn(p_requestVO, p_requestVO.getRequestIDStr(), notificationMsisdn);

                        if (BTSLUtil.isNullString(msgArray[4])) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        } else {
                            p_requestVO.setReqSelector(msgArray[4]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(msgArray[5])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, msgArray[5]);
                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }

                        if (BTSLUtil.isNullString(msgArray[6])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, msgArray[6]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SFixLineRechargeRequest]", "", "",
                "", "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }

    }

    /**
     * to validate the notification msisdn given by the customer
     * 
     * @param p_RequestVO
     * @param p_requestID
     * @param p_gifterMsisdn
     * @throws BTSLBaseException
     */
    public void validateNotificationMsisdn(RequestVO p_requestVO, String p_requestID, String p_notificationMsisdn) throws BTSLBaseException {
        final String obj = "validateNotificationMsisdn";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, p_requestID, "Entered for p_notificationMsisdn= " + p_notificationMsisdn);
        }
        String[] strArr = null;
        Integer minMsisdnLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH_CODE);
        Integer maxMsisdnLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE);

        try {
            if (BTSLUtil.isNullString(p_notificationMsisdn)) {
                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_NOTIFICATION_MSISDN_BLANK);
            }
            p_notificationMsisdn = PretupsBL.getFilteredMSISDN(p_notificationMsisdn);
            if ((p_notificationMsisdn.length() < (int)minMsisdnLength || p_notificationMsisdn.length() > (int)maxMsisdnLength)) {
                if ((int)minMsisdnLength != (int)maxMsisdnLength) {
                    strArr = new String[] { p_notificationMsisdn, String.valueOf((int)minMsisdnLength), String.valueOf((int)maxMsisdnLength) };
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_NOTIFICATION_MSISDN_NOTINRANGE, 0, strArr, null);
                } else {
                    strArr = new String[] { p_notificationMsisdn, String.valueOf((int)minMsisdnLength) };
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_NOTIFICATION_MSISDN_LEN_NOTSAME, 0, strArr, null);
                }
            }
            try {
                final long lng = Long.parseLong(p_notificationMsisdn);
            } catch (Exception e) {
                _log.errorTrace(obj, e);
                strArr = new String[] { p_notificationMsisdn, String.valueOf((int)maxMsisdnLength) };
                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_NOTIFICATION_MSISDN_NOTNUMERIC, 0, strArr, null);
            }
            p_requestVO.setNotificationMSISDN(p_notificationMsisdn);

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, p_requestID, "Exiting for p_notificationMsisdn= " + p_notificationMsisdn);
        }
    }

    /**
     * Method formatFixLineRCTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatFixLineRCTransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatFixLineRCTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatFixLineRCTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            returnStr = "F" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method to validate C2S Broadband Recharge Request. Receiver locale of
     * notification msisdn C2S Broadband recharge message array will be like::
     * Here we are handling the cases with PIN, if we want the cases without
     * PIN,it will be written in Operator specific util
     * 
     * Keyword ACCOUNT_NO AMT N_MSISDN PIN Keyword ACCOUNT_NO AMT N_MSISDN SEL
     * PIN Keyword ACCOUNT_NO AMT N_MSISDN SEL RECLOC PIN Keyword ACCOUNT_NO AMT
     * N_MSISDN SEL SENLOC RECLOC PIN
     * 
     * @param p_con
     *            Connection
     * @param p_c2sTransferVO
     *            C2STransferVO
     * @param p_requestVO
     *            RequestVO
     */
    @Override
    public void validateC2SBroadbandRechargeRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        if (_log.isDebugEnabled()) {
            _log.debug("validateC2SBroadbandRechargeRequest, p_requestVO" + p_requestVO.toString(), "");
        }
        final String obj = "validateC2SBroadbandRechargeRequest";
        try {
            String receiverMsisdn = null;
            String requestedAmt = null;
            String notificationMsisdn = null;
            final String[] msgArray = p_requestVO.getRequestMessageArray();
            final int msgLength = msgArray.length;
            for (int i = 0; i < msgLength; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i=" + i + " ,value=" + msgArray[i]);
                }
            }
            if (msgLength < 5) {
                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT);
            }
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (msgLength) {
            // message Length 5, then message would be <Keyword AccountNo Amount
            // NotificationMSISDN PIN>
                case 5:
                    {
                        // check the sender PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, msgArray[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Receiver MSISDN Validation
                        receiverMsisdn = msgArray[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), receiverMsisdn);

                        // Recharge amount Validation
                        requestedAmt = msgArray[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestedAmt);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        notificationMsisdn = msgArray[3];
                        validateNotificationMsisdn(p_requestVO, p_requestVO.getRequestIDStr(), notificationMsisdn);

                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                // message Length 6, then message would be
                // Keyword_AccountNo_Amt_NotificationMSISDN_selector_PIN
                case 6:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, msgArray[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        receiverMsisdn = msgArray[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), receiverMsisdn);

                        // Recharge amount Validation
                        requestedAmt = msgArray[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestedAmt);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        notificationMsisdn = msgArray[3];
                        validateNotificationMsisdn(p_requestVO, p_requestVO.getRequestIDStr(), notificationMsisdn);

                        if (BTSLUtil.isNullString(msgArray[4])) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        } else {
                            p_requestVO.setReqSelector(msgArray[4]);
                        }

                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }

                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));

                        break;
                    }

                case 7:
                    {
                        // message Length 7, then message would be
                        // Keyword_AccountNo_Amt_NotificationMSISDN_selector_receiverlocale_PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, msgArray[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        receiverMsisdn = msgArray[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), receiverMsisdn);

                        requestedAmt = msgArray[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestedAmt);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        notificationMsisdn = msgArray[3];
                        p_requestVO.setNotificationMSISDN(notificationMsisdn);

                        if (BTSLUtil.isNullString(msgArray[4])) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        } else {
                            p_requestVO.setReqSelector(msgArray[4]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(msgArray[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, msgArray[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 8:
                    {
                        // message Length 8, then message would be
                        // Keyword_AccountNo_Amt_NotificationMSISDN_selector_receiverlocale_senderlocale_PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, msgArray[7]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        receiverMsisdn = msgArray[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), receiverMsisdn);
                        requestedAmt = msgArray[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestedAmt);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        notificationMsisdn = msgArray[3];
                        validateNotificationMsisdn(p_requestVO, p_requestVO.getRequestIDStr(), notificationMsisdn);

                        if (BTSLUtil.isNullString(msgArray[4])) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        } else {
                            p_requestVO.setReqSelector(msgArray[4]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(msgArray[5])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, msgArray[5]);
                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }

                        if (BTSLUtil.isNullString(msgArray[6])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, msgArray[6]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SBroadbandRechargeRequest]", "",
                "", "", "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }// end of validateC2SBroadbandRechargeRequest()

    /**
     * Method formatBroadbandRCTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatBroadbandRCTransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatBroadbandRCTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatBroadbandRCTransferID";
        if (_log.isDebugEnabled()) {
            _log.debug("formatBroadbandRCTransferID, p_transferVO=" + p_transferVO.toString(), ", p_tempTransferID=" + p_tempTransferID);
        }
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            returnStr = "B" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            returnStr = null;
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exiting... returnStr=" + returnStr);
        }
        return returnStr;
    }

    /**
     * Method to generate randomPin.
     * 
     * @return String
     * @see com.btsl.pretups.util.OperatorUtil#randomPinGenerate()
     */

    @Override
    public String randomPinGenerate() {
    	String c2sDefaultSmsPin = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.C2S_DEFAULT_SMSPIN);
        return c2sDefaultSmsPin;
    }

    /**
     * Method to generate random Password.
     * 
     * @return String
     * @see com.btsl.pretups.util.OperatorUtil#randomPwdGenerate()
     */

    private static int rand(int lo, int hi) {
        final int n = hi - lo + 1;
        int i = rn.nextInt() % n;
        if (i < 0) {
            i = -i;
        }
        return lo + i;
    }

    private static String randomCapString() {
        final int n = rand(1, 1);
        final byte b[] = new byte[n];
        for (int i = 0; i < n; i++) {
            b[i] = BTSLUtil.parseIntToByte(rand('A', 'Z'));
        }
        return new String(b);
    }

    private static String randomstring() {
    	Integer maxLoginPwdLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_LOGIN_PWD_LENGTH);
        final int maxlength = (int)maxLoginPwdLength;
        final int n = rand(4, maxlength);
        final byte b[] = new byte[n];
        for (int i = 0; i < n; i++) {
            b[i] =  BTSLUtil.parseIntToByte(rand('a', 'z'));
        }
        return new String(b);
    }

    @Override
    public String randomPwdGenerate() {
        final String randomString = randomstring();
        final String pwdOtherPart = randomString.substring(randomString.length() / 2);
        final String randomCapitalString = randomCapString();

        final String finalPwd = randomString.substring(0, randomString.length() / 2) + randomCapitalString + pwdOtherPart.substring(0, pwdOtherPart.length() / 2) + rn
            .nextInt(100) + pwdOtherPart.substring(pwdOtherPart.length() / 2);

        return finalPwd;
    }

    /**
     * Method will calculate transaction based activation bonus
     * 
     * @param p_c2sTransferVO
     *            C2STransferVO
     * @param p_profileSetVO
     *            ProfileSetVO
     * @param p_subscriberType
     *            String
     * @return ActivationBonusVO
     * @throws BTSLBaseException
     */
    @Override
    public ActivationBonusVO calculateActivationTxnBonus(C2STransferVO p_c2sTransferVO, ProfileSetVO p_profileSetVO, String p_subscriberType) throws BTSLBaseException {
        final String obj = "calculateActivationTxnBonus";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, " Entered: p_c2sTransferVO: " + p_c2sTransferVO + " p_profileSetVO: " + p_profileSetVO + " p_subscriberType: " + p_subscriberType);
        }
        ActivationBonusVO bonusVO = null;
        ProfileSetDetailsVO profileSetDetailsVO = null;
        ProfileSetVersionVO profileSetVersionVO = null;
        ArrayList profileDetailList = new ArrayList();
        boolean found = false;
        long bonusPoints = 0L;
        boolean subscriberType = false;
        try {
            profileSetVersionVO = p_profileSetVO.getProfileLastVersion();
            profileDetailList = profileSetVersionVO.getProfileSetDetails();
            for (int i = 0; i < profileDetailList.size(); i++) {
                subscriberType = false;
                profileSetDetailsVO = (ProfileSetDetailsVO) profileDetailList.get(i);
                if (profileSetDetailsVO.getSubscriberType().equals(PretupsI.SERIES_TYPE_BOTH) && (PretupsI.SERIES_TYPE_POSTPAID.equals(p_subscriberType) || PretupsI.SERIES_TYPE_PREPAID
                    .equals(p_subscriberType))) {
                    subscriberType = true;
                } else if (profileSetDetailsVO.getSubscriberType().equals(p_subscriberType)) {
                    subscriberType = true;
                }
                if (p_c2sTransferVO.getTransferValue() >= profileSetDetailsVO.getStartRange() && p_c2sTransferVO.getTransferValue() <= profileSetDetailsVO.getEndRange() && subscriberType) {
                    if (PretupsI.SYSTEM_AMOUNT.equals(profileSetDetailsVO.getProfileType())) {
                        bonusPoints = profileSetDetailsVO.getPoints();
                        found = true;
                        break;
                    } else {
                        bonusPoints = (p_c2sTransferVO.getTransferValue() * (profileSetDetailsVO.getPoints()) / 100);
                        found = true;
                        break;
                    }
                }
            }
            bonusVO = new ActivationBonusVO();
            if (found) {
                bonusVO.setTxnCalculationDone(PretupsI.YES);
                bonusVO.setPoints(bonusPoints);
            } else {
                bonusVO.setTxnCalculationDone(PretupsI.NO);
            }
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[calculateActivationTxnBonus]", "", "",
                "", "Exception while calculating transaction bonus" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, " Exiting: bonusVO: " + bonusVO);
            }
        }
        return bonusVO;
    }

    /**
     * Method will calculate volume based activation bonus
     * 
     * @param p_userTransactionVO
     *            UserTransactionVO
     * @param p_profileSetVO
     *            ProfileSetVO
     * @param p_productList
     *            ArrayList
     * @param p_serviceType
     *            String
     * @return ActivationBonusVO
     * @throws BTSLBaseException
     */
    @Override
    public ActivationBonusVO calculateActivationVolumeBonus(UserTransactionVO p_userTransactionVO, ProfileSetVO p_profileSetVO, String p_subscriberType) throws BTSLBaseException {
        final String obj = "calculateActivationVolumeBonus";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, " Entered: p_userTransactionVO: " + p_userTransactionVO + " p_profileSetVO: " + p_profileSetVO + " p_subscriberType: " + p_subscriberType);
        }
        ActivationBonusVO bonusVO = null;
        ProfileSetDetailsVO profileSetDetailsVO = null;
        ProfileSetVersionVO profileSetVersionVO = null;
        ArrayList profileDetailList = new ArrayList();
        boolean amtFound = false;
        boolean cntFound = false;
        long bonusPoints = 0L;
        long bonusCount = 0L;
        boolean subscriberFound = false;
        Integer amountMultFactor = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.AMOUNT_MULT_FACTOR);
        try {
            profileSetVersionVO = p_profileSetVO.getProfileLastVersion();
            profileDetailList = profileSetVersionVO.getProfileSetDetails();
            for (int i = 0; i < profileDetailList.size(); i++) {
                subscriberFound = false;
                profileSetDetailsVO = (ProfileSetDetailsVO) profileDetailList.get(i);
                if (profileSetDetailsVO.getSubscriberType().equals(PretupsI.SERIES_TYPE_BOTH) && (PretupsI.SERVICE_TYPE_POST.equals(p_subscriberType) || PretupsI.SERVICE_TYPE_PRE
                    .equals(p_subscriberType))) {
                    subscriberFound = true;
                } else if (profileSetDetailsVO.getSubscriberType().equals(p_subscriberType)) {
                    subscriberFound = true;
                }
                if (p_userTransactionVO.getAmount() >= profileSetDetailsVO.getStartRange() && p_userTransactionVO.getAmount() <= profileSetDetailsVO.getEndRange() && PretupsI.SUB_TYPE_AMOUNT
                    .equals(profileSetDetailsVO.getDetailSubType()) && p_userTransactionVO.getPeriodicity().equals(profileSetDetailsVO.getPeriodId()) && !amtFound && subscriberFound) {
                    if (PretupsI.SYSTEM_AMOUNT.equals(profileSetDetailsVO.getProfileType())) {
                        bonusPoints = profileSetDetailsVO.getPoints() * (int)amountMultFactor;
                        amtFound = true;
                    } else {
                        bonusPoints = (p_userTransactionVO.getAmount() * (profileSetDetailsVO.getPoints()) / 100);
                        amtFound = true;
                    }
                }
                if (p_userTransactionVO.getCount() >= profileSetDetailsVO.getStartRange() && p_userTransactionVO.getCount() <= profileSetDetailsVO.getEndRange() && PretupsI.SUB_TYPE_COUNT
                    .equals(profileSetDetailsVO.getDetailSubType()) && p_userTransactionVO.getPeriodicity().equals(profileSetDetailsVO.getPeriodId()) && !cntFound && subscriberFound) {
                    if (PretupsI.SYSTEM_AMOUNT.equals(profileSetDetailsVO.getProfileType())) {
                        bonusCount = profileSetDetailsVO.getPoints() * (int)amountMultFactor;
                        cntFound = true;
                    } else {
                        bonusCount = (p_userTransactionVO.getAmount() * (profileSetDetailsVO.getPoints() / 100));
                        cntFound = true;
                    }
                }
                if (amtFound && cntFound) {
                    break;
                }
            }
            if (amtFound || cntFound) {
                bonusVO = new ActivationBonusVO();
                bonusVO.setPoints(bonusPoints + bonusCount);
            }
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[calculateActivationVolumeBonus]", "", "",
                "", "Exception while calculating volume bonus" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, " Exiting: bonusVO: " + bonusVO);
            }
        }
        return bonusVO;
    }

    /**
     * Method will calculate volume based activation bonus for unlimted period
     * 
     * @param p_userTransactionVO
     *            UserTransactionVO
     * @param p_profileSetVO
     *            ProfileSetVO
     * @param p_productList
     *            ArrayList
     * @param p_serviceType
     *            String
     * @return ActivationBonusVO
     * @throws BTSLBaseException
     */
    @Override
    public ActivationBonusVO calculateActivationVolumeBonusUnlimitedPeriod(UserTransactionVO p_userTransactionVO, ProfileSetVO p_profileSetVO, String p_subscriberType) throws BTSLBaseException {
        final String obj = "calculateActivationVolumeBonusUnlimitedPeriod";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, " Entered: p_userTransactionVO: " + p_userTransactionVO + " p_profileSetVO: " + p_profileSetVO + " p_subscriberType: " + p_subscriberType);
        }
        ActivationBonusVO bonusVO = null;
        ProfileSetDetailsVO profileSetDetailsVO = null;
        ProfileSetVersionVO profileSetVersionVO = null;
        ArrayList profileDetailList = new ArrayList();
        ProfileSetDetailsVO profileSetDetailsNextVO = null;
        boolean amtFound = false;
        boolean cntFound = false;
        long bonusPoints = 0L;
        long bonusCount = 0L;
        boolean subscriberFound = false;
        long amountLeft = 0L;
        long countLeft = 0L;
        Integer amountMultFactor = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.AMOUNT_MULT_FACTOR);
        
        try {
            profileSetVersionVO = p_profileSetVO.getProfileLastVersion();
            profileDetailList = profileSetVersionVO.getProfileSetDetails();
            for (int i = 0; i < profileDetailList.size(); i++) {
                amountLeft = 0L;
                countLeft = 0L;
                subscriberFound = false;
                profileSetDetailsVO = (ProfileSetDetailsVO) profileDetailList.get(i);
                if (profileSetDetailsVO.getSubscriberType().equals(PretupsI.SERIES_TYPE_BOTH) && (PretupsI.SERVICE_TYPE_POST.equals(p_subscriberType) || PretupsI.SERVICE_TYPE_PRE
                    .equals(p_subscriberType))) {
                    subscriberFound = true;
                } else if (profileSetDetailsVO.getSubscriberType().equals(p_subscriberType)) {
                    subscriberFound = true;
                }
                if (PretupsI.SUB_TYPE_AMOUNT.equals(profileSetDetailsVO.getDetailSubType()) && p_userTransactionVO.getPeriodicity().equals(profileSetDetailsVO.getPeriodId()) && p_userTransactionVO
                    .getServiceType().equals(profileSetDetailsVO.getServiceCode()) && !amtFound && subscriberFound) {
                    if (p_userTransactionVO.getAmount() <= profileSetDetailsVO.getEndRange() && p_userTransactionVO.getAmount() >= profileSetDetailsVO.getStartRange()) {
                        amountLeft = 0;
                    } else if (p_userTransactionVO.getAmount() >= profileSetDetailsVO.getEndRange() && i < profileDetailList.size() - 1) {
                        profileSetDetailsNextVO = (ProfileSetDetailsVO) profileDetailList.get(i + 1);
                        if (p_userTransactionVO.getAmount() <= profileSetDetailsNextVO.getStartRange()) {
                            amountLeft = p_userTransactionVO.getAmount() - profileSetDetailsVO.getEndRange();
                        } else {
                            continue;
                        }
                    } else if (p_userTransactionVO.getAmount() >= profileSetDetailsVO.getEndRange() && i == profileDetailList.size() - 1) {
                        amountLeft = p_userTransactionVO.getAmount() - profileSetDetailsVO.getEndRange();
                    } else {
                        continue;
                    }
                    if (PretupsI.SYSTEM_AMOUNT.equals(profileSetDetailsVO.getProfileType())) {
                        bonusPoints = profileSetDetailsVO.getPoints() * (int)amountMultFactor;
                        amtFound = true;
                    } else {
                        bonusPoints = (p_userTransactionVO.getAmount() * (profileSetDetailsVO.getPoints()) / 100);
                        amtFound = true;
                    }
                }
                if (PretupsI.SUB_TYPE_COUNT.equals(profileSetDetailsVO.getDetailSubType()) && p_userTransactionVO.getPeriodicity().equals(profileSetDetailsVO.getPeriodId()) && p_userTransactionVO
                    .getServiceType().equals(profileSetDetailsVO.getServiceCode()) && !cntFound && subscriberFound) {
                    if (p_userTransactionVO.getCount() <= profileSetDetailsVO.getEndRange() && p_userTransactionVO.getCount() >= profileSetDetailsVO.getStartRange()) {
                        countLeft = 0;
                    } else if (p_userTransactionVO.getCount() >= profileSetDetailsVO.getEndRange() && i < profileDetailList.size() - 1) {
                        profileSetDetailsNextVO = (ProfileSetDetailsVO) profileDetailList.get(i + 1);
                        if (p_userTransactionVO.getCount() <= profileSetDetailsNextVO.getStartRange()) {
                            countLeft = p_userTransactionVO.getCount() - profileSetDetailsVO.getEndRange();
                        } else {
                            continue;
                        }
                    } else if (p_userTransactionVO.getCount() >= profileSetDetailsVO.getEndRange() && i == profileDetailList.size() - 1) {
                        countLeft = p_userTransactionVO.getCount() - profileSetDetailsVO.getEndRange();
                    } else {
                        continue;
                    }
                    if (PretupsI.SYSTEM_AMOUNT.equals(profileSetDetailsVO.getProfileType())) {
                        bonusCount = profileSetDetailsVO.getPoints() * (int)amountMultFactor;
                        cntFound = true;
                    } else {
                        bonusCount = (p_userTransactionVO.getCount() * (profileSetDetailsVO.getPoints() / 100));
                        cntFound = true;
                    }
                }
                if (amtFound && cntFound) {
                    break;
                }
            }
            if (amtFound || cntFound) {
                bonusVO = new ActivationBonusVO();
                bonusVO.setPoints(bonusPoints + bonusCount);
                p_userTransactionVO.setAmount(amountLeft);
                p_userTransactionVO.setCount(countLeft);
            }
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "OperatorUtil[calculateActivationVolumeBonusUnlimitedPeriod]", "", "", "", "Exception while calculating volume bonus" + " ,getting Exception=" + e
                    .getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, " Exiting: bonusVO: " + bonusVO);
            }
        }
        return bonusVO;
    }

    /**
     * Method that will validate the user message sent
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateVASSellingRequest(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateVASSellingRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateVASSellingRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            // CRBT+subMsisdn+amount+subService+pin
            switch (messageLen) {
                case 4:
                    {
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        p_requestVO.setReqSelector(p_requestArr[3]);
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 5:
                    {
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));

                        p_requestVO.setReqSelector(p_requestArr[3]);
                        break;
                    }

                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateVASSellingRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /**
     * Method formatVASTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatVASTransferID(TransferVO,
     *      long)
     */
    // vastrix changes
    public String formatVASTransferID(TransferVO p_transferVO, long p_tempTransferID, String p_prefix) {
        final String methodName = "formatVASTransferID";
        String returnStr = null;
        try {

            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            returnStr = p_prefix + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method calculateCommissionQuantity.
     * 
     * @param p_commissionType
     *            String
     * @param p_commissionRate
     *            double
     * @param p_productCost
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateCommission(long, long)
     */
    @Override
    public long calculateCommissionQuantity(long p_commisionValue, long p_unitValue, long p_tax3Value) throws BTSLBaseException {
        if (_log.isDebugEnabled()) {
            _log.debug("calculateCommissionQuantity()", "Entered   p_commissionValue: " + p_commisionValue + " p_unitValue: " + p_unitValue + ", p_tax3Value=" + p_tax3Value);
        }

        double commissionQuantity = 0;
        commissionQuantity = p_commisionValue - p_tax3Value;
        commissionQuantity = PretupsBL.getSystemAmount((commissionQuantity / p_unitValue));

        if (_log.isDebugEnabled()) {
            _log.debug("calculateCommissionQuantity()", "Exited Commission Calculated in terms of quantity " + commissionQuantity);
        }

        return Double.valueOf(commissionQuantity).longValue();
    }

  
    
    /**
     * Method calculateSenderDebitQuantity.
     * 
     * @param p_commissionType
     *            String
     * @param p_commissionRate
     *            double
     * @param p_productCost
     *            long
     * @return long
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#calculateCommission(long, long)
     */
    @Override
    public long calculateReceiverCreditQuantity(String p_requestedQty, long p_unitValue, long p_commisionQty) throws BTSLBaseException {
        if (_log.isDebugEnabled()) {
            _log.debug("calculateReceiverCreditQuantity()", "Entered   p_commisionQty: " + p_commisionQty + " p_unitValue: " + p_unitValue);
        }

        long receiverCreditQuantity = 0, requestedQuantity = 0;

        requestedQuantity = PretupsBL.getSystemAmount(p_requestedQty);
        receiverCreditQuantity = requestedQuantity + p_commisionQty;

        if (_log.isDebugEnabled()) {
            _log.debug("calculateReceiverCreditQuantity()", "Exited receiver credit quantity  " + receiverCreditQuantity);
        }

        return receiverCreditQuantity;
    }
    

    /**
     * Generates Random Password.
     * 
     * @return String
     * @author santanu.mohanty
     */
    @Override
    public String generateRandomPassword() {
        final String methodName = "generateRandomPassword";
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Entered in to OperatorUtil");
        }
        String returnStr = null;
        Integer minLoginPwdLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_LOGIN_PWD_LENGTH);
        try {
            final String DIGITS = "0123456789";
            final String LOCASE_CHARACTERS = "abcdefghijklmnopqrstuvwxyz";
            final String UPCASE_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

            final String PRINTABLE_CHARACTERS = DIGITS + LOCASE_CHARACTERS + UPCASE_CHARACTERS;
            final int minLength = (int)minLoginPwdLength;

            while (true) {
                returnStr = BTSLUtil.generateRandomPIN(PRINTABLE_CHARACTERS, minLength);
                final int result = BTSLUtil.isSMSPinValid(returnStr);
                if (result == -1) {
                    continue;
                } else if (result == 1) {
                    continue;
                } else {
                    break;
                }
            }

        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate MVD Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exiting from OperatorUtil = " + returnStr);
        }
        return returnStr;
    }

    /**
     * Generates Random PIN
     * 
     * @return String
     */
    @Override
    public String generateRandomPin() {
        final String methodName = "generateRandomPin";
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Entered in to OperatorUtil");
        }
        String returnStr = null;
        Integer c2sPinMinLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.C2S_PIN_MIN_LENGTH);
        try {
            final String DIGITS = "0123456789";
            final String PRINTABLE_CHARACTERS = DIGITS;
            final int minLength = c2sPinMinLength;
            while (true) {
                returnStr = BTSLUtil.generateRandomPIN(PRINTABLE_CHARACTERS, minLength);
                final int result = BTSLUtil.isSMSPinValid(returnStr);
                if (result == -1) {
                    continue;
                } else if (result == 1) {
                    continue;
                } else if (!BTSLUtil.validateSMSPinConsecutive(returnStr)) {
                    continue;
                } else {
                    break;
                }
            }
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate MVD Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exiting from OperatorUtil = " + returnStr);
        }
        return returnStr;
    }

    /**
     * To check the period after which the created password will be expired.
     */
    @Override
    public boolean checkPasswordPeriodToResetAfterCreation(Date p_modifiedOn, ChannelUserVO p_channelUserVO) {
        return false;
    }

    /**
     * validateRRServiceRequest
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     */
    @Override
    public void validateRRServiceRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateRRServiceRequest";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Entered");
        }
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            IATTransferItemVO iatTransferItemVO = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }
            final int messageLen = p_requestArr.length;

            switch (messageLen) {
                case 4:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // instantiate IATTransferItemVO. This VO will be
                        // populated in
                        // the Roam recharge process and values will be updated
                        // in IAT
                        // item table.
                        iatTransferItemVO = new IATTransferItemVO();
                        // Validate IAT MSISDN. Fetch country cod and prefix.
                        // set these
                        // values in iat item vo.
                        PretupsBL.validateIATMsisdn(receiverVO, p_c2sTransferVO, custMsisdn, iatTransferItemVO);
                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        p_c2sTransferVO.setIatTransferItemVO(iatTransferItemVO);
                        PretupsBL.validateIATAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        // Explicitly set selector code.(Since 'RR' msg doesn't
                        // include
                        // selector code)
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SRechargeRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "Exiting ");
            }
        }
    }

    /**
     * Method formatRoamRechargeTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatRoamRechargeTransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatRoamRechargeTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatRoamRechargeTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            returnStr = "RR" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * validateRRServiceRequest
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     */
    @Override
    public void validateIRServiceRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateIRServiceRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            IATTransferItemVO iatTransferItemVO = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }
            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
                case 4:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        iatTransferItemVO = new IATTransferItemVO();
                        PretupsBL.validateIATMsisdn(receiverVO, p_c2sTransferVO, custMsisdn, iatTransferItemVO);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        p_c2sTransferVO.setIatTransferItemVO(iatTransferItemVO);
                        PretupsBL.validateIATAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }
                case 5:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        iatTransferItemVO = new IATTransferItemVO();
                        PretupsBL.validateIATMsisdn(receiverVO, p_c2sTransferVO, custMsisdn, iatTransferItemVO);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        p_c2sTransferVO.setIatTransferItemVO(iatTransferItemVO);
                        PretupsBL.validateIATAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }

                        String notifyMSISDN = p_requestArr[3];
                        if (notifyMSISDN.startsWith("00")) {
                            notifyMSISDN = notifyMSISDN.substring(2);
                        } else if (notifyMSISDN.startsWith("+")) {
                            notifyMSISDN = notifyMSISDN.substring(1);
                        }
                        try {
                            final long lng = Long.parseLong(notifyMSISDN);
                        } catch (Exception e) {
                            _log.errorTrace(obj, e);
                            throw new BTSLBaseException("PretupsBL", "validateIATMsisdn", PretupsErrorCodesI.IAT_ERROR_NOTIFY_MSISDN_NOTNUMERIC, 0,
                                new String[] { notifyMSISDN }, null);
                        }

                        iatTransferItemVO.setIatNotifyMsisdn(p_requestArr[3]);
                        iatTransferItemVO.setIatNotifyMsisdnLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }
                case 6:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        iatTransferItemVO = new IATTransferItemVO();
                        PretupsBL.validateIATMsisdn(receiverVO, p_c2sTransferVO, custMsisdn, iatTransferItemVO);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        p_c2sTransferVO.setIatTransferItemVO(iatTransferItemVO);
                        PretupsBL.validateIATAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }

                        String notifyMSISDN = p_requestArr[3];
                        if (notifyMSISDN.startsWith("00")) {
                            notifyMSISDN = notifyMSISDN.substring(2);
                        } else if (notifyMSISDN.startsWith("+")) {
                            notifyMSISDN = notifyMSISDN.substring(1);
                        }
                        try {
                            final long lng = Long.parseLong(notifyMSISDN);
                        } catch (Exception e) {
                            _log.errorTrace(obj, e);
                            throw new BTSLBaseException("PretupsBL", "validateIATMsisdn", PretupsErrorCodesI.IAT_ERROR_NOTIFY_MSISDN_NOTNUMERIC, 0,
                                new String[] { notifyMSISDN }, null);
                        }

                        iatTransferItemVO.setIatNotifyMsisdn(p_requestArr[3]);
                        if (LocaleMasterCache.getLocaleFromCodeDetails(p_requestArr[4]) != null) {
                            iatTransferItemVO.setIatNotifyMsisdnLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestArr[4]));
                        } else {
                            iatTransferItemVO.setIatNotifyMsisdnLocale(new Locale(defaultLanguage, defaultCountry));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SRechargeRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /**
     * Method formatRoamRechargeTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatRoamRechargeTransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatIntlRechargeTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatIntlRechargeTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            returnStr = "IR" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method to format the Multiple bonus account string to insert in
     * 
     * @param p_bonusVOList
     *            ArrayList
     * @return String
     */
    @Override
    public String formatBonusSummaryString(ArrayList p_bonusVOList) throws Exception {
        final String obj = "formatBonusSummaryString";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "p_bonusVOList: " + p_bonusVOList);
        }
        String bonus = "";
        try {
            BonusTransferVO bonusTransferVO = null;
            if (p_bonusVOList != null && p_bonusVOList.size() > 0) {
                for (int i = 0, j = p_bonusVOList.size(); i < j; i++) {
                    bonusTransferVO = (BonusTransferVO) p_bonusVOList.get(i);
                    // System.out.println("bonusTransferVO="+bonusTransferVO.toString())
                    if (bonus.length() <= 210 && (bonusTransferVO.getBalance() > 0 || bonusTransferVO.getValidity() > 0)) {
                        bonus += bonusTransferVO.getAccountCode() + ":" + bonusTransferVO.getAccountType() + ":" + PretupsBL.getDisplayAmount(bonusTransferVO.getBalance()) + ":" + bonusTransferVO
                            .getValidity() + ":" + bonusTransferVO.getAccountRate() + "|";
                        // bonus+=bonusTransferVO.getAccountCode()+":"+bonusTransferVO.getAccountType()+":"+PretupsBL.getDisplayAmount(bonusTransferVO.getBalance())+":"+bonusTransferVO.getValidity()+"|"
                    } else if (bonus.length() >= 250) {
                        break;
                    }
                }
                if (bonus.length() > 0) {
                    bonus = bonus.substring(0, bonus.length() - 1);
                }
            }

        } catch (Exception e) {
            _log.errorTrace(obj, e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "bonus: " + bonus);
                // System.out.println("bonus: "+bonus)
            }
        }
        return bonus;
    }

    @Override
    public void populateBonusListAfterValidation(HashMap p_map, C2STransferVO p_c2stransferVO) {
        HashMap map = null;
        final String obj = "populateBonusListAfterValidation";
        try {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "_transferID: " + p_c2stransferVO.getTransferID() + " Entered");
            }
            map = new HashMap();
            BonusTransferVO bonusTransferVO = null;
            String accountIds[] = null;
            String accountCodes[] = null;
            String previousBalance[] = null;
            String previousValidity[] = null;
            String previousGrace[] = null;
            String tempString = null;
            final String splitChar = "%2C";

            tempString = (String) p_map.get("IN_RESP_BUNDLE_IDS");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                accountIds = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("IN_RESP_BUNDLE_CODES");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                accountCodes = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("IN_RESP_BUNDLE_PREV_BALS");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                previousBalance = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("IN_RESP_BUNDLE_PREV_VALIDITY");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                previousValidity = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("IN_RESP_BUNDLE_PREV_GRACE");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                previousGrace = tempString.split(splitChar);
            }

            if (!BTSLUtil.isNullArray(accountCodes) && accountCodes.length > 0) {
                for (int i = 0, size = accountCodes.length; i < size; i++) {
                    bonusTransferVO = new BonusTransferVO();
                    if (!BTSLUtil.isNullArray(accountIds) && !BTSLUtil.isNullString(accountIds[i]) && accountIds[i].length() > 0) {
                        bonusTransferVO.setAccountId(accountIds[i]);
                    }
                    if (!BTSLUtil.isNullArray(accountCodes) && !BTSLUtil.isNullString(accountCodes[i]) && accountCodes[i].length() > 0) {
                        bonusTransferVO.setAccountCode(accountCodes[i]);
                    }
                    if (!BTSLUtil.isNullArray(previousBalance) && !BTSLUtil.isNullString(previousBalance[i]) && previousBalance[i].length() > 0) {
                        bonusTransferVO.setPreviousBalance(Long.parseLong(previousBalance[i]));
                    }
                    try {
                        if (!BTSLUtil.isNullArray(previousValidity) && !BTSLUtil.isNullString(previousValidity[i]) && previousValidity[i].length() > 0) {
                            bonusTransferVO.setPreviousValidity(BTSLUtil.getDateFromDateString(previousValidity[i], PretupsI.DATE_FORMAT_DDMMYYYY));
                        }
                    } catch (Exception e) {
                        _log.errorTrace(obj, e);
                        bonusTransferVO.setPreviousValidity(null);
                    }
                    try {
                        if (!BTSLUtil.isNullArray(previousGrace) && !BTSLUtil.isNullString(previousGrace[i]) && previousGrace[i].length() > 0) {
                            bonusTransferVO.setPreviousGrace(BTSLUtil.getDateFromDateString(previousGrace[i], PretupsI.DATE_FORMAT_DDMMYYYY));
                        }
                    } catch (Exception e) {
                        _log.errorTrace(obj, e);
                        bonusTransferVO.setPreviousGrace(null);
                    }
                    bonusTransferVO.setCreatedOn(p_c2stransferVO.getTransferDate());
                    bonusTransferVO.setTransferId(p_c2stransferVO.getTransferID());
                    map.put(accountCodes[i], bonusTransferVO);
                }
            }
            p_c2stransferVO.setBonusItems(map);
        } catch (Exception e) {
            _log.errorTrace(obj, e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "_transferID: " + p_c2stransferVO.getTransferID() + "bonus map afer validation :" + map + " Exited");
            }
        }
    }

    @Override
    public void updateBonusListAfterTopup(HashMap p_map, C2STransferVO p_c2stransferVO) {
        final String obj = "updateBonusListAfterTopup";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "_transferID: " + p_c2stransferVO.getTransferID() + " Entered");
        }
        ArrayList bonusList = null;
        try {
            bonusList = new ArrayList();
            HashMap bonusMasterMap = null;

            final String combined = (String) p_map.get("COMBINED_RECHARGE");
            final String implicit = (String) p_map.get("IMPLICIT_RECHARGE");
            if (PretupsI.YES.equals(implicit) || PretupsI.YES.equals(combined)) {
                p_c2stransferVO.setBonusItems(bonusList);
                return;
            }
            BonusTransferVO bonusTransferVO = null;
            String recAccountCodes[] = null;
            String accountNames[] = null;
            String accountTypes[] = null;
            String accountRates[] = null;
            String balance[] = null;
            String validity[] = null;
            String grace[] = null;
            String postBalance[] = null;
            String postValidity[] = null;
            String postGrace[] = null;
            String tempString = null;
            final String splitChar = "%7C";
            String accountIds[] = null;
            boolean isReceived = false;
            BonusBundleDetailVO bundleDetailVO = null;
            String sendAccountCodes[] = null;
            HashMap map = null;

            // Only those account details will be added in database that are
            // areceived in credit response
            // If credit response is not obtained, acount send to IN for credit
            // will be considered

            tempString = (String) p_map.get("IN_RESP_BUNDLE_CODES_CR");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                recAccountCodes = tempString.split(splitChar);
            }

            sendAccountCodes = (p_c2stransferVO.getBonusBundleCode()).split("\\|");

            tempString = (String) p_map.get("BONUS_BUNDLE_IDS");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                accountIds = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("BONUS_BUNDLE_NAMES");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                accountNames = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("BONUS_BUNDLE_TYPES");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                accountTypes = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("BONUS_BUNDLE_RATES");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                accountRates = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("BONUS_BUNDLE_VALUES");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                balance = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("BONUS_BUNDLE_VALIDITIES");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                validity = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("BONUS_BUNDLE_GRACE");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                grace = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("IN_RESP_BUNDLE_POST_BALS");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                postBalance = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("IN_RESP_BUNDLE_POST_VALIDITY");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                postValidity = tempString.split(splitChar);
            }

            tempString = (String) p_map.get("IN_RESP_BUNDLE_POST_GRACE");
            if (!BTSLUtil.isNullString(tempString) && tempString.length() > 0) {
                postGrace = tempString.split(splitChar);
            }

            bonusMasterMap = BonusBundleCache.getBonusBundlesLinkedMap();
            final Set set = bonusMasterMap.entrySet();
            final Iterator itr = set.iterator();
            map = (HashMap) p_c2stransferVO.getBonusItems();

            final ArrayList newCode = new ArrayList();
            ArrayList finalCode = new ArrayList();

            if (BTSLUtil.isNullArray(recAccountCodes) || recAccountCodes.length == 0) {
                recAccountCodes = sendAccountCodes;
            } else {
                for (int i = 0, size = sendAccountCodes.length; i < size; i++) {
                    if (!Arrays.asList(recAccountCodes).contains(sendAccountCodes[i])) {
                        newCode.add(sendAccountCodes[i]);
                    }
                }
                finalCode = (ArrayList) Arrays.asList(recAccountCodes);
                finalCode.addAll(newCode);
            }

            final int x1 = finalCode.size();
            if (x1 > 0) {
                recAccountCodes = new String[x1];
                for (int i = 0, size = finalCode.size(); i < size; i++) {
                    recAccountCodes[i] = (String) finalCode.get(i);
                }
            }

            while (itr.hasNext()) {
                isReceived = false;
                final Map.Entry valEntry = (Map.Entry) itr.next();
                bundleDetailVO = (BonusBundleDetailVO) valEntry.getValue();

                if (!BTSLUtil.isNullArray(recAccountCodes) && recAccountCodes.length > 0) {
                    for (int i = 0, size = recAccountCodes.length; i < size; i++) {
                        if (recAccountCodes[i].equalsIgnoreCase(bundleDetailVO.getBundleCode()) && (!p_c2stransferVO.getReceiverBundleID().equalsIgnoreCase(
                            bundleDetailVO.getBundleCode()))) {
                            isReceived = true;
                            break;
                        }
                    }
                }
                bonusTransferVO = (BonusTransferVO) map.get(bundleDetailVO.getBundleCode());
                if (bonusTransferVO == null) {
                    bonusTransferVO = new BonusTransferVO();
                }
                bonusTransferVO.setTransferId(p_c2stransferVO.getTransferID());
                if (isReceived) {
                    // loop for received account codes
                    for (int x = 0, arrSize = recAccountCodes.length; x < arrSize; x++) {
                        if (recAccountCodes[x].equalsIgnoreCase(bundleDetailVO.getBundleCode())) {
                            bonusTransferVO.setAccountCode(bundleDetailVO.getBundleCode());
                            if (!BTSLUtil.isNullArray(accountIds) && !BTSLUtil.isNullString(accountIds[x]) && accountIds[x].length() > 0) {
                                bonusTransferVO.setAccountId(accountIds[x]);
                            }
                            if (!BTSLUtil.isNullArray(accountNames) && !BTSLUtil.isNullString(accountNames[x]) && accountNames[x].length() > 0) {
                                bonusTransferVO.setAccountName(accountNames[x]);
                            }
                            if (!BTSLUtil.isNullArray(accountTypes) && !BTSLUtil.isNullString(accountTypes[x]) && accountTypes[x].length() > 0) {
                                bonusTransferVO.setAccountType(accountTypes[x]);
                            }
                            if (!BTSLUtil.isNullArray(accountRates) && !BTSLUtil.isNullString(accountRates[x]) && accountRates[x].length() > 0) {
                                bonusTransferVO.setAccountRate(Double.parseDouble(accountRates[x]));
                            }
                            if (!BTSLUtil.isNullArray(balance) && !BTSLUtil.isNullString(balance[x]) && balance[x].length() > 0) {
                                final double y = Double.parseDouble(balance[x]);
                                bonusTransferVO.setBalance(Double.valueOf(y).longValue());
                            }
                            if (!BTSLUtil.isNullArray(validity) && !BTSLUtil.isNullString(validity[x]) && validity[x].length() > 0) {
                                bonusTransferVO.setValidity(Long.parseLong(validity[x]));
                            }
                            if (!BTSLUtil.isNullArray(grace) && !BTSLUtil.isNullString(grace[x]) && grace[x].length() > 0) {
                                bonusTransferVO.setGrace(Long.parseLong(grace[x]));
                            }
                            if (!BTSLUtil.isNullArray(postBalance) && !BTSLUtil.isNullString(postBalance[x]) && postBalance[x].length() > 0) {
                                final double y = Double.parseDouble(postBalance[x]);
                                bonusTransferVO.setPostBalance(Double.valueOf(y).longValue());
                            }
                            try {
                                if (!BTSLUtil.isNullArray(postValidity) && !BTSLUtil.isNullString(postValidity[x]) && postValidity[x].length() > 0) {
                                    bonusTransferVO.setPostValidity(BTSLUtil.getDateFromDateString(postValidity[x], PretupsI.DATE_FORMAT_DDMMYYYY));
                                }
                            } catch (Exception e) {
                                bonusTransferVO.setPostValidity(null);
                                _log.errorTrace(obj, e);
                            }
                            try {
                                if (!BTSLUtil.isNullArray(postGrace) && !BTSLUtil.isNullString(postGrace[x]) && postGrace[x].length() > 0) {
                                    bonusTransferVO.setPostGrace(BTSLUtil.getDateFromDateString(postGrace[x], PretupsI.DATE_FORMAT_DDMMYYYY));
                                }
                            } catch (Exception e) {
                                bonusTransferVO.setPostGrace(null);
                                _log.errorTrace(obj, e);
                            }
                            bonusTransferVO.setCreatedOn(p_c2stransferVO.getTransferDate());
                            bonusList.add(bonusTransferVO);
                            break;
                        }// end if
                    }// end for
                } else if (!isReceived && !p_c2stransferVO.getReceiverBundleID().equalsIgnoreCase(bundleDetailVO.getBundleID())) {
                    bonusTransferVO.setAccountId(bundleDetailVO.getBundleID());
                    bonusTransferVO.setAccountCode(bundleDetailVO.getBundleCode());
                    bonusTransferVO.setAccountName(bundleDetailVO.getBundleName());
                    bonusTransferVO.setAccountType(bundleDetailVO.getBundleType());
                    bonusTransferVO.setAccountRate(1);
                    bonusTransferVO.setBalance(0);
                    bonusTransferVO.setValidity(0);
                    bonusTransferVO.setGrace(0);
                    bonusTransferVO.setPostBalance(0);
                    bonusTransferVO.setPostValidity(null);
                    bonusTransferVO.setPostGrace(null);

                    bonusTransferVO.setCreatedOn(p_c2stransferVO.getTransferDate());
                    bonusList.add(bonusTransferVO);
                } else if (!isReceived && p_c2stransferVO.getReceiverBundleID().equalsIgnoreCase(bundleDetailVO.getBundleID())) {
                    bonusTransferVO.setAccountId(bundleDetailVO.getBundleID());
                    bonusTransferVO.setAccountCode(bundleDetailVO.getBundleCode());
                    bonusTransferVO.setAccountName(bundleDetailVO.getBundleName());
                    bonusTransferVO.setAccountType(bundleDetailVO.getBundleType());
                    bonusTransferVO.setAccountRate(1);
                    bonusTransferVO.setBalance(p_c2stransferVO.getReceiverBonusValue());
                    bonusTransferVO.setValidity(p_c2stransferVO.getReceiverCreditBonusValidity());
                    bonusTransferVO.setGrace(0);
                    bonusTransferVO.setPreviousBalance(p_c2stransferVO.getReceiverTransferItemVO().getPreviousBalance());
                    bonusTransferVO.setPreviousValidity(p_c2stransferVO.getReceiverTransferItemVO().getPreviousExpiry());
                    bonusTransferVO.setPreviousGrace(p_c2stransferVO.getReceiverTransferItemVO().getPreviousGraceDate());
                    bonusTransferVO.setPostBalance(0);
                    bonusTransferVO.setPostValidity(null);
                    bonusTransferVO.setPostGrace(null);
                    bonusTransferVO.setCreatedOn(p_c2stransferVO.getTransferDate());
                    bonusList.add(bonusTransferVO);
                }
            }
            p_c2stransferVO.setBonusItems(bonusList);

            // Method call to generate a bonus summary string
            String bonusSummaryString = null;
            bonusSummaryString = formatBonusSummaryString((ArrayList) p_c2stransferVO.getBonusItems());
            p_c2stransferVO.setBonusSummarySting(bonusSummaryString);

            // method call to set Bounses previous/post balances and validities
            formatBonusPrevoiusAndPostString(p_c2stransferVO);

        } catch (Exception e) {
            p_c2stransferVO.setBonusItems(bonusList);
            _log.errorTrace(obj, e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "_transferID: " + p_c2stransferVO.getTransferID() + " Exited");
            }
        }
    }

    /**
     * Method formatDPBatchMasterTxnID. This method generate the batch ID for
     * the FOC batch master transfer.
     * 
     * @param p_batchMasterVO
     *            FOCBatchMasterVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @author Lohit Audhkhasi
     * @see com.btsl.pretups.util.OperatorUtilI#formatDPBatchMasterTxnID(FOCBatchMasterVO,
     *      long)
     */
    @Override
    public String formatDPBatchMasterTxnID(FOCBatchMasterVO p_batchMasterVO, long p_tempTransferID) {
        final String methodName = "formatDPBatchMasterTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), DP_BATCH_MASTER_ID_PAD_LENGTH);
            returnStr = p_batchMasterVO.getNetworkCode()+PretupsI.DP_BATCH_TRANSACTION_ID + currentDateTimeFormatString(p_batchMasterVO.getCreatedOn()) + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatFOCBatchMasterTxnID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatDPBatchDetailsTxnID. This method generate the batch details
     * ID for the FOC batch items.
     * 
     * @param p_batchMasterID
     *            String
     * @param p_tempTransferID
     *            long
     * @return String
     * @author Lohit Audhkhasi
     * @see com.btsl.pretups.util.OperatorUtilI#formatFOCBatchDetailsTxnID(String,
     *      long)
     */
    @Override
    public String formatDPBatchDetailsTxnID(String p_batchMasterID, long p_tempTransferID) {
        final String methodName = "formatDPBatchDetailsTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), DP_BATCH_DETAIL_ID_PAD_LENGTH);
            returnStr = p_batchMasterID + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatFOCBatchDetailsTxnID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method isPinUserId
     * 
     * @author vikram.kumar
     * @created on 21/01/2010
     * @param p_pin
     *            String
     * @param p_userId
     *            String
     * @return boolean(generally false, but vfe it has to be implemented)
     */
    @Override
    public boolean isPinUserId(String p_pin, String p_userId) {
        return false;
    }

    /**
     * Method handleLDCCRequest
     * 
     * @author chetan.kothari
     * @created on 21/01/2010
     */
    @Override
    public boolean handleLDCCRequest() {
        // customized according to mobinil requirement for all other it will
        // return false.
        return false;
    }

    /**
     * Method to validate the SMS PIn sent in the request
     * 
     * @param p_pin
     * @throws BTSLBaseException
     */
    @Override
    public void validatePIN(String p_pin) throws BTSLBaseException {
    	Integer minSmsPinLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_SMS_PIN_LENGTH);
    	Integer maxSmsPinLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_SMS_PIN_LENGTH);
        if (BTSLUtil.isNullString(p_pin)) {
            throw new BTSLBaseException("BTSLUtil", "validatePIN", PretupsErrorCodesI.PIN_INVALID);
        } else if (!BTSLUtil.isNumeric(p_pin)) {
            throw new BTSLBaseException("BTSLUtil", "validatePIN", PretupsErrorCodesI.NEWPIN_NOTNUMERIC);
        } else if (p_pin.length() < (int)minSmsPinLength || p_pin.length() > (int)maxSmsPinLength) {
            final String msg[] = { String.valueOf((int)minSmsPinLength), String.valueOf((int)maxSmsPinLength) };
            throw new BTSLBaseException("BTSLUtil", "validatePIN", PretupsErrorCodesI.PIN_LENGTHINVALID, 0, msg, null);
        } else {
            final int result = BTSLUtil.isSMSPinValid(p_pin);
            if (result == -1) {
                throw new BTSLBaseException("BTSLUtil", "validatePIN", PretupsErrorCodesI.PIN_SAMEDIGIT);
            } else if (result == 1) {
                throw new BTSLBaseException("BTSLUtil", "validatePIN", PretupsErrorCodesI.PIN_CONSECUTIVE);
            }
        }
    }

    /*@Override
    public void validateP2PMeassgeFormat(Connection p_con, RequestVO p_requestVO, SenderVO p_senderVO, TransferVO p_transferVO) throws BTSLBaseException, Exception {
        final String obj = "validateP2PMeassgeFormat";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Entered");
        }
        String[] requestMessageArray = null;
        String actualPin = null;
        String cvv = null;
        String pin = null;
        String paymentMethodType = null;
        String senderSubscriberType = null;
        String amount = null;
        try {
            requestMessageArray = p_requestVO.getRequestMessageArray();
            actualPin = p_senderVO.getPin();
            senderSubscriberType = ((SenderVO) p_transferVO.getSenderVO()).getSubscriberType();
            switch (requestMessageArray.length) {
            // service_keyword cvv amt pin
            // use default card details
                case 4:
                    {
                        pin = requestMessageArray[3];
                        // incomingSmsStr.append("****"+" ")
                        // if pin Invalid return with error(PIN is Mandatory)
                        // if(actualPin.equalsIgnoreCase(PretupsI.DEFAULT_P2P_PIN))
                        // whether PIN validation is required or not.
                        if (isCP2PPinValidationRequired) {
                            if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                                // if(!pin.equals(PretupsI.DEFAULT_P2P_PIN))
                                if (!BTSLUtil.isNullString(pin) && !pin.equals(p2pDefaultSmsPin)) {
                                    BTSLUtil.validatePIN(pin);
                                    p_senderVO.setPin(BTSLUtil.encryptText(pin));
                                    p_senderVO.setPinUpdateReqd(true);
                                    p_senderVO.setActivateStatusReqd(true);
                                }
                            } else {
                                try {
                                    SubscriberBL.validatePIN(p_con, p_senderVO, pin);
                                } catch (BTSLBaseException be) {
                                    if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                        .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                        p_con.commit();
                                    }
                                    throw be;
                                }
                            }
                        }

                        PaymentMethodKeywordVO paymentMethodKeywordVO = null;
                        final CardDetailsVO cardDetailsVO = new CardDetailsDAO().loadDefaultCredtCardDetails(p_con, p_senderVO.getUserID());
                        if (cardDetailsVO == null) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.DEFAULT_CARD_NOT_FOUND);
                        }

                        p_senderVO.setCardDetailsVO(cardDetailsVO);
                        paymentMethodKeywordVO = PaymentMethodCache.getObject(cardDetailsVO.getBankName(), p_transferVO.getServiceType(), p_transferVO.getNetworkCode());
                        // p_transferVO.setPaymentMethodKeywordVO(paymentMethodKeywordVO)
                        amount = requestMessageArray[2];
                        if (paymentMethodKeywordVO == null) {
                            paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
                            if (paymentMethodType == null) {
                                // return with error message, no default payment
                                // method
                                // defined
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
                            }
                            p_transferVO.setPaymentMethodType(paymentMethodType);
                            p_transferVO.setDefaultPaymentMethod("Y");
                            checkAfterPaymentMethod(p_con, amount, p_transferVO, p_senderVO.getMsisdn());
                            // incomingSmsStr.append(paymentMethodType+" ")
                            // _incomingSmsStr+=amount+" "
                        } else {
                            paymentMethodType = paymentMethodKeywordVO.getPaymentMethodType();
                            p_transferVO.setPaymentMethodType(paymentMethodType);
                            p_transferVO.setPaymentMethodKeywordVO(paymentMethodKeywordVO);
                            p_transferVO.setDefaultPaymentMethod(PretupsI.NO);
                            // incomingSmsStr.append(paymentMethodType+" ")
                            checkAfterPaymentMethod(p_con, amount, p_transferVO, p_senderVO.getMsisdn());

                        }
                        cvv = requestMessageArray[1];
                        if (!BTSLUtil.isNullString(cvv) && BTSLUtil.isNumeric(cvv)) {
                            p_senderVO.setCvv(cvv);
                        } else {
                            throw new BTSLBaseException("", obj, PretupsErrorCodesI.INVALID_CVV_NUMBER);
                        }
                        p_senderVO.setNickName(cardDetailsVO.getCardNickName());
                        break;
                    }
                // service_keyword Nick_name cvv amt pin
                case 5:
                    {
                        pin = requestMessageArray[4];
                        // incomingSmsStr.append("****"+" ")
                        // if pin Invalid return with error(PIN is Mandatory)
                        // if(actualPin.equalsIgnoreCase(PretupsI.DEFAULT_P2P_PIN))
                        // whether PIN validation is required or not.
                        if (isCP2PPinValidationRequired) {
                            if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                                // if(!pin.equals(PretupsI.DEFAULT_P2P_PIN))
                                if (!BTSLUtil.isNullString(pin) && !pin.equals(p2pDefaultSmsPin)) {
                                    BTSLUtil.validatePIN(pin);
                                    p_senderVO.setPin(BTSLUtil.encryptText(pin));
                                    p_senderVO.setPinUpdateReqd(true);
                                    p_senderVO.setActivateStatusReqd(true);
                                }
                            } else {
                                try {
                                    SubscriberBL.validatePIN(p_con, p_senderVO, pin);
                                } catch (BTSLBaseException be) {
                                    if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                        .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                        p_con.commit();
                                    }
                                    throw be;
                                }
                            }
                        }

                        PaymentMethodKeywordVO paymentMethodKeywordVO = null;
                        final CardDetailsVO cardDetailsVO = new CardDetailsDAO().loadCredtCardDetails(p_con, p_senderVO.getUserID(), requestMessageArray[1]);
                        if (cardDetailsVO == null) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.WRONG_NICK_NAME);
                        }

                        p_senderVO.setCardDetailsVO(cardDetailsVO);
                        // paymentMethodKeyword=requestMessageArray[1]
                        // if paymentMethod invalid , Validate next Argument for
                        // Receiver No(MSISDN).
                        paymentMethodKeywordVO = PaymentMethodCache.getObject(cardDetailsVO.getBankName(), p_transferVO.getServiceType(), p_transferVO.getNetworkCode());
                        // p_transferVO.setPaymentMethodKeywordVO(paymentMethodKeywordVO)
                        amount = requestMessageArray[3];
                        if (paymentMethodKeywordVO == null) {
                            paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
                            if (paymentMethodType == null) {
                                // return with error message, no default payment
                                // method
                                // defined
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
                            }
                            p_transferVO.setPaymentMethodType(paymentMethodType);
                            p_transferVO.setDefaultPaymentMethod("Y");
                            checkAfterPaymentMethod(p_con, amount, p_transferVO, p_senderVO.getMsisdn());
                            // incomingSmsStr.append(paymentMethodType+" ")
                            // _incomingSmsStr+=amount+" "
                        } else {
                            paymentMethodType = paymentMethodKeywordVO.getPaymentMethodType();
                            p_transferVO.setPaymentMethodType(paymentMethodType);
                            p_transferVO.setPaymentMethodKeywordVO(paymentMethodKeywordVO);
                            p_transferVO.setDefaultPaymentMethod(PretupsI.NO);
                            // incomingSmsStr.append(paymentMethodType+" ")
                            checkAfterPaymentMethod(p_con, amount, p_transferVO, p_senderVO.getMsisdn());

                        }
                        cvv = requestMessageArray[2];
                        if (!BTSLUtil.isNullString(cvv) && BTSLUtil.isNumeric(cvv)) {
                            p_senderVO.setCvv(cvv);
                        } else {
                            throw new BTSLBaseException("", obj, PretupsErrorCodesI.INVALID_CVV_NUMBER);
                        }
                        p_senderVO.setNickName(cardDetailsVO.getCardNickName());
                        break;
                    }
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateP2PMeassgeFormat]", "", "", "",
                "Exception while validating message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.P2P_ERROR_EXCEPTION,e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "Exiting");
            }
        }
    }*/

    /**
     * Check After Payment Method
     * 
     * @param p_con
     * @param i
     * @throws BTSLBaseException
     * @throws Exception
     */
    public void checkAfterPaymentMethod(Connection p_con, String p_amount, TransferVO p_transferVO, String p_msisdn) throws BTSLBaseException, Exception {
        if (_log.isDebugEnabled()) {
            _log.debug("checkAfterPaymentMethod", " p_amount:" + p_amount + " p_msisdn: " + p_msisdn);
        }
        final String receiverMSISDN = p_msisdn;
        final ReceiverVO _receiverVO = new ReceiverVO();
        _receiverVO.setMsisdn(receiverMSISDN);
        final NetworkPrefixVO networkPrefixVO = PretupsBL.getNetworkDetails(receiverMSISDN, PretupsI.USER_TYPE_RECEIVER);
        if (networkPrefixVO == null) {
            throw new BTSLBaseException(this, "checkAfterPaymentMethod", PretupsErrorCodesI.ERROR_NOTFOUND_RECEIVERNETWORK, 0, new String[] { receiverMSISDN }, null);
        }
        _receiverVO.setNetworkCode(networkPrefixVO.getNetworkCode());
        _receiverVO.setPrefixID(networkPrefixVO.getPrefixID());
        _receiverVO.setSubscriberType(networkPrefixVO.getSeriesType());
        p_transferVO.setReceiverVO(_receiverVO);
        long amount = 0;
        amount = PretupsBL.getSystemAmount(p_amount);
        if (amount < 0) {
            throw new BTSLBaseException(this, "checkAfterPaymentMethod", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
        }
        p_transferVO.setTransferValue(amount);
        p_transferVO.setRequestedAmount(amount);
    }

    /**
     * Method formatSaleBatchNumber.
     * 
     * @param p_tempTransferStr
     *            String
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatSaleBatchNumber(String,
     *      long)
     */
    @Override
    public String formatSaleBatchNumber(String p_tempTransferStr, long p_tempTransferID) {
        final String methodName = "formatSaleBatchNumber";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), SALE_BATCH_NUMBER_PAD_LENGTH);
            returnStr = p_tempTransferStr + currentDateTimeFormatString(new Date()) + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatSaleBatchNumber]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    public boolean prefixServiceMappingExist(String p_serviceType, String p_prxfService) {
        return true;
    }

    /**
     * for customization of zain airtel as they dont have confirm pin in STK
     * Method getP2PChangePinMessageArray.
     * 
     * @param message
     *            String[]
     * @return String[]
     */
    @Override
    public String[] getP2PChangePinMessageArray(String message[]) {
        return message;
    }

    /**
     * for customization of zain airtel as they dont have confirm pin in STK
     * Method getC2SChangePinMessageArray.
     * 
     * @param message
     *            String[]
     * @return String[]
     */
    @Override
    public String[] getC2SChangePinMessageArray(String message[]) {
        return message;
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.btsl.pretups.util.OperatorUtilI#validateC2STransEnqRequest(java.sql
     * .Connection,
     * com.btsl.pretups.channel.transfer.businesslogic.C2STransferVO,
     * com.btsl.pretups.receiver.RequestVO) added for validating c2s transaction
     * enquiry by retailer date basis
     */
    @Override
    public void validateC2STransEnqRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateC2STransEnqRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            // String [] strArr=null
            // double requestAmt=0
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_requestVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            long requestAmt = 0;
            String dateStr = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
            // RCE 77777101 1357
            // All Transaction status of subscriber for current date
                case 3:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[2]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
                        p_c2sTransferVO.setReceiverMsisdn(custMsisdn);
                        final Date date = new Date();
                        dateStr = BTSLUtil.getDateStringFromDate(date);
                        p_c2sTransferVO.setTransferDate(BTSLUtil.getDateFromDateString(dateStr, Constants.getProperty("SIMPLE_DATE_FORMAT")));
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        p_c2sTransferVO.setTransferValueStr("");
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }
                // RCE 77777101 100 1357 Transactions status of subscriber for
                // current date & particular requested amount.
                // RCE 77777101 28/05/2010 1357 Transactions status of
                // subscriber
                // for particular date for each amount.
                case 4:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
                        requestAmtStr = p_requestArr[2];
                        try {
                            requestAmt = Long.parseLong(requestAmtStr);
                            requestAmt = PretupsBL.getSystemAmount(requestAmtStr);
                            p_c2sTransferVO.setRequestedAmount(requestAmt);
                            p_c2sTransferVO.setTransferValue(requestAmt);
                            p_c2sTransferVO.setTransferValueStr(requestAmtStr);
                            final Date date = new Date();
                            dateStr = BTSLUtil.getDateStringFromDate(date);
                            p_c2sTransferVO.setTransferDate(BTSLUtil.getDateFromDateString(dateStr, Constants.getProperty("SIMPLE_DATE_FORMAT")));

                        } catch (NumberFormatException nfe) {
                            _log.info(obj, "NumberFormatException:" + nfe);
                            dateStr = p_requestArr[2];
                            p_c2sTransferVO.setTransferDate(BTSLUtil.getDateFromDateString(dateStr, Constants.getProperty("SIMPLE_DATE_FORMAT")));
                            p_c2sTransferVO.setTransferValueStr("");
                        }
                        p_c2sTransferVO.setReceiverMsisdn(custMsisdn);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;

                    }
                // KEYWOD MSISDN DATE AMT PIN
                case 5:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[3];
                        requestAmt = PretupsBL.getSystemAmount(requestAmtStr);
                        p_c2sTransferVO.setReceiverMsisdn(custMsisdn);
                        p_c2sTransferVO.setRequestedAmount(requestAmt);
                        p_c2sTransferVO.setTransferValue(requestAmt);
                        p_c2sTransferVO.setTransferValueStr(requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        // validate date
                        dateStr = p_requestArr[2];
                        p_c2sTransferVO.setTransferDate(BTSLUtil.getDateFromDateString(dateStr, Constants.getProperty("SIMPLE_DATE_FORMAT")));
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        /*
                         * ServiceSelectorMappingVO
                         * serviceSelectorMappingVO=ServiceSelectorMappingCache
                         * .getDefaultSelectorForServiceType
                         * (p_c2sTransferVO.getServiceType());
                         * if(serviceSelectorMappingVO!=null)
                         * p_requestVO.setReqSelector(serviceSelectorMappingVO.
                         * getSelectorCode());
                         */
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }
        } catch (BTSLBaseException be) {
            _log.error(obj, "BTSLBaseException:" + be);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2STransEnqRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /**
     * for version upgrade in OMT Mauritius Method getTxnEnqryMessageArray.
     * 
     * @param message
     *            String[]
     * @param p_requestVO
     * @return int
     */
    @Override
    public int getTxnEnqryMessageArray(String[] p_message, RequestVO p_requestVO) throws BTSLBaseException {

        // TODO Auto-generated method stub
        // return null
        final String obj = "getTxnEnqryMessageArray";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, " Entered " + p_requestVO);
        }
        final int tracker = 0;
        int action = 0;
        HashMap compare = new HashMap();
        compare = p_requestVO.getRequestMap();
        try {

            if (BTSLUtil.isNullString((String) compare.get("TXNTYPE"))) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_NULL_TXNTYPE);
                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.ERROR_NULL_TXNTYPE, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }
            if (BTSLUtil.isNullString((String) compare.get("EXTNWCODE"))) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_NULL_NWCODE);
                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.ERROR_NULL_NWCODE, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            } else if ((BTSLUtil.isNullString((String) compare.get("TXNID"))) && (BTSLUtil.isNullString((String) compare.get("EXTREFNUM"))) && (BTSLUtil
                .isNullString((String) compare.get("FROMDATE"))) && (BTSLUtil.isNullString((String) compare.get("TODATE")))) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_INVALID_MESSAGE_FORMAT);
                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.ERROR_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            } else {
                if (!(BTSLUtil.isNullString((String) compare.get("TXNID"))) && "O2C".equalsIgnoreCase((String) compare.get("TXNTYPE"))) {
                    action = 1;
                } else if (!(BTSLUtil.isNullString((String) compare.get("TXNID"))) && "C2C".equalsIgnoreCase((String) compare.get("TXNTYPE"))) {
                    action = 2;
                } else if (!(BTSLUtil.isNullString((String) compare.get("EXTREFNUM"))) && "O2C".equalsIgnoreCase((String) compare.get("TXNTYPE"))) {
                    action = 3;
                } else if (!(BTSLUtil.isNullString((String) compare.get("EXTREFNUM"))) && "C2C".equalsIgnoreCase((String) compare.get("TXNTYPE"))) {
                    action = 4;
                } else if (!(BTSLUtil.isNullString((String) compare.get("TXNID"))) && "C2S".equalsIgnoreCase((String) compare.get("TXNTYPE"))) {
                    action = 5;
                } else if (!(BTSLUtil.isNullString((String) compare.get("EXTREFNUM"))) && "C2S".equalsIgnoreCase((String) compare.get("TXNTYPE"))) {
                    action = 6;
                } else if (!(BTSLUtil.isNullString((String) compare.get("FROMDATE"))) && !"TODATE".equalsIgnoreCase((String) compare.get("TXNTYPE"))) {
                    final String date_time_from = ((String) compare.get("FROMDATE")).trim();
                    String arr[] = null;
                    arr = date_time_from.split(" ");

                    final SimpleDateFormat srcDate = new SimpleDateFormat(PretupsI.DATE_FORMAT_DDMMYYYY);
                    final SimpleDateFormat destDate = new SimpleDateFormat(PretupsI.DATE_FORMAT);
                    final Date from = BTSLUtil.getDateFromDateString(destDate.format(srcDate.parse(arr[0])));
                    compare.put("FROMDATE", BTSLUtil.getDateStringFromDate(from));

                    final String date_time_to = ((String) compare.get("TODATE")).trim();
                    String arr1[] = null;
                    arr1 = date_time_to.split(" ");
                    final Date to_date = BTSLUtil.getDateFromDateString(destDate.format(srcDate.parse(arr1[0])));
                    compare.put("TODATE", BTSLUtil.getDateStringFromDate(to_date));
                    final Date current = new Date();
                    final double diff = from.getTime() - current.getTime();
                    if (diff > 0) {
                        p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_INVALID_DATE_RANGE);
                        throw new BTSLBaseException(this, obj, PretupsErrorCodesI.ERROR_INVALID_DATE_RANGE, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
                    }
                    final int days = BTSLUtil.getDifferenceInUtilDates(BTSLUtil.getDateFromDateString(((String) compare.get("FROMDATE")), PretupsI.DATE_FORMAT), BTSLUtil
                        .getDateFromDateString(((String) compare.get("TODATE")), PretupsI.DATE_FORMAT));
                    if (days < 2 && "O2C".equalsIgnoreCase((String) compare.get("TXNTYPE"))) {
                        action = 7;
                    } else if (days < 2 && "C2C".equalsIgnoreCase((String) compare.get("TXNTYPE"))) {
                        action = 8;
                    } else if (days < 2 && "C2S".equalsIgnoreCase((String) compare.get("TXNTYPE"))) {
                        action = 9;
                    } else {
                        p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_INVALID_DATE_RANGE);
                        throw new BTSLBaseException(this, obj, PretupsErrorCodesI.ERROR_INVALID_DATE_RANGE, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
                    }
                }
            }
        }

        catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            p_requestVO.setSuccessTxn(false);
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[getTxnEnqryMessageArray]", "", "", "",
                "Exception:" + e.getMessage());
            p_requestVO.setMessageCode(PretupsErrorCodesI.REQ_NOT_PROCESS);
            p_requestVO.setSuccessTxn(false);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "Exiting for status=" + tracker);
            }
        }// end of finally
        return action;

    }

    // added by jasmine
    /**
     * for validate alpha numeric sid
     * 
     * @param regEX
     *            String
     * @return boolean
     */
    @Override
    public boolean isValidSIDAlpha(String regEx) {
        boolean issidalpha = false;
        if (Character.isLetter(regEx.charAt(0))) {
            final Pattern p = Pattern.compile("[a-zA-Z\\d]+?");
            // Match the given string with the pattern
            final Matcher m = p.matcher(regEx);
            // check whether match is found
            issidalpha = m.matches();
        }

        return issidalpha;
    }

    /**
     * for validate numeric sid
     * 
     * @param sid
     *            String
     * @return boolean
     */
    @Override
    public boolean isValidSIDNumeric(String sid) {

        boolean flag = false;
        final String sidstr = sid.substring(0, 3);
        // commented by rahul as not required to check country code prefix
        // String code=Constants.getProperty("COUNTRY_CODE")
        // if(sidstr.equals(code))
        {
            for (int i = 0; i < sid.length(); i++) {
                if (!(Character.isDigit(sid.charAt(i)))) {
                    return flag;
                }
            }
            flag = true;
        }
        return flag;
    }

    /**
     * for generation alpha numeric sid
     * 
     * @param chars
     *            String
     * @param sidLength
     *            int
     * @param staringAlphabet
     *            String
     * @return String
     */
    public String generateAlphaNumericSID(String p_chars, int p_sidLength, String p_startingAlphabet) {
        final SecureRandom m_generator = new SecureRandom();
        final char[] availableChars = p_chars.toCharArray();
        final int availableCharsLength = availableChars.length;
        final StringBuffer sid = new StringBuffer(p_sidLength);
        final StringBuffer temp = new StringBuffer(p_sidLength - 1);
        int pos = 0;
        for (int i = 0; i < p_sidLength - 1; i++) {
            pos = BTSLUtil.parseDoubleToInt((m_generator.nextDouble() * availableCharsLength));
            temp.append(availableChars[pos]);
        }
        sid.append(leftPad(String.valueOf(temp), p_sidLength, p_startingAlphabet));
        return String.valueOf(sid);
    }

    public long rangeSid(int p_rang) {
        final int len = p_rang - 1;
        String str = "9";
        for (int a = 0; a < len; a++) {
            str = str + '9';
        }
        final long rang = Long.parseLong(str.trim());

        return rang;
    }

    /*
     * added by jasmine kaur
     */
    public long rand(long p_low, long p_high) {

        final long n = p_high - p_low + 1;
        long i = rn.nextLong() % n;
        if (i < 0) {
            i = -i;
        }
        return p_low + i;
    }

    /**
     * for generating Ramdom sid (numeric or alpha numeric )
     * 
     * @return String
     * @throws BTSLBaseException
     */
    @Override
    public String generateRandomSID() throws BTSLBaseException {
        String sid = null;
        long sidLong = 0;
        long minrang = 0;
        long maxrang = 0;
        final String obj = "generateRandomSID";
        try {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, " Entered str");
            }
            String prvtRcMsisdnPrefixList = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.PRVT_RC_MSISDN_PREFIX_LIST);
            Integer minSidLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_SID_LENGTH);
            Integer maxSidLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_SID_LENGTH);
            Boolean isSidNumeric = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.SID_ISNUMERIC);
            
            int min = (int)minSidLength;
            int max = (int)maxSidLength;
            if (isSidNumeric) {
                // String code = Constants.getProperty("COUNTRY_CODE")
                final String code = (prvtRcMsisdnPrefixList.split(","))[0];// rahuld
                final int len = code.length();
                max = max - len;

                maxrang = rangeSid(max);

                if (len < min) {
                    minrang = 1;
                } else {
                    if (min == len) {
                        min = 0;
                    } else {
                        throw new BTSLBaseException("OperatorUtil", "SID generation is imposible, Minimum SID length must be lessthen 10.");
                    }
                }

                sidLong = rand(minrang, maxrang);
                sid = new Long(sidLong).toString();
                sid = code.concat(sid);

                if (sid.length() < min) {
                    for (int a = 0; a < min - sid.length(); a++) {
                        sid = sid + '0';
                    }
                }
            }

            else {
                final SecureRandom m_generator = new SecureRandom();

                final int randomSidLen = BTSLUtil.parseDoubleToInt( (m_generator.nextDouble() * (max - min + 1)) ) + min;
                final String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
                final int character = BTSLUtil.parseDoubleToInt((m_generator.nextDouble() * 52));
                final String startingAlphabet = alphabet.substring(character, character + 1);
                final String DIGITS = "0123456789";
                final String LOCASE_CHARACTERS = "abcdefghijklmnopqrstuvwxyz";
                final String UPCASE_CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                final String VALID_CHARACTERS = LOCASE_CHARACTERS + UPCASE_CHARACTERS + DIGITS;
                sid = generateAlphaNumericSID(VALID_CHARACTERS, randomSidLen, startingAlphabet);
            }

        } catch (BTSLBaseException be) {
            _log.errorTrace(obj, be);
            _log.error(obj, "BTSLBaseException " + be.getMessage());
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "BTSLUtil[generateRandomSID]", "", "", "",
                "Exception:" + e.getMessage());
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, " Exited ");
            }
        }
        return sid;
    }

    /**
     * for validate SID rules (numeric or alpha numeric )
     * 
     * @param sid
     *            String
     * @throws BTSLBaseException
     */
    @Override
    public void validateSIDRules(String sid) throws BTSLBaseException {
    	String prvtRcMsisdnPrefixList = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.PRVT_RC_MSISDN_PREFIX_LIST);
    	Integer minSidLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_SID_LENGTH);
    	Integer maxSidLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_SID_LENGTH);
    	Boolean isSidNumeric = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.SID_ISNUMERIC);
    	
        final int sidLength = sid.length();
        final String lenArr[] = new String[3];
        lenArr[0] = prvtRcMsisdnPrefixList;
        lenArr[1] = String.valueOf((int)minSidLength);
        lenArr[2] = String.valueOf((int)maxSidLength);

        if (_log.isDebugEnabled()) {
            _log.debug(
                "isValidSID",
                "sidLength = " + sidLength + " (int)minSidLength =" + (int)minSidLength + " (int)maxSidLength =" + (int)maxSidLength + " sender entered sid" + sid);
        }

        if ((sidLength < (int)minSidLength || sidLength > (int)maxSidLength)) {
            throw new BTSLBaseException("OperatorUtil", "isValidSID", PretupsErrorCodesI.INVALID_SID_LENGTH, 0, lenArr, null);
        }
        if ((isSidNumeric))

        {
            if (!(isValidSIDNumeric(sid))) {
                throw new BTSLBaseException("OperatorUtil", "isValidSID", PretupsErrorCodesI.SID_IS_NOT_NUMERIC, 0, lenArr, null);
            }

        } else {

            if (!(isValidSIDAlpha(sid))) {
                throw new BTSLBaseException("OperatorUtil", "isValidSID", PretupsErrorCodesI.SID_IS_NOT_ALPHANUMERIC, 0, lenArr, null);
            }
        }
        // added by rahul for SID check acc to network prefix
        boolean isvalidsid = false;
        // String filteredSID=getSystemFilteredMSISDN(sid)
        final String sidprefixes = prvtRcMsisdnPrefixList;// comma
        // seperated
        // field
        // values
        final String[] sidprefix = sidprefixes.split(",");
        for (int i = 0; i < sidprefix.length; i++) {
            if (sid.startsWith(sidprefix[i])) {
                isvalidsid = true;
                break;
            }
        }
        if (!isvalidsid) {
            final String[] arr = { sidprefixes };
            throw new BTSLBaseException("OperatorUtil", "isValidSID", PretupsErrorCodesI.SID_INVALID_PREFIX, 0, arr, null);
        }
    }

    /**
     * Method isValidSidLength. This method to validate SID Length.
     * 
     * @param p_sid
     *            String
     * @return boolean
     * @author anu.garg
     * @see com.btsl.pretups.util.OperatorUtilI#isValidSidLength(String p_sid)
     */
    @Override
    public boolean isValidSidLength(String p_sid) {
        if (_log.isDebugEnabled()) {
            _log.debug("isValidSID", "p_sid = " + p_sid);
        }
        Integer minSidLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_SID_LENGTH);
        Integer maxSidLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_SID_LENGTH);

        final int sidLength = p_sid.length();

        if ((sidLength < (int)minSidLength || sidLength > (int)maxSidLength)) {
            return false;
        }
        if (_log.isDebugEnabled()) {
            _log.debug("isValidSID", "Exited: ");
        }
        return true;
    }

    /**
     * for validating the USSD/SMS message obtained from the user Method
     * getSIDDeletionMessageArray.
     * 
     * @param p_con
     *            Connection
     * @param p_message
     *            String[]
     * @param p_requestVO
     *            RequestVO
     * @param p_tracker
     *            Integer
     * @return Integer
     */
    @Override
    public int getSIDDeletionMessageArray(Connection p_con, String[] p_message, RequestVO p_requestVO) throws Exception {
        // TODO Auto-generated method stub
        // return null
        final String obj = "getSIDDeletionMessageArray";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, " Entered " + p_requestVO);
        }
        Integer minSidLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_SID_LENGTH);
        Integer maxSidLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_SID_LENGTH);

        int tracker = 0;
        final ReceiverVO receiverVO = new ReceiverVO();
        try {
            if (p_message.length == PretupsI.MESSAGE_LENGTH_SID_DELETE) {
                if (!BTSLUtil.isNullString(p_message[1])) {
                    try {
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_requestVO.getRequestIDStr(), p_message[1]);
                    } catch (BTSLBaseException be) {
                        if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_SNDR_INVALID_MSISDN)))) {
                            p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_SNDR_INVALID_MSISDN);
                        }
                        throw be;
                    }
                    if (BTSLUtil.isNullString(p_message[2])) {
                        p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_DELETE_SID_NULL);
                        throw new BTSLBaseException(this, obj, PretupsErrorCodesI.ERROR_DELETE_SID_NULL, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
                    } else {
                        try {
                            if (!(BTSLUtil.isNumeric(p_message[2]) || BTSLUtil.isAlphaNumeric(p_message[2]))) {
                                p_requestVO.setMessageCode(PretupsErrorCodesI.SID_INVALID);
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.SID_INVALID);
                            } else if (p_message[2].length() < (int)minSidLength || p_message[2].length() > (int)maxSidLength) {
                                p_requestVO.setMessageCode(PretupsErrorCodesI.SID_LENGTHINVALID);
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.SID_LENGTHINVALID, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
                            } else {
                                p_requestVO.setSid(p_message[2]);
                                tracker = 1;
                            }
                        } catch (BTSLBaseException be) {
                            p_requestVO.setSuccessTxn(false);
                            if (be.isKey()) {
                                if (PretupsErrorCodesI.SID_INVALID.equals(be.getMessageKey())) {
                                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.SID_INVALID);
                                } else if (PretupsErrorCodesI.SID_LENGTHINVALID.equals(be.getMessageKey())) {
                                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.SID_LENGTHINVALID);
                                } else {
                                    throw be;
                                }
                            }
                        }
                    }
                }

                else {
                    p_requestVO.setMessageCode(PretupsErrorCodesI.MSISDN_NULL);
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.MSISDN_NULL, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
                }

            } else if ((PretupsI.GATEWAY_TYPE_SMSC.equalsIgnoreCase(p_requestVO.getRequestGatewayType())) && (p_message.length == PretupsI.MESSAGE_LENGTH_SID_DELETESMS)) {
                try {
                    if (!(BTSLUtil.isNumeric(p_message[1]) || BTSLUtil.isAlphaNumeric(p_message[1]))) {
                        p_requestVO.setMessageCode(PretupsErrorCodesI.SID_INVALID);
                        throw new BTSLBaseException(this, obj, PretupsErrorCodesI.SID_INVALID);
                    } else if (p_message[1].length() < (int)minSidLength || p_message[1].length() > (int)maxSidLength) {
                        p_requestVO.setMessageCode(PretupsErrorCodesI.SID_LENGTHINVALID);
                        throw new BTSLBaseException(this, obj, PretupsErrorCodesI.SID_LENGTHINVALID, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
                    } else {
                        p_requestVO.setSid(p_message[1]);
                        tracker = 1;
                    }
                } catch (BTSLBaseException be) {
                    p_requestVO.setSuccessTxn(false);
                    if (be.isKey()) {
                        if (PretupsErrorCodesI.SID_INVALID.equals(be.getMessageKey())) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.SID_INVALID);
                        } else if (PretupsErrorCodesI.SID_LENGTHINVALID.equals(be.getMessageKey())) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.SID_LENGTHINVALID);
                        } else {
                            throw be;
                        }
                    }
                }
            } else {
                p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_DELETE_SID_INVALID_MESSAGE_FORMAT);
                throw new BTSLBaseException("XMLStringParser", "parseDeleteSIDRequest", PretupsErrorCodesI.ERROR_DELETE_SID_INVALID_MESSAGE_FORMAT, 0,
                    new String[] { p_requestVO.getActualMessageFormat() }, null);
            }

        } catch (BTSLBaseException be) {
            p_requestVO.setSuccessTxn(false);
            try {
                if (p_con != null) {
                    p_con.rollback();
                }
            } catch (Exception e) {
                _log.errorTrace(obj, e);
            }
            _log.errorTrace(obj, be);
            if (be.isKey()) {
                p_requestVO.setMessageCode(be.getMessageKey());
                p_requestVO.setMessageArguments(be.getArgs());
            }
            p_requestVO.setSuccessTxn(false);
        } catch (Exception e) {
            p_requestVO.setSuccessTxn(false);
            try {
                if (p_con != null) {
                    p_con.rollback();
                }
            } catch (Exception ee) {
                _log.errorTrace(obj, ee);
            }
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[getSIDDeletionMessageArray]", "", "", "",
                "Exception:" + e.getMessage());
            p_requestVO.setMessageCode(PretupsErrorCodesI.REQ_NOT_PROCESS);
            p_requestVO.setSuccessTxn(false);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "Exiting for status=" + tracker);
            }
        }// end of finally
        return tracker;

    }

    /**
     * for validating the USSD/SMS message obtained from the user Method
     * getSIDDeletionMessageArray.
     * 
     * @param p_con
     *            Connection
     * @param p_message
     *            String[]
     * @param p_requestVO
     *            RequestVO
     * @param p_tracker
     *            Integer
     * @return Integer
     */
    @Override
    public int getSIDEnquiryMessageArray(Connection p_con, String[] p_message, RequestVO p_requestVO) throws Exception {
        final String obj = "getSIDEnquiryMessageArray";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, " Entered " + p_requestVO);
        }
        final ReceiverVO receiverVO = new ReceiverVO();
        int tracker = 0;
        try {
            final String messageArr[] = p_requestVO.getRequestMessageArray();
            if ((messageArr.length == PretupsI.MESSAGE_LENGTH_SID_ENQUIRY)) {
                if (!BTSLUtil.isNullString(messageArr[1])) {
                    try {
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_requestVO.getRequestIDStr(), messageArr[1]);
                    } catch (BTSLBaseException be) {
                        if (be.isKey() && (be.getMessageKey().equals(PretupsErrorCodesI.ERROR_SNDR_INVALID_MSISDN))) {
                            p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_SNDR_INVALID_MSISDN);

                        }
                        throw be;
                    }
                    if ((receiverVO.getMsisdn() != null) && (receiverVO.getNetworkCode() != null) && (receiverVO.getSubscriberType() != null)) {
                        tracker = 1;
                    }
                } else {
                    p_requestVO.setMessageCode(PretupsErrorCodesI.MSISDN_NULL);
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.MSISDN_NULL, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
                }
            } else if ((PretupsI.GATEWAY_TYPE_SMSC.equalsIgnoreCase(p_requestVO.getRequestGatewayType())) && (messageArr.length == PretupsI.MESSAGE_LENGTH_SID_ENQUIRYSMS)) {
                tracker = 1;
            } else {
                p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_DELETE_SID_INVALID_MESSAGE_FORMAT);
                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.ERROR_DELETE_SID_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() },
                    null);
            }

        } catch (BTSLBaseException be) {
            p_requestVO.setSuccessTxn(false);
            try {
                if (p_con != null) {
                    p_con.rollback();
                }
            } catch (Exception e) {
                _log.errorTrace(obj, e);
            }
            _log.errorTrace(obj, be);
            if (be.isKey()) {
                p_requestVO.setMessageCode(be.getMessageKey());
                p_requestVO.setMessageArguments(be.getArgs());
            }
            p_requestVO.setSuccessTxn(false);
        } catch (Exception e) {
            p_requestVO.setSuccessTxn(false);
            try {
                if (p_con != null) {
                    p_con.rollback();
                }
            } catch (Exception ee) {
                _log.errorTrace(obj, ee);
            }
            _log.error(obj, "BTSLBaseException " + e.getMessage());
            _log.errorTrace(obj, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.REQ_NOT_PROCESS);
            p_requestVO.setSuccessTxn(false);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "Exiting for status=" + tracker);
            }
        }// end of finally
        return tracker;
    }

    /**
     * Method validateCRBTRegistrationRequest
     * 
     * @param p_con
     *            Connection
     * @param p_c2sTransferVO
     *            C2STransferVO
     * @param p_requestVO
     *            RequestVO
     */
    @Override
    public void validateCRBTRegistrationRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateCRBTRegistrationRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            // String [] strArr=null
            // double requestAmt=0
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
                case 4:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;

                    }

                case 5:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }

                case 6:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }

                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);

            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validateCRBTRegistrationRequest]", "",
                "", "", "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }

    }

    /**
     * Method validateCRBTRegistrationRequest
     * 
     * @param p_con
     *            Connection
     * @param p_c2sTransferVO
     *            C2STransferVO
     * @param p_requestVO
     *            RequestVO
     */

    @Override
    public void validateCRBTSongSelectionRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateCRBTRegistrationRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            String requestSongCode = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
                case 5:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        requestSongCode = p_requestArr[4];
                        // Validation for song code if required then we add it
                        // here
                        p_requestVO.setSongCode(requestSongCode);
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;

                    }

                case 6:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, "validateCRBTSongSelectionRequest", PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        requestSongCode = p_requestArr[5];
                        // Validation for song code if required then we add it
                        // here
                        p_requestVO.setSongCode(requestSongCode);
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }

                case 7:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }

                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, "validateCRBTSongSelectionRequest", PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        requestSongCode = p_requestArr[6];
                        // Validation for song code if required then we add it
                        // here
                        p_requestVO.setSongCode(requestSongCode);
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, "validateCRBTSongSelectionRequest", PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO
                        .getActualMessageFormat() }, null);

            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validateCRBTSongSelectionRequest]", "",
                "", "", "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, "validateCRBTSongSelectionRequest", PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
        }
        if (_log.isDebugEnabled()) {
            _log.debug("validateCRBTSongSelectionRequest", "Exiting ");
        }

    }

    /**
     * Method formatCRBTRegistrationTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatCRBTRegistrationTransferID(TransferVO,
     *      long)
     */

    @Override
    public String formatCRBTRegistrationTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatCRBTRegistrationTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), CRBT_REG__TRANSFER_ID_PAD_LENGTH);
            returnStr = "T" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;

    }

    /**
     * Method formatCRBTRegistrationTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatCRBTRegistrationTransferID(TransferVO,
     *      long)
     */

    @Override
    public String formatCRBTSongSelectionTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatCRBTSongSelectionTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), CRBT_REG__TRANSFER_ID_PAD_LENGTH);
            returnStr = "S" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;

    }

    /**
     * Method formatMultP2PTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatP2PTransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatMultP2PTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatMultP2PTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), P2P_TRANSFER_ID_PAD_LENGTH);
            returnStr = "M" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatMultP2PTransferID]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatO2CBatchMasterTxnID. This method generate the batch ID for
     * the O2C batch master transfer.
     * 
     * @param p_batchMasterVO
     *            FOCBatchMasterVO
     * @param p_tempTransferID
     *            long
     * @return String
     * 
     * @see com.btsl.pretups.util.OperatorUtilI#formatFOCBatchMasterTxnID(FOCBatchMasterVO,
     *      long)
     */
    @Override
    public String formatO2CBatchMasterTxnID(FOCBatchMasterVO p_batchMasterVO, long p_tempTransferID) {
        final String methodName = "formatO2CBatchMasterTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), O2C_BATCH_MASTER_ID_PAD_LENGTH);
            returnStr = p_batchMasterVO.getNetworkCode()+PretupsI.O2C_BATCH_TRANSACTION_ID + currentDateTimeFormatString(p_batchMasterVO.getCreatedOn()) + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatO2CBatchMasterTxnID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * 
     */
    @Override
    public String DES3Encryption(String p_message, RequestVO p_requestvo) throws BTSLBaseException, Exception {
        if (_log.isDebugEnabled()) {
            _log.debug("DES3Encryption", "Entered p_message=" + p_message);
        }
        p_requestvo.setPrivateRechBinMsgAllowed(false);
        if (_log.isDebugEnabled()) {
            _log.debug("DES3Encryption", "Exiting p_message=" + p_message);
        }
        return p_message;
    }

    /**
     * Method checkSOSMessageFormat.
     * 
     * @param p_con
     *            Connection
     * @param p_transferVO
     *            TransferVO
     * @param p_requestVO
     *            RequestVO
     * @return void
     * @see com.btsl.pretups.util.OperatorUtilI#checkSOSMessageFormat(Connection,RequestVO,TransferVO)
     */
    @Override
    public void checkSOSMessageFormat(Connection p_con, RequestVO p_requestVO, TransferVO p_transferVO) throws BTSLBaseException, Exception {
        final String[] requestMessageArray = p_requestVO.getRequestMessageArray();
        if (_log.isDebugEnabled()) {
            _log.debug("checkSOSMessageFormat", " requestMessageArray length:" + requestMessageArray);
        }

        if (requestMessageArray.length > 2) {
            throw new BTSLBaseException(this, "checkSOSMessageFormat", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() },
                null);
        }
        String lmbAmount;
        final String serviceKeyword = requestMessageArray[0];
        final String senderSubscriberType = ((SenderVO) p_transferVO.getSenderVO()).getSubscriberType();
        final StringBuffer incomingSmsStr = new StringBuffer(serviceKeyword + " ");
        final int messageLength = requestMessageArray.length;
        long sosRechargeAmount = (Long) PreferenceCache.getSystemPreferenceValue(PreferenceI.SOS_RECHARGE_AMOUNT);
        String paymentMethodType = null;
        switch (messageLength) {
            case 1:
                {
                    paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
                    if (paymentMethodType == null) {
                        // return with error message, no default payment method
                        // defined
                        throw new BTSLBaseException(this, "checkSOSMessageFormat", PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
                    }
                    p_transferVO.setPaymentMethodType(paymentMethodType);
                    incomingSmsStr.append(paymentMethodType + " ");
                    lmbAmount = Long.toString(sosRechargeAmount);
                    p_transferVO.setRequestedAmount(Long.parseLong(lmbAmount));
                    // checkAfterPaymentMethod(p_con,1,requestMessageArray,incomingSmsStr,p_transferVO)
                    break;
                }
            case 2:
                {
                    paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
                    if (paymentMethodType == null) {
                        // return with error message, no default payment method
                        // defined
                        throw new BTSLBaseException(this, "checkSOSMessageFormat", PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
                    }
                    p_transferVO.setPaymentMethodType(paymentMethodType);
                    incomingSmsStr.append(paymentMethodType + " ");
                    // checkAfterPaymentMethod(p_con,1,requestMessageArray,incomingSmsStr,p_transferVO)
                    final String amount = requestMessageArray[1];
                    if (!BTSLUtil.isNumeric(amount)) {
                        throw new BTSLBaseException(this, "checkSOSMessageFormat", PretupsErrorCodesI.LMB_AMOUNT_NOT_NUMERIC);
                    }
                    lmbAmount = Long.toString(PretupsBL.getSystemAmount(requestMessageArray[1]));
                    p_transferVO.setRequestedAmount(Long.parseLong(lmbAmount));
                    break;
                }
        }
        p_transferVO.setIncomingSmsStr(incomingSmsStr.toString());
    }

    /**
     * Method formatSOSTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatSOSTransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatSOSTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatSOSTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), P2P_TRANSFER_ID_PAD_LENGTH);
            returnStr = "E" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + currentTimeFormatString(p_transferVO.getCreatedOn()) + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            if (!BTSLUtil.isNullString(p_transferVO.getReceiverNetworkCode())) {
                returnStr = p_transferVO.getReceiverNetworkCode() + returnStr;
            }
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatSOSTransferID]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    @Override
    public MCDListVO validateMCDListAMDRequest(Connection p_con, String[] p_requestArr, RequestVO p_requestVO) throws BTSLBaseException {

        final MCDListVO mcdListVO = new MCDListVO();
        String actualPin = null;
        SenderVO sendorVO = null;
        final String obj = "validateMCDListAMDRequest";
        try {

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            sendorVO = (SenderVO) p_requestVO.getSenderVO();
            actualPin = sendorVO.getPin();
            switch (messageLen) {
                case 8:
                    {

                        mcdListVO.setMsisdn(p_requestArr[1]);

                        mcdListVO.setSelector1(p_requestArr[3]);

                        mcdListVO.setAmount1String(p_requestArr[4]);

                        mcdListVO.setSelector2(p_requestArr[5]);

                        mcdListVO.setAmount2String(p_requestArr[6]);

                        mcdListVO.setAction(p_requestArr[7]);
                        break;
                    }
                case 6:
                    {

                        mcdListVO.setMsisdn(p_requestArr[1]);

                        mcdListVO.setSelector1(p_requestArr[3]);
                        mcdListVO.setAmount1String(p_requestArr[4]);
                        mcdListVO.setAction(p_requestArr[5]);
                        break;

                    }

                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.P2P_MULT_CDT_LIST_AMD_INVALID_MSGFT);

            }

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validateMCDListAMDRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        } finally {

            if (_log.isDebugEnabled()) {
                _log.debug(obj, "Exiting ");
            }

        }

        return mcdListVO;
    }

    @Override
    public String formatMCDLP2PTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatMCDLP2PTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), P2P_TRANSFER_ID_PAD_LENGTH);
            returnStr = "L" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatMultP2PTransferID]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    @Override
    public void handleMCDTransferMessageFormat(Connection p_con, RequestVO p_requestVO, TransferVO p_transferVO) throws BTSLBaseException, Exception {
        if (_log.isDebugEnabled()) {
            _log.debug("handleMCDTransferMessageFormat", "Entered p_requestVO=" + p_requestVO + " p_transferVO=" + p_transferVO);// requestMessageArray
            // length:"+requestMessageArray.length)
        }
        try {
            if (!checkMCDIfBuddy(p_con, p_requestVO, p_transferVO)) {
                validateIfNotMCDBuddy(p_con, p_requestVO, p_transferVO);
            }
        } catch (BTSLBaseException be) {
            throw be;
        } catch (Exception e) {
            throw e;
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug("handleTransferMessageFormat", "Exiting :::" + p_transferVO.getIncomingSmsStr());
            }
        }
    }

    public boolean checkMCDIfBuddy(Connection p_con, RequestVO p_requestVO, TransferVO p_transferVO) throws BTSLBaseException, Exception {
        final String[] requestMessageArray = p_requestVO.getRequestMessageArray();
        if (_log.isDebugEnabled()) {
            _log.debug("checkMCDIfBuddy", " requestMessageArray length:" + requestMessageArray.length+", requestMessageArray="+Arrays.toString(requestMessageArray));
        }
        final String serviceKeyword = requestMessageArray[0];
        final String senderSubscriberType = ((SenderVO) p_transferVO.getSenderVO()).getSubscriberType();
        boolean cBuddy = false;
        final StringBuffer incomingSmsStr = new StringBuffer(serviceKeyword + " ");
        if (requestMessageArray.length < 2 || requestMessageArray.length > 7) {
            throw new BTSLBaseException(this, "checkMCDIfBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
        }

        // if receiver buddy
        // Validate 2nd Argument for Payment Method Keyword.
        final String paymentMethodKeyword = requestMessageArray[1];

        // if paymentMethod invalid , Validate 2nd Argument for Receiver
        // No(MSISDN).
        final PaymentMethodKeywordVO paymentMethodKeywordVO = PaymentMethodCache.getObject(paymentMethodKeyword, p_transferVO.getServiceType(), p_transferVO.getNetworkCode());
        String paymentMethodType = null;
        if (paymentMethodKeywordVO == null) {
            paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
            if (paymentMethodType == null) {
                // return with error message, no default payment method defined
                throw new BTSLBaseException(this, "checkMCDIfBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
            }
            p_transferVO.setPaymentMethodType(paymentMethodType);
            p_transferVO.setDefaultPaymentMethod("Y");
            incomingSmsStr.append(paymentMethodType + " ");
            cBuddy = checkAfterPaymentMethodForMCDBuddy(p_con, 1, requestMessageArray, incomingSmsStr, p_transferVO, p_requestVO);
        } else {
            paymentMethodType = paymentMethodKeywordVO.getPaymentMethodType();
            p_transferVO.setPaymentMethodType(paymentMethodType);
            p_transferVO.setPaymentMethodKeywordVO(paymentMethodKeywordVO);
            p_transferVO.setDefaultPaymentMethod(PretupsI.NO);
            incomingSmsStr.append(paymentMethodType + " ");
            // if paymentMethod valid , Validate 3rd Argument for Receiver
            // No(MSISDN).
            if (requestMessageArray.length < 3) {
                throw new BTSLBaseException(this, "checkMCDIfBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() },
                    null);
            }

            cBuddy = checkAfterPaymentMethodForMCDBuddy(p_con, 2, requestMessageArray, incomingSmsStr, p_transferVO, p_requestVO);
        }
        p_transferVO.setIncomingSmsStr(incomingSmsStr.toString());
        if (_log.isDebugEnabled()) {
            _log.debug("checkMCDIfBuddy", " return value:" + cBuddy);
        }
        return cBuddy;
    }

    private boolean checkAfterPaymentMethodForMCDBuddy(Connection p_con, int i, String[] p_requestMessageArray, StringBuffer incomingSmsStr, TransferVO p_transferVO, RequestVO p_requestVO) throws BTSLBaseException, Exception {
        final String METHOD_NAME = "checkAfterPaymentMethodForMCDBuddy";
        if (_log.isDebugEnabled()) {
            _log.debug("checkAfterPaymentMethodForBuddy", " i=" + i + " requestMessageArray length:" + p_requestMessageArray.length + " i=" + i+", p_requestMessageArray="+Arrays.toString(p_requestMessageArray));
        }
        int incReq = 0;
        if (i == 2) {
            incReq = 1;
        }
        final String receiverMSISDN_NAME = p_requestMessageArray[1 + incReq];
        final BuddyVO buddyVO = new P2PBuddiesDAO().loadBuddyDetails(p_con, ((SenderVO) p_transferVO.getSenderVO()).getUserID(), receiverMSISDN_NAME);
        if (buddyVO == null) {
            return false;
        }
        final String receiverMSISDN = buddyVO.getMsisdn();
        final NetworkPrefixVO networkPrefixVO = PretupsBL.getNetworkDetails(receiverMSISDN, PretupsI.USER_TYPE_RECEIVER);
        if (networkPrefixVO == null) {
            throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_RECEIVERNETWORK, 0, new String[] { receiverMSISDN },
                null);
        }
        Boolean isCP2PPinValidationRequired = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CP2P_PIN_VALIDATION_REQUIRED);
        String p2pDefaultSmsPin = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_DEFAULT_SMSPIN);
        
        buddyVO.setNetworkCode(networkPrefixVO.getNetworkCode());
        buddyVO.setPrefixID(networkPrefixVO.getPrefixID());
        buddyVO.setSubscriberType(networkPrefixVO.getSeriesType());
        p_transferVO.setReceiverVO(buddyVO);
        incomingSmsStr.append(receiverMSISDN_NAME + " ");
        final int messageLength = p_requestMessageArray.length;
        String pin = null;
        long amount = 0;
        final SenderVO senderVO = (SenderVO) p_transferVO.getSenderVO();
        final String actualPin = BTSLUtil.decryptText(senderVO.getPin());

        /*
         * Message format that are supported are as: Message length 2: PRC Name
         * If pin required the PIN should be default Amount will always be
         * default Message length 3: PIN required and pin is not default PRC
         * Name PIN (PIN required and actual pin=default pin) OR PIN not
         * required PRC HDFC Name PRC Name Amount Message length 4: PIN Required
         * actual pin!=default pin PRC Name Amount PIN PRC HDFC NAme PIN
         * actual=default PRC HDFC Name Amount PRC Name Amount langCode PIN not
         * required PRC HDFC name Amount PRC Name Amount langCode Message length
         * 5: PIN Required actual!=default PRC HDFC Name Amount PIN PRC Name
         * Amount langCode PIN Actual=default PRC HDFC Name Amount langCode PRC
         * Name Amount selector lang PIN not required PRC HDFC Name Amount
         * LangCode PRC Name Amount selector LangCode Message length 6: PIN
         * Required Actual!=default PRC HDFC Name Amount langCode PIN PRC Name
         * Amount selector langCode PIN Actual=default PRC HDFC Name Amount
         * selector langCode PRC Name Amount selector langCode PIN(Update with
         * new PIN) PIN not required PRC HDFC Name Amount selector langCode PRC
         * Name Amount Selector langCode PIN( Update with new PIN) Message
         * length 7: PIN Required Actual!=default PRC HDFC Name Amount selector
         * langCode PIN Actual=default PRC HDFC Name Amount selector langCode
         * PIN(Update with new PIN) PIN not required PRC HDFC Name Amount
         * selector langCode PIN (Update with new PIN)
         */
        switch (messageLength) {
            case 2:
                {
                    if (((Boolean) PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED, networkPrefixVO.getNetworkCode())).booleanValue()) {
                        // whether PIN validation is required or not.
                        if (isCP2PPinValidationRequired) {
                            if (!actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0,
                                    new String[] { p_requestVO.getActualMessageFormat() }, null);
                            }
                        }
                    }
                    amount = buddyVO.getPreferredAmount();
                    if (amount < 0) {
                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                    }
                    p_transferVO.setTransferValue(amount);
                    p_transferVO.setRequestedAmount(amount);
                    incomingSmsStr.append(amount + " ");
                    break;
                }
            case 3:
                {
                    // if((((Boolean)PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED,networkPrefixVO.getNetworkCode())).booleanValue())&&!actualPin.equalsIgnoreCase(p2pDefaultSmsPin))
                    if ((isCP2PPinValidationRequired) && ((((Boolean) PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED,
                        networkPrefixVO.getNetworkCode())).booleanValue()) && !actualPin.equalsIgnoreCase(p2pDefaultSmsPin))) {
                        if (i == 2) {
                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0,
                                new String[] { p_requestVO.getActualMessageFormat() }, null);
                        } else {
                            pin = p_requestMessageArray[2];
                            incomingSmsStr.append("****" + " ");
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                            amount = buddyVO.getPreferredAmount();
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                            p_transferVO.setTransferValue(amount);
                            p_transferVO.setRequestedAmount(amount);
                            incomingSmsStr.append(amount + " ");
                        }
                    } else {
                        if (i == 2) {
                            amount = buddyVO.getPreferredAmount();
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                        } else {
                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                        }
                        p_transferVO.setTransferValue(amount);
                        p_transferVO.setRequestedAmount(amount);
                        incomingSmsStr.append(amount + " ");
                    }
                    break;
                }
            case 4:
                {
                    if (((Boolean) PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED, networkPrefixVO.getNetworkCode())).booleanValue()) {
                        // if(!actualPin.equalsIgnoreCase(p2pDefaultSmsPin))
                        if ((isCP2PPinValidationRequired) && !(actualPin.equalsIgnoreCase(p2pDefaultSmsPin))) {
                            pin = p_requestMessageArray[3];
                            incomingSmsStr.append("****" + " ");
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                            if (i == 2) {
                                amount = buddyVO.getPreferredAmount();
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                            } else {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }

                            }
                        } else {
                            if (i == 2) {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                            } else {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[3]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[3]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                            }
                        }
                        p_transferVO.setTransferValue(amount);
                        p_transferVO.setRequestedAmount(amount);
                        incomingSmsStr.append(amount + " ");
                    } else {
                        if (i == 2) {
                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                        } else {
                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                            try {
                                if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                    final int localeValue = Integer.parseInt(p_requestMessageArray[3]);
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[3]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    }
                                }
                            } catch (Exception e) {
                                _log.errorTrace(METHOD_NAME, e);
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                            }
                        }
                        p_transferVO.setTransferValue(amount);
                        p_transferVO.setRequestedAmount(amount);
                        incomingSmsStr.append(amount + " ");
                    }
                    break;
                }
            case 5:
                {
                    if (((Boolean) PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED, networkPrefixVO.getNetworkCode())).booleanValue()) {
                        // if(!actualPin.equalsIgnoreCase(p2pDefaultSmsPin))
                        if ((isCP2PPinValidationRequired) && !(actualPin.equalsIgnoreCase(p2pDefaultSmsPin))) {
                            pin = p_requestMessageArray[4];
                            incomingSmsStr.append("****" + " ");
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                            if (i == 2) {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                            } else {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[3]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[3]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                            }
                            p_transferVO.setTransferValue(amount);
                            p_transferVO.setRequestedAmount(amount);
                            incomingSmsStr.append(amount + " ");
                        } else {
                            if (i == 2) {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                }
                            } else {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }

                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                }
                                if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                    final int selectorValue = Integer.parseInt(p_requestMessageArray[3]);
                                    p_requestVO.setReqSelector(Integer.toString(selectorValue));
                                }
                            }
                            p_transferVO.setTransferValue(amount);
                            p_transferVO.setRequestedAmount(amount);
                            incomingSmsStr.append(amount + " ");
                        }
                    } else {
                        if (i == 2) {
                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                            try {
                                if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                    final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    }
                                }
                            } catch (Exception e) {
                                _log.errorTrace(METHOD_NAME, e);
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                            }
                        } else {
                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                            try {
                                if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                    final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    }
                                }
                            } catch (Exception e) {
                                _log.errorTrace(METHOD_NAME, e);
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                            }
                            if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                final int selectorValue = Integer.parseInt(p_requestMessageArray[3]);
                                p_requestVO.setReqSelector(Integer.toString(selectorValue));
                            }
                        }
                        p_transferVO.setTransferValue(amount);
                        p_transferVO.setRequestedAmount(amount);
                        incomingSmsStr.append(amount + " ");
                    }
                    break;
                }
            case 6:
                {
                    if (((Boolean) PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED, networkPrefixVO.getNetworkCode())).booleanValue()) {
                        // if(!actualPin.equalsIgnoreCase(p2pDefaultSmsPin))
                        if ((isCP2PPinValidationRequired) && !(actualPin.equalsIgnoreCase(p2pDefaultSmsPin))) {
                            pin = p_requestMessageArray[5];
                            incomingSmsStr.append("****" + " ");
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                            if (i == 2) {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                            } else {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }

                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                                if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                    final int selectorValue = Integer.parseInt(p_requestMessageArray[3]);
                                    p_requestVO.setReqSelector(Integer.toString(selectorValue));
                                }
                            }
                        } else {
                            if (i == 2) {
                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }

                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[5])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[5]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[5]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                                if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                    final int selectorValue = Integer.parseInt(p_requestMessageArray[4]);
                                    p_requestVO.setReqSelector(Integer.toString(selectorValue));
                                }
                            } else {
                                pin = p_requestMessageArray[5];
                                incomingSmsStr.append("****" + " ");
                                validatePIN(pin);
                                senderVO.setPin(BTSLUtil.encryptText(pin));
                                senderVO.setPinUpdateReqd(true);

                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }

                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                                if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                    final int selectorValue = Integer.parseInt(p_requestMessageArray[3]);
                                    p_requestVO.setReqSelector(Integer.toString(selectorValue));
                                }
                            }
                        }
                        p_transferVO.setTransferValue(amount);
                        p_transferVO.setRequestedAmount(amount);
                        incomingSmsStr.append(amount + " ");
                    } else {
                        if (i == 2) {
                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }

                            try {
                                if (!BTSLUtil.isNullString(p_requestMessageArray[5])) {
                                    final int localeValue = Integer.parseInt(p_requestMessageArray[5]);
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[5]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    }
                                }
                            } catch (Exception e) {
                                _log.errorTrace(METHOD_NAME, e);
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                            }
                            if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                final int selectorValue = Integer.parseInt(p_requestMessageArray[4]);
                                p_requestVO.setReqSelector(Integer.toString(selectorValue));
                            }
                        } else {
                            // To check whether PIN validation is required or
                            // not.
                            if (isCP2PPinValidationRequired) {
                                if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                                    pin = p_requestMessageArray[5];
                                    incomingSmsStr.append("****" + " ");
                                    validatePIN(pin);
                                    senderVO.setPin(BTSLUtil.encryptText(pin));
                                    senderVO.setPinUpdateReqd(true);
                                }
                            }

                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[2]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }

                            try {
                                if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                    final int localeValue = Integer.parseInt(p_requestMessageArray[4]);
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[4]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    }
                                }
                            } catch (Exception e) {
                                _log.errorTrace(METHOD_NAME, e);
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                            }
                            if (!BTSLUtil.isNullString(p_requestMessageArray[3])) {
                                try {
									final int selectorValue = Integer.parseInt(p_requestMessageArray[3]);
									p_requestVO.setReqSelector(Integer.toString(selectorValue));
								} catch (Exception e) {
									 _log.errorTrace(METHOD_NAME, e);
								}
                            }
                        }
                        p_transferVO.setTransferValue(amount);
                        p_transferVO.setRequestedAmount(amount);
                        incomingSmsStr.append(amount + " ");
                    }
                    break;
                }
            case 7:
                {
                    /*
                     * Actual!=default PRC HDFC Name Amount selector langCode
                     * PIN
                     * Actual=default PRC HDFC Name Amount selector langCode
                     * PIN(Update
                     * with new PIN)
                     */
                    if (i == 1) {
                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO
                            .getActualMessageFormat() }, null);
                    } else {
                        // if(((Boolean)PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED,networkPrefixVO.getNetworkCode())).booleanValue())
                        if ((isCP2PPinValidationRequired) && ((Boolean) PreferenceCache.getNetworkPrefrencesValue(PreferenceI.BUDDY_PIN_REQUIRED,
                            networkPrefixVO.getNetworkCode())).booleanValue()) {
                            if (!actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                                pin = p_requestMessageArray[6];
                                incomingSmsStr.append("****" + " ");
                                try {
                                    SubscriberBL.validatePIN(p_con, senderVO, pin);
                                } catch (BTSLBaseException be) {
                                    if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                        .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                        p_con.commit();
                                    }
                                    throw be;
                                }

                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[5])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[5]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[5]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                                if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                    try {
										final int selectorValue = Integer.parseInt(p_requestMessageArray[4]);
										p_requestVO.setReqSelector(Integer.toString(selectorValue));
									} catch (Exception e) {
										 _log.errorTrace(METHOD_NAME, e);
									}
                                }
                            } else {
                                // To check whether PIN validation is required
                                // or not.
                                if (isCP2PPinValidationRequired) {
                                    pin = p_requestMessageArray[6];
                                    incomingSmsStr.append("****" + " ");
                                    validatePIN(pin);
                                    senderVO.setPin(BTSLUtil.encryptText(pin));
                                    senderVO.setPinUpdateReqd(true);
                                }

                                amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                                if (amount < 0) {
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                                }
                                try {
                                    if (!BTSLUtil.isNullString(p_requestMessageArray[5])) {
                                        final int localeValue = Integer.parseInt(p_requestMessageArray[5]);
                                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[5]));
                                        if (p_requestVO.getReceiverLocale() == null) {
                                            throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                        }
                                    }
                                } catch (Exception e) {
                                    _log.errorTrace(METHOD_NAME, e);
                                    throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                                }
                                if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                    try {
										final int selectorValue = Integer.parseInt(p_requestMessageArray[4]);
										p_requestVO.setReqSelector(Integer.toString(selectorValue));
									} catch (Exception e) {
										 _log.errorTrace(METHOD_NAME, e);
									}
                                }
                            }
                            p_transferVO.setTransferValue(amount);
                            p_transferVO.setRequestedAmount(amount);
                            incomingSmsStr.append(amount + " ");
                        } else {
                            // To check whether PIN validation is required or
                            // not.
                            if (isCP2PPinValidationRequired) {
                                if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                                    pin = p_requestMessageArray[6];
                                    incomingSmsStr.append("****" + " ");
                                    validatePIN(pin);
                                    senderVO.setPin(BTSLUtil.encryptText(pin));
                                    senderVO.setPinUpdateReqd(true);
                                }
                            }

                            amount = PretupsBL.getSystemAmount(p_requestMessageArray[3]);
                            if (amount < 0) {
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
                            }
                            try {
                                if (!BTSLUtil.isNullString(p_requestMessageArray[5])) {
                                    final int localeValue = Integer.parseInt(p_requestMessageArray[5]);
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestMessageArray[5]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    }
                                }
                            } catch (Exception e) {
                                _log.errorTrace(METHOD_NAME, e);
                                throw new BTSLBaseException(this, "checkAfterPaymentMethodForMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                            }
                            if (!BTSLUtil.isNullString(p_requestMessageArray[4])) {
                                try {
									final int selectorValue = Integer.parseInt(p_requestMessageArray[4]);
									p_requestVO.setReqSelector(Integer.toString(selectorValue));
								} catch (Exception e) {
									 _log.errorTrace(METHOD_NAME, e);
								}
                            }

                            p_transferVO.setTransferValue(amount);
                            p_transferVO.setRequestedAmount(amount);
                            incomingSmsStr.append(amount + " ");
                        }
                        break;
                    }
                }
            default:
                {
                    throw new BTSLBaseException(this, "checkIfBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() },
                        null);
                }

        }
        return true;
    }

    private void validateIfNotMCDBuddy(Connection p_con, RequestVO p_requestVO, TransferVO p_transferVO) throws BTSLBaseException, Exception {
        final String METHOD_NAME = "validateIfNotMCDBuddy";
        final String[] requestMessageArray = p_requestVO.getRequestMessageArray();
        if (_log.isDebugEnabled()) {
            _log.debug("validateIfNotMCDBuddy", " requestMessageArray length:" + requestMessageArray);
        }
        if (requestMessageArray.length < 3 || requestMessageArray.length > 7) {
            throw new BTSLBaseException(this, "validateIfNotBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() },
                null);
        }
        
        Boolean isCP2PPinValidationRequired = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CP2P_PIN_VALIDATION_REQUIRED);
        String p2pDefaultSmsPin = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_DEFAULT_SMSPIN);
        String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
        String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

        final String serviceKeyword = requestMessageArray[0];
        final String senderSubscriberType = ((SenderVO) p_transferVO.getSenderVO()).getSubscriberType();
        final StringBuffer incomingSmsStr = new StringBuffer(serviceKeyword + " ");
        final int messageLength = requestMessageArray.length;
        final SenderVO senderVO = (SenderVO) p_transferVO.getSenderVO();
        // if pin Invalid return with error(PIN is Mandatory)
        final String actualPin = BTSLUtil.decryptText(senderVO.getPin());
        if (_log.isDebugEnabled()) {
            _log.debug("validateIfNotMCDBuddy", " actualPin:" + actualPin);
        }

        String paymentMethodType = null;
        String pin = null;
        String paymentMethodKeyword = null;
        switch (messageLength) {
            case 3:
                {
                    // whether PIN validation is required or not.
                    if (isCP2PPinValidationRequired) {
                        if (!actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                            throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT, 0, new String[] { p_requestVO
                                .getActualMessageFormat() }, null);
                        }
                    }
                    paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
                    if (paymentMethodType == null) {
                        // return with error message, no default payment method
                        // defined
                        throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
                    }
                    p_transferVO.setPaymentMethodType(paymentMethodType);
                    incomingSmsStr.append(paymentMethodType + " ");
                    checkMCDAfterPaymentMethod(p_con, 1, requestMessageArray, incomingSmsStr, p_transferVO);
                    break;
                }
            case 4:
                {
                    // Validate 2nd Argument for PIN.
                    pin = requestMessageArray[3];

                    incomingSmsStr.append("****" + " ");
                    // if(actualPin.equalsIgnoreCase(PretupsI.DEFAULT_P2P_PIN))
                    // whether PIN validation is required or not.
                    if (isCP2PPinValidationRequired) {
                        if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                            if (!BTSLUtil.isNullString(requestMessageArray[3])) {
                                if (BTSLUtil.isNumeric(requestMessageArray[3]) && requestMessageArray[3].length() == 1) {
                                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(requestMessageArray[3]));
                                    if (p_requestVO.getReceiverLocale() == null) {
                                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                                    }
                                } else {
                                    if (!BTSLUtil.isNullString(pin) && !pin.equals(p2pDefaultSmsPin)) {
                                        validatePIN(pin);
                                        senderVO.setPin(BTSLUtil.encryptText(pin));
                                        senderVO.setPinUpdateReqd(true);
                                        senderVO.setActivateStatusReqd(true);
                                    }

                                }

                            }
                        } else {
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                    }

                    paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
                    if (paymentMethodType == null) {
                        // return with error message, no default payment method
                        // defined
                        throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
                    }
                    p_transferVO.setPaymentMethodType(paymentMethodType);
                    incomingSmsStr.append(paymentMethodType + " ");
                    checkMCDAfterPaymentMethod(p_con, 1, requestMessageArray, incomingSmsStr, p_transferVO);
                    break;
                }
            case 5:
                {

                    // Validate 2nd Argument for PIN.
                    pin = requestMessageArray[4];
                    incomingSmsStr.append("****" + " ");
                    // if pin Invalid return with error(PIN is Mandatory)
                    // if(actualPin.equalsIgnoreCase(PretupsI.DEFAULT_P2P_PIN))
                    // whether PIN validation is required or not.
                    if (isCP2PPinValidationRequired) {
                        if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                            // if(!pin.equals(PretupsI.DEFAULT_P2P_PIN))
                            if (!BTSLUtil.isNullString(pin) && !pin.equals(p2pDefaultSmsPin)) {
                                validatePIN(pin);
                                senderVO.setPin(BTSLUtil.encryptText(pin));
                                senderVO.setPinUpdateReqd(true);
                                senderVO.setActivateStatusReqd(true);
                            }
                        } else {
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                    }

                    // if PIN valid
                    // Validate next Argument for Payment Method.

                    // killed by sanjay as payemnt method table does not exists
                    PaymentMethodKeywordVO paymentMethodKeywordVO = null;
                    paymentMethodKeyword = requestMessageArray[1];
                    // if paymentMethod invalid , Validate next Argument for
                    // Receiver
                    // No(MSISDN).
                    paymentMethodKeywordVO = PaymentMethodCache.getObject(paymentMethodKeyword, p_transferVO.getServiceType(), p_transferVO.getNetworkCode());

                    if (paymentMethodKeywordVO == null) {
                        paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
                        if (paymentMethodType == null) {
                            // return with error message, no default payment
                            // method
                            // defined
                            throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
                        }
                        p_transferVO.setPaymentMethodType(paymentMethodType);
                        p_transferVO.setDefaultPaymentMethod("Y");
                        incomingSmsStr.append(paymentMethodType + " ");
                        checkMCDAfterPaymentMethod(p_con, 1, requestMessageArray, incomingSmsStr, p_transferVO);
                        try {
                            // _requestVO.setReqSelector(""+SystemPreferences.P2P_TRANSFER_DEF_SELECTOR_CODE)
                            if (!BTSLUtil.isNullString(requestMessageArray[3])) {
                                final int localeValue = Integer.parseInt(requestMessageArray[3]);
                                p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(requestMessageArray[3]));
                                if (p_requestVO.getReceiverLocale() == null) {
                                    throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                    // _requestVO.setReceiverLocale(new
                                    // Locale(defaultLanguage,defaultCountry))
                                }

                            }
                        } catch (Exception e) {
                            _log.errorTrace(METHOD_NAME, e);
                            throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                        }
                    } else {
                        paymentMethodType = paymentMethodKeywordVO.getPaymentMethodType();
                        p_transferVO.setPaymentMethodType(paymentMethodType);
                        p_transferVO.setPaymentMethodKeywordVO(paymentMethodKeywordVO);
                        p_transferVO.setDefaultPaymentMethod(PretupsI.NO);
                        incomingSmsStr.append(paymentMethodType + " ");
                        checkMCDAfterPaymentMethod(p_con, 2, requestMessageArray, incomingSmsStr, p_transferVO);
                        // _requestVO.setReqSelector(""+SystemPreferences.P2P_TRANSFER_DEF_SELECTOR_CODE)
                    }

                    break;
                }
            case 6:
                {
                    // Validate 2nd Argument for PIN.
                    pin = requestMessageArray[5];
                    incomingSmsStr.append("****" + " ");
                    // if pin Invalid return with error(PIN is Mandatory)
                    // if(actualPin.equalsIgnoreCase(PretupsI.DEFAULT_P2P_PIN))
                    // whether PIN validation is required or not.
                    if (isCP2PPinValidationRequired) {
                        if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                            // if(!pin.equals(PretupsI.DEFAULT_P2P_PIN))
                            if (!BTSLUtil.isNullString(pin) && !pin.equals(p2pDefaultSmsPin)) {
                                validatePIN(pin);
                                senderVO.setPin(BTSLUtil.encryptText(pin));
                                senderVO.setPinUpdateReqd(true);
                                senderVO.setActivateStatusReqd(true);
                            }
                        } else {
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                    }
                    // if PIN valid as
                    // Validate next Argument for Payment Method.
                    paymentMethodType = ServicePaymentMappingCache.getDefaultPaymentMethod(p_transferVO.getServiceType(), senderSubscriberType);
                    if (paymentMethodType == null) {
                        // return with error message, no default payment method
                        // defined
                        throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_DEFAULTPAYMENTMETHOD);
                    }
                    incomingSmsStr.append(paymentMethodType + " ");

                    p_transferVO.setPaymentMethodType(paymentMethodType);
                    p_transferVO.setDefaultPaymentMethod("Y");

                    // if paymentMethod valid , Validate next Argument for
                    // Receiver
                    // No(MSISDN).
                    checkMCDAfterPaymentMethod(p_con, 1, requestMessageArray, incomingSmsStr, p_transferVO);
                    try {
                        if (!BTSLUtil.isNullString(requestMessageArray[3])) {
                            final int selectorValue = Integer.parseInt(requestMessageArray[3]);
                            p_requestVO.setReqSelector(Integer.toString(selectorValue));
                        }
                    } catch (Exception e) {
                        _log.errorTrace(METHOD_NAME, e);
                        throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_SELECTOR_VALUE,e);
                    }
                    try {
                        if (!BTSLUtil.isNullString(requestMessageArray[4])) {
                            final int localeValue = Integer.parseInt(requestMessageArray[4]);
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(requestMessageArray[4]));
                            if (p_requestVO.getReceiverLocale() == null) {
                                throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                            }
                        }
                    } catch (Exception e) {
                        _log.errorTrace(METHOD_NAME, e);
                        throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                    }
                    break;
                }
            case 7:
                {
                    // Validate 2nd Argument for PIN.
                    pin = requestMessageArray[6];
                    incomingSmsStr.append("****" + " ");
                    // if pin Invalid return with error(PIN is Mandatory)
                    // if(actualPin.equalsIgnoreCase(PretupsI.DEFAULT_P2P_PIN))
                    // whether PIN validation is required or not.
                    if (isCP2PPinValidationRequired) {
                        if (actualPin.equalsIgnoreCase(p2pDefaultSmsPin)) {
                            // if(!pin.equals(PretupsI.DEFAULT_P2P_PIN))
                            if (!BTSLUtil.isNullString(pin) && !pin.equals(p2pDefaultSmsPin)) {
                                validatePIN(pin);
                                senderVO.setPin(BTSLUtil.encryptText(pin));
                                senderVO.setPinUpdateReqd(true);
                                senderVO.setActivateStatusReqd(true);
                            }
                        } else {
                            try {
                                SubscriberBL.validatePIN(p_con, senderVO, pin);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                    }
                    // if PIN valid as
                    // Validate next Argument for Payment Method.

                    PaymentMethodKeywordVO paymentMethodKeywordVO = null;
                    paymentMethodKeyword = requestMessageArray[1];
                    // if paymentMethod invalid , Validate next Argument for
                    // Receiver
                    // No(MSISDN).
                    paymentMethodKeywordVO = PaymentMethodCache.getObject(paymentMethodKeyword, p_transferVO.getServiceType(), p_transferVO.getNetworkCode());

                    if (paymentMethodKeywordVO == null) {
                        throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_NOTFOUND_SERVICEPAYMENTMETHOD);
                    } else {
                        paymentMethodType = paymentMethodKeywordVO.getPaymentMethodType();
                        p_transferVO.setPaymentMethodType(paymentMethodType);
                        p_transferVO.setPaymentMethodKeywordVO(paymentMethodKeywordVO);
                        p_transferVO.setDefaultPaymentMethod(PretupsI.NO);
                        incomingSmsStr.append(paymentMethodType + " ");
                        checkMCDAfterPaymentMethod(p_con, 2, requestMessageArray, incomingSmsStr, p_transferVO);
                        try {
                            if (!BTSLUtil.isNullString(requestMessageArray[4])) {
                                final int selectorValue = Integer.parseInt(requestMessageArray[4]);
                                p_requestVO.setReqSelector(Integer.toString(selectorValue));
                            }
                        } catch (Exception e) {
                            _log.errorTrace(METHOD_NAME, e);
                            throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_SELECTOR_VALUE,e);
                        }
                        try {
                            if (!BTSLUtil.isNullString(requestMessageArray[5])) {
                                final int localeValue = Integer.parseInt(requestMessageArray[5]);
                                p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(requestMessageArray[5]));
                                if (p_requestVO.getReceiverLocale() == null) {
                                    throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE);
                                }
                            }
                        } catch (Exception e) {
                            _log.errorTrace(METHOD_NAME, e);
                            throw new BTSLBaseException(this, "validateIfNotMCDBuddy", PretupsErrorCodesI.ERROR_INVALID_LANGUAGE_SEL_VALUE,e);
                        }
                    }
                    break;
                }
        }
        p_transferVO.setIncomingSmsStr(incomingSmsStr.toString());
    }

    public void checkMCDAfterPaymentMethod(Connection p_con, int i, String[] p_requestMessageArray, StringBuffer incomingSmsStr, TransferVO p_transferVO) throws BTSLBaseException, Exception {
        if (_log.isDebugEnabled()) {
            _log.debug("checkMCDAfterPaymentMethod", " i=" + i + " requestMessageArray length:" + p_requestMessageArray.length);
        }
        String receiverMSISDN = p_requestMessageArray[i];
        receiverMSISDN = addRemoveDigitsFromMSISDN(PretupsBL.getFilteredMSISDN(receiverMSISDN));
        if (!BTSLUtil.isValidMSISDN(receiverMSISDN)) {
            throw new BTSLBaseException(this, "checkMCDAfterPaymentMethod", PretupsErrorCodesI.ERROR_INVALID_MSISDN, 0, new String[] { receiverMSISDN }, null);
        }
        // This block will check if the user is sending the PIN but is also a
        // buddy then that request should go through
        /*
         * BuddyVO buddyVO=new
         * SubscriberDAO().loadBuddyDetails(p_con,((SenderVO)
         * p_transferVO.getSenderVO()).getUserID(),receiverMSISDN)
         * if(buddyVO!=null) { receiverMSISDN=buddyVO.getMsisdn()
         * incomingSmsStr.append(receiverMSISDN+" ") NetworkPrefixVO
         * networkPrefixVO=PretupsBL.getNetworkDetails(receiverMSISDN
         * ,PretupsI.USER_TYPE_RECEIVER) if(networkPrefixVO==null) throw new
         * BTSLBaseException("","parseRequest",PretupsErrorCodesI.
         * ERROR_NOTFOUND_RECEIVERNETWORK,0,new String[]{receiverMSISDN},null)
         * buddyVO.setNetworkCode(networkPrefixVO.getNetworkCode())
         * buddyVO.setPrefixID(networkPrefixVO.getPrefixID())
         * buddyVO.setSubscriberType(networkPrefixVO.getSeriesType())
         * p_transferVO.setReceiverVO(buddyVO) long amount=0
         * amount=PretupsBL.getSystemAmount(p_requestMessageArray[i+1])
         * if(amount<0) throw new
         * BTSLBaseException("","parseRequest",PretupsErrorCodesI.
         * P2P_ERROR_AMOUNT_LESSZERO) p_transferVO.setTransferValue(amount)
         * p_transferVO.setRequestedAmount(amount)
         * incomingSmsStr.append(amount+" ")
         * 
         * } else {
         */
        incomingSmsStr.append(receiverMSISDN + " ");
        final ReceiverVO _receiverVO = new ReceiverVO();
        _receiverVO.setMsisdn(receiverMSISDN);
        final NetworkPrefixVO networkPrefixVO = PretupsBL.getNetworkDetails(receiverMSISDN, PretupsI.USER_TYPE_RECEIVER);
        if (networkPrefixVO == null) {
            throw new BTSLBaseException(this, "checkMCDAfterPaymentMethod", PretupsErrorCodesI.ERROR_NOTFOUND_RECEIVERNETWORK, 0, new String[] { receiverMSISDN }, null);
        }
        _receiverVO.setNetworkCode(networkPrefixVO.getNetworkCode());
        _receiverVO.setPrefixID(networkPrefixVO.getPrefixID());
        _receiverVO.setSubscriberType(networkPrefixVO.getSeriesType());
        p_transferVO.setReceiverVO(_receiverVO);
        long amount = 0;
        amount = PretupsBL.getSystemAmount(p_requestMessageArray[i + 1]);
        if (amount < 0) {
            throw new BTSLBaseException(this, "checkMCDAfterPaymentMethod", PretupsErrorCodesI.P2P_ERROR_AMOUNT_LESSZERO);
        }
        p_transferVO.setTransferValue(amount);
        p_transferVO.setRequestedAmount(amount);
        incomingSmsStr.append(amount + " ");
        // }
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.btsl.pretups.util.OperatorUtilI#validateVasRechargeRequest(java.sql
     * .Connection,
     * com.btsl.pretups.channel.transfer.businesslogic.C2STransferVO,
     * com.btsl.pretups.receiver.RequestVO) This method validates the incoming
     * Vas recharge request from c2s prepaid controller added for vastrix by
     * hitesh.ghanghas
     */
    @Override
    public void validateVasRechargeRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateVasRechargeRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            final int messageLen = p_requestArr.length;
            String selector = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }

            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
            Boolean isMultiAmountEnabled = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.MULTI_AMOUNT_ENABLED);
            
            switch (messageLen) {
                case 4:
                    {
                        // Do the 000 check Default PIN
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        // requestAmtStr=p_requestArr[2]
                        // PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr)
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        selector = p_requestArr[2];
                        // selector based validations to be entered
                        p_requestVO.setReqSelector(selector.trim());
                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }
                case 5:
                    {
                        // Do the 000 check Default PIN
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        if (isMultiAmountEnabled) {
                            requestAmtStr = p_requestArr[2];
                            PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                            selector = p_requestArr[3];
                        } else if (!isMultiAmountEnabled) {
                            selector = p_requestArr[2];
                            if (BTSLUtil.isNullString(p_requestArr[3])) {
                                p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                            } else {
                                final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                                if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                                }
                                p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            }
                        }
                        // requestAmtStr=p_requestArr[2]
                        // PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr)
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        // selector based validations to be entered
                        p_requestVO.setReqSelector(selector.trim());
                        PretupsBL.getSelectorValueFromCode(p_requestVO);

                        // p_requestVO.setReceiverLocale(new
                        // Locale(defaultLanguage,defaultCountry))
                        break;
                    }

                case 6:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        selector = p_requestArr[3];
                        // selector based validations to be entered
                        p_requestVO.setReqSelector(selector.trim());
                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        break;
                    }

                case 7:
                    {
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // -----Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // -----Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        p_requestVO.setReqSelector(p_requestArr[3].trim());
                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateVasRechargeRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.btsl.pretups.util.OperatorUtilI#validatePVasRechargeRequest(java.
     * sql.Connection,
     * com.btsl.pretups.channel.transfer.businesslogic.C2STransferVO,
     * com.btsl.pretups.receiver.RequestVO) This method is used to validate the
     * resquest message array for PVas recharge request
     */
    @Override
    public void validatePVasRechargeRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validatePVasC2SRechargeRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            final int messageLen = p_requestArr.length;
            String selector = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }

            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            Boolean isMultiAmountEnabled = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.MULTI_AMOUNT_ENABLED);
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            switch (messageLen) {
                case 4:
                    {
                        // Do the 000 check Default PIN
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        selector = p_requestArr[2];
                        // selector based validations to be entered
                        p_requestVO.setReqSelector(selector.trim());
                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }
                case 5:
                    {
                        // Do the 000 check Default PIN
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        if (isMultiAmountEnabled) {
                            requestAmtStr = p_requestArr[2];
                            PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                            selector = p_requestArr[3];
                        } else if (!isMultiAmountEnabled) {
                            selector = p_requestArr[2];
                            if (BTSLUtil.isNullString(p_requestArr[3])) {
                                p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                            } else {
                                final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                                if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                    throw new BTSLBaseException(this, "validateVasRechargeRequest", PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                                }
                                p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            }
                        }
                        // requestAmtStr=p_requestArr[2]
                        // PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr)
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // selector=p_requestArr[3]
                        // selector based validations to be entered
                        p_requestVO.setReqSelector(selector.trim());
                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // p_requestVO.setReceiverLocale(new
                        // Locale(defaultLanguage,defaultCountry))
                        break;
                    }

                case 6:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        selector = p_requestArr[3];
                        // selector based validations to be entered
                        p_requestVO.setReqSelector(selector.trim());
                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        break;
                    }

                case 7:
                    {
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // -----Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // -----Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        p_requestVO.setReqSelector(p_requestArr[3].trim());
                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validatePVasC2SRechargeRequest]", "", "",
                "", "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see
     * com.btsl.pretups.util.OperatorUtilI#formatVASTransferID(com.btsl.pretups
     * .transfer.businesslogic.TransferVO, long) This method is used to generate
     * transfer ID for Vas and Promo Vas transfer request
     */
    @Override
    public String formatVASTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatVASTransferID";
        String returnStr = null;
        try {
            // ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO()
            // String currentYear=BTSLUtil.getFinancialYearLastDigits(2)
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            // returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr
            // returnStr="R"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr
            returnStr = "R" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    @Override
    public String formatVASPVASTransferID(TransferVO p_transferVO, long p_tempTransferID, String p_prefix) {
        final String methodName = "formatVASPVASTransferID";
        String returnStr = null;
        try {

            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            returnStr = p_prefix + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate CRBT Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    // VASTRIX changes ends.

    // for c2s table merging
    @Override
    public boolean getNewDataAftrTbleMerging(Date p_fromDate, Date p_toDate) throws BTSLBaseException {
        final String METHOD_NAME = "getNewDataAftrTbleMerging";
        boolean newData = false;
        final String migrationDate = Constants.getProperty("MIGRATION_DATE");
        try {
            final int no_of_days_aftr_migration = Integer.parseInt(Constants.getProperty("AFTER_MIG_NO_OF_DAYS"));
            final Date lastDate = BTSLUtil.addDaysInUtilDate(BTSLUtil.getDateFromDateString(migrationDate), no_of_days_aftr_migration);
            final Date currentdate = new Date();
            if (p_toDate == null) {
                p_toDate = p_fromDate;
            }
            if (BTSLUtil.isNullString(Constants.getProperty("OLD_DATA_REQ_AFTR_TBLE_MERGE")) || PretupsI.NO.equalsIgnoreCase(Constants
                .getProperty("OLD_DATA_REQ_AFTR_TBLE_MERGE"))) {
                newData = true;
            } else {
                // Back date Enquiry Handling
                if (BTSLUtil.getDifferenceInUtilDates(p_toDate, new Date()) <= 0) // IF
                // CURRENT
                {
                    p_toDate = BTSLUtil.addDaysInUtilDate(BTSLUtil.getDateFromDateString(migrationDate), -1);
                }
                if (_log.isDebugEnabled()) {
                    _log.debug("getNewDataAftrTbleMerging", "p_toDate=" + p_toDate);
                }
                // Ended Here
                if (BTSLUtil.getDateFromDateString(migrationDate).after(p_fromDate) && BTSLUtil.getDateFromDateString(migrationDate).before(p_toDate)) {
                    throw new BTSLBaseException(this, "getNewDataAftrTbleMerging", "operatorUtil.date.range.error");
                } else if (p_fromDate.compareTo(BTSLUtil.getDateFromDateString(migrationDate)) >= 0) {
                    newData = true;
                } else if ((currentdate.after(lastDate)) && (p_fromDate.before(BTSLUtil.getDateFromDateString(migrationDate)))) {
                    newData = true;
                }
            }
        } catch (Exception e) {
            _log.errorTrace(METHOD_NAME, e);
            throw new BTSLBaseException(this, "getNewDataAftrTbleMerging", "operatorUtil.date.range.error",e);
        }
        return newData;
    }

    /**
     * This method validate the LoginId. 9:47:00 AM HashMap sushma.salve
     */
    @Override
    public HashMap validateLoginId(String p_loginID) {
        _log.debug("validateLoginId", "Entered, p_userID= ", new String(p_loginID));
        final HashMap messageMap = new HashMap();
        return messageMap;
    }

    // added by gaurav for user level transfer rule
    /**
     * loadUserListForTrfRuleTypeByUserLevel gaurav pandy
     */
    @Override
    public ArrayList loadUserListForTrfRuleTypeByUserLevel(Connection p_con, ChannelUserVO p_channelUserVO, String p_toCategoryCode, String p_txnType, String p_userName) throws BTSLBaseException {
        ArrayList userList = null;

        if ("C2CTRFRUL5".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // code C2CTRFRUL5=Rule Type E (Individual can transfer only below
            // the hierarchy)
            userList = new UserLevelTrfRuleDAO()
                .loadUsersListInSelfHierarchy(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_userName, p_channelUserVO.getUserID(),null,true);
        } else if ("C2CTRFRUL4".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // Rule Type D (Rule Type E + within same Hierarchy)
            userList = new UserLevelTrfRuleDAO().loadUsersListByOwner(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_channelUserVO.getOwnerID(), p_userName,
                p_channelUserVO.getUserID(), p_channelUserVO.getCategoryCode(),null,true);
        } else if ("C2CTRFRUL3".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // self cat to self cat transfer rule must be define
            userList = new UserLevelTrfRuleDAO().loadUsersListAtSameLevel(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_userName, p_channelUserVO.getUserID(),
                p_channelUserVO.getOwnerID(),null,true);
        } else if ("C2CTRFRUL2".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // Rule Type B (Rule Type C + within same Domain)
            userList = new UserLevelTrfRuleDAO().loadUsersByCatCodeAndWithoutSessionCatCode(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_channelUserVO
                .getParentID(), p_userName, p_channelUserVO.getUserID(), p_channelUserVO.getCategoryCode());
        } else if ("C2CTRFRUL1".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // Rule Type A: Rule Type B + with same level
            userList = new UserLevelTrfRuleDAO().loadUsersByCategoryCode(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_channelUserVO.getParentID(), p_userName,
                p_channelUserVO.getUserID(),null,true);
        }
        return userList;
    }

    /**
     * @author gaurav.pandey
     * @param p_con
     * @param p_senderVO
     *            ChannelUserVO
     * @param p_receiverVO
     *            ChannelUserVO
     * @return isValidUserForXfr boolean
     * @throws BTSLBaseException
     */
    @Override
    public boolean validateUserForTrfRuleTypeByUserLevel(Connection p_con, ChannelUserVO p_senderVO, ChannelUserVO p_receiverVO, boolean p_isFromWeb) throws BTSLBaseException {
        final boolean isValidUserForXfr = false;
        ArrayList userList = null;
        if ("C2CTRFRUL5".equals(p_senderVO.getTrannferRuleTypeId())) {
            // code C2CTRFRUL5=Rule Type E (Individual can transfer only below
            // the hierarchy)
            userList = new UserLevelTrfRuleDAO().loadUsersListInSelfHierarchy(p_con, p_senderVO.getNetworkID(), p_receiverVO.getCategoryCode(), p_receiverVO.getUserName(),
                p_senderVO.getUserID(),p_receiverVO.getUserID(),p_isFromWeb);
            if (userList != null && userList.size() > 0) {
                for (int i = 0; i < userList.size(); i++) {
                    final ListValueVO listValueVO = (ListValueVO) userList.get(i);
                    if (listValueVO.getValue().equalsIgnoreCase(p_receiverVO.getUserID())) {
                        return true;
                    }
                }// End of for block
            }// End of if block
        } else if ("C2CTRFRUL4".equals(p_senderVO.getTrannferRuleTypeId())) {

            // Rule Type D (Rule Type E + within same Hierarchy)
            userList = new UserLevelTrfRuleDAO().loadUsersListByOwner(p_con, p_senderVO.getNetworkID(), p_receiverVO.getCategoryCode(), p_senderVO.getOwnerID(), p_receiverVO
                .getUserName(), p_senderVO.getUserID(), p_senderVO.getCategoryCode(),p_receiverVO.getUserID(),p_isFromWeb);
            if (userList != null && userList.size() > 0) {
                for (int i = 0; i < userList.size(); i++) {
                    final ListValueVO listValueVO = (ListValueVO) userList.get(i);
                    if (listValueVO.getValue().equalsIgnoreCase(p_receiverVO.getUserID())) {
                        return true;
                    }
                }// End of for block
            }// End of if block
        } else if ("C2CTRFRUL3".equals(p_senderVO.getTrannferRuleTypeId())) {
            // self cat to self cat transfer rule must be define
            userList = new UserLevelTrfRuleDAO().loadUsersListAtSameLevel(p_con, p_senderVO.getNetworkID(), p_receiverVO.getCategoryCode(), p_receiverVO.getUserName(),
                p_senderVO.getUserID(), p_senderVO.getOwnerID(),p_receiverVO.getUserID(),p_isFromWeb);
            if (userList != null && userList.size() > 0) {
                for (int i = 0; i < userList.size(); i++) {
                    final ListValueVO listValueVO = (ListValueVO) userList.get(i);
                    if (listValueVO.getValue().equalsIgnoreCase(p_receiverVO.getUserID())) {
                        return true;
                    }
                }// End of for block
            }// End of if block
        } else if ("C2CTRFRUL2".equals(p_senderVO.getTrannferRuleTypeId())) {
            // Rule Type B (Rule Type C + within same Domain)
            userList = new UserLevelTrfRuleDAO().loadUsersByCatCodeAndWithoutSessionCatCode(p_con, p_senderVO.getNetworkID(), p_receiverVO.getCategoryCode(), p_senderVO
                .getParentID(), p_receiverVO.getUserName(), p_senderVO.getUserID(), p_senderVO.getCategoryCode());
            if (userList != null && userList.size() > 0) {
                for (int i = 0; i < userList.size(); i++) {
                    final ListValueVO listValueVO = (ListValueVO) userList.get(i);
                    if (listValueVO.getValue().equalsIgnoreCase(p_receiverVO.getUserID())) {
                        return true;
                    }
                }// End of for block
            }// End of if block

        } else if ("C2CTRFRUL1".equals(p_senderVO.getTrannferRuleTypeId())) {
            // Rule Type A: Rule Type B + with same level
            userList = new UserLevelTrfRuleDAO().loadUsersByCategoryCode(p_con, p_senderVO.getNetworkID(), p_receiverVO.getCategoryCode(), p_senderVO.getParentID(),
                p_receiverVO.getUserName(), p_senderVO.getUserID(),p_receiverVO.getUserID(),p_isFromWeb);
            if (userList != null && userList.size() > 0) {
                for (int i = 0; i < userList.size(); i++) {
                    final ListValueVO listValueVO = (ListValueVO) userList.get(i);
                    if (listValueVO.getValue().equalsIgnoreCase(p_receiverVO.getUserID())) {
                        return true;
                    }
                }// End of for block
            }// End of if block

        }
        return isValidUserForXfr;
    }

    /**
     * @author gaurav.pandey
     * @param p_con
     * @param p_channelUserVO
     * @return ArrayList
     * @throws BTSLBaseException
     */
    @Override
    public LinkedHashMap loadBatchUserListForTrfRuleTypeByUserLevel(Connection p_con, ChannelUserVO p_channelUserVO, String p_toCategoryCode, String p_txnType, String p_userName) throws BTSLBaseException {
        LinkedHashMap userList = null;
        final UserLevelTrfRuleDAO userLevelTrfRuleDAO = new UserLevelTrfRuleDAO();

        if ("C2CTRFRUL5".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // code C2CTRFRUL5=Rule Type E (Individual can transfer only below
            // the hierarchy)
            userList = userLevelTrfRuleDAO.loadBatchUsersListInSelfHierarchy(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_userName, p_channelUserVO.getUserID());
        } else if ("C2CTRFRUL4".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // Rule Type D (Rule Type E + within same Hierarchy)
            userList = userLevelTrfRuleDAO.loadBatchUsersListByOwner(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_channelUserVO.getOwnerID(), p_userName,
                p_channelUserVO.getUserID(), p_channelUserVO.getCategoryCode());
        } else if ("C2CTRFRUL3".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // self cat to self cat transfer rule must be define
            userList = userLevelTrfRuleDAO.loadBatchUsersListAtSameLevel(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_userName, p_channelUserVO.getUserID(),
                p_channelUserVO.getOwnerID());
        } else if ("C2CTRFRUL2".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // Rule Type B (Rule Type C + within same Domain)
            userList = userLevelTrfRuleDAO.loadBatchUsersByCatCodeAndWithoutSessionCatCode(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_channelUserVO
                .getParentID(), p_userName, p_channelUserVO.getUserID(), p_channelUserVO.getCategoryCode());
        } else if ("C2CTRFRUL1".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // Rule Type A: Rule Type B + with same level
            userList = userLevelTrfRuleDAO.loadBatchUsersByCategoryCode(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_userName, p_channelUserVO.getUserID());
        }
        return userList;
    }

    // ends here for user level transfer rule type

    /**
     * Method to format the Multiple bonus previous, post strings to insert in
     * 
     * @param p_c2sTransferVO
     *            C2STransferVO
     */
    @Override
    public void formatBonusPrevoiusAndPostString(C2STransferVO p_c2sTransferVO) throws Exception {
        final String methodName = "formatBonusPrevoiusAndPostString";
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "p_c2sTransferVO: " + p_c2sTransferVO);
        }
        String bonusPreviousBalance = "";
        String bonusPostBalance = "";
        String bonusPreviousValidity = "";
        String bonusPostValidity = "";
        try {
            BonusTransferVO bonusTransferVO = null;
            final ArrayList bonusVOList = (ArrayList) p_c2sTransferVO.getBonusItems();
            if (bonusVOList != null && bonusVOList.size() > 0) {
                for (int i = 0, j = bonusVOList.size(); i < j; i++) {
                    bonusTransferVO = (BonusTransferVO) bonusVOList.get(i);
                    if (bonusPreviousBalance.length() <= 360 || bonusPostBalance.length() <= 360 || bonusPreviousValidity.length() <= 360 || bonusPostValidity.length() <= 360 && (bonusTransferVO
                        .getBalance() > 0 || bonusTransferVO.getValidity() > 0)) {
                        if (bonusTransferVO.getPreviousBalance() > 0) {
                            bonusPreviousBalance += bonusTransferVO.getAccountCode() + ":" + bonusTransferVO.getPreviousBalance() + "|";
                        }
                        if (bonusTransferVO.getPostBalance() > 0) {
                            bonusPostBalance += bonusTransferVO.getAccountCode() + ":" + bonusTransferVO.getPostBalance() + "|";
                        }
                        if (bonusTransferVO.getPreviousValidity() != null) {
                            bonusPreviousValidity += bonusTransferVO.getAccountCode() + ":" + BTSLUtil.getDateStringFromDate(bonusTransferVO.getPreviousValidity()) + "|";
                        }
                        if (bonusTransferVO.getPostValidity() != null) {
                            bonusPostValidity += bonusTransferVO.getAccountCode() + ":" + BTSLUtil.getDateStringFromDate(bonusTransferVO.getPostValidity()) + "|";
                        }
                    }
                }
                if (bonusPreviousBalance.length() > 0) {
                    bonusPreviousBalance = bonusPreviousBalance.substring(0, bonusPreviousBalance.length() - 1);
                    if (p_c2sTransferVO.getPreviousPromoBalance() != null) {
                        p_c2sTransferVO.setPreviousPromoBalance("|" + bonusPreviousBalance);
                    } else {
                        p_c2sTransferVO.setPreviousPromoBalance(bonusPreviousBalance);
                    }
                }
                if (bonusPostBalance.length() > 0) {
                    bonusPostBalance = bonusPostBalance.substring(0, bonusPostBalance.length() - 1);
                    p_c2sTransferVO.setNewPromoBalance(bonusPostBalance);
                }
                if (bonusPreviousValidity.length() > 0) {
                    bonusPreviousValidity = bonusPreviousValidity.substring(0, bonusPreviousValidity.length() - 1);
                    if (p_c2sTransferVO.getPreviousPromoExpiry() != null) {
                        p_c2sTransferVO.setPreviousPromoExpiry("|" + bonusPreviousValidity);
                    }
                    p_c2sTransferVO.setPreviousPromoExpiry(bonusPreviousValidity);
                }
                if (bonusPostValidity.length() > 0) {
                    bonusPostValidity = bonusPostValidity.substring(0, bonusPostValidity.length() - 1);
                    p_c2sTransferVO.setNewPromoExpiry(bonusPostValidity);
                }
            }
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(
                    methodName,
                    "bonusPrevBal: " + bonusPreviousBalance + ", bonusPostBal: " + bonusPostBalance + ", bonusPreVal: " + bonusPreviousValidity + ", bonusPostVal: " + bonusPostValidity);
            }
        }
    }

    /**
     * @author gaurav.pandey
     * @param p_INPromo
     *            double
     * @param p_BonusTalkTime
     *            long
     * @return INPromo double
     */
    @Override
    public double calculateINPromo(double p_INPromo, long p_BonusTalkTime) {
        return p_INPromo;
    }

    /**
     * @author gaurav.pandey
     * @param p_RequestedAmount
     *            long
     * @param p_BonusTalkTime
     *            long
     * @return rechargeComment String
     */
    @Override
    public String getRechargeComment(long p_RequestedAmount, long p_BonusTalkTime) {
        return "";
    }

    /**
     * 

     */
    /**
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     */
    @Override
    public void validateSIMACTRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateSIMACTRequest";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Entered");
        }
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String cellId = null;
            String switchId = null;
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            Boolean isDebitSenderSimact = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEBIT_SENDER_SIMACT);
            Boolean isUssdNewTagsMandatory = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY);
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            switch (messageLen) {
                case 9:
                    {

                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[8]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        receiverVO.setMsisdn(custMsisdn);
                        // receiverVO.setNetworkCode("TH")
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (isUssdNewTagsMandatory && PretupsI.GATEWAY_TYPE_USSD.equals(p_c2sTransferVO.getRequestGatewayType()))// cellid
                        // and
                        // switch
                        // id
                        // not
                        // mandatory
                        // in
                        // request
                        {
                            cellId = p_requestArr[6];
                            switchId = p_requestArr[7];
                            // validations to be done on cellId switchId to be
                            // put here
                            p_requestVO.setCellId(cellId);
                            p_requestVO.setSwitchId(switchId);
                        }
                        break;

                    }

                case 10:
                    {

                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[9]);

                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        receiverVO.setMsisdn(custMsisdn);
                        if (isDebitSenderSimact) {
                            requestAmtStr = p_requestArr[2];
                            PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        }
                        // receiverVO.setNetworkCode("TH")
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (isUssdNewTagsMandatory && PretupsI.GATEWAY_TYPE_USSD.equals(p_c2sTransferVO.getRequestGatewayType()))// cellid
                        // and
                        // switch
                        // id
                        // not
                        // mandatory
                        // in
                        // request
                        {
                            cellId = p_requestArr[7];
                            switchId = p_requestArr[8];
                            // validations to be done on cellId switchId to be
                            // put here
                            p_requestVO.setCellId(cellId);
                            p_requestVO.setSwitchId(switchId);
                        }
                        break;

                    }
                case 11:
                    {

                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[10]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        receiverVO.setMsisdn(custMsisdn);
                        // receiverVO.setNetworkCode("TH")
                        if (isDebitSenderSimact) {
                            requestAmtStr = p_requestArr[2];
                            PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        }
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (isUssdNewTagsMandatory && PretupsI.GATEWAY_TYPE_USSD.equals(p_c2sTransferVO.getRequestGatewayType()))// cellid
                        // and
                        // switch
                        // id
                        // not
                        // mandatory
                        // in
                        // request
                        {
                            // =======cellID switchID=============
                            cellId = p_requestArr[8];
                            switchId = p_requestArr[9];
                            // validations to be done on cellId switchId to be
                            // put here
                            p_requestVO.setCellId(cellId);
                            p_requestVO.setSwitchId(switchId);
                        }
                        // =======cellID switchID=============
                        break;

                    }

                case 12:
                    {

                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[11]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        receiverVO.setMsisdn(custMsisdn);
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        // receiverVO.setNetworkCode("TH")
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (isUssdNewTagsMandatory && PretupsI.GATEWAY_TYPE_USSD.equals(p_c2sTransferVO.getRequestGatewayType()))// cellid
                        // and
                        // switch
                        // id
                        // not
                        // mandatory
                        // in
                        // request
                        {
                            cellId = p_requestArr[9];
                            switchId = p_requestArr[10];
                            // validations to be done on cellId switchId to be
                            // put here
                            p_requestVO.setCellId(cellId);
                            p_requestVO.setSwitchId(switchId);
                            // =======cellID switchID=============
                        }
                        break;

                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);

            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e)

        {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateSIMACTRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }

    }

    /**
     * 
     * @param p_transferVO
     * @param p_tempTransferID
     * @return
     */
    // ends here for user level transfer rule type

    /**
     * 
     * @param p_transferVO
     * @param p_tempTransferID
     * @return
     */
    @Override
    public String formatSIMACTTransferID(TransferVO p_transferVO, int p_tempTransferID) {
        final String methodName = "formatSIMACTTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            returnStr = "S" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method that will validate the user message sent through the EXTERNAL
     * GATEWAY for subscriber enquiry
     * 
     * @author sonali.garg
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateSubscriberEnquiryRequest(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateSubscriberEnquiryRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateSubscriberEnquiryRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            if (_log.isDebugEnabled()) {
                for (int i = 0; i < messageLen; i++) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
                case 4:
                    {
                        // Request Format KEYWord MSISDN SERVICETYPE PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        custMsisdn = p_requestArr[1];
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 5:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }

                case 6:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 7:
                    {
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }

                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SRechargeRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, "validateC2SRechargeRequest", PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /**
     * Method will validate Scheduled Multiple Credit List (Add/Modify/Delete)
     * Request
     * 
     * @param Connection
     *            p_con
     * @param String
     *            [] p_requestArr
     * @param RequestVO
     *            p_requestVO
     * @return mcdListVO
     * @author harsh.dixit
     * @date 23-Apr-2013
     * @throws BTSLBaseException
     */
    @Override
    public MCDListVO validateSMCDListAMDRequest(Connection p_con, String[] p_requestArr, RequestVO p_requestVO) throws BTSLBaseException {

        final MCDListVO mcdListVO = new MCDListVO();
        String actualPin = null;
        SenderVO sendorVO = null;
        final String obj = "validateSMCDListAMDRequest";
        try {

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            sendorVO = (SenderVO) p_requestVO.getSenderVO();
            actualPin = sendorVO.getPin();
            switch (messageLen) {
                case 6:
                    {

                        mcdListVO.setMsisdn(p_requestArr[1]);
                        mcdListVO.setMcdListAmountString(p_requestArr[3]);
                        mcdListVO.setMcdReceiverProfile(p_requestArr[4]);
                        mcdListVO.setAction(p_requestArr[5]);
                        p_requestVO.setAction(mcdListVO.getAction());
                        break;
                    }
                case 5:
                    {
                        mcdListVO.setMsisdn(p_requestArr[1]);
                        mcdListVO.setMcdListAmountString(p_requestArr[3]);
                        mcdListVO.setAction(p_requestArr[4]);
                        p_requestVO.setAction(mcdListVO.getAction());
                        break;
                    }

                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.P2P_MULT_CDT_LIST_AMD_INVALID_MSGFT);

            }

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validateMCDListAMDRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        } finally {

            if (_log.isDebugEnabled()) {
                _log.debug(obj, "Exiting ");
            }

        }

        return mcdListVO;
    }

    /**
     * Method that will validate the user message sent for DTH
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateC2SRechargeRequest(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateDTHRechargeRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateDTHRechargeRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;

            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }

            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
                case 4:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {

                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        PretupsBL.validateDTHAccount(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 5:
                    {

                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateDTHAccount(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }

                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }

                case 6:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateDTHAccount(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                            // changed for CRE_INT_CR00029 by ankit Zindal
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 7:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        PretupsBL.validateDTHAccount(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                            /*
                             * else
                             * p_requestVO.setReqSelector((Constants.getProperty
                             * (
                             * "CVG_UNICODE_"
                             * +p_requestVO.getLocale().getLanguage().toUpperCase
                             * ())));
                             */} else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);

                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            // Sender locale has to be overwritten in transferVO
                            // also.
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateDTHRechargeRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /**
     * Method to Generate OTP
     * 
     * @return String
     */
    // added for OTP generetion
    @Override
    synchronized public String generateOTP() throws Exception {
        final String METHOD_NAME = "generateOTP";
        String chars = null;
        try {
            chars = Constants.getProperty("OTP_PIN_GEN_ARG");
        } catch (Exception e) {
            _log.errorTrace(METHOD_NAME, e);
            chars = "1234567890";
        }

        int passLength = 0;
        try {
            passLength = Integer.parseInt(Constants.getProperty("OTP_PIN_LENGTH"));
        } catch (Exception e) {
            _log.errorTrace(METHOD_NAME, e);
            passLength = 6;
        }
        StringBuffer temp = null;
        try {
            if (_log.isDebugEnabled()) {
                _log.debug("generateOTP Entered with Chars" + chars + "  And OTP Length", passLength);
            }
            if (passLength > chars.length()) {
                throw new ArithmeticException("Random number minimum length should be less than the provided chars list length");
            }
            final SecureRandom m_generator = new SecureRandom();
            m_generator.setSeed(System.nanoTime());
            final char[] availableChars = chars.toCharArray();
            int availableCharsLeft = availableChars.length;
            temp = new StringBuffer(passLength);
            int pos = 0;
            for (int i = 0; i < passLength;) {
                pos = BTSLUtil.parseDoubleToInt((availableCharsLeft * m_generator.nextDouble()));
                if (i == 0) {
                    if (!"1".equalsIgnoreCase(String.valueOf(availableChars[pos])) && !"0".equalsIgnoreCase(String.valueOf(availableChars[pos]))) {
                        i++;
                        temp.append(availableChars[pos]);
                        availableChars[pos] = availableChars[availableCharsLeft - 1];
                        --availableCharsLeft;
                    }
                } else {
                    temp.append(availableChars[pos]);
                    i++;
                    availableChars[pos] = availableChars[availableCharsLeft - 1];
                    --availableCharsLeft;
                }
            }
        } catch (Exception e) {
            _log.errorTrace(METHOD_NAME, e);
            temp = null;
            throw new ArithmeticException("Exception In generating OTP");
        }
        if (_log.isDebugEnabled()) {
            _log.debug("generateOTP Exiting", "");
        }
        return String.valueOf(temp);
    }

    /**
     * Method that will validate the user message sent
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateC2SRechargeRequest(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateC2SRequestWithoutAmount(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateC2SRequestWithoutAmount";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
                case 4:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {

                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr)
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 5:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr)
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }

                case 6:
                    {
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr)
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 7:
                    {
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr)
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                            /*
                             * else
                             * p_requestVO.setReqSelector((Constants.getProperty
                             * (
                             * "CVG_UNICODE_"
                             * +p_requestVO.getLocale().getLanguage().toUpperCase
                             * ())));
                             */} else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            /*
                             * if(LocaleMasterCache.getLocaleFromCodeDetails(String
                             * .valueOf
                             * (langCode))==null) throw new
                             * BTSLBaseException(this,"validateC2SRechargeRequest"
                             * ,PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                             */p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            // ChangeID=LOCALEMASTER
                            // Sender locale has to be overwritten in transferVO
                            // also.
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SRequestWithoutAmount]", "", "",
                "", "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /**
     * Method to format Channel User Creation Transfer ID
     * 
     * @param p_transferVO
     * @param p_tempTransferID
     * @return String
     */
    @Override
    public String formatChnlUserTransferID(TransferVO p_transferVO, long p_tempTransferID) {

        final String methodName = "formatChnlUserTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(Long.toHexString(p_tempTransferID), CHANEL_TRANSFER_ID_PAD_LENGTH);
            returnStr = "CU" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;

    }

    /**
     * Method that will validate the user message sent
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateCollectionBillpaymentRequest(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateCollectionBillpaymentRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateCollectionBillpaymentRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            // String [] strArr=null
            // double requestAmt=0
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
                case 4:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {

                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 5:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, "validateC2SRechargeRequest", PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }

                case 6:
                    {
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        // requestAmtStr=p_requestArr[2]
                        // PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr)
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[2])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                            // changed for CRE_INT_CR00029 by ankit Zindal
                            // in case of binary message we will set default
                            // value after
                            // calling getselectorvaluefromcode method
                            /*
                             * else
                             * p_requestVO.setReqSelector((Constants.getProperty
                             * (
                             * "CVG_UNICODE_"
                             * +p_requestVO.getLocale().getLanguage().toUpperCase
                             * ())));
                             */} else {
                            p_requestVO.setReqSelector(p_requestArr[2]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 7:
                    {
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                            /*
                             * else
                             * p_requestVO.setReqSelector((Constants.getProperty
                             * (
                             * "CVG_UNICODE_"
                             * +p_requestVO.getLocale().getLanguage().toUpperCase
                             * ())));
                             */} else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            /*
                             * if(LocaleMasterCache.getLocaleFromCodeDetails(String
                             * .valueOf
                             * (langCode))==null) throw new
                             * BTSLBaseException(this,"validateC2SRechargeRequest"
                             * ,PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                             */p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            // ChangeID=LOCALEMASTER
                            // Sender locale has to be overwritten in transferVO
                            // also.
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 8:
                    {
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                            /*
                             * else
                             * p_requestVO.setReqSelector((Constants.getProperty
                             * (
                             * "CVG_UNICODE_"
                             * +p_requestVO.getLocale().getLanguage().toUpperCase
                             * ())));
                             */} else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            /*
                             * if(LocaleMasterCache.getLocaleFromCodeDetails(String
                             * .valueOf
                             * (langCode))==null) throw new
                             * BTSLBaseException(this,"validateC2SRechargeRequest"
                             * ,PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                             */p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            // ChangeID=LOCALEMASTER
                            // Sender locale has to be overwritten in transferVO
                            // also.
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        final String invoiceno = p_requestArr[7];
                        p_requestVO.setInvoiceno(invoiceno);
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }

            /*
             * if(p_requestArr.length <5) throw new
             * BTSLBaseException(this,"validateC2SRechargeRequest",
             * PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT);
             * 
             * //Do the 000 check Default PIN
             * if((((ChannelUserVO)p_c2sTransferVO
             * .getSenderVO()).getUserPhoneVO(
             * )).getPinRequired().equals(PretupsI.YES) &&
             * !PretupsI.DEFAULT_C2S_PIN
             * .equals(BTSLUtil.decryptText((((ChannelUserVO
             * )p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
             * ChannelUserBL.validatePIN(p_con,channelUserVO.getUserPhoneVO(),
             * p_requestArr[4]);
             * 
             * ReceiverVO receiverVO=new ReceiverVO(); //Customer MSISDN
             * Validation custMsisdn=p_requestArr[1];
             * 
             * validateMsisdn(receiverVO,p_c2sTransferVO.getRequestID(),custMsisdn
             * );
             * 
             * //Recharge amount Validation requestAmtStr=p_requestArr[2];
             * validateAmount(p_c2sTransferVO,requestAmtStr);
             * p_c2sTransferVO.setReceiverVO(receiverVO);
             */
        } catch (BTSLBaseException be) {
            _log.errorTrace(obj, be);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateCollectionBillpaymentRequest]", "",
                "", "", "Exception while validating user message" + " ,getting Exception=" + be.getMessage());
            throw new BTSLBaseException(this, obj, be.getMessage(),be);

        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateCollectionBillpaymentRequest]", "",
                "", "", "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    @Override
    public String formatTransferID(TransferVO p_transferVO, long p_tempTransferID, String requestedId) {
        final String methodName = "formatTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(Long.toHexString(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            returnStr = requestedId + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            returnStr = null;
        }
        return returnStr;
    }

    /*	*//**
     * Method that will validate the user message sent
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateCollectionBillpaymentRequest(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateC2SPrepaidReverrsalRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateC2SPrepaidReverrsalRequest";
        try {
            final String[] p_requestArr = p_requestVO.getDecryptedMessage().replaceAll("\\s+", " ").split(" ");
            String custMsisdn = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
            case 3:
            {
                if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                    try {

                        ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[2]);
                    } catch (BTSLBaseException be) {
                        if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                            .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                            p_con.commit();
                        }
                        throw be;
                    }
                }
                final ReceiverVO receiverVO = new ReceiverVO();
               
                final String oldTxnId = p_requestArr[1];
                if (BTSLUtil.isNullString(oldTxnId)) {
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PRE_TXN_ID_REVERSAL);
                } else {
                    p_c2sTransferVO.setOldTxnId(oldTxnId.trim());
                    receiverVO.setLastTransferID(oldTxnId.trim());
                }
                p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                p_c2sTransferVO.setReceiverVO(receiverVO);

                break;
            }
                case 4:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {

                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        //custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        
                        // added if req str is of type: TYPE,TXNID,LANG1,PIN
                        //code merged from idea
                        String oldTxnId;
                        
                        if(!BTSLUtil.isNullString(p_requestVO.getReceiverMsisdn())){
        					custMsisdn=p_requestVO.getReceiverMsisdn();
        					p_requestVO.setSid(custMsisdn);
        					receiverVO.setSid(custMsisdn);
        					PrivateRchrgVO prvo=null;
        					if((prvo=getPrivateRechargeDetails(p_con,custMsisdn))!=null)
        					{
        						p_c2sTransferVO.setSubscriberSID(custMsisdn);
        						custMsisdn=prvo.getMsisdn();						
        					}	
        					PretupsBL.validateMsisdn(p_con,receiverVO,p_c2sTransferVO.getRequestID(),custMsisdn);
        					oldTxnId  = p_requestArr[2];
        				}
                        else
                        {
                        	  oldTxnId  = p_requestArr[1];
                        }
                        
                        if (BTSLUtil.isNullString(oldTxnId)) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PRE_TXN_ID_REVERSAL);
                        } else {
                            p_c2sTransferVO.setOldTxnId(oldTxnId.trim());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        break;
                    }
                case 5:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                if (!(p_requestArr[4].equals("0"))) {
                                    ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                                } else {
                                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.PIN_REQUIRED);
                                }

                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        //custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        
                        // added if req str is of type: TYPE,TXNID,LANG1,LANG2,PIN
                        //code merged from idea
                        String oldTxnId;
                        
                        if(!BTSLUtil.isNullString(p_requestVO.getReceiverMsisdn())){
        					custMsisdn=p_requestVO.getReceiverMsisdn();
        					p_requestVO.setSid(custMsisdn);
        					receiverVO.setSid(custMsisdn);
        					PrivateRchrgVO prvo=null;
        					if((prvo=getPrivateRechargeDetails(p_con,custMsisdn))!=null)
        					{
        						p_c2sTransferVO.setSubscriberSID(custMsisdn);
        						custMsisdn=prvo.getMsisdn();						
        					}	
        					receiverVO.setSubscriberType(PretupsI.INTERFACE_CATEGORY_PRE);
        					PretupsBL.validateMsisdn(p_con,receiverVO,p_c2sTransferVO.getRequestID(),custMsisdn);
        					oldTxnId  = p_requestArr[2];
        				}
                        else
                        {
                        	  oldTxnId  = p_requestArr[1];
                        }
                        
                      
                        if (BTSLUtil.isNullString(oldTxnId)) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PRE_TXN_ID_REVERSAL);
                        } else {
                            p_c2sTransferVO.setOldTxnId(oldTxnId.trim());
                        }
                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestArr[2]));
                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestArr[3]));
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        break;
                    }
                case 6:
                {
                    if (!(p_requestArr[5].equalsIgnoreCase(PretupsI.BCU_USER) || p_requestArr[5].equalsIgnoreCase(PretupsI.CUSTOMER_CARE)|| p_requestArr[5].equalsIgnoreCase(TypesI.SUPER_CUSTOMER_CARE) || p_requestArr[5].equalsIgnoreCase(TypesI.SUPER_CHANNEL_ADMIN))) {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {

                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                    }
                    final ReceiverVO receiverVO = new ReceiverVO();
                    custMsisdn = p_requestArr[1];
                    // Change for the SID logic
                    p_requestVO.setSid(custMsisdn);
                    receiverVO.setSid(custMsisdn);
                    PrivateRchrgVO prvo=null;
    				if((prvo=getPrivateRechargeDetails(p_con,custMsisdn))!=null)
    				{
    					p_c2sTransferVO.setSubscriberSID(custMsisdn);
    					custMsisdn=prvo.getMsisdn();						
    				}
                    PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
                    final String oldTxnId = p_requestArr[2];
                    if (BTSLUtil.isNullString(oldTxnId)) {
                        throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PRE_TXN_ID_REVERSAL);
                    } else {
                        p_c2sTransferVO.setOldTxnId(oldTxnId.trim());
                    }
                    // p_requestVO.setReceiverLocale(Integer.parseInt(p_requestArr[4]))
                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestArr[3]));
                    p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestArr[4]));
                    p_requestVO.setRequestorCategoryCode(p_requestArr[5]);
                    p_c2sTransferVO.setReceiverVO(receiverVO);
                    break;
                }    
                    
                case 7:
                    {
                        if (!(p_requestArr[5].equalsIgnoreCase(PretupsI.BCU_USER) || p_requestArr[5].equalsIgnoreCase(PretupsI.CUSTOMER_CARE)|| p_requestArr[5].equalsIgnoreCase(TypesI.SUPER_CUSTOMER_CARE) || p_requestArr[5].equalsIgnoreCase(TypesI.SUPER_CHANNEL_ADMIN))) {
                            if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                                try {

                                    ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                                } catch (BTSLBaseException be) {
                                    if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                        .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                        p_con.commit();
                                    }
                                    throw be;
                                }
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo=null;
        				if((prvo=getPrivateRechargeDetails(p_con,custMsisdn))!=null)
        				{
        					p_c2sTransferVO.setSubscriberSID(custMsisdn);
        					custMsisdn=prvo.getMsisdn();						
        				}
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
                        final String oldTxnId = p_requestArr[2];
                        if (BTSLUtil.isNullString(oldTxnId)) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PRE_TXN_ID_REVERSAL);
                        } else {
                            p_c2sTransferVO.setOldTxnId(oldTxnId.trim());
                        }
                        // p_requestVO.setReceiverLocale(Integer.parseInt(p_requestArr[4]))
                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestArr[3]));
                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestArr[4]));
                        p_requestVO.setRequestorCategoryCode(p_requestArr[5]);
                        p_requestVO.setRequestorUserId(p_requestArr[6]);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);

            }
        } catch (BTSLBaseException be) {
            _log.errorTrace(obj, be);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SPrepaidReverrsalRequest]", "",
                "", "", "Exception while validating user message" + " ,getting Exception=" + be.getMessage());
            throw new BTSLBaseException(this, obj, be.getMessage(),be);

        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SPrepaidReverrsalRequest]", "",
                "", "", "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }

    }

    /**
     * Method that will validate the user message sent
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateCollectionBillpaymentRequest(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateC2SReverrsalRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateC2SReverrsalRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            // String [] strArr=null
            // double requestAmt=0
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            switch (messageLen) {
                case 4:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {

                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
                        final String oldTxnId = p_requestArr[2];
                        if (BTSLUtil.isNullString(oldTxnId)) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_TXN_ID_REVERSAL);
                        } else {
                            p_c2sTransferVO.setOldTxnId(oldTxnId.trim());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        p_c2sTransferVO.setReceiverVO(receiverVO);

                        break;
                    }
                case 5:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {

                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));

                        final String oldTxnId = p_requestArr[4];
                        if (BTSLUtil.isNullString(oldTxnId)) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_TXN_ID_REVERSAL);
                        } else {
                            p_c2sTransferVO.setOldTxnId(oldTxnId.trim());
                        }
                        break;
                    }

                case 6:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, "validateC2SRechargeRequest", PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        final String oldTxnId = p_requestArr[5];
                        if (BTSLUtil.isNullString(oldTxnId)) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_TXN_ID_REVERSAL);
                        } else {
                            p_c2sTransferVO.setOldTxnId(oldTxnId.trim());
                        }
                        break;
                    }

                case 7:
                    {
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        // requestAmtStr=p_requestArr[2]
                        // PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr)
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[2])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                            // changed for CRE_INT_CR00029 by ankit Zindal
                            // in case of binary message we will set default
                            // value after
                            // calling getselectorvaluefromcode method
                            /*
                             * else
                             * p_requestVO.setReqSelector((Constants.getProperty
                             * (
                             * "CVG_UNICODE_"
                             * +p_requestVO.getLocale().getLanguage().toUpperCase
                             * ())));
                             */} else {
                            p_requestVO.setReqSelector(p_requestArr[2]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        final String oldTxnId = p_requestArr[6];
                        if (BTSLUtil.isNullString(oldTxnId)) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_TXN_ID_REVERSAL);
                        } else {
                            p_c2sTransferVO.setOldTxnId(oldTxnId.trim());
                        }
                        break;
                    }
                case 8:
                    {
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                            /*
                             * else
                             * p_requestVO.setReqSelector((Constants.getProperty
                             * (
                             * "CVG_UNICODE_"
                             * +p_requestVO.getLocale().getLanguage().toUpperCase
                             * ())));
                             */} else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            /*
                             * if(LocaleMasterCache.getLocaleFromCodeDetails(String
                             * .valueOf
                             * (langCode))==null) throw new
                             * BTSLBaseException(this,"validateC2SRechargeRequest"
                             * ,PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                             */p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            // ChangeID=LOCALEMASTER
                            // Sender locale has to be overwritten in transferVO
                            // also.
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        final String oldTxnId = p_requestArr[7];
                        if (BTSLUtil.isNullString(oldTxnId)) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_TXN_ID_REVERSAL);
                        } else {
                            p_c2sTransferVO.setOldTxnId(oldTxnId.trim());
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
            }

        } catch (BTSLBaseException be) {
            _log.errorTrace(obj, be);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SReverrsalRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + be.getMessage());
            throw new BTSLBaseException(this, obj, be.getMessage(),be);

        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SReverrsalRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /**
     * Method that will validate the old txn id
     * 
     */
    @Override
    public void validateReversalOldTxnId(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateReversalOldTxnId";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Entered Old Txn Id=" + p_c2sTransferVO.getOldTxnId());
        }
        String allowedServicesForReversal = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.ALLOWED_SERVICES_FOR_REVERSAL);
        try {
            final C2STransferDAO c2STransferDAO = new C2STransferDAO();

            final ReceiverVO _receiverVO = (ReceiverVO) p_c2sTransferVO.getReceiverVO();
            C2STransferVO transferVO = null;
            if (PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL.equals(p_requestVO.getServiceType())) {
                transferVO = c2STransferDAO.loadOldTxnIDForReversal(p_con, p_c2sTransferVO, p_requestVO, PretupsI.SERVICE_TYPE_CHNL_RECHARGE);
            } else {
                transferVO = c2STransferDAO.loadOldTxnIDForReversal(p_con, p_c2sTransferVO, p_requestVO, PretupsI.COLLECTION_BILLPAYMENT);
            }
            
            
            if (transferVO == null) {
                if (PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL.equals(p_requestVO.getServiceType())) {
                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PRE_TXN_ID_REVERSAL);
                } else {
                    throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.C2S_INVALID_TXN_ID_REVERSAL);
                }
            }
            
            if (!(PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL.equals(p_requestVO.getServiceType())))
            {	
            if(!(Arrays.asList(allowedServicesForReversal.split(",")).contains(transferVO.getServiceType()))){
				p_requestVO.setMessageCode(PretupsErrorCodesI.REVERSAL_NOT_ALLOWED);
				throw new BTSLBaseException("OperatorUtil",obj,PretupsErrorCodesI.REVERSAL_NOT_ALLOWED);					
			  }
            }
            if (!transferVO.getSenderMsisdn().equalsIgnoreCase(p_c2sTransferVO.getSenderMsisdn())) {
                if (PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL.equals(p_requestVO.getServiceType())) {
                    throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.C2S_INVALID_PRE_SENDERMSISDN_REVERSAL);
                } else {
                    throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.C2S_INVALID_SENDERMSISDN_REVERSAL);
                }
            }
            if (!transferVO.getReceiverMsisdn().equalsIgnoreCase(_receiverVO.getMsisdn())) {
                if (PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL.equals(p_requestVO.getServiceType())) {
                    throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.C2S_INVALID_PRE_RECEIVERMSISDN_REVERSAL);
                } else {
                    throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.C2S_INVALID_RECEIVERMSISDN_REVERSAL);
                }
            }
            if (transferVO.getTransferStatus().equalsIgnoreCase(PretupsErrorCodesI.TXN_STATUS_FAIL)) {
                if (PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL.equals(p_requestVO.getServiceType())) {
                    throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.C2S_PRE_REVERSAL_FAILED);
                } else {
                    throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.C2S_PREVIOUS_FAIL_REVERSAL);
                }
            }
            if (transferVO.getTransferStatus().equalsIgnoreCase(PretupsErrorCodesI.TXN_STATUS_AMBIGUOUS)) {
                if (PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL.equals(p_requestVO.getServiceType())) {
                    throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.C2S_RECEIVER_AMBIGOUS_PRE_REVERSAL_MESSAGE);
                } else {
                    throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.C2S_PREVIOUS_AMBIGUOUS_REVERSAL);
                }
            }
            // Check Whether reversal alreday done or not
            if (!BTSLUtil.isNullString(transferVO.getReverseTransferID())) {
                if (PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL.equals(p_requestVO.getServiceType())) {
                    throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.C2S_PRE_REVERSAL_ALREADY_DONE);
                } else {
                    throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.C2S_REVERSAL_ALREADY_DONE);
                }
            }
            Integer revC2STrnExpiry = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.RVE_C2S_TRN_EXPIRY);
            // In Minutes
            if ((int)revC2STrnExpiry < (p_requestVO.getRequestStartTime() - transferVO.getTransferDateTime().getTime()) / (1000 * 60)) {
                throw new BTSLBaseException("OperatorUtil", obj, PretupsErrorCodesI.C2S_WRONG_TRANSACTION_REVERSAL_TIMEOUT);
            }

            copyOldTxnToNew(p_c2sTransferVO, transferVO);

        } catch (BTSLBaseException be) {
            _log.errorTrace(obj, be);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateReversalOldTxnId]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + be.getMessage());
            throw new BTSLBaseException(this, obj, be.getMessage(),be);

        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateReversalOldTxnId]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }
    
    
    @Override
	public C2STransferVO getC2STransferVOFromTxnID(Connection p_con,C2STransferVO p_c2sTransferVO,RequestVO p_requestVO) throws BTSLBaseException
	{
		final String obj = "getC2STransferVOFromTxnID";
		C2STransferVO transferVO = null;
		if(_log.isDebugEnabled()) {
			_log.debug(obj,"Entered Old Txn Id=" + p_c2sTransferVO.getOldTxnId()+ "Service Type= "+p_requestVO.getServiceType());
		}
		String allowedServicesForReversal = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.ALLOWED_SERVICES_FOR_REVERSAL);
		try{
			C2STransferDAO c2STransferDAO = new C2STransferDAO();
			if(PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL.equals(p_requestVO.getServiceType() )|| PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL_BULK.equals(p_requestVO.getServiceType())) {
				transferVO=c2STransferDAO.loadOldTxnIDForReversal(p_con,p_c2sTransferVO,p_requestVO,PretupsI.SERVICE_TYPE_CHNL_RECHARGE);			
				
				if(transferVO==null){
					p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_REVERSAL_INVALID_TXNID);
					throw new BTSLBaseException("ExtAPIXMLStringParser",obj,PretupsErrorCodesI.C2S_REVERSAL_INVALID_TXNID);					
				}
				else if(!(Arrays.asList(allowedServicesForReversal.split(",")).contains(PretupsI.SERVICE_TYPE_CHNL_RECHARGE))){
					p_requestVO.setMessageCode(PretupsErrorCodesI.REVERSAL_NOT_ALLOWED);
					throw new BTSLBaseException("ExtAPIXMLStringParser",obj,PretupsErrorCodesI.REVERSAL_NOT_ALLOWED);					
				}
				
			
			}	
			
		}
		catch(BTSLBaseException be)
		{
			_log.errorTrace(obj, be);
			EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"PretupsBL[getC2STransferVOFromTxnID]","","","","Exception while getting C2StransferVo based on TxnID" +" ,getting Exception="+be.getMessage());
			throw new BTSLBaseException(this,obj,be.getMessage(),be);

		}
		catch(Exception e)
		{
			_log.errorTrace(obj, e);
			EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"PretupsBL[getC2STransferVOFromTxnID]","","","","Exception while getting C2StransferVo based on TxnID" +" ,getting Exception="+e.getMessage());
			throw new BTSLBaseException(this,obj,PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
		}
		if(_log.isDebugEnabled()) {
			_log.debug(obj,"Exiting ");
		}
		return transferVO;
	}

    

    /**
     * Copy Property from old txn to new txn object
     * 
     * @param oldTransferVO
     * @param newTransferVO2
     * @throws BTSLBaseException
     */
    private void copyOldTxnToNew(C2STransferVO oldTransferVO, C2STransferVO newTransferVO2) throws BTSLBaseException {
		final String METHOD_NAME = "copyOldTxnToNew";
		if(_log.isDebugEnabled())_log.debug(METHOD_NAME, "Before OptUtil Tax3:Tax4="+newTransferVO2.getReceiverTax3Rate()+":"+newTransferVO2.getReceiverTax4Rate());
		Boolean isCgTax34App = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CGTAX34APP);
		try{

            oldTransferVO.setReceiverMsisdn(newTransferVO2.getReceiverMsisdn());
            oldTransferVO.setRequestedAmount(newTransferVO2.getRequestedAmount());
            oldTransferVO.setTransferValue(newTransferVO2.getTransferValue());
            oldTransferVO.setErrorCode(newTransferVO2.getErrorCode());
            oldTransferVO.setReceiverValidity(newTransferVO2.getReceiverValidity());
            oldTransferVO.setReceiverTransferValue(newTransferVO2.getReceiverTransferValue());
            oldTransferVO.setReceiverNetworkCode(newTransferVO2.getReceiverNetworkCode());
            oldTransferVO.setCardGroupCode(newTransferVO2.getCardGroupCode());
            oldTransferVO.setCardGroupID(newTransferVO2.getCardGroupID());
            oldTransferVO.setCardGroupSetID(newTransferVO2.getCardGroupID());
            oldTransferVO.setVersion(newTransferVO2.getVersion());
            oldTransferVO.setDifferentialApplicable(newTransferVO2.getDifferentialApplicable());
            oldTransferVO.setDifferentialGiven(newTransferVO2.getDifferentialGiven());
            oldTransferVO.setReceiverTax1Type(newTransferVO2.getReceiverTax1Type());
            oldTransferVO.setReceiverTax1Rate(newTransferVO2.getReceiverTax1Rate());
            oldTransferVO.setReceiverTax1Value(newTransferVO2.getReceiverTax1Value());
            oldTransferVO.setReceiverTax2Type(newTransferVO2.getReceiverTax2Type());
            oldTransferVO.setReceiverTax2Rate(newTransferVO2.getReceiverTax2Rate());
            oldTransferVO.setReceiverTax2Value(newTransferVO2.getReceiverTax2Value());
            if(!BTSLUtil.isNullObject(isCgTax34App) && isCgTax34App)
			{
				oldTransferVO.setReceiverTax3Type(newTransferVO2.getReceiverTax3Type());
				oldTransferVO.setReceiverTax3Rate(newTransferVO2.getReceiverTax3Rate());
				oldTransferVO.setReceiverTax3Value(newTransferVO2.getReceiverTax3Value());
				oldTransferVO.setReceiverTax4Type(newTransferVO2.getReceiverTax4Type());
				oldTransferVO.setReceiverTax4Rate(newTransferVO2.getReceiverTax4Rate());
				oldTransferVO.setReceiverTax4Value(newTransferVO2.getReceiverTax4Value());
			}
            oldTransferVO.setReceiverBonusValue(newTransferVO2.getReceiverBonusValue());
            oldTransferVO.setReceiverGracePeriod(newTransferVO2.getReceiverGracePeriod());
            oldTransferVO.setReceiverBonusValidity(newTransferVO2.getReceiverBonusValidity());
            oldTransferVO.setReceiverValPeriodType(newTransferVO2.getReceiverValPeriodType());
            oldTransferVO.setSenderTransferItemVO(newTransferVO2.getSenderTransferItemVO());
            oldTransferVO.setReverseTransferID(newTransferVO2.getReverseTransferID());
            oldTransferVO.setSelectorCode(newTransferVO2.getSelectorCode());
            oldTransferVO.setSubService(newTransferVO2.getSubService());
			if(_log.isDebugEnabled())_log.debug(METHOD_NAME, "After OptUtil Tax3:Tax4="+oldTransferVO.getReceiverTax3Rate()+":"+oldTransferVO.getReceiverTax4Rate());

        } catch (Exception e) {
            _log.errorTrace(METHOD_NAME, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[copyOldTxnToNew]", "", "", "",
                "Exception while Copy Property from db " + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, METHOD_NAME, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }

    }

    public static String getDateTimeStringFromDate(Date date) throws ParseException {
        final String format = "yyyy-MM-dd HH:mm:ss";
        final SimpleDateFormat sdf = new SimpleDateFormat(format);
        sdf.setLenient(false); // this is required else it will convert
        return sdf.format(date);
    }

    @Override
    public String c2sTransferTDRLog(C2STransferVO p_c2sTransferVO, TransferItemVO p_senderTransferItemVO, TransferItemVO p_receiverTransferItemVO) {
        final String methodName = "c2sTransferTDRLog";
        String returnStr = null;
        try {
            final StringBuffer strBuff = new StringBuffer();
            strBuff.append(getDateTimeStringFromDate(p_c2sTransferVO.getTransferDateTime()));
            strBuff.append("," + p_c2sTransferVO.getReceiverMsisdn());
            strBuff.append("," + p_c2sTransferVO.getRequestedAmount());
            strBuff.append("," + p_c2sTransferVO.getCellId());
            strBuff.append("," + p_c2sTransferVO.getProductCode());
            returnStr = strBuff.toString();

        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate c2sTransferTDRLog:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    @Override
    public void validatePPBEnquiryRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validatePPBEnquiryRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;

            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            final int messageLen = p_requestArr.length;
            if (messageLen < 3 || messageLen > 5) {
                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            }
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
                case 3:
                    {
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                    }
                case 4:
                    {
                        final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[2]);
                        if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_INVALID_LANGUAGECODE);
                        }
                        p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                    }
                case 5:
                    {

                        int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[2]);
                        if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_INVALID_LANGUAGECODE);
                        }
                        p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                        if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                        }
                        p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));

                    }
            }
            if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                try {
                    ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[p_requestArr.length - 1]);
                } catch (BTSLBaseException be) {
                    if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                        .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                        p_con.commit();
                    }
                    throw be;
                }
            }
            final ReceiverVO receiverVO = new ReceiverVO();
            // Customer MSISDN Validation
            custMsisdn = p_requestArr[1];
            PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);
            p_c2sTransferVO.setReceiverVO(receiverVO);

        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validatePPBEnquiryRequest]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Exiting ");
        }
    }

    /**
     * @param p_con
     * @param p_redemptionVO
     * @author gaurav.pandey
     */
    @Override
    public LoyaltyPointsRedemptionVO CalculateSumOfTrasaction(Connection p_con, LoyaltyPointsRedemptionVO p_redemptionVO) {
        final String obj = "CalculateSumOfTrasaction";
        if (_log.isDebugEnabled()) {
            _log.debug(obj, "Entered...");
        }

        PreparedStatement pstmtSelect = null;
        PreparedStatement pstmtSelect1 = null;
        PreparedStatement pstmtSelect2 = null;
        ResultSet rs = null;
        ResultSet rs1 = null;
        ResultSet rs2 = null;
        try {
            final StringBuffer selectQueryBuffer = new StringBuffer();

            if ("C2S".equalsIgnoreCase(p_redemptionVO.getModuleType())) {
                selectQueryBuffer.append(" SELECT SUM (dctd.sender_transfer_amount) FROM daily_c2s_trans_details dctd ");
                selectQueryBuffer.append(" WHERE ");
                selectQueryBuffer.append(" dctd.user_id =? and dctd.trans_date >= ? and dctd.trans_date <=? ");
                if (!"ALL".equalsIgnoreCase(p_redemptionVO.getServiceCode())) {
                    selectQueryBuffer.append(" and dctd.service_type=? ");
                }

                final String selectQuery = selectQueryBuffer.toString();
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "SQL Query :" + selectQuery);
                }
                pstmtSelect = p_con.prepareStatement(selectQuery);
                pstmtSelect.setString(1, p_redemptionVO.getUserID());
                pstmtSelect.setDate(2, BTSLUtil.getSQLDateFromUtilDate(p_redemptionVO.getReferenceFromDate()));
                pstmtSelect.setDate(3, BTSLUtil.getSQLDateFromUtilDate(p_redemptionVO.getReferenceToDate()));
                if (!"ALL".equalsIgnoreCase(p_redemptionVO.getServiceCode())) {
                    pstmtSelect.setString(4, p_redemptionVO.getServiceCode());
                }
                rs = pstmtSelect.executeQuery();
                if (rs != null) {
                    while (rs.next()) {

                        p_redemptionVO.setSumAmount(rs.getLong(1));
                    }
                }
            }

            else if ("O2C".equalsIgnoreCase(p_redemptionVO.getModuleType())) {
                selectQueryBuffer.append(" SELECT SUM(dctm.O2C_TRANSFER_IN_AMOUNT) FROM daily_chnl_trans_main dctm ");
                selectQueryBuffer.append(" WHERE ");
                selectQueryBuffer.append(" dctm.user_id =? and dctm.trans_date >= ? and dctm.trans_date <=? ");
                final String selectQuery = selectQueryBuffer.toString();
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "SQL Query :" + selectQuery);
                }
                pstmtSelect1 = p_con.prepareStatement(selectQuery);
                pstmtSelect1.setString(1, p_redemptionVO.getUserID());
                pstmtSelect1.setDate(2, BTSLUtil.getSQLDateFromUtilDate(p_redemptionVO.getReferenceFromDate()));
                pstmtSelect1.setDate(3, BTSLUtil.getSQLDateFromUtilDate(p_redemptionVO.getReferenceToDate()));
                rs1 = pstmtSelect1.executeQuery();
                if (rs1 != null) {
                    while (rs1.next()) {

                        p_redemptionVO.setSumAmount(rs1.getLong(1));
                    }
                }

            }

            else if ("C2C".equalsIgnoreCase(p_redemptionVO.getModuleType())) {
                selectQueryBuffer.append(" SELECT  SUM(C2C_TRANSFER_OUT_AMOUNT)+SUM(C2C_TRANSFER_IN_AMOUNT) sum ");
                selectQueryBuffer.append(" FROM daily_chnl_trans_main dctm ");
                selectQueryBuffer.append(" WHERE ");
                selectQueryBuffer.append(" dctm.user_id =? and dctm.trans_date >= ? and dctm.trans_date <=? ");
                final String selectQuery = selectQueryBuffer.toString();
                if (_log.isDebugEnabled()) {
                    _log.debug(obj, "SQL Query :" + selectQuery);
                }
                pstmtSelect2 = p_con.prepareStatement(selectQuery);
                pstmtSelect2.setString(1, p_redemptionVO.getUserID());
                pstmtSelect2.setDate(2, BTSLUtil.getSQLDateFromUtilDate(p_redemptionVO.getReferenceFromDate()));
                pstmtSelect2.setDate(3, BTSLUtil.getSQLDateFromUtilDate(p_redemptionVO.getReferenceToDate()));
                rs2 = pstmtSelect2.executeQuery();
                if (rs2 != null) {
                    while (rs2.next()) {

                        p_redemptionVO.setSumAmount(rs2.getLong("sum"));
                    }
                }

            }

        } catch (SQLException sqe) {
            _log.errorTrace(obj, sqe);
        } catch (Exception ex) {
            _log.errorTrace(obj, ex);

        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (Exception e) {
                _log.errorTrace(obj, e);
            }
            try {
                if (rs1 != null) {
                    rs1.close();
                }
            } catch (Exception e) {
                _log.errorTrace(obj, e);
            }
            try {
                if (rs2 != null) {
                    rs2.close();
                }
            } catch (Exception e) {
                _log.errorTrace(obj, e);
            }
            try {
                if (pstmtSelect != null) {
                    pstmtSelect.close();
                }
            } catch (Exception e) {
                _log.errorTrace(obj, e);
            }
            try {
                if (pstmtSelect1 != null) {
                    pstmtSelect1.close();
                }
            } catch (Exception e) {
                _log.errorTrace(obj, e);
            }
            try {
                if (pstmtSelect2 != null) {
                    pstmtSelect2.close();
                }
            } catch (Exception e) {
                _log.errorTrace(obj, e);
            }
            if (_log.isDebugEnabled()) {
                _log.debug(obj, "Exiting with sum Amount:" + p_redemptionVO.getSumAmount());
            }
        }
        return p_redemptionVO;

    }

    /**
     * Method formatO2CBatchMasterTxnID. This method generate the batch ID for
     * the O2C batch master transfer.
     * 
     * @param p_batchMasterVO
     *            FOCBatchMasterVO
     * @param p_tempTransferID
     *            long
     * @return String
     * 
     * @see com.btsl.pretups.util.OperatorUtilI#formatFOCBatchMasterTxnID(FOCBatchMasterVO,
     *      long)
     */
    @Override
    public String formatO2CBatchMasterTxnID(O2CBatchMasterVO p_batchMasterVO, long p_tempTransferID) {
        final String methodName = "formatO2CBatchMasterTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), O2C_BATCH_MASTER_ID_PAD_LENGTH);
            returnStr = p_batchMasterVO.getNetworkCode()+PretupsI.O2C_BATCH_TRANSACTION_ID + currentDateTimeFormatString(p_batchMasterVO.getCreatedOn()) + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatO2CBatchMasterTxnID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatO2CBatchDetailsTxnID. This method generate the batch details
     * ID for the O2C batch items.
     * 
     * @param p_batchMasterID
     *            String
     * @param p_tempTransferID
     *            long
     * @return String // added by rajeev.kumar2
     * @see com.btsl.pretups.util.OperatorUtilI#formatFOCBatchDetailsTxnID(String,
     *      long)
     */
    @Override
    public String formatO2CBatchDetailsTxnID(String p_batchMasterID, long p_tempTransferID) {
        final String methodName = "formatO2CBatchDetailsTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), O2C_BATCH_DETAIL_ID_PAD_LENGTH);
            returnStr = p_batchMasterID + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[formatO2CBatchDetailsTxnID]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatC2SRoamTransferID.
     * 
     * @param p_transferVO
     *            TransferVO
     * @param p_tempTransferID
     *            long
     * @return String
     * @see com.btsl.pretups.util.OperatorUtilI#formatC2STransferID(TransferVO,
     *      long)
     */
    @Override
    public String formatC2SRoamTransferID(TransferVO p_transferVO, long p_tempTransferID) {
        final String methodName = "formatC2SRoamTransferID";
        String returnStr = null;
        try {
            // ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO()
            // String currentYear=BTSLUtil.getFinancialYearLastDigits(2)
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
            // returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr
            // returnStr="R"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr
            returnStr = "R" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method that will validate the user message sent
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateC2SRoamRechargeRequest(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateC2SRoamRechargeRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "validateC2SRoamRechargeRequest";
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            // String [] strArr=null
            // double requestAmt=0
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug("validateC2SRoamRechargeRequest", "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug("validateC2SRoamRechargeRequest", "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            switch (messageLen) {
                case 4:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 5:
                    {
                        // Do the 000 check Default PIN
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, "validateC2SRoamRechargeRequest", PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }

                case 6:
                    {
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                            // changed for CRE_INT_CR00029 by ankit Zindal
                            // in case of binary message we will set default
                            // value after
                            // calling getselectorvaluefromcode method
                            /*
                             * else
                             * p_requestVO.setReqSelector((Constants.getProperty
                             * (
                             * "CVG_UNICODE_"
                             * +p_requestVO.getLocale().getLanguage().toUpperCase
                             * ())));
                             */} else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, "validateC2SRoamRechargeRequest", PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 7:
                    {
                        // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
                        // &&
                        // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
                        if ((((ChannelUserVO) p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];

                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                            /*
                             * else
                             * p_requestVO.setReqSelector((Constants.getProperty
                             * (
                             * "CVG_UNICODE_"
                             * +p_requestVO.getLocale().getLanguage().toUpperCase
                             * ())));
                             */} else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        // changed for CRE_INT_CR00029 by ankit Zindal
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            /*
                             * if(LocaleMasterCache.getLocaleFromCodeDetails(String
                             * .valueOf
                             * (langCode))==null) throw new
                             * BTSLBaseException(this,
                             * "validateC2SRoamRechargeRequest"
                             * ,PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                             */p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                            // ChangeID=LOCALEMASTER
                            // Sender locale has to be overwritten in transferVO
                            // also.
                            p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
                            p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
                            p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, "validateC2SRoamRechargeRequest", PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, "validateC2SRoamRechargeRequest", PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO
                        .getActualMessageFormat() }, null);
            }

            /*
             * if(p_requestArr.length <5) throw new
             * BTSLBaseException(this,"validateC2SRoamRechargeRequest",
             * PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT);
             * 
             * //Do the 000 check Default PIN
             * if((((ChannelUserVO)p_c2sTransferVO
             * .getSenderVO()).getUserPhoneVO(
             * )).getPinRequired().equals(PretupsI.YES) &&
             * !PretupsI.DEFAULT_C2S_PIN
             * .equals(BTSLUtil.decryptText((((ChannelUserVO
             * )p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
             * ChannelUserBL.validatePIN(p_con,channelUserVO.getUserPhoneVO(),
             * p_requestArr[4]);
             * 
             * ReceiverVO receiverVO=new ReceiverVO(); //Customer MSISDN
             * Validation custMsisdn=p_requestArr[1];
             * 
             * validateMsisdn(receiverVO,p_c2sTransferVO.getRequestID(),custMsisdn
             * );
             * 
             * //Recharge amount Validation requestAmtStr=p_requestArr[2];
             * validateAmount(p_c2sTransferVO,requestAmtStr);
             * p_c2sTransferVO.setReceiverVO(receiverVO);
             */
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            _log.error("validateC2SRoamRechargeRequest", "  Exception while validating user message :" + e.getMessage());
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SRoamRechargeRequest]", "", "",
                "", "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, "validateC2SRoamRechargeRequest", PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug("validateC2SRoamRechargeRequest", "Exiting ");
        }
    }

    @Override
    public int changeUserStatusToActive(Connection p_con, String p_activeUserID, String p_currentStatus, String p_newStatus) throws BTSLBaseException {
        final String methodName = "changeUserStatusToActive";
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Entered  p_currentStatus : " + p_currentStatus + ", p_newStatus : " + p_newStatus);
        }

        PreparedStatement pstmt1 = null;
        PreparedStatement pstmt2 = null;

        int updateCount1 = 0;
        int updateCount2 = 0;
        int updateCount = 0;
        try {

            final StringBuffer updateQueryBuffer1 = new StringBuffer();
            final Date currentDate = new Date();
            updateQueryBuffer1.append("update users set status = ? , previous_status =? , modified_on = ?  where user_id = ? ");
            final String updateQuery1 = updateQueryBuffer1.toString();
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "SQL Query :" + updateQuery1);
            }
            pstmt1 = p_con.prepareStatement(updateQuery1);
            pstmt1.setString(1, p_newStatus);
            pstmt1.setString(2, p_currentStatus);
            pstmt1.setTimestamp(3, BTSLUtil.getSQLDateTimeFromUtilDate(currentDate));
            pstmt1.setString(4, p_activeUserID);
            updateCount1 = pstmt1.executeUpdate();

            final StringBuffer updateQueryBuffer2 = new StringBuffer();
            updateQueryBuffer2.append("update channel_users set activated_on =  ?  where user_id = ? ");
            final String updateQuery2 = updateQueryBuffer2.toString();
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "SQL Query :" + updateQuery2);
            }
            pstmt2 = p_con.prepareStatement(updateQuery2);
            pstmt2.setTimestamp(1, BTSLUtil.getSQLDateTimeFromUtilDate(currentDate));
            pstmt2.setString(2, p_activeUserID);
            updateCount2 = pstmt2.executeUpdate();

            updateCount = updateCount1 & updateCount2;

        } catch (SQLException sqe) {
            _log.error(methodName, "SQLException : " + sqe);
            _log.errorTrace(methodName, sqe);
        }

        finally {
            try {
                if (pstmt1 != null) {
                    pstmt1.close();
                }
            } catch (Exception e) {
                _log.errorTrace(methodName, e);
            }
            try {
                if (pstmt2 != null) {
                    pstmt2.close();
                }
            } catch (Exception e) {
                _log.errorTrace(methodName, e);
            }
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "Exiting ");
            }
        }
        return updateCount;
    }

    @Override
    public void validateVoucherPin(Connection p_con, RequestVO p_requestVO, TransferVO p_transferVO) throws BTSLBaseException, Exception {
        final String[] requestMessageArray = p_requestVO.getRequestMessageArray();
        final int i = 1;
        String receiverMSISDN = requestMessageArray[i];
        receiverMSISDN = addRemoveDigitsFromMSISDN(PretupsBL.getFilteredMSISDN(receiverMSISDN));
        if (!BTSLUtil.isValidMSISDN(receiverMSISDN)) {
            throw new BTSLBaseException(this, "checkAfterPaymentMethod", PretupsErrorCodesI.ERROR_INVALID_MSISDN, 0, new String[] { receiverMSISDN }, null);
        }
        final ReceiverVO _receiverVO = new ReceiverVO();
        if(!BTSLUtil.isNullString(p_requestVO.getReceiverMsisdn()) && !p_requestVO.getReceiverMsisdn().equals(receiverMSISDN))
        {
        	 _receiverVO.setMsisdn(p_requestVO.getReceiverMsisdn()); 	
        }else{
        	 _receiverVO.setMsisdn(receiverMSISDN);
        }
        
        
       
        final NetworkPrefixVO networkPrefixVO = PretupsBL.getNetworkDetails(receiverMSISDN, PretupsI.USER_TYPE_RECEIVER);
        if (networkPrefixVO == null) {
            throw new BTSLBaseException(this, "checkAfterPaymentMethod", PretupsErrorCodesI.ERROR_NOTFOUND_RECEIVERNETWORK, 0, new String[] { receiverMSISDN }, null);
        }
        _receiverVO.setNetworkCode(networkPrefixVO.getNetworkCode());
        _receiverVO.setPrefixID(networkPrefixVO.getPrefixID());
        _receiverVO.setSubscriberType(networkPrefixVO.getSeriesType());
        p_transferVO.setReceiverVO(_receiverVO);
    }

    /**
     * Method that will validate the user message sent
     * 
     * @param p_con
     * @param p_c2sTransferVO
     * @param p_requestVO
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#validateEVDO2CRequestFormat(Connection,
     *      C2STransferVO, RequestVO)
     */
    @Override
    public void validateEVDO2CRequestFormat(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
        final String obj = "validateEVDRequestFormat";
        final String methodName = obj;
        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }
            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(methodName, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

            switch (messageLen) {
                case 4:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 5:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        // requestAmtStr=p_requestArr[2]
                        // PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr)
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                        // Changed on 27/05/07 for Service Type selector Mapping
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                            .getServiceType());
                        if (serviceSelectorMappingVO != null) {
                            p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                        }
                        break;
                    }

                case 6:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if (PretupsI.LOCALE_LANGAUGE_EN.equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 7:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        // Recharge amount Validation
                        requestAmtStr = p_requestArr[2];
                        PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[3])) {
                            if (PretupsI.LOCALE_LANGAUGE_EN.equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                                // Changed on 27/05/07 for Service Type selector
                                // Mapping
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[3]);
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
                            // Changed on 27/05/07 for Service Type selector
                            // Mapping
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                            }
                        }
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[4])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[5])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() },
                        null);
            }
            // Self EVR Allowed Check
            final String senderMSISDN = (channelUserVO.getUserPhoneVO()).getMsisdn();
            final String receiverMSISDN = ((ReceiverVO) p_c2sTransferVO.getReceiverVO()).getMsisdn();
            Boolean isAllowSelfEvr = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.ALLOW_SELF_EVR);
            if (p_c2sTransferVO.getServiceType().equals(PretupsI.SERVICE_TYPE_EVR)) {
                if (receiverMSISDN.equals(senderMSISDN) && !isAllowSelfEvr) {
                    throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.CHNL_ERROR_SELF_TOPUP_NTALLOWD);
                }
            }
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validateEVDRequestFormat]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exiting ");
        }

    }

    /**
     * Method decryptPINPassword.
     * 
     * @param p_password
     *            String
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#decryptPINPassword(String
     *      p_pinpassword)
     */
    @Override
    public String decryptPINPassword(String p_pinpassword) throws BTSLBaseException {
        return p_pinpassword;
    }

    /**
     * Method decryptPINPassword.
     * 
     * @param p_password
     *            String
     * @throws BTSLBaseException
     * @see com.btsl.pretups.util.OperatorUtilI#encryptPINPassword(String
     *      p_pinpassword)
     */
    @Override
    public String encryptPINPassword(String p_pinpassword) throws BTSLBaseException {
        return p_pinpassword;
    }

    /**
     * Method formatFOCBatchMasterTxnID. This method generate the batch ID for
     * the FOC batch master transfer.
     * 
     * @param p_batchMasterVO
     *            FOCBatchMasterVO
     * @param p_tempTransferID
     *            long
     * @return String
     * 
     * @see com.btsl.pretups.util.OperatorUtilI#formatFOCBatchMasterTxnID(FOCBatchMasterVO,
     *      long)
     */
    @Override
    public String formatLPTBatchMasterTxnID(FOCBatchMasterVO p_batchMasterVO, long p_tempTransferID) {
        final String methodName = "formatLPTBatchMasterTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), LPT_BATCH_MASTER_ID_PAD_LENGTH);
            returnStr = PretupsI.LPT_BATCH_TRANSACTION_ID + currentDateTimeFormatString(p_batchMasterVO.getCreatedOn()) + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[" + methodName + "]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }

    /**
     * Method formatFOCBatchDetailsTxnID. This method generate the batch details
     * ID for the FOC batch items.
     * 
     * @param p_batchMasterID
     *            String
     * @param p_tempTransferID
     *            long
     * @return String
     * 
     * @see com.btsl.pretups.util.OperatorUtilI#formatFOCBatchDetailsTxnID(String,
     *      long)
     */
    @Override
    public String formatLPTBatchDetailsTxnID(String p_batchMasterID, long p_tempTransferID) {
        final String methodName = "formatLPTBatchDetailsTxnID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), LPT_BATCH_DETAIL_ID_PAD_LENGTH);
            returnStr = p_batchMasterID + "." + paddedTransferIDStr;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[" + methodName + "]", "", "", "",
                "Not able to generate Transaction ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }
	
	@Override
	public void validateCP2PIRServiceRequest(Connection p_con,P2PTransferVO p2pTransferVO,RequestVO p_requestVO)  throws BTSLBaseException
	{
		try
		{
			String[] p_requestArr=p_requestVO.getRequestMessageArray();
			String custMsisdn=null;
			String requestAmtStr=null;
			String actualPin=null;
			String pin=null;
			IATTransferItemVO iatTransferItemVO=null;
			SenderVO senderVO=(SenderVO)p2pTransferVO.getSenderVO();
			actualPin=senderVO.getPin();
			int messageLen=p_requestArr.length;
			if(_log.isDebugEnabled()) _log.debug("validateCP2PIRServiceRequest","messageLen: "+messageLen);
			for(int i=0;i<messageLen;i++)
			{
				if(_log.isDebugEnabled()) _log.debug("validateCP2PIRServiceRequest","i: "+i+" value: "+p_requestArr[i]);
			}
			
			Boolean isCP2PPinValidationRequired = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CP2P_PIN_VALIDATION_REQUIRED);
			String p2pDefaultSmsPin = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_DEFAULT_SMSPIN);
			String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
			String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

			switch(messageLen)
			{
			case 4:
			{
				pin=p_requestArr[3]; 
				//Do the 000 check Default PIN 
				if(isCP2PPinValidationRequired)
				{
					if(actualPin.equalsIgnoreCase(p2pDefaultSmsPin))
					{
						//if(!pin.equals(PretupsI.DEFAULT_P2P_PIN))
						if(!BTSLUtil.isNullString(pin)&&!pin.equals(p2pDefaultSmsPin))
						{
							BTSLUtil.validatePIN(pin);
							senderVO.setPin(BTSLUtil.encryptText(pin));
							senderVO.setPinUpdateReqd(true);
							senderVO.setActivateStatusReqd(true);
						}
					}
					else
					{
						try
						{
							SubscriberBL.validatePIN(p_con,senderVO,pin);
						}
						catch(BTSLBaseException be)
						{
							if(be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) ||  (be.getMessageKey().equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK))))
								p_con.commit();
							throw be;
						}                   
					}
				}				
				ReceiverVO receiverVO=new ReceiverVO();
				//Customer MSISDN Validation
				custMsisdn=p_requestArr[1];
				iatTransferItemVO = new IATTransferItemVO();
				PretupsBL.validateIATMsisdn(receiverVO,p2pTransferVO,custMsisdn,iatTransferItemVO);

				//Recharge amount Validation
				requestAmtStr=p_requestArr[2];
				p2pTransferVO.setIatTransferItemVO(iatTransferItemVO);
				PretupsBL.validateIATAmount(p2pTransferVO,requestAmtStr);
				p2pTransferVO.setReceiverVO(receiverVO);

				//p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE));
				//Changed on 27/05/07 for Service Type selector Mapping
				ServiceSelectorMappingVO serviceSelectorMappingVO=ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p2pTransferVO.getServiceType());
				if(serviceSelectorMappingVO!=null)
					p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
				break;
			}
			case 5:
			{pin=p_requestArr[3]; 
			//Do the 000 check Default PIN 
			if(isCP2PPinValidationRequired)
			{
				if(actualPin.equalsIgnoreCase(p2pDefaultSmsPin))
				{
					//if(!pin.equals(PretupsI.DEFAULT_P2P_PIN))
					if(!BTSLUtil.isNullString(pin)&&!pin.equals(p2pDefaultSmsPin))
					{
						BTSLUtil.validatePIN(pin);
						senderVO.setPin(BTSLUtil.encryptText(pin));
						senderVO.setPinUpdateReqd(true);
						senderVO.setActivateStatusReqd(true);
					}
				}
				else
				{
					try
					{
						SubscriberBL.validatePIN(p_con,senderVO,pin);
					}
					catch(BTSLBaseException be)
					{
						if(be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) ||  (be.getMessageKey().equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK))))
							p_con.commit();
						throw be;
					}                   
				}
			}							
				ReceiverVO receiverVO=new ReceiverVO();
				//Customer MSISDN Validation
				custMsisdn=p_requestArr[1];
				iatTransferItemVO = new IATTransferItemVO();
				PretupsBL.validateIATMsisdn(receiverVO,p2pTransferVO,custMsisdn,iatTransferItemVO);

				//Recharge amount Validation
				requestAmtStr=p_requestArr[2];
				p2pTransferVO.setIatTransferItemVO(iatTransferItemVO);
				PretupsBL.validateIATAmount(p2pTransferVO,requestAmtStr);
				p2pTransferVO.setReceiverVO(receiverVO);

				//p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE));
				//Changed on 27/05/07 for Service Type selector Mapping
				ServiceSelectorMappingVO serviceSelectorMappingVO=ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p2pTransferVO.getServiceType());
				if(serviceSelectorMappingVO!=null)
					p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());

				String notifyMSISDN = p_requestArr[3];
				if(notifyMSISDN.startsWith("00"))
					notifyMSISDN=notifyMSISDN.substring(2);	        
				else if(notifyMSISDN.startsWith("+"))
					notifyMSISDN=notifyMSISDN.substring(1);
				try
				{
					long lng=Long.parseLong(notifyMSISDN);
				}
				catch(Exception e)
				{
					throw new BTSLBaseException("PretupsBL","validateIATMsisdn",PretupsErrorCodesI.IAT_ERROR_NOTIFY_MSISDN_NOTNUMERIC,0,new String[]{notifyMSISDN},null);
				}

				iatTransferItemVO.setIatNotifyMsisdn(p_requestArr[3]);
				iatTransferItemVO.setIatNotifyMsisdnLocale(new Locale(defaultLanguage,defaultCountry));
				break;
			}
			case 6:
			{
				pin=p_requestArr[5]; 
				//Do the 000 check Default PIN 
				if(isCP2PPinValidationRequired)
				{
					if(actualPin.equalsIgnoreCase(p2pDefaultSmsPin))
					{
						//if(!pin.equals(PretupsI.DEFAULT_P2P_PIN))
						if(!BTSLUtil.isNullString(pin)&&!pin.equals(p2pDefaultSmsPin))
						{
							BTSLUtil.validatePIN(pin);
							senderVO.setPin(BTSLUtil.encryptText(pin));
							senderVO.setPinUpdateReqd(true);
							senderVO.setActivateStatusReqd(true);
						}
					}
					else
					{
						try
						{
							SubscriberBL.validatePIN(p_con,senderVO,pin);
						}
						catch(BTSLBaseException be)
						{
							if(be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.ERROR_INVALID_PIN)) ||  (be.getMessageKey().equals(PretupsErrorCodesI.ERROR_SNDR_PINBLOCK))))
								p_con.commit();
							throw be;
						}                   
					}
				}								
				ReceiverVO receiverVO=new ReceiverVO();
				//Customer MSISDN Validation
				custMsisdn=p_requestArr[1];
				iatTransferItemVO = new IATTransferItemVO();
				PretupsBL.validateIATMsisdn(receiverVO,p2pTransferVO,custMsisdn,iatTransferItemVO);

				//Recharge amount Validation
				requestAmtStr=p_requestArr[2];
				p2pTransferVO.setIatTransferItemVO(iatTransferItemVO);
				PretupsBL.validateIATAmount(p2pTransferVO,requestAmtStr);
				p2pTransferVO.setReceiverVO(receiverVO);
				//p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE));
				//Changed on 27/05/07 for Service Type selector Mapping
				ServiceSelectorMappingVO serviceSelectorMappingVO=ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p2pTransferVO.getServiceType());
				if(serviceSelectorMappingVO!=null)
					p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());

				String notifyMSISDN = p_requestArr[3];
				if(notifyMSISDN.startsWith("00"))
					notifyMSISDN=notifyMSISDN.substring(2);	        
				else if(notifyMSISDN.startsWith("+"))
					notifyMSISDN=notifyMSISDN.substring(1);
				try
				{
					long lng=Long.parseLong(notifyMSISDN);
				}
				catch(Exception e)
				{
					throw new BTSLBaseException("PretupsBL","validateIATMsisdn",PretupsErrorCodesI.IAT_ERROR_NOTIFY_MSISDN_NOTNUMERIC,0,new String[]{notifyMSISDN},null);
				}

				iatTransferItemVO.setIatNotifyMsisdn(p_requestArr[3]);
				if(LocaleMasterCache.getLocaleFromCodeDetails(p_requestArr[4])!=null)
					iatTransferItemVO.setIatNotifyMsisdnLocale(LocaleMasterCache.getLocaleFromCodeDetails(p_requestArr[4]));
				else
					iatTransferItemVO.setIatNotifyMsisdnLocale(new Locale(defaultLanguage,defaultCountry));
				break;
			}
			default:
				throw new BTSLBaseException(this,"validateIRServiceRequest",PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT,0,new String[]{p_requestVO.getActualMessageFormat()},null);
			}
		}
		catch(BTSLBaseException be)
		{
			throw be;
		}
		catch(Exception e)
		{
            _log.errorTrace("validateIRServiceRequest", e);
			_log.error("validateIRServiceRequest","  Exception while validating user message :"+e.getMessage());	
			EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"PretupsBL[validateC2SRechargeRequest]","","","","Exception while validating user message" +" ,getting Exception="+e.getMessage());
			throw new BTSLBaseException(this,"validateIRServiceRequest",PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
		}
		if(_log.isDebugEnabled()) _log.debug("validateIRServiceRequest","Exiting ");
	}
	
		/**
	 * Method formatIATP2PTransferID.
	 * @param p_transferVO TransferVO
	 * @param p_tempTransferID long
	 * @return String
	 * @see com.btsl.pretups.util.OperatorUtilI#formatIATP2PTransferID(TransferVO, long)
	 */
	@Override
	public String formatIATP2PTransferID(TransferVO p_transferVO,long p_tempTransferID)
	{
		String returnStr=null;
		try
		{
			//ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO();
			//String currentYear=BTSLUtil.getFinancialYearLastDigits(2);
			String paddedTransferIDStr=BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID),P2P_TRANSFER_ID_PAD_LENGTH);
			//returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr;
			//returnStr="T"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr;
			returnStr="T"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+Constants.getProperty("INSTANCE_ID")+paddedTransferIDStr;
			p_transferVO.setTransferID(returnStr);
		}
		catch(Exception e)
		{
			_log.error("formatIATP2PTransferID", "Exception: " + e.getMessage());
            _log.errorTrace("formatIATP2PTransferID", e);
			EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"OperatorUtil[]","","","","Not able to generate Transfer ID:"+e.getMessage());
			returnStr=null;
		}
		return returnStr;
	}

	
	/**
	 * Method calculateTax1.
	 * @param p_type String
	 * @param p_rate double
	 * @param p_value long
	 * @return long
	 * @throws BTSLBaseException
	 * @see com.btsl.pretups.util.OperatorUtilI#calculateTax2(String, double, long)
	 */
	@Override
	public long calculatePenaltyTax1(String p_type,double p_rate,long p_value) throws BTSLBaseException
	{
		if (_log.isDebugEnabled())
		{
			_log.debug("calculateTax2()", "Entered  p_type: "+p_type+" p_rate: "+p_rate+" p_productCost: "+p_value);
		}

		double taxCalculatedValue = 0;
		if(PretupsI.AMOUNT_TYPE_PERCENTAGE.equals(p_type))
		{
			taxCalculatedValue = (p_rate/100) * p_value;
			taxCalculatedValue=Math.round(taxCalculatedValue);
		}	
		else if(PretupsI.SYSTEM_AMOUNT.equals(p_type))
		{
			taxCalculatedValue = Double.valueOf(p_rate).longValue();; 
		}
		else
		{
			if (_log.isDebugEnabled()) {
				_log.debug("calculateTax2()", "Exception p_type is not define in the system p_type="+p_type);
			}
			throw new BTSLBaseException(this,"calculateTax2","error.invalid.ratetype");
		}

		if (_log.isDebugEnabled()) {
			_log.debug("calculateTax2()", "Exited  Tax2 Calculated Value "+taxCalculatedValue);
		}
		return Double.valueOf(taxCalculatedValue).longValue(); 
	}
	
	
	/**
	 * Method calculateTax2.
	 * @param p_type String
	 * @param p_rate double
	 * @param p_value long
	 * @return long
	 * @throws BTSLBaseException
	 * @see com.btsl.pretups.util.OperatorUtilI#calculateTax2(String, double, long)
	 */
	@Override
	public long calculatePenaltyTax2(String p_type,double p_rate,long p_value) throws BTSLBaseException
	{
		if (_log.isDebugEnabled())
		{
			_log.debug("calculateTax2()", "Entered  p_type: "+p_type+" p_rate: "+p_rate+" p_productCost: "+p_value);
		}

		double taxCalculatedValue = 0;
		if(PretupsI.AMOUNT_TYPE_PERCENTAGE.equals(p_type))
		{
			taxCalculatedValue = (p_rate/100) * p_value;
			taxCalculatedValue=Math.round(taxCalculatedValue);
		}	
		else if(PretupsI.SYSTEM_AMOUNT.equals(p_type))
		{
			taxCalculatedValue = Double.valueOf(p_rate).longValue();; 
		}
		else
		{
			if (_log.isDebugEnabled()) {
				_log.debug("calculateTax2()", "Exception p_type is not define in the system p_type="+p_type);
			}
			throw new BTSLBaseException(this,"calculateTax2","error.invalid.ratetype");
		}

		if (_log.isDebugEnabled()) {
			_log.debug("calculateTax2()", "Exited  Tax2 Calculated Value "+taxCalculatedValue);
		}
		return Double.valueOf(taxCalculatedValue).longValue(); 
	}

	public static String currentDateTimeFormatStringCommon(Date p_date) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat ("MMdd");
		String dateString = sdf.format(p_date);
		return dateString;
	}
	
	
	@Override
	public synchronized String generateC2SCommonTransferID(TransferVO p_transferVO) throws BTSLBaseException
	{
		final String methodName = "generateC2STransferID";
		String transferID=null;
		String minut2Compare=null;
  		Date mydate = null;
		try
		{
			//mydate = p_transferVO.getCreatedOn();
			mydate = new Date();
			p_transferVO.setCreatedOn(mydate);
	  		minut2Compare = _sdfCompare.format(mydate);
	  		int currentMinut=Integer.parseInt(minut2Compare);  		
	  		  				
	  		if(currentMinut !=_prevMinut)
	  		{
	  			_transactionIDCounter=1;
	  			_prevMinut=currentMinut;
	  		}
	  		else if(_transactionIDCounter >= 65535)
	  		{
	  			_transactionIDCounter=1;	  			 
	  		}
	  		else
	  		{
	  			_transactionIDCounter++;  			 
	  		}
	  		if(_transactionIDCounter==0) {
				throw new BTSLBaseException("C2SPrepaidController",methodName,PretupsErrorCodesI.NOT_GENERATE_TRASNFERID);
			}
	  		
	  		String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(_transactionIDCounter),C2S_TRANSFER_ID_PAD_LENGTH_COMMON);
		
	  		transferID = p_transferVO.getNetworkCode()+currentDateTimeFormatStringCommon(p_transferVO.getCreatedOn()) 
					+ currentTimeFormatString(p_transferVO.getCreatedOn())  + Constants.getProperty("INSTANCE_ID")
					+ paddedTransferIDStr;
	  		
			if(transferID==null) {
				throw new BTSLBaseException("C2SPrepaidController",methodName,PretupsErrorCodesI.NOT_GENERATE_TRASNFERID);
			}
			p_transferVO.setTransferID(transferID);
		}
		catch(Exception e)
		{
			_log.errorTrace(methodName, e);
			throw new BTSLBaseException("C2SPrepaidController",methodName,PretupsErrorCodesI.NOT_GENERATE_TRASNFERID,e);
		}	
		return transferID;
	}
	@Override
	public ListValueVO getClientMNPInfo(Connection p_con,String p_msisdn,String p_type) throws BTSLBaseException{
		ListValueVO listValueVO=null;
		return listValueVO;
	}

	
	/* Method that will validate c2s Lite Recharge Request
	 * @param p_con
	 * @param p_c2sTransferVO
	 * @param p_requestVO
	 * @throws BTSLBaseException
	 * @see com.btsl.pretups.util.OperatorUtilI#validateC2SLiteRechargeRequest(Connection, C2STransferVO, RequestVO)
	 */
	
	@Override
	public void validateC2SLiteRechargeRequest(Connection p_con,C2STransferVO p_c2sTransferVO,RequestVO p_requestVO) throws BTSLBaseException
	{
		final String obj = "validateC2SRechargeRequest";
		try
		{
			String[] p_requestArr=p_requestVO.getRequestMessageArray();
			String custMsisdn=null;
			//String [] strArr=null;
			//double requestAmt=0;
			String requestAmtStr=null;
			ChannelUserVO channelUserVO=(ChannelUserVO)p_c2sTransferVO.getSenderVO();
			UserPhoneVO userPhoneVO=null;
			if(!channelUserVO.isStaffUser()) {
				userPhoneVO=channelUserVO.getUserPhoneVO();
			} else {
				userPhoneVO=channelUserVO.getStaffUserDetails().getUserPhoneVO();
			}

			int messageLen=p_requestArr.length;
			if(_log.isDebugEnabled()) {
				_log.debug(obj,"messageLen: "+messageLen);
			}
			for(int i=0;i<messageLen;i++)
			{
				if(_log.isDebugEnabled()) {
					_log.debug(obj,"i: "+i+" value: "+p_requestArr[i]);
				}
			}
			String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
			String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

			switch(messageLen)
			{
			case 5:
			{

				if(userPhoneVO.getPinRequired().equals(PretupsI.YES))
				{
					try
					{
						ChannelUserBL.validatePIN(p_con,channelUserVO,p_requestArr[4]);
					}
					catch(BTSLBaseException be)
					{
						if(be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) ||  (be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
							p_con.commit();
						}
						throw be;
					}	
				}						
				ReceiverVO receiverVO=new ReceiverVO();
				//Customer MSISDN Validation
				custMsisdn=p_requestArr[1];
//				Change for the SID logic
				p_requestVO.setSid(custMsisdn);
				receiverVO.setSid(custMsisdn);
				PrivateRchrgVO prvo=null;
				if((prvo=getPrivateRechargeDetails(p_con,custMsisdn))!=null)
				{
					p_c2sTransferVO.setSubscriberSID(custMsisdn);
					custMsisdn=prvo.getMsisdn();						
				}
				PretupsBL.validateMsisdn(p_con,receiverVO,p_c2sTransferVO.getRequestID(),custMsisdn);

				//Recharge amount Validation
				requestAmtStr=p_requestArr[2];
				PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr);
				p_c2sTransferVO.setReceiverVO(receiverVO);
				
				p_requestVO.setReqSelector(p_requestArr[3]);
				PretupsBL.getSelectorValueFromCode(p_requestVO);
				p_requestVO.setReceiverLocale(new Locale(defaultLanguage,defaultCountry));
				p_requestVO.setSenderLocale(new Locale(defaultLanguage,defaultCountry));
				break;
			}

			case 6:
			{
				
				if(userPhoneVO.getPinRequired().equals(PretupsI.YES))
				{
					try
					{
						ChannelUserBL.validatePIN(p_con,channelUserVO,p_requestArr[1]);
					}
					catch(BTSLBaseException be)
					{
						if(be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) ||  (be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
							p_con.commit();
						}
						throw be;
					}								
				}

				ReceiverVO receiverVO=new ReceiverVO();
				//Customer MSISDN Validation
				custMsisdn=p_requestArr[2];
//				Change for the SID logic
				p_requestVO.setSid(custMsisdn);
				receiverVO.setSid(custMsisdn);
				PrivateRchrgVO prvo=null;
				if((prvo=getPrivateRechargeDetails(p_con,custMsisdn))!=null)
				{
					p_c2sTransferVO.setSubscriberSID(custMsisdn);
					custMsisdn=prvo.getMsisdn();						
				}
				PretupsBL.validateMsisdn(p_con,receiverVO,p_c2sTransferVO.getRequestID(),custMsisdn);

				//Recharge amount Validation
				requestAmtStr=p_requestArr[3];
				PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr);
				p_c2sTransferVO.setReceiverVO(receiverVO);
				
			    p_requestVO.setReqSelector(p_requestArr[5]);
			    PretupsBL.getSelectorValueFromCode(p_requestVO);

				if(p_requestVO.getRequestMap().get("LANGUAGE2")!=null){
				int langCode=PretupsBL.getLocaleValueFromCode(p_requestVO,p_requestArr[4]);
				if(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode))==null) {
						throw new BTSLBaseException(this,obj,PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
				}
				p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
				p_requestVO.setSenderLocale(new Locale(defaultLanguage,defaultCountry));
				}
				else{
					int langCode=PretupsBL.getLocaleValueFromCode(p_requestVO,p_requestArr[4]);
					p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
					if(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode))==null) {
						throw new BTSLBaseException(this,obj,PretupsErrorCodesI.C2S_ERROR_INVALID_LANGUAGECODE);
					}
					 p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
					 p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
					 p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
					p_requestVO.setReceiverLocale(new Locale(defaultLanguage,defaultCountry));
				}
				
				break;
			}
			case 7:
			{
				if(userPhoneVO.getPinRequired().equals(PretupsI.YES))
				{
					try
					{
						ChannelUserBL.validatePIN(p_con,channelUserVO,p_requestArr[6]);
					}
					catch(BTSLBaseException be)
					{
						if(be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) ||  (be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
							p_con.commit();
						}
						throw be;
					}								
				}

				ReceiverVO receiverVO=new ReceiverVO();
				custMsisdn=p_requestArr[1];
				p_requestVO.setSid(custMsisdn);
				receiverVO.setSid(custMsisdn);
				PrivateRchrgVO prvo=null;
				if((prvo=getPrivateRechargeDetails(p_con,custMsisdn))!=null)
				{
					p_c2sTransferVO.setSubscriberSID(custMsisdn);
					custMsisdn=prvo.getMsisdn();						
				}	

				PretupsBL.validateMsisdn(p_con,receiverVO,p_c2sTransferVO.getRequestID(),custMsisdn);

				//Recharge amount Validation
				requestAmtStr=p_requestArr[2];
				PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr);
				p_c2sTransferVO.setReceiverVO(receiverVO);
				p_requestVO.setReqSelector(p_requestArr[3]);

				PretupsBL.getSelectorValueFromCode(p_requestVO);
			
				//For handling of sender locale
			
					int langCode=PretupsBL.getLocaleValueFromCode(p_requestVO,p_requestArr[4]);
					p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
					if(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode))==null) {
						throw new BTSLBaseException(this,obj,PretupsErrorCodesI.C2S_ERROR_INVALID_LANGUAGECODE);
					}
					
					 p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
					 p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
					 p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
				
				if (_log.isDebugEnabled()) {
					_log.debug(this,"sender locale: ="+p_requestVO.getSenderLocale());
				}

				
					int langCode1=PretupsBL.getLocaleValueFromCode(p_requestVO,p_requestArr[5]);
					if(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode1))==null) {
						throw new BTSLBaseException(this,obj,PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
					}
					p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode1)));
				
				break;
			}
			default:
				throw new BTSLBaseException(this,obj,PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT,0,new String[]{p_requestVO.getActualMessageFormat()},null);
			}

		}
		catch(BTSLBaseException be)
		{
			throw be;
		}
		catch(Exception e)
		{
			_log.errorTrace(obj, e);
			EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"PretupsBL[validateC2SRechargeRequest]","","","","Exception while validating user message" +" ,getting Exception="+e.getMessage());
			throw new BTSLBaseException(this,obj,PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
		}
		if(_log.isDebugEnabled()) {
			_log.debug(obj,"Exiting ");
		}
	}
	@Override
	public ListValueVO validateMSISDNForMNP(String p_Msisdn) throws BTSLBaseException
	{
		return null;
		
	}
	
	@Override
	public void validateCardGroupEnquiryRequest(Connection p_con,C2STransferVO p_c2sTransferVO,RequestVO p_requestVO) throws BTSLBaseException{
		final String obj = "validateC2SRechargeRequest";
		
		try{
		final ReceiverVO receiverVO = new ReceiverVO();
		String[] p_requestArr=p_requestVO.getRequestMessageArray();
       String Msisdn = p_requestArr[1];
       if(!"null".equals(Msisdn)){
       receiverVO.setMsisdn(Msisdn);
       PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), Msisdn);
       } else {
       receiverVO.setMsisdn(p_requestVO.getRequestMSISDN());
       PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), p_requestVO.getRequestMSISDN());
       }
       
        p_c2sTransferVO.setReceiverVO(receiverVO);
		}
		catch(BTSLBaseException e)
		{
			_log.errorTrace(obj, e);
			EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"PretupsBL[validateCardGroupEnquiryRequest]","","","","Exception while validating user message" +" ,getting Exception="+e.getMessage());
			throw e;
		}
		catch(Exception e)
		{
			_log.errorTrace(obj, e);
			EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"PretupsBL[validateCardGroupEnquiryRequest]","","","","Exception while validating user message" +" ,getting Exception="+e.getMessage());
			throw new BTSLBaseException(this,obj,PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
		}
		if(_log.isDebugEnabled()) {
			_log.debug(obj,"Exiting ");
		}

	}
	@Override
	public long calculateCardGroupTax3(CardGroupDetailsVO p_cardGroupDetailsVO,C2STransferVO p_c2sTransferVO) throws BTSLBaseException{ return 0;}
	@Override
	public long calculateCardGroupTax4(CardGroupDetailsVO p_cardGroupDetailsVO,C2STransferVO p_c2sTransferVO) throws BTSLBaseException{return 0;}
	
	      
	        
	        
	        /**
	         * Method that will validate the user message sent
	         * 
	         * @param p_con
	         * @param p_c2sTransferVO
	         * @param p_requestVO
	         * @throws BTSLBaseException
	         * @see com.btsl.pretups.util.OperatorUtilI#validateC2SRechargeRequest(Connection,
	         *      C2STransferVO, RequestVO)
	         */
	        @Override
	        public void validateMultiCurrencyRechargeRequest(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO) throws BTSLBaseException {
	            final String obj = "validateMultiCurrencyRechargeRequest";
	            String defaultCurrency = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_CURRENCY);
	            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
	            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

	            try {
	                final String[] p_requestArr = p_requestVO.getRequestMessageArray();
	                String custMsisdn = null;
	                // String [] strArr=null
	                // double requestAmt=0
	                String requestAmtStr = null;
	                String currency = null;
	    	           
	                final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
	                UserPhoneVO userPhoneVO = null;
	                if (!channelUserVO.isStaffUser()) {
	                    userPhoneVO = channelUserVO.getUserPhoneVO();
	                } else {
	                    userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
	                }

	                final int messageLen = p_requestArr.length;
	                if (_log.isDebugEnabled()) {
	                    _log.debug(obj, "messageLen: " + messageLen);
	                }
	                for (int i = 0; i < messageLen; i++) {
	                    if (_log.isDebugEnabled()) {
	                        _log.debug(obj, "i: " + i + " value: " + p_requestArr[i]);
	                    }
	                }
	                switch (messageLen) {
	                    case 5:
	                        {
	                            // Do the 000 check Default PIN
	                            // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
	                            // &&
	                            // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))

	                            if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
	                                try {

	                                    ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[3]);
	                                } catch (BTSLBaseException be) {
	                                    if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
	                                        .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
	                                        p_con.commit();
	                                    }
	                                    throw be;
	                                }
	                            }
	                            final ReceiverVO receiverVO = new ReceiverVO();
	                            // Customer MSISDN Validation
	                            custMsisdn = p_requestArr[1];

	                            // Change for the SID logic
	                            
	                            p_requestVO.setSid(custMsisdn);
	                            receiverVO.setSid(custMsisdn);
	                            PrivateRchrgVO prvo = null;
	                            if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
	                                p_c2sTransferVO.setSubscriberSID(custMsisdn);
	                                custMsisdn = prvo.getMsisdn();
	                            }

	                            PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

	                            // Recharge amount Validation
	                            requestAmtStr = p_requestArr[2];
	                            
	                            // Recharge amount Validation
	                            currency = p_requestArr[4];
	                            CurrencyConversionVO  currencyVO = (CurrencyConversionVO) CurrencyConversionCache.getObject(currency, defaultCurrency, defaultCountry);
	                            if(currencyVO!= null)
	                            {                        
	                              p_c2sTransferVO.setMultiCurrencyDetailVO(requestAmtStr+","+String.valueOf(currencyVO.getDisplayAmount())+","+currency);
	                              requestAmtStr = String.valueOf(getConvertedAmount(requestAmtStr,currencyVO.getDisplayAmount()));
	                              p_requestVO.setReqAmount(requestAmtStr);
	                            }
	                            else
	                          	     throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_CURRENCY_CODE);
	                            
	                            PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
	                            p_c2sTransferVO.setReceiverVO(receiverVO);
	                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
	                            // Changed on 27/05/07 for Service Type selector Mapping
	                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
	                                .getServiceType());
	                            if (serviceSelectorMappingVO != null) {
	                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
	                            }
	                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
	                            break;
	                        }

	                    case 6:
	                        {
	                            // Do the 000 check Default PIN
	                            // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
	                            // &&
	                            // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
	                            if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
	                                try {
	                                    ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[4]);
	                                } catch (BTSLBaseException be) {
	                                    if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
	                                        .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
	                                        p_con.commit();
	                                    }
	                                    throw be;
	                                }
	                            }
	                            final ReceiverVO receiverVO = new ReceiverVO();
	                            // Customer MSISDN Validation
	                            custMsisdn = p_requestArr[1];
	                            // Change for the SID logic
	                            p_requestVO.setSid(custMsisdn);
	                            receiverVO.setSid(custMsisdn);
	                            PrivateRchrgVO prvo = null;
	                            if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
	                                p_c2sTransferVO.setSubscriberSID(custMsisdn);
	                                custMsisdn = prvo.getMsisdn();
	                            }
	                            PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

	                            // Recharge amount Validation
	                            requestAmtStr = p_requestArr[2];
	                            currency = p_requestArr[5];
	                            CurrencyConversionVO  currencyVO = (CurrencyConversionVO) CurrencyConversionCache.getObject(currency, defaultCurrency, defaultCountry);
	                          if(currencyVO!= null)
	                          {                        
	                            p_c2sTransferVO.setMultiCurrencyDetailVO(requestAmtStr+","+String.valueOf(currencyVO.getDisplayAmount())+","+currency);
	                            requestAmtStr = String.valueOf(getConvertedAmount(requestAmtStr,currencyVO.getDisplayAmount()));
	                            p_requestVO.setReqAmount(requestAmtStr);
	                          }
	                          else
	                        	     throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_CURRENCY_CODE);
	                          
	                            PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
	                            p_c2sTransferVO.setReceiverVO(receiverVO);

	                            if (BTSLUtil.isNullString(p_requestArr[3])) {
	                                p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
	                            } else {
	                                final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[3]);
	                                if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
	                                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
	                                }
	                                p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
	                            }
	                            // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
	                            // Changed on 27/05/07 for Service Type selector Mapping
	                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
	                                .getServiceType());
	                            if (serviceSelectorMappingVO != null) {
	                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
	                            }

	                            break;
	                        }

	                    case 7:
	                        {
	                            // if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES)
	                            // &&
	                            // !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
	                            if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
	                                try {
	                                    ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[5]);
	                                } catch (BTSLBaseException be) {
	                                    if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
	                                        .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
	                                        p_con.commit();
	                                    }
	                                    throw be;
	                                }
	                            }

	                            final ReceiverVO receiverVO = new ReceiverVO();
	                            // Customer MSISDN Validation
	                            custMsisdn = p_requestArr[1];
	                            // Change for the SID logic
	                            p_requestVO.setSid(custMsisdn);
	                            receiverVO.setSid(custMsisdn);
	                            PrivateRchrgVO prvo = null;
	                            if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
	                                p_c2sTransferVO.setSubscriberSID(custMsisdn);
	                                custMsisdn = prvo.getMsisdn();
	                            }
	                            PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

	                            // Recharge amount Validation
	                            requestAmtStr = p_requestArr[2];
	                            currency = p_requestArr[6];
	                            CurrencyConversionVO  currencyVO = (CurrencyConversionVO) CurrencyConversionCache.getObject(currency, defaultCurrency, defaultCountry);
	                            if(currencyVO!= null)
	                            {                        
	                              p_c2sTransferVO.setMultiCurrencyDetailVO(requestAmtStr+","+String.valueOf(currencyVO.getDisplayAmount())+","+currency);
	                              requestAmtStr = String.valueOf(getConvertedAmount(requestAmtStr,currencyVO.getDisplayAmount()));
	                              p_requestVO.setReqAmount(requestAmtStr);
	                            }
	                            else
	                          	     throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_CURRENCY_CODE);
	                         
	                            PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
	                            p_c2sTransferVO.setReceiverVO(receiverVO);
	                            if (BTSLUtil.isNullString(p_requestArr[3])) {
	                                if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
	                                    // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
	                                    // Changed on 27/05/07 for Service Type selector
	                                    // Mapping
	                                    final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
	                                        .getServiceType());
	                                    if (serviceSelectorMappingVO != null) {
	                                        p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
	                                    }
	                                }
	                                // changed for CRE_INT_CR00029 by ankit Zindal
	                                // in case of binary message we will set default
	                                // value after
	                                // calling getselectorvaluefromcode method
	                                /*
	                                 * else
	                                 * p_requestVO.setReqSelector((Constants.getProperty
	                                 * (
	                                 * "CVG_UNICODE_"
	                                 * +p_requestVO.getLocale().getLanguage().toUpperCase
	                                 * ())));
	                                 */} else {
	                                p_requestVO.setReqSelector(p_requestArr[3]);
	                            }

	                            PretupsBL.getSelectorValueFromCode(p_requestVO);
	                            // changed for CRE_INT_CR00029 by ankit Zindal
	                            if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
	                                // p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE))
	                                // Changed on 27/05/07 for Service Type selector
	                                // Mapping
	                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
	                                    .getServiceType());
	                                if (serviceSelectorMappingVO != null) {
	                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
	                                }
	                            }
	                            if (BTSLUtil.isNullString(p_requestArr[4])) {
	                                p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
	                            } else {
	                                final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
	                                if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
	                                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
	                                }
	                                p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
	                            }
	                            break;
	                        }
	                    case 8:
	                        {
	                            if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
	                                try {
	                                    ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[6]);
	                                } catch (BTSLBaseException be) {
	                                    if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
	                                        .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
	                                        p_con.commit();
	                                    }
	                                    throw be;
	                                }
	                            }

	                            final ReceiverVO receiverVO = new ReceiverVO();
	                            custMsisdn = p_requestArr[1];
	                            p_requestVO.setSid(custMsisdn);
	                            receiverVO.setSid(custMsisdn);
	                            PrivateRchrgVO prvo = null;
	                            if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
	                                p_c2sTransferVO.setSubscriberSID(custMsisdn);
	                                custMsisdn = prvo.getMsisdn();
	                            }

	                            PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

	                            // Recharge amount Validation
	                            requestAmtStr = p_requestArr[2];
	                            currency = p_requestArr[7];
	                            CurrencyConversionVO  currencyVO = (CurrencyConversionVO) CurrencyConversionCache.getObject(currency, defaultCurrency, defaultCountry);
	                            if(currencyVO!= null)
	                            {                        
	                              p_c2sTransferVO.setMultiCurrencyDetailVO(requestAmtStr+","+String.valueOf(currencyVO.getDisplayAmount())+","+currency);
	                              requestAmtStr = String.valueOf(getConvertedAmount(requestAmtStr,currencyVO.getDisplayAmount()));
	                              p_requestVO.setReqAmount(requestAmtStr);
	                            }
	                            else
	                          	     throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_CURRENCY_CODE);
	                        
	                            PretupsBL.validateAmount(p_c2sTransferVO, requestAmtStr);
	                            p_c2sTransferVO.setReceiverVO(receiverVO);
	                            if (BTSLUtil.isNullString(p_requestArr[3])) {
	                                if ("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
	                                    final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
	                                        .getServiceType());
	                                    if (serviceSelectorMappingVO != null) {
	                                        p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
	                                    }
	                                }
	                            } else {
	                                p_requestVO.setReqSelector(p_requestArr[3]);
	                            }

	                            PretupsBL.getSelectorValueFromCode(p_requestVO);
	                            if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
	                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
	                                    .getServiceType());
	                                if (serviceSelectorMappingVO != null) {
	                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
	                                }
	                            }
	                            // For handling of sender locale
	                            if (BTSLUtil.isNullString(p_requestArr[4])) {
	                                p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
	                            } else {
	                                final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[4]);
	                                p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
	                                p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
	                                p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
	                                p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
	                            }
	                            if (_log.isDebugEnabled()) {
	                                _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
	                            }

	                            if (BTSLUtil.isNullString(p_requestArr[5])) {
	                                p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
	                            } else {
	                                final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[5]);
	                                if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
	                                    throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
	                                }
	                                p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
	                            }
	                            break;
	                        }
	                    default:
	                        throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() }, null);
	                }

	            } catch (BTSLBaseException be) {
	                throw be;
	            } catch (Exception e) {
	                _log.errorTrace(obj, e);
	                EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "PretupsBL[validateC2SRechargeRequest]", "", "", "",
	                    "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
	                throw new BTSLBaseException(this, obj, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
	            }
	            if (_log.isDebugEnabled()) {
	                _log.debug(obj, "Exiting ");
	            }
	        }

	        

	    /**
	     * getConvertedAmount
	     * @param requestAmt
	      * @param ConversionRate
	     * @throws BTSLBaseException
	     */
		 @Override
		public double getConvertedAmount(String requestAmtStr, double ConversionRate) throws BTSLBaseException {


		        final String methodName = "getCovertedAmount";
		        if (_log.isDebugEnabled()) {
		        	_log.debug(methodName, "Entered requestAmtStr:" + requestAmtStr+" ConversionRate:"+ConversionRate);
		        }	        
		       double finalCalcAmnt;	        
		      finalCalcAmnt = (Double.parseDouble(requestAmtStr) * ConversionRate);
			String amountStr = new DecimalFormat("##############").format(finalCalcAmnt);      
	         finalCalcAmnt = Double.parseDouble(amountStr);
	         if(_log.isDebugEnabled())_log.debug("getDisplayAmount","Exiting display amount:"+finalCalcAmnt);    
	         	  return finalCalcAmnt;
		        
		 }
		 
		 @Override
		public String formatRequestXMLString(String p_requestXML) throws BTSLBaseException
		 {
			 return p_requestXML;
		 }
		 
		   /**
		     * Method calculateOTFComm.
		     * 
		     * @param p_type
		     *            String
		     * @param p_rate
		     *            double
		     * @param p_requestValue
		     *            long
		     * @return long
		     * @throws BTSLBaseException
		     */
		    @Override
		    public long calculateOTFComm(String p_type, double p_rate, long p_requestValue) throws BTSLBaseException {
		        long calculatedOTFValue = 0;
		        if(!BTSLUtil.isNullString(p_type)){
		        if (PretupsI.SYSTEM_AMOUNT.equalsIgnoreCase(p_type)) {
		        	calculatedOTFValue = Double.valueOf(p_rate).longValue();
		        } else if (PretupsI.AMOUNT_TYPE_PERCENTAGE.equalsIgnoreCase(p_type)) {
		        	calculatedOTFValue = Double.valueOf(((p_requestValue * ((p_rate) / 100)))).longValue();
		        } else {
		            if (_log.isDebugEnabled()) {
		                _log.debug("calculateDifferentialComm()", "Exception p_type is not define in the system p_type=" + p_type);
		            }
		            throw new BTSLBaseException(this, "calculateOTFComm", "error.invalid.ratetype");
		        }
		        }

		        return calculatedOTFValue;
		    }
		
		    @Override
			public String formatVoucherTransferID(TransferVO p_transferVO,long p_tempTransferID,String p_type)
			{
				final String methodName = "formatP2PTransferID";
				String returnStr=null;
				try
				{
					String paddedTransferIDStr=BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID),P2P_TRANSFER_ID_PAD_LENGTH);
					returnStr=p_type+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+Constants.getProperty("INSTANCE_ID")+paddedTransferIDStr;
					p_transferVO.setTransferID(returnStr);
				}
				catch(Exception e)
				{
					_log.errorTrace(methodName, e);
					EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"OperatorUtil[]","","","","Not able to generate Transfer ID:"+e.getMessage());
					returnStr=null;
				}
				return returnStr;
			}    
	public boolean isSubscriberPrefixMappingExist(Connection con,String receiverMsisdn,String senderMsisdn,String subscriberType){
		return true;
	}
	
	
	public String formatVomsSerialnum(long p_counter, String p_activeproductid, String segment, String nwCode) {
        String returnStr = null;
        int maxserialnumlength = 12;// by default
        int year = 0;
        String strYear;
        String networkPrefix = "";
        int prefixLen = 0;
        final String methodName = "formatVomsSerialnum";
        Boolean isVomsNationalLocalPrefixEnable = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.VOMS_NATIONAL_LOCAL_PREFIX_ENABLE);
        String nwNationalPrefix = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.NW_NATIONAL_PREFIX);
        Integer vomsSerialNoMaxLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.VOMS_SERIAL_NO_MAX_LENGTH);
        try {
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "segment=" + segment);
                _log.debug(methodName, "nwCode=" + nwCode);
            }
            
            maxserialnumlength = (int)vomsSerialNoMaxLength;
            if (maxserialnumlength == 0) {
                maxserialnumlength = 12;
            }
            if(isVomsNationalLocalPrefixEnable) {
	            if(VOMSI.VOUCHER_SEGMENT_NATIONAL.equals(segment)) {
	            	networkPrefix = nwNationalPrefix;
	            } else {
	            	networkPrefix = BTSLUtil.getPrefixCodeUsingNwCode(nwCode);            	
	            }
	            if(!BTSLUtil.isNullString(networkPrefix)) {
	            	prefixLen = networkPrefix.length();
	            }
	            if (_log.isDebugEnabled()) {
	                _log.debug(methodName, "networkPrefix=" + networkPrefix + " prefixLen = "+prefixLen);
	            }
            }
            String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(Long.toString(p_counter), maxserialnumlength - (4 + prefixLen));
            p_activeproductid = BTSLUtil.padZeroesToLeft(p_activeproductid, 3);
            Calendar currDate = BTSLDateUtil.getInstance();
            year = currDate.get(Calendar.YEAR);
            strYear = String.valueOf(year);
            strYear = strYear.substring(3, 4);
            returnStr = networkPrefix + strYear + p_activeproductid + paddedTransferIDStr;// 2+013+00000000001
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "formatVomsSerialnum[]", "", "", "", "Not able to generate Voms Serial num:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
    }
    
    public ArrayList generatePin(String location_code,String product_code,long totalCount,int seq)throws IOException
    {
    	final String METHOD_NAME = "generatePin";
    	final String ENTRY_KEY = "Entered: ";
        StringBuilder loggerValue= new StringBuilder();
    	if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append(ENTRY_KEY);
        	loggerValue.append("location_code=");
        	loggerValue.append(location_code);
        	loggerValue.append(", product_code=");
        	loggerValue.append(product_code);
        	loggerValue.append(", totalCount=");
        	loggerValue.append(totalCount);
        	_log.debug(METHOD_NAME, loggerValue);        	
        }
           
            // It requires two parameter
            // No of PINs to be generated
            // Length of PIN
            // Length of PIN decide Number of bits. like as
            // for 16 digit number, number of bits is 53
            // for 18 digit number, number of bits iv 59
            // for 20 digit number, number of bits are 64
            long tmpPIN = 0;
            int length=0;
            String actualPIN ;

	ArrayList vPinArraylist = new ArrayList();
	LinkedHashSet treesetAll = new LinkedHashSet();
	Integer vomsPinMaxLength = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.VOMS_PIN_MAX_LENGTH);
	Boolean isSequenceIDEnable = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.SEQUENCE_ID_ENABLE);
	
	//ArrayList tempArray = new ArrayList();
	try
	{
		int year=0;
		String strYear=null;
		java.util.Calendar currDate=java.util.Calendar.getInstance();
		year=currDate.get(Calendar.YEAR);
		if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append("Year=");
        	loggerValue.append(year);
        	_log.debug(METHOD_NAME, loggerValue);        	
        }
		strYear=String.valueOf(year);
		strYear=strYear.substring(3,4);
	    String seqID= Integer.toString(seq);
        if(seqID.length()==1&& isSequenceIDEnable){
        	seqID='0'+seqID;
        }
        if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append("strYear=");
        	loggerValue.append(strYear);
        	_log.debug(METHOD_NAME, loggerValue);        	
        }		
		int pValue=0;
		int pinLength=0;
		int randomDigitLength=0;
		try{ pValue=Integer.parseInt(Constants.getProperty("RAND_PIN_GEN"));}catch(Exception e){pValue=46;}
		pinLength=(int)vomsPinMaxLength;
		if(pinLength==0)
			pinLength=16;
		
		 if( isSequenceIDEnable){
			 pinLength = pinLength-seqID.length()  ;//1 for year 3 for product code 2 for sequence id
	       }
	            randomDigitLength = pinLength ;
		//long startTime=System.nanoTime();
		for (int Count= 0; Count <totalCount ; )
		{
			//for 16 digit random number
			//BigInteger bigint = new BigInteger(53,objRandom);
			//For 13 digit random number
			//BigInteger bigint = new BigInteger(44,objRandom);
			//For 12 digit random number
			//BigInteger bigint = new BigInteger(40,objRandom);
			//BigInteger bigint = new BigInteger(32,objRandom);
			//for 10 digit random number
			//for 11 digit random number
			// BigInteger bigint = new BigInteger(36,objRandom);

			Random objRandom =new Random();
			seed=generateSeed();
			objRandom.setSeed(seed);
			//pValue=46 for 14 Random
			BigInteger bigint = new BigInteger(pValue,objRandom);
			tmpPIN = bigint.longValue() ;
			actualPIN = String.valueOf(tmpPIN);
			length = actualPIN.length();
			boolean flag=true;
			if (length < randomDigitLength)
			{
				actualPIN=this.padRandomToLeft(actualPIN, randomDigitLength);
				
				 if( isSequenceIDEnable){
					 actualPIN=seqID+actualPIN;
				 }
				 
				 
				 
				if(flag){
					if(treesetAll.contains(actualPIN))
					{
						flag=false;
					}
					if(flag){
						treesetAll.add(actualPIN);
						Count++;
						if(Count % 200 == 0)
						{
							if (_log.isDebugEnabled()) {
					        	loggerValue.setLength(0);
					        	loggerValue.append("Total pins generated =");
					        	loggerValue.append(Count);
					        	_log.debug(METHOD_NAME, loggerValue);        	
						}
					}
				}
				}

			}
			else if(length==randomDigitLength)
			{
				if(flag){

					if(treesetAll.contains(actualPIN))
					{

						flag=false;
					}
					if(flag){
						treesetAll.add(actualPIN);
						Count++;
					}
				}
			}
			else
			{
			}
		}
		ENCKEY = (Constants.KEY);
		if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append("Pins Generated");
        	_log.debug(METHOD_NAME, loggerValue);        	
        }
		vPinArraylist=encryptList(treesetAll,ENCKEY);
		if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append("Pins Encripted vPinArraylist.size()=");
        	loggerValue.append(vPinArraylist.size());
        	_log.debug(METHOD_NAME, loggerValue);        	
        }
		return vPinArraylist;
	}
	catch(Exception e)
	{
		loggerValue.setLength(0);
    	loggerValue.append("System generated Error in pin generation :");
    	loggerValue.append(e);
    	_log.debug(METHOD_NAME, loggerValue);
	}
	return vPinArraylist;
}
    
    private long generateSeed() {
        SecureRandom objrandom = new SecureRandom();
        BigInteger bigint = new BigInteger(24, objrandom);
        Date date = new Date();
        seed = date.getTime() + bigint.longValue();
        return seed;
    }

	
	public static String padRandomToLeft(String p_strValue, int p_strLength)
	{
		int cntr = p_strLength - p_strValue.length();
		Random r=new Random();
		if(cntr > 0)
		{
			for(int i=0; i<cntr; i++)
			{
				int j = r.nextInt(9	) ;

				p_strValue = j+ p_strValue;

			}
		}
		return p_strValue;
	}

	 
	private ArrayList encryptList(LinkedHashSet p_list,String p_key)
	{
		ArrayList cipherList = new ArrayList();
		String plainText=null,cipherText;
		try
		{

                        Iterator itr=p_list.iterator();
                        int i=0;
                        while(itr.hasNext()){
                                plainText=(String)itr.next();
                                cipherText = VomsUtil.encryptText(plainText);
                                cipherList.add(i,(String)cipherText);
                                i++;

                        }

                }
                catch (Exception e)
                {
                        e.printStackTrace();
                }

                return cipherList;
        }

	@Override
    public Map getInitMap(Connection con, ChannelTransferVO channelTransferVO, ChannelUserVO sessionUserVo, String paymentGatewayType) {
		
		final ChannelTransferWebDAO channelTransferWebDAO = new ChannelTransferWebDAO();
		
		final NetworkInterfaceModuleVO networkInterfaceModuleVOS = (NetworkInterfaceModuleVO) NetworkInterfaceModuleCache.getObject(PretupsI.C2S_MODULE, channelTransferVO.getNetworkCode(), PretupsI.INTERFACE_CATEGORY_PG);
		TransferItemVO transferItemVO;
		Map map = null;
		try {
			transferItemVO = channelTransferWebDAO.loadUserInterfaceDetails(con, paymentGatewayType);
			StringBuffer strBuff =  new StringBuffer();
	        strBuff.append("INTERFACE_ACTION=" + PretupsI.INTERFACE_DEBIT_ACTION);
	        strBuff.append("&TRANSACTION_ID=" + channelTransferVO.getTransferID());
	        strBuff.append("&INTERFACE_ID=" + transferItemVO.getInterfaceID());//strBuff.append("&INTERFACE_ID=" + "INTID00075");
	        strBuff.append("&INTERFACE_HANDLER=" + transferItemVO.getInterfaceHandlerClass());//strBuff.append("&INTERFACE_HANDLER=" + "com.inter.pg.PaymentGatewayHandler");
	        //strBuff.append("&TRANSACTION_STATUS=" + "200");
	        strBuff.append("&INTERFACE_AMOUNT=" + PretupsBL.getDisplayAmount(channelTransferVO.getNetPayableAmount()));//strBuff.append("&INTERFACE_AMOUNT=" + channelTransferVO.getRequestedQuantity());
	        strBuff.append("&NETWORK_CODE=" + channelTransferVO.getNetworkCode());
	        strBuff.append("&MSISDN=" + channelTransferVO.getToUserMsisdn());//strBuff.append("&MSISDN=" + "7258855555");//channelTransferVO.getToMSISDN()
	        strBuff.append("&USER_TYPE=R");//strBuff.append("&USER_TYPE=" + "7258855555");
	        strBuff.append("&MODULE=" + PretupsI.INTERFACE_CATEGORY_PG);//strBuff.append("&MODULE=" + PretupsI.SAP_MODULE);
	        strBuff.append("&CUEXTCODE=" + sessionUserVo.getExternalCode());
			strBuff.append("&IN_LANG=" + sessionUserVo.getLanguageName() + ":" + sessionUserVo.getLanguageCode());
			strBuff.append("&INT_MOD_COMM_TYPE=" + networkInterfaceModuleVOS.getCommunicationType());
			strBuff.append("&INT_MOD_IP=" + networkInterfaceModuleVOS.getIP());
			strBuff.append("&INT_MOD_PORT=" + networkInterfaceModuleVOS.getPort());
			strBuff.append("&INT_MOD_CLASSNAME=" + networkInterfaceModuleVOS.getClassName());
			strBuff.append("&USER_ID=" + sessionUserVo.getUserID());
			strBuff.append("&USER_NAME=" + sessionUserVo.getUserName());
	        String requestStr = strBuff.toString();
	        
	        final CommonClient commonClient = new CommonClient();
	        map = commonClient.process1(requestStr, channelTransferVO.getTransferID(), networkInterfaceModuleVOS.getCommunicationType(), networkInterfaceModuleVOS.getIP(), networkInterfaceModuleVOS.getPort(), networkInterfaceModuleVOS.getClassName());
		} catch (BTSLBaseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return map;
		
		
	}
	
/**
	 * Method formatOLORCID.
	 * @param p_transferVO TransferVO
	 * @param p_tempTransferID long
	 * @return String
	 * @see com.btsl.pretups.util.OperatorUtilI#formatOLORCID(TransferVO, long)
	 */
	public String formatOLORCID(TransferVO p_transferVO,long p_tempTransferID)
	{
		String returnStr=null;
		try
		{
			//ReceiverVO receiverVO=(ReceiverVO)p_transferVO.getReceiverVO();
			//String currentYear=BTSLUtil.getFinancialYearLastDigits(2);
			//String paddedTransferIDStr=BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID),C2S_TRANSFER_ID_PAD_LENGTH);
			String paddedTransferIDStr=BTSLUtil.padZeroesToLeft(Long.toHexString(p_tempTransferID),C2S_TRANSFER_ID_PAD_LENGTH); 
			//returnStr=receiverVO.getNetworkCode()+"/"+currentYear+"/"+paddedTransferIDStr;
			//returnStr="R"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+paddedTransferIDStr;
			returnStr="O"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+Constants.getProperty("INSTANCE_ID")+paddedTransferIDStr;
			p_transferVO.setTransferID(returnStr);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"OperatorUtil[]","","","","Not able to generate Transfer ID:"+e.getMessage());
			returnStr=null;
		}
		return returnStr;
	}

	/**
	 * Method that will validate the user message sent
	 * @param p_con
	 * @param p_c2sTransferVO
	 * @param p_requestVO
	 * @throws BTSLBaseException
	 * @see com.btsl.pretups.util.OperatorUtilI#validateC2SRechargeRequest(Connection, C2STransferVO, RequestVO)
	 */
	public void validateOLORequestWithoutAmount(Connection p_con,C2STransferVO p_c2sTransferVO,RequestVO p_requestVO) throws BTSLBaseException{}
	
@Override
    public ArrayList loadProductCodeList()  {
        return LookupsCache.loadLookupDropDown(PretupsI.PRODUCT_TYPE, true);
    }

	
	//Added for Product Recharge
    /**
	 * Method formatDBRCTransferID.
	 * @param p_transferVO TransferVO
	 * @param p_tempTransferID long
	 * @return String
	 * @see com.btsl.pretups.util.OperatorUtilI#formatDBRCTransferID(TransferVO, long)
	 */
	public String formatDBRCTransferID(TransferVO p_transferVO,long p_tempTransferID)
	{
		final String methodName="formatDBRCTransferID";
		String returnStr=null;
		//Added for Product Recharge
		int DBRC_TRANSFER_ID_PAD_LENGTH=4;
		try
		{
			String paddedTransferIDStr=BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID),DBRC_TRANSFER_ID_PAD_LENGTH);
			returnStr="D"+currentDateTimeFormatString(p_transferVO.getCreatedOn())+"."+currentTimeFormatString(p_transferVO.getCreatedOn())+"."+Constants.getProperty("INSTANCE_ID")+paddedTransferIDStr;
			p_transferVO.setTransferID(returnStr);
		}
		catch(Exception e)
		{
			 _log.errorTrace(methodName,e);
			EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"OperatorUtil[]","","","","Not able to generate Transfer ID:"+e.getMessage());
			returnStr=null;
		}
		return returnStr;
	}
	
	/**
	 * Method that will validate the validateProductRechargeRequest user message sent
	 * @param p_con
	 * @param p_c2sTransferVO
	 * @param p_requestVO
	 * @throws BTSLBaseException
	 * @see com.btsl.pretups.util.OperatorUtilI#validateProductRechargeRequest(Connection, C2STransferVO, RequestVO)
	 */
	public void validateProductRechargeRequest(Connection p_con,C2STransferVO p_c2sTransferVO,RequestVO p_requestVO) throws BTSLBaseException
	{
		final String methodName="validateProductRechargeRequest";
		try
		{
			String[] p_requestArr=p_requestVO.getRequestMessageArray();
			String custMsisdn=null;
			//String [] strArr=null;
			//double requestAmt=0;
			String requestAmtStr=null;
			ChannelUserVO channelUserVO=(ChannelUserVO)p_c2sTransferVO.getSenderVO();
			UserPhoneVO userPhoneVO=null;
			if(!channelUserVO.isStaffUser())
			    userPhoneVO=(UserPhoneVO)channelUserVO.getUserPhoneVO();
			else
			    userPhoneVO=(UserPhoneVO)channelUserVO.getStaffUserDetails().getUserPhoneVO();
			
			int messageLen=p_requestArr.length;
			if(_log.isDebugEnabled()) _log.debug(methodName,"messageLen: "+messageLen);
			for(int i=0;i<messageLen;i++)
			{
				if(_log.isDebugEnabled()) _log.debug(methodName,"i: "+i+" value: "+p_requestArr[i]);
			}
			String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
			String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

			switch(messageLen)
			{
				case 4:
				{
					//Do the 000 check Default PIN 
					//if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES) && !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
					if(userPhoneVO.getPinRequired().equals(PretupsI.YES))
					{
						try
						{
							ChannelUserBL.validatePIN(p_con,channelUserVO,p_requestArr[3]);
						}
						catch(BTSLBaseException be)
						{
							if(be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) ||  (be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK))))
								p_con.commit();
							throw be;
						}	
					}					
					ReceiverVO receiverVO=new ReceiverVO();
					//Customer MSISDN Validation
					custMsisdn=p_requestArr[1];
					//Change for the SID logic
					p_requestVO.setSid(custMsisdn);
					receiverVO.setSid(custMsisdn);
					PrivateRchrgVO prvo=null;
					if((prvo=getPrivateRechargeDetails(p_con,custMsisdn))!=null)
					{
						p_c2sTransferVO.setSubscriberSID(custMsisdn);
						custMsisdn=prvo.getMsisdn();						
					}
					PretupsBL.validateMsisdn(p_con,receiverVO,p_c2sTransferVO.getRequestID(),custMsisdn);
					
					//Recharge amount Validation
					requestAmtStr=p_requestArr[2];
					PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr);
					p_c2sTransferVO.setReceiverVO(receiverVO);		
					//p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE));
					//Changed on 27/05/07 for Service Type selector Mapping
					ServiceSelectorMappingVO serviceSelectorMappingVO=ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO.getServiceType());
					if(serviceSelectorMappingVO!=null)
						p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());									
					p_requestVO.setReceiverLocale(new Locale(defaultLanguage,defaultCountry));
					break;
				}
				
				case 5:
				{
//					Do the 000 check Default PIN 
					//if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES) && !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
				    if(userPhoneVO.getPinRequired().equals(PretupsI.YES))
					{
						try
						{
							ChannelUserBL.validatePIN(p_con,channelUserVO,p_requestArr[4]);
						}
						catch(BTSLBaseException be)
						{
							if(be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) ||  (be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK))))
								p_con.commit();
							throw be;
						}	
					}						
					ReceiverVO receiverVO=new ReceiverVO();
					//Customer MSISDN Validation
					custMsisdn=p_requestArr[1];
					//Change for the SID logic
					p_requestVO.setSid(custMsisdn);
					receiverVO.setSid(custMsisdn);
					PrivateRchrgVO prvo=null;
					if((prvo=getPrivateRechargeDetails(p_con,custMsisdn))!=null)
					{
						p_c2sTransferVO.setSubscriberSID(custMsisdn);
						custMsisdn=prvo.getMsisdn();						
					}
					PretupsBL.validateMsisdn(p_con,receiverVO,p_c2sTransferVO.getRequestID(),custMsisdn);
					
					//Recharge amount Validation
					requestAmtStr=p_requestArr[2];
					PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr);
					p_c2sTransferVO.setReceiverVO(receiverVO);
					
					if(BTSLUtil.isNullString(p_requestArr[3]))
					{
						if("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage()))
						{
							ServiceSelectorMappingVO serviceSelectorMappingVO=ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO.getServiceType());
							if(serviceSelectorMappingVO!=null)
								p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());									
						}
					}
					else
						p_requestVO.setReqSelector(p_requestArr[3]);

	


					PretupsBL.getSelectorValueFromCode(p_requestVO);

					if(BTSLUtil.isNullString(p_requestVO.getReqSelector()))
					{
						ServiceSelectorMappingVO serviceSelectorMappingVO=ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO.getServiceType());
						if(serviceSelectorMappingVO!=null)
							p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());									
					}

					p_requestVO.setReceiverLocale(new Locale(defaultLanguage,defaultCountry));
					break;
				}
				
				case 6:
				{
					//if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES) && !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
				    if(userPhoneVO.getPinRequired().equals(PretupsI.YES))
					{
						try
						{
							ChannelUserBL.validatePIN(p_con,channelUserVO,p_requestArr[5]);
						}
						catch(BTSLBaseException be)
						{
							if(be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) ||  (be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK))))
								p_con.commit();
							throw be;
						}								
					}
					
					ReceiverVO receiverVO=new ReceiverVO();
					//Customer MSISDN Validation
					custMsisdn=p_requestArr[1];
					//Change for the SID logic
					p_requestVO.setSid(custMsisdn);
					receiverVO.setSid(custMsisdn);
					PrivateRchrgVO prvo=null;
					if((prvo=getPrivateRechargeDetails(p_con,custMsisdn))!=null)
					{
						p_c2sTransferVO.setSubscriberSID(custMsisdn);
						custMsisdn=prvo.getMsisdn();						
					}
					PretupsBL.validateMsisdn(p_con,receiverVO,p_c2sTransferVO.getRequestID(),custMsisdn);
					
					//Recharge amount Validation
					requestAmtStr=p_requestArr[2];
					PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr);
					p_c2sTransferVO.setReceiverVO(receiverVO);
					if(BTSLUtil.isNullString(p_requestArr[3]))
					{
						if("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage()))
						{
							//p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE));
							//Changed on 27/05/07 for Service Type selector Mapping
							ServiceSelectorMappingVO serviceSelectorMappingVO=ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO.getServiceType());
							if(serviceSelectorMappingVO!=null)
								p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());									
						}
						//changed for CRE_INT_CR00029 by ankit Zindal
						//in case of binary message we will set default value after calling getselectorvaluefromcode method
						/*						else
							p_requestVO.setReqSelector((Constants.getProperty("CVG_UNICODE_"+p_requestVO.getLocale().getLanguage().toUpperCase())));
*/					}
					else
						p_requestVO.setReqSelector(p_requestArr[3]);
					
					PretupsBL.getSelectorValueFromCode(p_requestVO);
//					changed for CRE_INT_CR00029 by ankit Zindal
					if(BTSLUtil.isNullString(p_requestVO.getReqSelector()))
					{
						//p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE));
						//Changed on 27/05/07 for Service Type selector Mapping
						ServiceSelectorMappingVO serviceSelectorMappingVO=ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO.getServiceType());
						if(serviceSelectorMappingVO!=null)
							p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());									
					}
					if(BTSLUtil.isNullString(p_requestArr[4]))
						p_requestVO.setReceiverLocale(new Locale(defaultLanguage,defaultCountry));
					else
					{
						int langCode=PretupsBL.getLocaleValueFromCode(p_requestVO,p_requestArr[4]);
						if(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode))==null)
							throw new BTSLBaseException(this,methodName,PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
						p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
					}
					break;
				}
				case 7:
				{
					//if((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getPinRequired().equals(PretupsI.YES) && !PretupsI.DEFAULT_C2S_PIN.equals(BTSLUtil.decryptText((((ChannelUserVO)p_c2sTransferVO.getSenderVO()).getUserPhoneVO()).getSmsPin())))
				    if(userPhoneVO.getPinRequired().equals(PretupsI.YES))
					{
						try
						{
							ChannelUserBL.validatePIN(p_con,channelUserVO,p_requestArr[6]);
						}
						catch(BTSLBaseException be)
						{
							if(be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) ||  (be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK))))
								p_con.commit();
							throw be;
						}								
					}
					
					ReceiverVO receiverVO=new ReceiverVO();
					//Customer MSISDN Validation
					custMsisdn=p_requestArr[1];
					//Change for the SID logic
					p_requestVO.setSid(custMsisdn);
					receiverVO.setSid(custMsisdn);
					PrivateRchrgVO prvo=null;
					if((prvo=getPrivateRechargeDetails(p_con,custMsisdn))!=null)
					{
						p_c2sTransferVO.setSubscriberSID(custMsisdn);
						custMsisdn=prvo.getMsisdn();						
					}
					PretupsBL.validateMsisdn(p_con,receiverVO,p_c2sTransferVO.getRequestID(),custMsisdn);
					
					//Recharge amount Validation
					requestAmtStr=p_requestArr[2];
					PretupsBL.validateAmount(p_c2sTransferVO,requestAmtStr);
					p_c2sTransferVO.setReceiverVO(receiverVO);
					if(BTSLUtil.isNullString(p_requestArr[3]))
					{
						if("en".equalsIgnoreCase(p_requestVO.getLocale().getLanguage()))
						{
							//p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE));
							//Changed on 27/05/07 for Service Type selector Mapping
							ServiceSelectorMappingVO serviceSelectorMappingVO=ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO.getServiceType());
							if(serviceSelectorMappingVO!=null)
								p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());									
						}
/*						else
							p_requestVO.setReqSelector((Constants.getProperty("CVG_UNICODE_"+p_requestVO.getLocale().getLanguage().toUpperCase())));
*/					}
					else
						p_requestVO.setReqSelector(p_requestArr[3]);
					
					PretupsBL.getSelectorValueFromCode(p_requestVO);
					//changed for CRE_INT_CR00029 by ankit Zindal
					if(BTSLUtil.isNullString(p_requestVO.getReqSelector()))
					{
						//p_requestVO.setReqSelector(String.valueOf(SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE));
						//Changed on 27/05/07 for Service Type selector Mapping
						ServiceSelectorMappingVO serviceSelectorMappingVO=ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO.getServiceType());
						if(serviceSelectorMappingVO!=null)
							p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());									
					}
					//For handling of sender locale
					if(BTSLUtil.isNullString(p_requestArr[4]))
						p_requestVO.setSenderLocale(new Locale(defaultLanguage,defaultCountry));
					else
					{
						int langCode=PretupsBL.getLocaleValueFromCode(p_requestVO,p_requestArr[4]);
/*						if(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode))==null)
							throw new BTSLBaseException(this,"validateC2SRechargeRequest",PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
*/						p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
						//ChangeID=LOCALEMASTER
						//Sender locale has to be overwritten in transferVO also.
						p_c2sTransferVO.setLocale(p_requestVO.getSenderLocale());
						p_c2sTransferVO.setLanguage(p_c2sTransferVO.getLocale().getLanguage());
						p_c2sTransferVO.setCountry(p_c2sTransferVO.getLocale().getCountry());
					}
					if (_log.isDebugEnabled()) 
				        _log.debug(this,"sender locale: ="+p_requestVO.getSenderLocale());
					
					if(BTSLUtil.isNullString(p_requestArr[5]))
						p_requestVO.setReceiverLocale(new Locale(defaultLanguage,defaultCountry));
					else
					{
						int langCode=PretupsBL.getLocaleValueFromCode(p_requestVO,p_requestArr[5]);
						if(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode))==null)
							throw new BTSLBaseException(this,methodName,PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
						p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
					}
					break;
				}
				default:
					throw new BTSLBaseException(this,methodName,PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT,0,new String[]{p_requestVO.getActualMessageFormat()},null);
			}
						
		}
		catch(BTSLBaseException be)
		{
			throw be;
		}
		catch(Exception e)
		{
			 _log.errorTrace(methodName,e);
			_log.error(methodName,"  Exception while validating user message :"+e.getMessage());
			EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"PretupsBL["+methodName+"]","","","","Exception while validating user message" +" ,getting Exception="+e.getMessage());
			throw new BTSLBaseException(this,methodName,PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
		}
		finally {
			if(_log.isDebugEnabled()) {
				_log.debug(methodName,"Exiting:senderLocale: ="+p_requestVO.getSenderLocale()+",receiverLocale: ="+p_requestVO.getReceiverLocale());
			}
		}
	}
	
	@Override
	public ArrayList removeVMSProductCodeList(ArrayList productList)  {
	    return productList;
	}
	public RequestVO parsePaymentMessage(RequestVO p_requestVO,String message) {
		p_requestVO.setRequestMessage(message);
		return p_requestVO;
	}

	@Override
    public Map validatePaymentRefId(ChannelTransferVO channelTransferVO) {
		Map retunMap = new HashMap();
		try {
			retunMap.put("STATUS", PretupsI.SUCCESS);
		} catch (Exception e) {
		    EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "validatePaymentRefId[]", "", "", "", "Not able to Validate Ref IN:" + e.getMessage());
       		retunMap.put("STATUS", PretupsI.TXN_STATUS_AMBIGIOUS);
		    e.printStackTrace();
		}finally{
		}
		return retunMap;
	}

 /**
	 * @param p_filteredMSISDN
	 * @param p_subscriberType
	 * @return
	 * @throws BTSLBaseException
	 * @author ashish.gupta
	 * For VIL
	 */
	public NetworkPrefixVO getNetworkDetails(String p_filteredMSISDN, String p_subscriberType) throws BTSLBaseException {
	        final String methodName = "getNetworkDetails";
	        StringBuilder loggerValue= new StringBuilder();
	        if (_log.isDebugEnabled()) {
	        	loggerValue.setLength(0);
	        	loggerValue.append("Entered: filteredMSISDN=");
	        	loggerValue.append(p_filteredMSISDN);
	        	loggerValue.append("p_subscriberType=");
	        	loggerValue.append(p_subscriberType);
	        	_log.debug(methodName, loggerValue);
	        }
	        NetworkPrefixVO networkPrefixVO = null;
	        if(BTSLUtil.isNullString(p_filteredMSISDN))
	    	{
	    		 throw new BTSLBaseException("OpertorUtil",methodName, PretupsErrorCodesI.C2S_ERROR_INVALID_SENDER_MSISDN);
	    	}
	        try {
	            final String msisdnPrefix = PretupsBL.getMSISDNPrefix(p_filteredMSISDN);
	            if (p_subscriberType.equals(PretupsI.USER_TYPE_SENDER)) {
	                networkPrefixVO = (NetworkPrefixVO) NetworkPrefixCache.getObject(msisdnPrefix);
	            } else {
	                networkPrefixVO = (NetworkPrefixVO) NetworkPrefixCache.getObject(msisdnPrefix, false);
	            }

	            if (networkPrefixVO == null && p_subscriberType.equals(PretupsI.USER_TYPE_SENDER)) {
	                throw new BTSLBaseException("OpertorUtil", methodName, PretupsErrorCodesI.ERROR_NETWORK_NOTFOUND);
	            } else if (networkPrefixVO == null && p_subscriberType.equals(PretupsI.USER_TYPE_RECEIVER)) {
	                throw new BTSLBaseException("OpertorUtil", methodName, PretupsErrorCodesI.ERROR_REC_NETWORK_NOTFOUND, 0, new String[] { p_filteredMSISDN }, null);
	            }
	            return networkPrefixVO;
	        } catch (BTSLBaseException be) {
	            throw be;
	        } catch (Exception e) {
	        	loggerValue.setLength(0);
				loggerValue.append("EXCEPTION: ");
				loggerValue.append(e.getMessage());
				_log.error(methodName, loggerValue);
				_log.errorTrace(methodName, e);
	            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OpertorUtil[getNetworkDetails]", "", p_filteredMSISDN,
	                "", loggerValue.toString());
	            throw new BTSLBaseException("OpertorUtil", methodName, PretupsErrorCodesI.ERROR_EXCEPTION,e);
	        } finally {
	        	if (_log.isDebugEnabled()) {
	             	loggerValue.setLength(0);
	             	loggerValue.append("Exiting: networkPrefixVO:");
	             	loggerValue.append(networkPrefixVO);
	             	_log.debug(methodName, loggerValue);
	             }
	        }
	    }





	@Override
	public int validateDVDRequestFormat(Connection p_con, C2STransferVO p_c2sTransferVO, RequestVO p_requestVO)
			throws BTSLBaseException {

        final String obj = "validateDVDRequestFormat";
        final String methodName = obj;
        int quantity = 0;
        String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
        String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);

        try {
            final String[] p_requestArr = p_requestVO.getRequestMessageArray();
            String custMsisdn = null;
            String requestAmtStr = null;
            String voucherType = null;
            String voucherSegment = null;
            String voucherProfile = null;
            final ChannelUserVO channelUserVO = (ChannelUserVO) p_c2sTransferVO.getSenderVO();
            UserPhoneVO userPhoneVO = null;
            if (!channelUserVO.isStaffUser()) {
                userPhoneVO = channelUserVO.getUserPhoneVO();
            } else {
                userPhoneVO = channelUserVO.getStaffUserDetails().getUserPhoneVO();
            }
            final int messageLen = p_requestArr.length;
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "messageLen: " + messageLen);
            }
            for (int i = 0; i < messageLen; i++) {
                if (_log.isDebugEnabled()) {
                    _log.debug(methodName, "i: " + i + " value: " + p_requestArr[i]);
                }
            }
            switch (messageLen) {
                case 8:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[7]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        //voucher type
                        voucherType = p_requestArr[2];
                        p_c2sTransferVO.setVoucherType(voucherType);
                        PretupsBL.validateVoucherType(p_con, voucherType);
                        p_c2sTransferVO.setVoucherType(voucherType);
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                p_c2sTransferVO.setSelectorCode(p_requestVO.getReqSelector());
                            }
                        //voucher segment
                        voucherSegment = p_requestArr[3];
                        PretupsBL.validateVoucherSegment(voucherSegment);
                        p_c2sTransferVO.setVoucherSegment(voucherSegment);
                        // voucher amount Validation
                        requestAmtStr = p_requestArr[4];
                        PretupsBL.validateVoucherDenomination(p_con, p_c2sTransferVO, requestAmtStr);
                        //voucher profile 
                        voucherProfile = p_requestArr[5];
                        PretupsBL.validateVoucherProfile(p_con,p_c2sTransferVO, voucherProfile);
                       
                        //quantity
                        quantity = Integer.parseInt(p_requestArr[6]);
                        PretupsBL.validateQuantity(p_c2sTransferVO, String.valueOf(quantity));
                        if (_log.isDebugEnabled()) {
                            _log.debug(methodName,  p_c2sTransferVO.getRequestedAmount());
                        }
                        
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        break;
                    }

                case 9:
                    {
                        // Do the 000 check Default PIN
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[8]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }
                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        //voucher type
                        voucherType = p_requestArr[2];
                        PretupsBL.validateVoucherType(p_con, voucherType);
                        p_c2sTransferVO.setVoucherType(voucherType);
                        final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                p_c2sTransferVO.setSelectorCode(p_requestVO.getReqSelector());
                            }
                        //voucher segment
                        voucherSegment = p_requestArr[3];
                        PretupsBL.validateVoucherSegment(voucherSegment);
                        p_c2sTransferVO.setVoucherSegment(voucherSegment);
                        // voucher amount Validation
                        requestAmtStr = p_requestArr[4];
                        PretupsBL.validateVoucherDenomination(p_con, p_c2sTransferVO, requestAmtStr);
                        //voucher profile 
                        voucherProfile = p_requestArr[5];
                        PretupsBL.validateVoucherProfile(p_con,p_c2sTransferVO, voucherProfile);
                     
                        //quantity
                        quantity = Integer.parseInt(p_requestArr[6]);
                        PretupsBL.validateQuantity(p_c2sTransferVO, String.valueOf(quantity));
                        if (_log.isDebugEnabled()) {
                            _log.debug(methodName,  p_c2sTransferVO.getRequestedAmount());
                        }
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[7])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[7]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }

                case 10:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[9]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);

                        //voucher type
                        voucherType = p_requestArr[2];
                        PretupsBL.validateVoucherType(p_con, voucherType);
                        p_c2sTransferVO.setVoucherType(voucherType);
                        //voucher segment
                        voucherSegment = p_requestArr[3];
                        PretupsBL.validateVoucherSegment(voucherSegment);
                        p_c2sTransferVO.setVoucherSegment(voucherSegment);
                        //quantity
                        quantity = Integer.parseInt(p_requestArr[6]);
                        PretupsBL.validateQuantity(p_c2sTransferVO, String.valueOf(quantity));
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[7])) {
                            if (PretupsI.LOCALE_LANGAUGE_EN.equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                    p_c2sTransferVO.setSelectorCode(p_requestVO.getReqSelector());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[7]);
                            p_c2sTransferVO.setSelectorCode(p_requestVO.getReqSelector());
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                p_c2sTransferVO.setSelectorCode(p_requestVO.getReqSelector());
                            }
                        }
                        
                        // voucher amount Validation
                        requestAmtStr = p_requestArr[4];
                        PretupsBL.validateVoucherDenomination(p_con, p_c2sTransferVO, requestAmtStr);
                        //voucher profile 
                        voucherProfile = p_requestArr[5];
                        PretupsBL.validateVoucherProfile(p_con,p_c2sTransferVO, voucherProfile);
                        
                        if (BTSLUtil.isNullString(p_requestArr[8])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[8]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                                throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_INVALID_PAYEE_NOT_LANG);
                            }
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));
                        }
                        break;
                    }
                case 11:
                    {
                        if (userPhoneVO.getPinRequired().equals(PretupsI.YES)) {
                            try {
                                ChannelUserBL.validatePIN(p_con, channelUserVO, p_requestArr[10]);
                            } catch (BTSLBaseException be) {
                                if (be.isKey() && ((be.getMessageKey().equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN)) || (be.getMessageKey()
                                    .equals(PretupsErrorCodesI.CHNL_ERROR_SNDR_PINBLOCK)))) {
                                    p_con.commit();
                                }
                                throw be;
                            }
                        }

                        final ReceiverVO receiverVO = new ReceiverVO();
                        // Customer MSISDN Validation
                        custMsisdn = p_requestArr[1];
                        // Change for the SID logic
                        p_requestVO.setSid(custMsisdn);
                        receiverVO.setSid(custMsisdn);
                        PrivateRchrgVO prvo = null;
                        if ((prvo = getPrivateRechargeDetails(p_con, custMsisdn)) != null) {
                            p_c2sTransferVO.setSubscriberSID(custMsisdn);
                            custMsisdn = prvo.getMsisdn();
                        }
                        PretupsBL.validateMsisdn(p_con, receiverVO, p_c2sTransferVO.getRequestID(), custMsisdn);


                        //voucher type
                        voucherType = p_requestArr[2];
                        PretupsBL.validateVoucherType(p_con, voucherType);
                        p_c2sTransferVO.setVoucherType(voucherType);
                        //voucher segment
                        voucherSegment = p_requestArr[3];
                        PretupsBL.validateVoucherSegment(voucherSegment);
                        p_c2sTransferVO.setVoucherSegment(voucherSegment);
                        //quantity
                        quantity = Integer.parseInt(p_requestArr[6]);
                        PretupsBL.validateQuantity(p_c2sTransferVO, String.valueOf(quantity));
                        if (_log.isDebugEnabled()) {
                            _log.debug(methodName,  p_c2sTransferVO.getRequestedAmount());
                        }
                        p_c2sTransferVO.setReceiverVO(receiverVO);
                        if (BTSLUtil.isNullString(p_requestArr[7])) {
                            if (PretupsI.LOCALE_LANGAUGE_EN.equalsIgnoreCase(p_requestVO.getLocale().getLanguage())) {
                                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                    .getServiceType());
                                if (serviceSelectorMappingVO != null) {
                                    p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                    p_c2sTransferVO.setSelectorCode(p_requestVO.getReqSelector());
                                }
                            }
                        } else {
                            p_requestVO.setReqSelector(p_requestArr[7]);
                            p_c2sTransferVO.setSelectorCode(p_requestVO.getReqSelector());
                        }

                        PretupsBL.getSelectorValueFromCode(p_requestVO);
                        if (BTSLUtil.isNullString(p_requestVO.getReqSelector())) {
                            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(p_c2sTransferVO
                                .getServiceType());
                            if (serviceSelectorMappingVO != null) {
                                p_requestVO.setReqSelector(serviceSelectorMappingVO.getSelectorCode());
                                p_c2sTransferVO.setSelectorCode(p_requestVO.getReqSelector());
                            }
                        }
                        
                     // voucher amount Validation
                        requestAmtStr = p_requestArr[4];
                        PretupsBL.validateVoucherDenomination(p_con, p_c2sTransferVO, requestAmtStr);
                        //voucher profile 
                        voucherProfile = p_requestArr[5];
                        PretupsBL.validateVoucherProfile(p_con,p_c2sTransferVO, voucherProfile);
                     
                        // For handling of sender locale
                        if (BTSLUtil.isNullString(p_requestArr[8])) {
                            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[8]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                            	  p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));                            }
                            else{
                            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));}
                        }
                        if (_log.isDebugEnabled()) {
                            _log.debug(this, "sender locale: =" + p_requestVO.getSenderLocale());
                        }

                        if (BTSLUtil.isNullString(p_requestArr[9])) {
                            p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                        } else {
                            final int langCode = PretupsBL.getLocaleValueFromCode(p_requestVO, p_requestArr[9]);
                            if (LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)) == null) {
                            	 p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));                        }
                            else{
                            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(String.valueOf(langCode)));}
                        }
                        break;
                    }
                default:
                    throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT, 0, new String[] { p_requestVO.getActualMessageFormat() },
                        null);
            }
            
        } catch (BTSLBaseException be) {
           throw be ;
        } catch (Exception e) {
            _log.errorTrace(obj, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[validateEVDRequestFormat]", "", "", "",
                "Exception while validating user message" + " ,getting Exception=" + e.getMessage());
            throw new BTSLBaseException(this, methodName, PretupsErrorCodesI.C2S_ERROR_EXCEPTION,e);
        }
        if (_log.isDebugEnabled()) {
            _log.debug(methodName, "Exiting ");
        }
        return quantity;
	}




	@Override
	public String formatDVDTransferID(TransferVO p_transferVO, long p_tempTransferID) {
		final String methodName = "formatDVDTransferID";
        String returnStr = null;
        try {
            final String paddedTransferIDStr = BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID), C2S_TRANSFER_ID_PAD_LENGTH);
             returnStr = "D" + currentDateTimeFormatString(p_transferVO.getCreatedOn()) + "." + currentTimeFormatString(p_transferVO.getCreatedOn()) + "." + Constants
                .getProperty("INSTANCE_ID") + paddedTransferIDStr;
            p_transferVO.setTransferID(returnStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "OperatorUtil[]", "", "", "",
                "Not able to generate Transfer ID:" + e.getMessage());
            returnStr = null;
        }
        return returnStr;
	}
	public long calculateAmount( long p_requestValue1,long p_requestValue2){
		long calculatedAmount = 0;
		return calculatedAmount;
	}
	public  double calculateCardGroupTaxDouble(String p_type, double p_rate, long p_requestValue) throws BTSLBaseException{
		double calculatedTax1Value = 0;
		if (p_type.equalsIgnoreCase(PretupsI.SYSTEM_AMOUNT)) {
			calculatedTax1Value =p_rate;
		}
		else if (p_type.equalsIgnoreCase(PretupsI.AMOUNT_TYPE_PERCENTAGE)) {
			calculatedTax1Value = p_requestValue * (p_rate / (100 + p_rate));
		}
		else {
            if (_log.isDebugEnabled()) {
                    _log.debug("calculateCardGroupTaxDouble()", "Exception p_type is not define in the system p_type="+ p_type);
            }
            throw new BTSLBaseException(this, "calculateCardGroupTaxDouble", "error.invalid.ratetype");
    }
		return calculatedTax1Value;
	}
	public  double calculateAmount(double p_requestValue1, double p_requestValue2) {
		double calculatedAmount = 0;
		calculatedAmount = p_requestValue1 - p_requestValue2;

		// calculatedAmount = Math.round(calculatedAmount * 100) / 100;

		return calculatedAmount;
	}
	public long calculateCardGroupBonusForDouble(String p_type, double p_rate, double p_requestValue) throws BTSLBaseException {
	    double calculatedBonusValue = 0;
                if (p_type.equalsIgnoreCase(PretupsI.SYSTEM_AMOUNT)) {
                        calculatedBonusValue = Double.valueOf(p_rate).longValue();
                } else if (p_type.equalsIgnoreCase(PretupsI.AMOUNT_TYPE_PERCENTAGE)) {
                        calculatedBonusValue = ((p_requestValue * p_rate) / 100);
                        calculatedBonusValue=roundTo(calculatedBonusValue/100, 2)*100;
                        calculatedBonusValue = Math.round(calculatedBonusValue * 100) / 100;
                //      calculatedBonusValue=Math.ceil(calculatedBonusValue);
                } else {
                        if (_log.isDebugEnabled()) {
                                _log.debug("calculateCardGroupBonusForDouble()", "Exception p_type is not define in the system p_type="+ p_type);
                        }
                        throw new BTSLBaseException(this, "calculateCardGroupBonusForDouble", "error.invalid.ratetype");
                }
                //return (long)calculatedBonusValue;
                return BTSLUtil.parseDoubleToLong(calculatedBonusValue);
	}
	public static double roundTo(double number, int afterDecimal)
	{
		double result = 0.0;
		try
		{
			String formatStr = "##########0.0";
			for(int i=1; i<afterDecimal; i++) formatStr += "#";
			DecimalFormat decFormat = new DecimalFormat(formatStr,new DecimalFormatSymbols(Locale.ENGLISH));//comment by abhay
			String tempNum = decFormat.format(number);
			//System.out.println("BTSLUtil inside roundTo tempNum:"+tempNum);
			result = Double.parseDouble(tempNum);
			//System.out.println("BTSLUtil inside roundTo result:"+result);
		}
		catch(Exception ex){System.out.println("BTSLUtil roundTO Exception ex="+ex.getMessage());}
		return result;
	}
	
	public String formatVoucherExpiryChangeID(){
		String methodName = "formatVoucherExpiryChangeID";
		if(_log.isDebugEnabled()){
			_log.debug(methodName, "Entered");
		}
		StringBuffer batchID = new StringBuffer("V");
		String number = null;
		Date date = new Date();  
	    SimpleDateFormat formatter = new SimpleDateFormat("ddMMyy");  
	    String strDate= formatter.format(date); 
	    batchID.append(strDate);
	    batchID.append(".");
		try {
			number = String.valueOf(IDGenerator.getNextID(PretupsI.VOMS_EXPIRY_BATCH_ID, TypesI.ALL));
		} catch (BTSLBaseException e) {
			e.printStackTrace();
		}
		number = BTSLUtil.padZeroesToLeft(number, 4);
		batchID.append(number);
		if(_log.isDebugEnabled()){
			_log.debug(methodName, "Exiting with batchID = "+batchID.toString());
		}
		return batchID.toString();
	}
	
	/**
	 * Method formatOPTC2CBatchMasterTxnID.
	 * This method generate the batch ID for the C2C batch master transfer.
	 * @param p_batchMasterVO C2CBatchMasterVO
	 * @param p_tempTransferID long
	 * @return String
	 * 
	 * @see com.btsl.pretups.util.OperatorUtilI#formatOPTC2CBatchMasterTxnID(C2CBatchMasterVO, long)
	 */
	public String formatOPTC2CBatchMasterTxnID(C2CBatchMasterVO p_batchMasterVO,long p_tempTransferID)
	{
		String returnStr=null;
		try
		{
			String paddedTransferIDStr=BTSLUtil.padZeroesToLeft(String.valueOf(p_tempTransferID),FOC_BATCH_MASTER_ID_PAD_LENGTH);
			returnStr=PretupsI.OPT_C2C_BATCH_TRANSACTION_ID+currentDateTimeFormatString(p_batchMasterVO.getCreatedOn())+"."+paddedTransferIDStr;
		}
		catch(Exception e)
		{
			EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"OperatorUtil[formatOPTC2CBatchMasterTxnID]","","","","Not able to generate Transaction ID:"+e.getMessage());
			returnStr=null;
		}
		return returnStr;
	}
	
	@Override
	public ArrayList loadUserListForTrfRuleTypeByUserLevelForLoginID(Connection p_con, ChannelUserVO p_channelUserVO,
			String p_toCategoryCode, String p_txnType, String p_loginID) throws BTSLBaseException {
		ArrayList userList = null;

        if ("C2CTRFRUL5".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // code C2CTRFRUL5=Rule Type E (Individual can transfer only below
            // the hierarchy)
            userList = new UserLevelTrfRuleDAO()
                .loadUsersListInSelfHierarchyForLoginID(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_loginID, p_channelUserVO.getUserID(),null,true);
        } else if ("C2CTRFRUL4".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // Rule Type D (Rule Type E + within same Hierarchy)
            userList = new UserLevelTrfRuleDAO().loadUsersListByOwnerForLoginID(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_channelUserVO.getOwnerID(), p_loginID,
                p_channelUserVO.getUserID(), p_channelUserVO.getCategoryCode(),null,true);
        } else if ("C2CTRFRUL3".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // self cat to self cat transfer rule must be define
            userList = new UserLevelTrfRuleDAO().loadUsersListAtSameLevelForLoginID(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_loginID, p_channelUserVO.getUserID(),
                p_channelUserVO.getOwnerID(),null,true);
        } else if ("C2CTRFRUL2".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // Rule Type B (Rule Type C + within same Domain)
            userList = new UserLevelTrfRuleDAO().loadUsersByCatCodeAndWithoutSessionCatCodeForLoginID(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_channelUserVO
                .getParentID(), p_loginID, p_channelUserVO.getUserID(), p_channelUserVO.getCategoryCode());
        } else if ("C2CTRFRUL1".equals(p_channelUserVO.getTrannferRuleTypeId())) {
            // Rule Type A: Rule Type B + with same level
            userList = new UserLevelTrfRuleDAO().loadUsersByCategoryCodeForLoginID(p_con, p_channelUserVO.getNetworkID(), p_toCategoryCode, p_channelUserVO.getParentID(), p_loginID,
                p_channelUserVO.getUserID(),null,true);
        }
        return userList;
	}

	
	//added for Robi Retailer Loan CR
	   /**
* Method calculateCommission.
* 
* @param p_commissionType
*            String
* @param p_commissionRate
*            double
* @param p_productCost
*            long
* @return long
* @throws BTSLBaseException
* @see com.btsl.pretups.util.OperatorUtilI#calculateCommission(String,
*      double, long)
*/
@Override
public long calculatePremium(UserLoanVO p_userLoanVO, ArrayList<LoanProfileDetailsVO> p_profileSlabList) throws BTSLBaseException  {
	
String methodName = "calculatePremium";	








  if (_log.isDebugEnabled()) {
      _log.debug(methodName, "Entered  UserLoanVO: " + p_userLoanVO + " p_profileSlabList: " + p_profileSlabList );
  }
	 double premiumValue = 0;
	  
  Date curTime = new Date();
  Date loanTakenTime = p_userLoanVO.getLast_loan_date();

  long  timeDifference  = curTime.getTime() - loanTakenTime.getTime();
  
  long  hourDifference  = timeDifference / (1000 * 3600 );
  
  long dayDifference = hourDifference/24 ;
  
  long loanAmount = p_userLoanVO.getLoan_amount();
  
  for(LoanProfileDetailsVO loanProfileDetailsVO : p_profileSlabList) {
  	
  	 if (_log.isDebugEnabled()) {
           _log.debug(methodName,  " loanProfileDetailsVO.getProfileType(): " + loanProfileDetailsVO.getProfileType()+"dayDifference:"+dayDifference+ "hourDifference="+hourDifference);
       }
  	if(PretupsI.LOAN_PROFILE_IN_DAYS.equals(loanProfileDetailsVO.getProfileType())){
  		if(loanProfileDetailsVO.getFromRange()<= dayDifference && loanProfileDetailsVO.getToRange()>= dayDifference) {
  		      if (PretupsI.AMOUNT_TYPE_PERCENTAGE.equals(loanProfileDetailsVO.getInterestType())) {
  		        	premiumValue = (loanProfileDetailsVO.getInterestValue() / 100) * (loanAmount);
  		        	premiumValue = Math.round(premiumValue);
  		        } else if (PretupsI.SYSTEM_AMOUNT.equals(loanAmount)) {
  		        	premiumValue = (loanProfileDetailsVO.getInterestValue());
  		        } else {
     		            if (_log.isDebugEnabled()) {
     		                _log.debug(methodName, "Exception p_commissionType is not define in the system loanProfileDetailsVO.getInterestType()=" + loanProfileDetailsVO.getInterestType());
     		            }
  		        }
  		      
  		      break;
  		}
  		else 
  			continue;
  	}
  	else if (PretupsI.LOAN_PROFILE_IN_HOURS.equals(loanProfileDetailsVO.getProfileType())){
  	
  		 if (_log.isDebugEnabled()) {
               _log.debug(methodName,  " loanProfileDetailsVO.getProfileType(): " + loanProfileDetailsVO.getProfileType()+"dayDifference:"+dayDifference+ "hourDifference="+hourDifference);
           }
  		 
  		if(loanProfileDetailsVO.getFromRange()<= hourDifference && loanProfileDetailsVO.getToRange()>= hourDifference) {

  			 if (_log.isDebugEnabled()) {
                   _log.debug(methodName,  " loanProfileDetailsVO.getProfileType(): " + loanProfileDetailsVO.getProfileType()+"dayDifference:"+dayDifference+ "hourDifference="+hourDifference);
               }
  			 
  			if (PretupsI.AMOUNT_TYPE_PERCENTAGE.equals(loanProfileDetailsVO.getInterestType())) {
  				 if (_log.isDebugEnabled()) {
  	                 _log.debug(methodName,  " loanProfileDetailsVO.getProfileType(): " + loanProfileDetailsVO.getProfileType()+"dayDifference:"+dayDifference+ "hourDifference="+hourDifference);
  	             }
  				 
  				premiumValue = (loanProfileDetailsVO.getInterestValue() / 100) * (loanAmount);
  				premiumValue = Math.round(premiumValue);
  				 if (_log.isDebugEnabled()) {
  	                 _log.debug(methodName,  " premiumValue: " + premiumValue+"dayDifference:"+dayDifference+ "hourDifference="+hourDifference);
  	             }
  			} else if (PretupsI.SYSTEM_AMOUNT.equals(loanAmount)) {
  				premiumValue = (loanProfileDetailsVO.getInterestValue());
  			} else {
  				if (_log.isDebugEnabled()) {
  					_log.debug(methodName, "Exception p_commissionType is not define in the system loanProfileDetailsVO.getInterestType()=" + loanProfileDetailsVO.getInterestType());
  				}

  			}
  			  break;
  		}
  		else 
  			continue;
  	}
  	
  }


  if (_log.isDebugEnabled()) {
      _log.debug(methodName, "Exited premiumValue Clculated value " + premiumValue);
  }

  return (long) premiumValue;
}
}
