package com.btsl.pretups.gateway.util;

/*
 * @(#)ExtAPIXMLStringParser.java
 * Copyright(c) 2005, Bharti Telesoft Ltd.
 * All Rights Reserved
 * ------------------------------------------------------------------------------
 * -------------------
 * Author Date History
 * ------------------------------------------------------------------------------
 * -------------------
 * Manoj Kumar Jan 25, 2006 Initital Creation
 * Ankit Singhal Dec 13, 2006 Modified
 * Kapil Mehta Feb 03, 2009 Modified
 * Harpreet Kaur OCT 18,2011 Modified
 * Gaurav pandey jan 12, 2013 Modified
 * Vibhu Trehan Jun 27, 2014 Split of file XMLStringParser
 * ------------------------------------------------------------------------------
 * -------------------
 * XML String class
 */
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import com.btsl.common.BTSLBaseException;
import com.btsl.common.ListValueVO;
import com.btsl.event.EventComponentI;
import com.btsl.event.EventHandler;
import com.btsl.event.EventIDI;
import com.btsl.event.EventLevelI;
import com.btsl.event.EventStatusI;
import com.btsl.logging.Log;
import com.btsl.logging.LogFactory;
import com.btsl.pretups.channel.transfer.businesslogic.C2STransferVO;
import com.btsl.pretups.channel.transfer.businesslogic.ChannelTransferItemsVO;
import com.btsl.pretups.channel.transfer.businesslogic.ChannelTransferVO;
import com.btsl.pretups.channel.transfer.businesslogic.UserBalancesVO;
import com.btsl.pretups.common.PretupsErrorCodesI;
import com.btsl.pretups.common.PretupsI;
import com.btsl.pretups.inter.module.InterfaceErrorCodesI;
import com.btsl.pretups.master.businesslogic.LocaleMasterCache;
import com.btsl.pretups.master.businesslogic.LocaleMasterVO;
import com.btsl.pretups.master.businesslogic.LookupsCache;
import com.btsl.pretups.master.businesslogic.LookupsVO;
import com.btsl.pretups.master.businesslogic.ServiceSelectorMappingCache;
import com.btsl.pretups.master.businesslogic.ServiceSelectorMappingVO;
import com.btsl.pretups.preference.businesslogic.PreferenceCache;
import com.btsl.pretups.preference.businesslogic.PreferenceI;
import com.btsl.pretups.product.businesslogic.ChannelTransfrsReturnsVO;
import com.btsl.pretups.receiver.RequestVO;
import com.btsl.pretups.subscriber.businesslogic.SenderVO;
import com.btsl.pretups.transfer.businesslogic.EnquiryVO;
import com.btsl.pretups.transfer.businesslogic.TransferVO;
import com.btsl.pretups.user.businesslogic.ChannelUserVO;
import com.btsl.pretups.user.businesslogic.UserTransferEnquiryVO;
import com.btsl.pretups.util.OperatorUtilI;
import com.btsl.pretups.util.PretupsBL;
import com.btsl.user.businesslogic.TotalDailyUserIncomeResponseVO;
import com.btsl.user.businesslogic.TotalUserIncomeDetailsVO;
import com.btsl.user.businesslogic.UserLoanVO;
import com.btsl.util.BTSLDateUtil;
import com.btsl.util.BTSLUtil;
import com.btsl.util.Constants;
import com.btsl.util.RegularExpression;
import com.btsl.util.XMLTagValueValidation;
import com.btsl.util.XmlTagValueConstant;
import com.btsl.voms.util.VomsUtil;
import com.btsl.voms.vomscommon.VOMSI;
import com.btsl.voms.voucher.businesslogic.VomsVoucherVO;
import com.btsl.pretups.preference.businesslogic.PreferenceDAO;
import com.txn.pretups.preference.businesslogic.PreferenceTxnDAO;
import com.btsl.pretups.preference.businesslogic.PreferenceCacheVO;

public class ExtAPIXMLStringParser {

    public static final Log _log = LogFactory.getLog(ExtAPIXMLStringParser.class.getName());

    private static String P2P_MESSAGE_SEP = null;
    private static String CHNL_MESSAGE_SEP = null;
    private static String MULT_CRE_TRA_DED_ACC_SEP = null;
    private static final String _blank = "";
    public static final String MNP_RES = "UPLOADMNPFILERESP";
    public static final String ADD_USER_RES = "USERADDRESP";// 21-02-2014
    public static final String MODIFY_USER_RES = "USERMODRESP";// 21-02-2014
    public static final String SUSPEND_RESUME_USER_RES = "USERSRRESP"; // 21-02-2014
    public static final String DELETE_USER_RES = "USERDELRESP";// 21-02-2014
    public static final String ADD_MODIFY_USER_ROLE_RES = "EXTCNGROLERESP";
    public static final String CHANE_PASSWORD_RES = "EXTCNGPWDRESP";
    public static final String ICCID_MSISDN_MAP_RES = "ICCIDMSISDNMAPRESP";
    private static OperatorUtilI _operatorUtil = null;
    private static final String EXCEPTION = "EXCEPTION: ";
    private static final String BTSL_EXCEPTION = "BTSLBASEEXCEPTION: ";
    private static final String EXIT_KEY = "Exiting: p_requestVO:";
    private static final String ENTRY_KEY = "Entered: p_requestVO=";
    private static final String CLASS_NAME = "ExtAPIXMLStringParser";
    private static final String EXIT_KEY_RES = "Exiting: responseStr:";
	private static final String DOC_TYPE = "<?xml version=\"1.0\"?><!DOCTYPE COMMAND PUBLIC \"-//Ocam//DTD XML Command 1.0//EN\" \"xml/command.dtd\"><COMMAND>";
    
    /**
   	 * ensures no instantiation
   	 */
    private ExtAPIXMLStringParser(){
    	
    }
    
    static {

        final String utilClass = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.OPERATOR_UTIL_CLASS);
        try {
            _operatorUtil = (OperatorUtilI) Class.forName(utilClass).newInstance();
        }catch (InstantiationException e) {
        	_log.errorTrace(CLASS_NAME, e);
        } catch (ClassNotFoundException e) {
        	_log.errorTrace(CLASS_NAME, e);
        } 
        catch (Exception e) {
            _log.errorTrace(CLASS_NAME, e);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[initialize]", "", "", "",
                "Exception while loading the class at the call:" + e.getMessage());
        }
        String chnlPlainSmsSeparator = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.CHNL_PLAIN_SMS_SEPARATOR);
        String p2pPlainSmsSeparator = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_PLAIN_SMS_SEPARATOR);
        String multCreTraDedAccSep = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.MULT_CRE_TRA_DED_ACC_SEP);
        try {
            CHNL_MESSAGE_SEP = chnlPlainSmsSeparator;
            if (BTSLUtil.isNullString(CHNL_MESSAGE_SEP)) {
                CHNL_MESSAGE_SEP = " ";
            }
            P2P_MESSAGE_SEP = p2pPlainSmsSeparator;
            if (BTSLUtil.isNullString(P2P_MESSAGE_SEP)) {
                P2P_MESSAGE_SEP = " ";
            }

            MULT_CRE_TRA_DED_ACC_SEP = multCreTraDedAccSep;
            if (BTSLUtil.isNullString(MULT_CRE_TRA_DED_ACC_SEP)) {
                MULT_CRE_TRA_DED_ACC_SEP = ",";
            }
        } catch (Exception e) {
            _log.errorTrace("static", e);
        }
    }

    /**
     * Generate Fail message
     * 
     * @param p_requestVO
     * @throws BTSLBaseException 
     * @throws Exception
     */
    public static void generateFailureResponse(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "generateFailureResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            // Added By Diwakar on 11-MAR-2014
            if (p_requestVO.getRequestMap() != null && !BTSLUtil.isNullString((String) p_requestVO.getRequestMap().get("TYPE"))) {
                final String requestType = (String) p_requestVO.getRequestMap().get("TYPE");
                if (requestType.equalsIgnoreCase(ParserUtility.MNP_REQ)) {
                    sbf.append("<TYPE>").append(MNP_RES).append("</TYPE>");
                }

            } else {
                // Ended Here
                sbf.append("<TYPE></TYPE>");
            }
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            final String message = ExtAPIXMLStringParser.getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            sbf.append("<MESSAGE>").append(message).append("</MESSAGE>");// brajesh
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        }
        catch (Exception e) {
        	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            _log.errorTrace(methodName, e);
            throw new BTSLBaseException(CLASS_NAME, methodName, "Exception in generating Failure Response");
        } finally {
        	printExitLogger(methodName, loggerValue, responseStr);
        }
    }

    /**
     * this method parse GetAccountInfoRequest from XML String and formating
     * into white space seperated String
     * 
     * @param p_requestVO
     *            RequestVO
     */
    public static void parseGetAccountInfoRequest(RequestVO p_requestVO) throws Exception {
    	final String methodName = "parseGetAccountInfoRequest";
    	 StringBuilder loggerValue= new StringBuilder();
         printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String switchId = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            // int index=requestStr.indexOf("<TYPE>")
            // String
            // type=requestStr.substring(index+"<TYPE>".length(),requestStr.indexOf("</TYPE>",index))
            int index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            index = requestStr.indexOf("<SELECTOR>");
            final String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }
           
            
                if (BTSLUtil.isNullString(msisdn1)) {
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_BLANK_MSISDN);
                }
                if (BTSLUtil.isNullString(selector)) {
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_BLANK_SELECTOR);
                }
             
            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }

            parsedRequestStr = PretupsI.SERVICE_TYPE_ACCOUNTINFO + P2P_MESSAGE_SEP + msisdn1;
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
        }
        catch (BTSLBaseException btsle) {
        	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(btsle.getMessage());
			_log.error(methodName, loggerValue);
            throw btsle;
        }
        catch (Exception e) {
        	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * this method parse credit transfer request from XML String formating into
     * white space seperated String
     * 
     * @param p_requestVO
     *            RequestVO
     */
    public static void parseCreditTransferRequest(RequestVO p_requestVO) throws BTSLBaseException, Exception {
    	final String methodName = "parseCreditTransferRequest";
   	 	StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String p2pDefaultSmsPin = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_DEFAULT_SMSPIN);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String switchId = null;
        try {
        	final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>")
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index))
             */
            int index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            try
            {
            	if((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.PIN_REQUIRED_P2P) && BTSLUtil.isNullString(pin))
            
            {           
            	throw new BTSLBaseException(CLASS_NAME, "parseCreditTransferRequest", PretupsErrorCodesI.P2P_MCDL_PIN_REQUIRED);          
            }
            }
            catch (BTSLBaseException btsle) {
                throw btsle;
            }
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            // added for cell_id and switch_id
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }
            index = requestStr.indexOf("<INFO1>");
            if(index>0)
            {
            	final String info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
            	requestHashMap.put("INFO1", info1);
            }
            index = requestStr.indexOf("<INFO2>");
            if(index>0)
            {
            	final String info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
            	requestHashMap.put("INFO2", info2);
            }
            index = requestStr.indexOf("<INFO3>");
            if(index>0)
            {
            	final String info3 = requestStr.substring(index + "<INFO3>".length(), requestStr.indexOf("</INFO3>", index));
            	requestHashMap.put("INFO3", info3);
            }
            index = requestStr.indexOf("<INFO4>");
            if(index>0)
            {
            	final String info4 = requestStr.substring(index + "<INFO4>".length(), requestStr.indexOf("</INFO4>", index));
            	requestHashMap.put("INFO4", info4);
            }
            index = requestStr.indexOf("<INFO5>");
            if(index>0)
            {
            	final String info5 = requestStr.substring(index + "<INFO5>".length(), requestStr.indexOf("</INFO5>", index));
            	requestHashMap.put("INFO5", info5);
            }
            //added by Yogesh Dixit MSISDN is manadatory 
            if (BTSLUtil.isNullString(msisdn1)) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.USSD_BLANK_MSISDN);
                _log.error(methodName, "Sender msisdn is null null");
                throw new BTSLBaseException(CLASS_NAME, "parseCreditTransferRequest", PretupsErrorCodesI.USSD_BLANK_MSISDN);
            }
            // amount field should be mandatory
            
            if (BTSLUtil.isNullString(amount)) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_BLANK_AMOUNT);
                _log.error(methodName, "Amount field is null");
                throw new BTSLBaseException(CLASS_NAME, "parseCreditTransferRequest", PretupsErrorCodesI.P2P_ERROR_BLANK_AMOUNT);
            }
         
            // added by sanjay to set default pin
            if (BTSLUtil.isNullString(pin)) {
                // pin=PretupsI.DEFAULT_P2P_PIN
                pin = p2pDefaultSmsPin;
            }
            //added by Yogesh Dixit MSISDN2 is manadatory 
            if (BTSLUtil.isNullString(msisdn2)) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.USSD_BLANK_MSISDN);
                _log.error(methodName, "Reciver msisdn cant be null");
                throw new BTSLBaseException(CLASS_NAME, "parseCreditTransferRequest", PretupsErrorCodesI.USSD_BLANK_MSISDN);
            }

            // added by sanjay 10/01/2006 - to set default language code
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "language1:" + language1 + ":");
            }

            if (BTSLUtil.isNullString(language1)) {
                language1 = Constants.getProperty("SMS_USSD_DEFAULT_LANGUAGE");
            }

            if (BTSLUtil.isNullString(language1)) {
                language1 = "0";
            }

            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "language1:" + language1 + ":");
                // added by sanjay 10/01/2006 - to set default language code
            }

            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "language2:" + language2 + ":");
            }

            if (BTSLUtil.isNullString(language2)) {
                language2 = Constants.getProperty("SMS_USSD_DEFAULT_LANGUAGE");
            }

            if (BTSLUtil.isNullString(language2)) {
                language2 = "0";
            }
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "language2:" + language2 + ":");
            }
          if(LocaleMasterCache.getLocaleFromCodeDetails(language1) == null )
          {
        	  throw new BTSLBaseException(CLASS_NAME, "parseCreditTransferRequest", PretupsErrorCodesI.LANG_CODE_NOT_EXIST);
          }
          if(LocaleMasterCache.getLocaleFromCodeDetails(language2)==null)
          {
        	  throw new BTSLBaseException(CLASS_NAME, "parseCreditTransferRequest", PretupsErrorCodesI.LANG_CODE_NOT_EXIST);
          }
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.P2P_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_P2PRECHARGE);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            // if we have to forcibaly change the value of selecter in case of
            // USSD request.

            if (!BTSLUtil.isNullString((String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEF_FRCXML_SEL_P2P))) {
                if (_log.isDebugEnabled()) {
                    _log.debug(methodName, "using default force selecter of XML");
                }
                selector = "" + (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEF_FRCXML_SEL_P2P);
            }
            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, "parseCreditTransferRequest", PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, "parseCreditTransferRequest", PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_P2PRECHARGE + P2P_MESSAGE_SEP + msisdn2 + P2P_MESSAGE_SEP + amount + (P2P_MESSAGE_SEP + selector) + (P2P_MESSAGE_SEP + language2) + P2P_MESSAGE_SEP + pin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(language2));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setPin(pin);   
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
            p_requestVO.setRequestMap(requestHashMap);
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(" BTSL Exception while parsing Request Message:");
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, "parseCreditTransferRequest", PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * this method parse change pin request from XML String and fromating into
     * white space seperated String
     * 
     * @param p_requestVO
     *            RequestVO
     */
    public static void parseChangePinRequest(RequestVO p_requestVO) throws Exception {
    	final String methodName = "parseChangePinRequest";
   	 	StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String switchId = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */
            int index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            try
            {
            	if((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.PIN_REQUIRED_P2P) && BTSLUtil.isNullString(pin))
            
            {           
            	throw new BTSLBaseException(CLASS_NAME, "parseChangePinRequest", PretupsErrorCodesI.P2P_MCDL_PIN_REQUIRED);          
            }
            }
            catch (BTSLBaseException btsle) {
                throw btsle;
            }
            index = requestStr.indexOf("<NEWPIN>");
            final String newPin = requestStr.substring(index + "<NEWPIN>".length(), requestStr.indexOf("</NEWPIN>", index));
            index = requestStr.indexOf("<CONFIRMPIN>");
            final String confirmPin = requestStr.substring(index + "<CONFIRMPIN>".length(), requestStr.indexOf("</CONFIRMPIN>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            XMLTagValueValidation.validateLanguage1(language1, XMLTagValueValidation.isTagOptinal());
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }
            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY))
            {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }

            parsedRequestStr = PretupsI.SERVICE_TYPE_P2PCHANGEPIN + P2P_MESSAGE_SEP + pin + P2P_MESSAGE_SEP + newPin + P2P_MESSAGE_SEP + confirmPin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);

            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
        } 
        catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        }catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * this method parse registration request from XML String and formating into
     * white space seperated String
     * 
     * @param p_requestVO
     *            RequestVO
     */
    public static void parseNotificationLanguageRequest(RequestVO p_requestVO) throws Exception {
    	final String methodName = "parseNotificationLanguageRequest";
   	 	StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String switchId = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */
            int index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>"));
            final String pin = requestStr.substring(requestStr.indexOf("<PIN>") + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            try
            {
            	if((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.PIN_REQUIRED_P2P) && BTSLUtil.isNullString(pin))
            
            {           
            	throw new BTSLBaseException(CLASS_NAME, "parseNotificationLanguageRequest", PretupsErrorCodesI.P2P_MCDL_PIN_REQUIRED);          
            }
            }
            catch (BTSLBaseException btsle) {
                throw btsle;
            }
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }
            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }

            parsedRequestStr = PretupsI.SERVICE_TYPE_LANG_NOTIFICATION + P2P_MESSAGE_SEP + language1 + P2P_MESSAGE_SEP + pin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
        } 
        catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        }
        catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * this method parse History Message Request request from XML String and
     * formating into white space seperated String
     * 
     * @param p_requestVO
     *            RequestVO
     */
    public static void parseHistoryMessageRequest(RequestVO p_requestVO) throws Exception {
    	final String methodName = "parseHistoryMessageRequest";
   	 	StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String switchId = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */
            int index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            try
            {
            	if((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.PIN_REQUIRED_P2P) && BTSLUtil.isNullString(pin))
            
            {           
            	throw new BTSLBaseException(CLASS_NAME, "parseHistoryMessageRequest", PretupsErrorCodesI.P2P_MCDL_PIN_REQUIRED);          
            }
            }
            catch (BTSLBaseException btsle) {
                throw btsle;
            }
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }
            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_P2P_HISTORY + P2P_MESSAGE_SEP + pin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
        } 
        catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        }
        catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * this method parse credit recharge request from XML String formating into
     * white space seperated String
     * 
     * @param p_requestVO
     *            RequestVO
     *            Added by vamsidhar for mobinil phase 2
     */

    public static void parseCreditRechargeRequest(RequestVO p_requestVO) throws BTSLBaseException, Exception {
    	final String methodName = "parseCreditRechargeRequest";
   	 	StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String p2pDefaultSmsPin = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_DEFAULT_SMSPIN);
        String parsedRequestStr = null;
        String cellId = null;
        String switchId = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */
            int index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            try
            {
            	if((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.PIN_REQUIRED_P2P) && BTSLUtil.isNullString(pin))
                {           
	            	throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_MCDL_PIN_REQUIRED);          
	            }
            }
            catch (BTSLBaseException btsle) {
                throw btsle;
            }
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }
            if (BTSLUtil.isNullString(amount)) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_BLANK_AMOUNT);
                _log.error(methodName, "Amount field is null in parseCreditRechargeRequest");
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_ERROR_BLANK_AMOUNT);
            }

            // For Setting the default pin
            if (BTSLUtil.isNullString(pin)) {
                // pin=PretupsI.DEFAULT_P2P_PIN
                pin = p2pDefaultSmsPin;
            }

            // added by sanjay 10/01/2006 - to set default language code
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "language1:" + language1 + ":");
            }

            if (BTSLUtil.isNullString(language1)) {
                language1 = Constants.getProperty("SMS_USSD_DEFAULT_LANGUAGE");
            }

            if (BTSLUtil.isNullString(language1)) {
                language1 = "0";
            }

            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "language1:" + language1 + ":");
                // added by sanjay 10/01/2006 - to set default language code
            }

            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "language2:" + language2 + ":");
            }

            if (BTSLUtil.isNullString(language2)) {
                language2 = Constants.getProperty("SMS_USSD_DEFAULT_LANGUAGE");
            }

            if (BTSLUtil.isNullString(language2)) {
                language2 = "0";
            }
            if(LocaleMasterCache.getLocaleFromCodeDetails(language1) == null )
            {
          	  throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.LANG_CODE_NOT_EXIST);
            }
            if(LocaleMasterCache.getLocaleFromCodeDetails(language2)==null)
            {
          	  throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.LANG_CODE_NOT_EXIST);
            }
            
            
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "language2:" + language2 + ":");
            }

            final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_P2PCREDITRECHARGE);
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.P2P_CREDIT_RECHARGE_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }

            if (serviceSelectorMappingVO != null && !(serviceSelectorMappingVO.getSelectorCode().equals(selector))) {
                if (_log.isDebugEnabled()) {
                    _log.debug(methodName, "invalid selector:" + selector + ":");
                }
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
            }
            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_P2PCREDITRECHARGE + P2P_MESSAGE_SEP + msisdn2 + P2P_MESSAGE_SEP + amount + (P2P_MESSAGE_SEP + selector) + (P2P_MESSAGE_SEP + language2) + P2P_MESSAGE_SEP + pin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(language2));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(" BTSL Exception while parsing Request Message :");
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseEXTC2STransferEnqRequest(RequestVO p_requestVO) throws Exception, BTSLBaseException {
    	final String methodName = "parseEXTC2STransferEnqRequest";
   	 	StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            requestHashMap.put("MSISDN", msisdn1);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));

            // ---ext
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            //
            index = requestStr.indexOf("<LANGUAGE1>");
            String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            if (BTSLUtil.isNullString(language1)) {
                language1 = Constants.getProperty("SMS_USSD_DEFAULT_LANGUAGE");
            }

            if (BTSLUtil.isNullString(language1)) {
                language1 = "0";
            }
            if(LocaleMasterCache.getLocaleFromCodeDetails(language1)==null)
            {
          	  throw new BTSLBaseException(CLASS_NAME, "parseEXTC2STransferEnqRequest", PretupsErrorCodesI.LANG_CODE_NOT_EXIST);
            }
            /*
             * index=requestStr.indexOf("<LANGUAGE2>");
             * String
             * language2=requestStr.substring(index+"<LANGUAGE2>".length()
             * ,requestStr.indexOf("</LANGUAGE2>",index));
             */
            index = requestStr.indexOf("<TRANSDATE>");
             String transDate = requestStr.substring(index + "<TRANSDATE>".length(), requestStr.indexOf("</TRANSDATE>", index));
             transDate = BTSLDateUtil.getGregorianDateInString(transDate);
            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_TRANS_ENQ + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + transDate + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + pin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * parseLendMeBalanceRequest
     * 
     * @param p_requestVO
     * @throws Exception
     * @author amit.singh
     */
    public static void parseLendMeBalanceRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseLendMeBalanceRequest";
   	 	StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);

        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String switchId = null;
        String lmbAmount = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            final HashMap requestHashMap = new HashMap();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));

            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<MSISDN1>");
            final String msisdn = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));

            requestHashMap.put("MSISDN1", msisdn);

            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }

            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }

            index = requestStr.indexOf("<AMOUNT>");
            if (index >= 0) {
                lmbAmount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            } else {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT);
            }
            long sosRechargeAmount = ((Long) (PreferenceCache.getSystemPreferenceValue(PreferenceI.SOS_RECHARGE_AMOUNT))).longValue();
            if (BTSLUtil.isNullString(lmbAmount.trim())) {
                lmbAmount = PretupsBL.getDisplayAmount(sosRechargeAmount);
            }
            requestHashMap.put("AMOUNT", lmbAmount);
            p_requestVO.setRequestMap(requestHashMap);

            if (BTSLUtil.isNullString(type)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.LMB_TYPE_BALNK);
            }
            if (BTSLUtil.isNullString(msisdn)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.LMB_BLANK_MSISDN);
            }
            // tagsMandatory = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }
            index = requestStr.indexOf("<INFO1>");
            if(index>0)
            {
            	final String info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
            	requestHashMap.put("INFO1", info1);
            }
            index = requestStr.indexOf("<INFO2>");
            if(index>0)
            {
            	final String info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
            	requestHashMap.put("INFO2", info2);
            }
            index = requestStr.indexOf("<INFO3>");
            if(index>0)
            {
            	final String info3 = requestStr.substring(index + "<INFO3>".length(), requestStr.indexOf("</INFO3>", index));
            	requestHashMap.put("INFO3", info3);
            }
            index = requestStr.indexOf("<INFO4>");
            if(index>0)
            {
            	final String info4 = requestStr.substring(index + "<INFO4>".length(), requestStr.indexOf("</INFO4>", index));
            	requestHashMap.put("INFO4", info4);
            }
            index = requestStr.indexOf("<INFO5>");
            if(index>0)
            {
            	final String info5 = requestStr.substring(index + "<INFO5>".length(), requestStr.indexOf("</INFO5>", index));
            	requestHashMap.put("INFO5", info5);
            }
            // parsedRequestStr=PretupsI.SERVICE_TYPE_LEND_ME_BALANCE
            parsedRequestStr = PretupsI.SERVICE_TYPE_LEND_ME_BALANCE + P2P_MESSAGE_SEP + lmbAmount;

            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT);

            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_INVALID_MESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * This method parses Schedulded Credit Transfer List (Add/Modify/Delete)
     * Request
     * 
     * @param p_requestVO
     * @throws Exception
     * @author Harsh Dixit
     * @date 22/04/2013
     */
    public static void parseP2PSMCDAddModifyDeleteRequest(RequestVO p_requestVO) throws Exception, BTSLBaseException

    {

        final String methodName = "parseP2PSMCDAddModifyDeleteRequest";
   	 	StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String p2pDefaultSmsPin = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_DEFAULT_SMSPIN);
        String parsedRequestStr = null;
        String[] arrRecord = null;
        StringBuilder sbf = new StringBuilder();
        int addrequest = 0;

        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            p_requestVO.setReceiverMsisdn(msisdn);
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            if (BTSLUtil.isNullString(pin)) {
                pin = p2pDefaultSmsPin;
            }
            p_requestVO.setMcdPIn(pin);
            index = requestStr.indexOf("<PROFILEID>");
            final String sProfile = requestStr.substring(index + "<PROFILEID>".length(), requestStr.indexOf("</PROFILEID>", index));
            p_requestVO.setMcdSenderProfile(sProfile);
            index = requestStr.indexOf("<LISTNAME>");
            final String listName = requestStr.substring(index + "<LISTNAME>".length(), requestStr.indexOf("</LISTNAME>", index));
            index = requestStr.indexOf("<SCTYPE>");
            final String scheduleType = requestStr.substring(index + "<SCTYPE>".length(), requestStr.indexOf("</SCTYPE>", index));
            p_requestVO.setMcdScheduleType(scheduleType);
            index = requestStr.indexOf("<NOSC>");
            final String scheduleFrequency = requestStr.substring(index + "<NOSC>".length(), requestStr.indexOf("</NOSC>", index));
            p_requestVO.setMcdNoOfSchedules(scheduleFrequency);
            index = requestStr.indexOf("<LISTRECORDS>");
            arrRecord = requestStr.split("<MSISDN1>");
            for (int i = 1; i < arrRecord.length; i++) {
                index = requestStr.indexOf("<LISTRECORD>", index);
                index = requestStr.indexOf("<MSISDN1>", index);
                final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
                if (BTSLUtil.isNullString(msisdn1)) {
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_ERROR_MCD_LIST_MSISDN_BLANK);
                }
                index = requestStr.indexOf("<AMOUNT>", index);
                final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
                index = requestStr.indexOf("<PROFILEID1>", index);
                final String rprofile = requestStr.substring(index + "<PROFILEID1>".length(), requestStr.indexOf("</PROFILEID1>", index));
                index = requestStr.indexOf("<ACTION>", index);
                final String action = requestStr.substring(index + "<ACTION>".length(), requestStr.indexOf("</ACTION>", index));
                index = requestStr.indexOf("</LISTRECORD>", index);
                int p2pMcdlDefaultAmount = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_MCDL_DEFAULT_AMOUNT))).intValue();
                if (!BTSLUtil.isNullString(amount)) {
                    parsedRequestStr = PretupsI.P2P_SMCD_LIST_SERVICE_TYPE + P2P_MESSAGE_SEP + msisdn1 + P2P_MESSAGE_SEP + pin + P2P_MESSAGE_SEP + amount + P2P_MESSAGE_SEP + rprofile + P2P_MESSAGE_SEP + action;
                } else {
                    parsedRequestStr = PretupsI.P2P_SMCD_LIST_SERVICE_TYPE + P2P_MESSAGE_SEP + msisdn1 + P2P_MESSAGE_SEP + pin + P2P_MESSAGE_SEP + p2pMcdlDefaultAmount + P2P_MESSAGE_SEP + rprofile + P2P_MESSAGE_SEP + action;
                }
                String mcdlDifferentRequestSeperator = (String) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MCDL_DIFFERENT_REQUEST_SEPERATOR));
                if (i == arrRecord.length - 1) {
                    sbf = sbf.append(parsedRequestStr);
                } else {
                    sbf = sbf.append(parsedRequestStr + mcdlDifferentRequestSeperator);
                }
                addrequest++;
            }
            parsedRequestStr = sbf.toString();
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setMcdListName(listName);
            p_requestVO.setMcdListAddCount(addrequest);
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, "parseP2PMCDAddModifyDeleteRequest", PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * This method is used to parse the Schedule multiple credit transfer List
     * Delete request initiated by External System
     * 
     * @param p_requestVO
     * @throws BTSLBaseException
     * @throws Exception
     * @author Pradyumn.Mishra
     */
    public static void parseP2PSMCDDeleteListRequest(RequestVO p_requestVO) throws Exception {

        final String methodName = "parseP2PSMCDDeleteListRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String p2pPlainSmsSeparator = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_PLAIN_SMS_SEPARATOR);
        String p2pDefaultSmsPin = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_DEFAULT_SMSPIN);
        String parsedRequestStr = null;
        final String MESSAGE_SEP = p2pPlainSmsSeparator;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            p_requestVO.setMcdPIn(pin);

            index = requestStr.indexOf("<LISTNAME>");
            final String listName = requestStr.substring(index + "<LISTNAME>".length(), requestStr.indexOf("</LISTNAME>", index));
            if (BTSLUtil.isNullString(pin)) {
                pin = p2pDefaultSmsPin;
            }
            parsedRequestStr = PretupsI.P2P_SMCD_LIST_DLT + MESSAGE_SEP + listName;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setMcdListName(listName);

        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * This method is used to parse the Schedule multiple credit transfer List
     * View request initiated by External System
     * 
     * @param p_requestVO
     * @throws BTSLBaseException
     * @throws Exception
     * @author Pradyumn.Mishra
     */
    public static void parseP2PSMCDViewRequest(RequestVO p_requestVO) throws Exception {

        final String methodName = "parseP2PSMCDListViewRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String p2pPlainSmsSeparator = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_PLAIN_SMS_SEPARATOR);
        String parsedRequestStr = null;
        final String MESSAGE_SEP = p2pPlainSmsSeparator;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            p_requestVO.setMcdPIn(pin);
            index = requestStr.indexOf("<LISTNAME>");
            final String listName = requestStr.substring(index + "<LISTNAME>".length(), requestStr.indexOf("</LISTNAME>", index));
            requestHashMap.put("LISTNAME", listName);
            index = requestStr.indexOf("<SCTYPE>");
            final String sctype = requestStr.substring(index + "<SCTYPE>".length(), requestStr.indexOf("</SCTYPE>", index));
            parsedRequestStr = PretupsI.P2P_SMCD_LIST_VIEW + MESSAGE_SEP + listName;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setMcdListName(listName);
            p_requestVO.setMcdScheduleType(sctype);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, "parseP2PMCDListViewRequest", PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }

    }

    public static void parseChannelCreditTransferRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelCreditTransferRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String switchId = null;
		//Ankit
	 final HashMap requestHashMap = new HashMap();
    
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */
			String productCode = "";
			int index=requestStr.indexOf("<PRODUCTCODE>");
			if(index>=0)
			productCode=requestStr.substring(index+"<PRODUCTCODE>".length(),requestStr.indexOf("</PRODUCTCODE>",index));
            index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<AMOUNT>");
            String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }
			/*if(BTSLUtil.isNullString(productCode)) {
				productCode=defaultProductValue;
			}*/
			if (BTSLUtil.isNullString(amount)){
            	amount="0";
            }
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_RECHARGE);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            String defFrcXmlSelC2S = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEF_FRCXML_SEL_C2S);
            // if we have to forcibaly change the value of default selecter in
            // case of ussd request.
            if (!BTSLUtil.isNullString(defFrcXmlSelC2S)) {
                if (_log.isDebugEnabled()) {
                    _log.debug(methodName, "using default force selecter of XML");
                }
                selector = "" + defFrcXmlSelC2S;
            }
            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
			 //Ankit
            index = requestStr.indexOf("<CURRENCY>");
            if (index != -1) {
            	requestHashMap.put("CURRENCY", requestStr.substring(index + "<CURRENCY>".length(), requestStr.indexOf("</CURRENCY>", index)));
            }
            p_requestVO.setRequestMap(requestHashMap);
            //
        
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }
			if(!BTSLUtil.isNullString(productCode)){
				parsedRequestStr=productCode+PretupsI.SERVICE_TYPE_CHNL_RECHARGE+CHNL_MESSAGE_SEP+msisdn2+CHNL_MESSAGE_SEP+amount+CHNL_MESSAGE_SEP+selector+CHNL_MESSAGE_SEP+language2+CHNL_MESSAGE_SEP+pin;				
			} else {
            	parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;
			}			
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseChannelChangePinRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelChangePinRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String switchId = null;
        final HashMap requestMap = new HashMap();
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int  index = requestStr.indexOf("<TYPE>");
            String type=null;
            if (index >= 0) {
            	type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            }
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */
            String nwcode=null;
             index = requestStr.indexOf("<EXTNWCODE>");
            if (index >= 0) {
            	  nwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            }
         /* index = requestStr.indexOf("<EXTNWCODE>");
            final String nwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            */
            index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            index = requestStr.indexOf("<NEWPIN>");
            final String newPin = requestStr.substring(index + "<NEWPIN>".length(), requestStr.indexOf("</NEWPIN>", index));
            index = requestStr.indexOf("<CONFIRMPIN>");
            final String confirmPin = requestStr.substring(index + "<CONFIRMPIN>".length(), requestStr.indexOf("</CONFIRMPIN>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }
            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }

            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_CHANGEPIN + CHNL_MESSAGE_SEP + pin + CHNL_MESSAGE_SEP + newPin + CHNL_MESSAGE_SEP + confirmPin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setType(type);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
            p_requestVO.setExternalNetworkCode(nwcode);
            p_requestVO.setRequestMap(requestMap);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseChannelNotificationLanguageRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelNotificationLanguageRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        final HashMap requestMap = new HashMap();
        try {
            // boolean tagsMandatory
            String cellId = null;
            String switchId = null;
            String extnwcode = null;
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */
            int index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            if(("").equals(msisdn1))
            {
            	throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALID_SENDER_MSISDN);
            }
            	
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                index = requestStr.indexOf("<EXTNWCODE>");
                extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            }
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }

            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }
            if((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.PIN_REQUIRED_P2P) && BTSLUtil.isNullString(pin)){           
            		throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_MCDL_PIN_REQUIRED);          
            }
            
            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_LANG_NOTIFICATION + CHNL_MESSAGE_SEP + language1 + CHNL_MESSAGE_SEP + pin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
            p_requestVO.setExternalNetworkCode(extnwcode);
            p_requestVO.setRequestMap(requestMap);
     
        } catch (BTSLBaseException Exp) {
            throw Exp;
        } 
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseChannelTransferRequest(RequestVO p_requestVO, int p_action) throws Exception {
        final String methodName = "parseChannelTransferRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String switchId = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */
            int index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<TOPUPVALUE>");
            final String amount = requestStr.substring(index + "<TOPUPVALUE>".length(), requestStr.indexOf("</TOPUPVALUE>", index));
            index = requestStr.indexOf("<PRODUCTCODE>");
            String productCode = requestStr.substring(index + "<PRODUCTCODE>".length(), requestStr.indexOf("</PRODUCTCODE>", index));
            XMLTagValueValidation.validateProductCode(productCode, XMLTagValueValidation.isTagManadatory());
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }
            String defaultProductValue = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_PRODUCT);
            if (BTSLUtil.isNullString(productCode)) {
                productCode = defaultProductValue;
            }
            if (BTSLUtil.isNullString(amount)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_AMOUNT);
            }
            // finding the transfer ,retuen and withdraw
            if (p_action == ParserUtility.ACTION_CHNL_TRANSFER_MESSAGE) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_TRANSFER + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + productCode + CHNL_MESSAGE_SEP + pin;
            } else if (p_action == ParserUtility.ACTION_CHNL_RETURN_MESSAGE) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_RETURN + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + productCode + CHNL_MESSAGE_SEP + pin;
            } else if (p_action == ParserUtility.ACTION_CHNL_WITHDRAW_MESSAGE) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_WITHDRAW + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + productCode + CHNL_MESSAGE_SEP + pin;
            } else if(p_action == ParserUtility.ACTION_C2C_REQ_REC)
            {
            	parsedRequestStr = PretupsI.SERVICE_TYPE_C2C_INITIATE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + productCode + CHNL_MESSAGE_SEP + pin;
            }
            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setReceiverMsisdn(msisdn2);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
        } catch (BTSLBaseException Exp) {
            throw Exp;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseChannelO2CInitiateRequestAPI(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelO2CInitiateRequestAPI";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */

            parseCommonO2CTransferAPIParsing(ParserUtility.ACTION_CHNL_O2C_INITIATE, p_requestVO);

        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.O2C_INITIATE_INVALID_MESSAGE_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.O2C_INITIATE_INVALID_MESSAGE_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    private static void parseCommonO2CTransferAPIParsing(int p_action, RequestVO p_requestVO) throws BTSLBaseException {
        String parsedRequestStr = null;
        final String methodName = "parseCommonO2CTransferAPIParsing";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        try {
            final Map<String, String> elementMap = new HashMap<String, String>();
            final String requestStr = p_requestVO.getRequestMessage();
            final List<String> arrList = new ArrayList<String>();

            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */

            int index = requestStr.indexOf("<EXTNWCODE>");
            final String extNetworkCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));

            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            elementMap.put("MSISDN", msisdn1);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            elementMap.put("PIN",pin);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            elementMap.put("EXTCODE",extCode);
            index = requestStr.indexOf("<EXTTXNNUMBER>");
            final String extNumber = requestStr.substring(index + "<EXTTXNNUMBER>".length(), requestStr.indexOf("</EXTTXNNUMBER>", index));
            elementMap.put("EXTTXNNUMBER", extNumber);

            index = requestStr.indexOf("<EXTTXNDATE>");
             String extDate = requestStr.substring(index + "<EXTTXNDATE>".length(), requestStr.indexOf("</EXTTXNDATE>", index));
             extDate = BTSLDateUtil.getGregorianDateInString(extDate);
            elementMap.put("EXTTXNDATE", extDate);

            index = requestStr.indexOf("<PRODUCTS>");
            String productsTemp = requestStr.substring(index + "<PRODUCTS>".length(), requestStr.indexOf("</PRODUCTS>", index));
            final String products = productsTemp.replaceAll("\r","").replaceAll("\n", "");
            int prdStartLength = 0;
            final int prdEndLength = products.length();
            String productCode = null;
            String productQty = null;
            String balanceTypeValue = null;
            Boolean isTagReq=false;

            int i = 0;
            int innerIndex = -1;

            if (prdStartLength < prdEndLength) {
                innerIndex = products.indexOf("<PRODUCTCODE>", innerIndex);
                productCode = products.substring(innerIndex + "<PRODUCTCODE>".length(), products.indexOf("</PRODUCTCODE>", innerIndex));
                prdStartLength = products.indexOf("</PRODUCTCODE>", innerIndex) + "</PRODUCTCODE>".length();

                if (prdStartLength > prdEndLength) {
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.BILLPAY_INVALID_MESSAGE_FORMAT);
                }
                innerIndex = products.indexOf("<QTY>", innerIndex);
                productQty = products.substring(innerIndex + "<QTY>".length(), products.indexOf("</QTY>", innerIndex));
                if (BTSLUtil.isNullString(productQty)) {
                    productQty = "0";
                }
                if (!BTSLUtil.isNumeric(productQty)) {
                    final int length = productQty.length();
                    final int decimalIndex = productQty.indexOf(".");
                    
                    if(decimalIndex >= 0)
                    	throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXTSYS_NOT_NUMERIC);
                    
                    if (length > decimalIndex + 3) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.ERROR_INVALID_AMOUNT);
                    }
                }
                prdStartLength = products.indexOf("</QTY>", innerIndex) + "</QTY>".length();
                arrList.add(i, productQty);
                arrList.add(++i, productCode);

                /** START: Birendra: 30JAN2015 */
                int balTypeEndIndex = -1;
                innerIndex = products.indexOf("<BALANCETYPE>", innerIndex);
                balTypeEndIndex = products.indexOf("</BALANCETYPE>", innerIndex);
                String defaultWallet = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_WALLET);
                /* Means <BALANCETYPE/> tag does not exist in the request. */
                if (innerIndex < 0 && balTypeEndIndex < 0) {
                    balanceTypeValue = defaultWallet;
                    prdStartLength = products.indexOf("</QTY>", innerIndex) + "</QTY>".length();

                } else if (innerIndex > 0 && balTypeEndIndex > 0) { /*
                                                                     * Means
                                                                     * <BALANCETYPE
                                                                     * /> tag
                                                                     * does
                                                                     * exist in
                                                                     * the
                                                                     * request.
                                                                     */
                    balanceTypeValue = products.substring(innerIndex + "<BALANCETYPE>".length(), products.indexOf("</BALANCETYPE>", innerIndex));

                    /* if the value of <BALANCETYPE/> tag is blank. */
                    if (BTSLUtil.isNullString(balanceTypeValue)) {
                        balanceTypeValue = defaultWallet;
                    }
                    prdStartLength = products.indexOf("</BALANCETYPE>", innerIndex) + "</BALANCETYPE>".length();
                } else { /*
                          * Mean <BALANCETYPE/> tag is not correct in the
                          * request.
                          */
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.ERROR_BALANCE_TYPE_INVALID);
                }
                elementMap.put("WALLET", balanceTypeValue);
                /** STOP: Birendra: 30JAN2015 */
                i = i + 1;
            }

            index = requestStr.indexOf("<TRFCATEGORY>");
            final String trfCategory = requestStr.substring(index + "<TRFCATEGORY>".length(), requestStr.indexOf("</TRFCATEGORY>", index));
            elementMap.put("TRFCATEGORY", trfCategory);

            index = requestStr.indexOf("<REFNUMBER>");
            final String refNumber = requestStr.substring(index + "<REFNUMBER>".length(), requestStr.indexOf("</REFNUMBER>", index));
            elementMap.put("REFNUMBER", refNumber);

            index = requestStr.indexOf("<PAYMENTDETAILS>");
            final String payments = requestStr.substring(index + "<PAYMENTDETAILS>".length(), requestStr.indexOf("</PAYMENTDETAILS>", index));

            index = payments.indexOf("<PAYMENTTYPE>");
            final String paymentType = payments.substring(index + "<PAYMENTTYPE>".length(), payments.indexOf("</PAYMENTTYPE>", index));
            elementMap.put("PAYMENTTYPE", paymentType);

            index = payments.indexOf("<PAYMENTINSTNUMBER>");
            final String paymentNumber = payments.substring(index + "<PAYMENTINSTNUMBER>".length(), payments.indexOf("</PAYMENTINSTNUMBER>", index));
            elementMap.put("PAYMENTINSTNUMBER", paymentNumber);

            index = payments.indexOf("<PAYMENTDATE>");
             String paymentDate = payments.substring(index + "<PAYMENTDATE>".length(), payments.indexOf("</PAYMENTDATE>", index));
             paymentDate = BTSLDateUtil.getGregorianDateInString(paymentDate);
            elementMap.put("PAYMENTDATE", paymentDate);

            index = requestStr.indexOf("<REMARKS>");
            final String remarks = requestStr.substring(index + "<REMARKS>".length(), requestStr.indexOf("</REMARKS>", index));
            elementMap.put("REMARKS", remarks);

            index = requestStr.indexOf("<CURRENCY>");
      	    if (index != -1) 
		    {
	            	final String currency = requestStr.substring(index + "<CURRENCY>".length(), requestStr.indexOf("</CURRENCY>", index));
	            	elementMap.put("CURRENCY", currency);
		    }
      	    boolean channelTransferInfoRequired = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CHANNEL_TRANSFERS_INFO_REQUIRED);
            isTagReq=channelTransferInfoRequired;
            if(isTagReq)
            {
            	
	            index = requestStr.indexOf("<INFO1>");
	            if(index>0)
	            {
	            	final String info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
	            	elementMap.put("INFO1", info1);
	            }
	            index = requestStr.indexOf("<INFO2>");
	            if(index>0)
	            {
	            	final String info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
	            	elementMap.put("INFO2", info2);
	            }
            }

            // Added By Diwakar on 01-MAR-2014
            XMLStringValidation.validateCommonO2CTransferAPIParsing(p_requestVO, extNetworkCode, msisdn1, pin, extCode, extNumber, extDate, productCode, productQty,
                trfCategory, refNumber, paymentType, paymentNumber, paymentDate, remarks);

            /** START: Birendra : 30JAN2014 */
            XMLTagValueValidation.validateBalanceType(balanceTypeValue, XMLTagValueValidation.isTagOptinal());
            /** STOP: Birendra : 30JAN2014 */

            // Ended Here
            String str = "";
            int arrLists=arrList.size();
            for (int k = 0; k < arrLists; k++) {
                final String element = arrList.get(k);
                str = str + element + CHNL_MESSAGE_SEP;

            }

            if (p_action == ParserUtility.ACTION_CHNL_O2C_INITIATE) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_O2C_IN + CHNL_MESSAGE_SEP + str + pin;
            } else {
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_O2C_INTR + CHNL_MESSAGE_SEP + str + pin;
            }
            
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "PIN_VALIDATION_FOR_O2C Value "+Constants.getProperty("PIN_VALIDATION_FOR_O2C"));
            }

            if(!("N".equals(Constants.getProperty("PIN_VALIDATION_FOR_O2C"))) && !BTSLUtil.isNullString(msisdn1) && BTSLUtil.isNullString(pin) ){
            	if (_log.isDebugEnabled()) {
                    _log.debug(methodName, "PIN Required but pin blank ");
                }
        		throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.PIN_REQUIRED);            	
            }	
			
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setExternalNetworkCode(extNetworkCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setRequestMap((HashMap<String, String>) elementMap);
        }
        // 03-MAR-2014
        catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        }
        // Ended Here
        catch (Exception e) {
            throw new BTSLBaseException("ExtAPIXMLStringParser",methodName,PretupsErrorCodesI.EXTSYS_REQ_DATE_INVALID_FORMAT,e);
        }
    }

    public static void parseChannelPostPaidBillPaymentRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelPostPaidBillPaymentRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        try {
            final HashMap requestHashMap = new HashMap();
            String extNwCode = null;
            String loginId = null;
            String password = null;
            String extCode = null;
            String extRefNumber = null;
            String cellId = null;
            String switchId = null;

            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */
            int index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            if (BTSLUtil.isNullString(language2)) {
                language2 = "0";
            }
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_DEF_SELECTOR_CODE_BILLPAY
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_BILLPAY);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            String defFrcXmlSelBillPay = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEF_FRCXML_SEL_BILLPAY);
            // if we have to forcibaly change the value of default selecter in
            // case of ussd request.
            if (!BTSLUtil.isNullString(defFrcXmlSelBillPay)) {
                if (_log.isDebugEnabled()) {
                    _log.debug(methodName, "using default force selecter of XML");
                }
                selector = "" + defFrcXmlSelBillPay;
            }
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                index = requestStr.indexOf("<EXTNWCODE>");
                extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                requestHashMap.put("EXTNWCODE", extNwCode);
                index = requestStr.indexOf("<LOGINID>");
                loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                requestHashMap.put("LOGINID", loginId);
                index = requestStr.indexOf("<PASSWORD>");
                password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                requestHashMap.put("PASSWORD", password);
                index = requestStr.indexOf("<EXTCODE>");
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
                requestHashMap.put("EXTCODE", extCode);

                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                requestHashMap.put("EXTREFNUM", extRefNumber);
            }
            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if(BTSLUtil.isNullString(msisdn1) && !BTSLUtil.isNullString(pin))
        	{
        		 throw new BTSLBaseException("PretupsBL",methodName, PretupsErrorCodesI.C2S_ERROR_INVALID_SENDER_MSISDN);
        	}
            if(BTSLUtil.isNullString(amount))
        	{
        		 throw new BTSLBaseException("PretupsBL",methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_AMT_LESSTHANZERO);
        	}
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_BILLPAY + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;
            } else {
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_BILLPAY + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;
            }

            // parsedRequestStr=PretupsI.SERVICE_TYPE_CHNL_BILLPAY+CHNL_MESSAGE_SEP+msisdn2+CHNL_MESSAGE_SEP+amount+CHNL_MESSAGE_SEP+selector+CHNL_MESSAGE_SEP+language2+CHNL_MESSAGE_SEP+pin
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                p_requestVO.setExternalNetworkCode(extNwCode);
                p_requestVO.setSenderExternalCode(extCode);
                p_requestVO.setSenderLoginID(loginId);
                p_requestVO.setPassword(password);
                p_requestVO.setExternalReferenceNum(extRefNumber);
                p_requestVO.setRequestMap(requestHashMap);
            }
        }
        catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            // 03-MAR-2014
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            // 03-MAR-2014
            throw be;
        }
        
        
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.BILLPAY_INVALID_MESSAGE_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseChannelO2CInitiateTrfrRequestAPI(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelO2CInitiateTrfrRequestAPI";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        try {
            parseCommonO2CTransferAPIParsing(ParserUtility.ACTION_CHNL_O2C_INITIATE_TRFR, p_requestVO);
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            // 03-MAR-2014
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            // 03-MAR-2014
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.O2C_INITIATE_TR_INVALID_MESSAGE_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.O2C_INITIATE_TR_INVALID_MESSAGE_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseChannelO2CReturnRequestAPI(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelO2CReturnRequestAPI";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        try {
            parseCommonO2CReturnAPIParsing(ParserUtility.ACTION_CHNL_O2C_RETURN, p_requestVO);
        }
        // 03-MAR-2014
        catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        }
        // Ended Here
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.O2C_RETURN_INVALID_MESSAGE_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.O2C_RETURN_INVALID_MESSAGE_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    private static void parseCommonO2CReturnAPIParsing(int p_action, RequestVO p_requestVO) throws BTSLBaseException {
        String parsedRequestStr = null;
        final String methodName = "parseCommonO2CReturnAPIParsing";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        try {
            final HashMap elementMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            final ArrayList arrList = new ArrayList();

            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */

            int index = requestStr.indexOf("<EXTNWCODE>");
            final String extNetworkCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));

            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            elementMap.put("MSISDN",msisdn1);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));

            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));

            if(BTSLUtil.isNullString(msisdn1))
            {
            	if(BTSLUtil.isNullString(extCode))
            	{
                	throw new BTSLBaseException(CLASS_NAME, "parseCommonO2CReturnAPIParsing", PretupsErrorCodesI.EXTSYS_REQ_SENDER_DETAILS_INVALID);
            	}
            }
            
            else
            {
            	if(BTSLUtil.isNullString(pin))
            	{
                    throw new BTSLBaseException(CLASS_NAME, "parseCommonO2CReturnAPIParsing", PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            	}
            }
            
            index = requestStr.indexOf("<PRODUCTS>");
            String products = null;
            if(index>0) {
            	String productsTemp = requestStr.substring(index + "<PRODUCTS>".length(), requestStr.indexOf("</PRODUCTS>", index));
            	products = productsTemp.replaceAll("\r","").replaceAll("\n", "");
            }
            
            else
            	throw new BTSLBaseException(CLASS_NAME, "parseCommonO2CReturnAPIParsing", PretupsErrorCodesI.EXTSYS_BLANK);
            
            int startLength = 0;
            final int endLength = products.length();
            String productCode = null;
            String productQty = null;
            int i = 0;
            int innerIndex = -1;
            while (startLength < endLength) {
                innerIndex = products.indexOf("<PRODUCTCODE>", innerIndex);
                if(innerIndex<0)
                	throw new BTSLBaseException(CLASS_NAME, "parseCommonO2CReturnAPIParsing", PretupsErrorCodesI.EXTSYS_BLANK);
                productCode = products.substring(innerIndex + "<PRODUCTCODE>".length(), products.indexOf("</PRODUCTCODE>", innerIndex));
                startLength = products.indexOf("</PRODUCTCODE>", innerIndex) + "</PRODUCTCODE>".length();
                if (startLength > endLength) {
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelO2CInitiateRequestAPI", PretupsErrorCodesI.BILLPAY_INVALID_MESSAGE_FORMAT);
                }
                innerIndex = products.indexOf("<QTY>", innerIndex);
                productQty = products.substring(innerIndex + "<QTY>".length(), products.indexOf("</QTY>", innerIndex));
                if (BTSLUtil.isNullString(productQty)) {
                    productQty = "0";
                }
                startLength = products.indexOf("</QTY>", innerIndex) + "</QTY>".length();
                
                arrList.add(i, productQty);
                arrList.add(++i, productCode);
                i = i + 1;
            }

            index = requestStr.indexOf("<EXTTXNNUMBER>");
            final String extNumber = requestStr.substring(index + "<EXTTXNNUMBER>".length(), requestStr.indexOf("</EXTTXNNUMBER>", index));
            elementMap.put("EXTTXNNUMBER", extNumber);

            index = requestStr.indexOf("<EXTTXNDATE>");
             String extDate = requestStr.substring(index + "<EXTTXNDATE>".length(), requestStr.indexOf("</EXTTXNDATE>", index));
             extDate = BTSLDateUtil.getGregorianDateInString(extDate);
             elementMap.put("EXTTXNDATE", extDate);

            index = requestStr.indexOf("<REMARKS>");
            final String remarks = requestStr.substring(index + "<REMARKS>".length(), requestStr.indexOf("</REMARKS>", index));
            elementMap.put("REMARKS", remarks);
			if(p_requestVO.getActionValue()==ParserUtility.ACTION_CHNL_O2C_RETURN)
            {
            	if(!BTSLUtil.isNullString(msisdn1)&&BTSLUtil.isNullString(pin)){
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            	}
            }
            // Added By Diwakar on 01-MAR-2014
            XMLStringValidation.validateCommonO2CReturnAPIParsing(p_requestVO, extNetworkCode, msisdn1, pin, extCode, extNumber, extDate, productCode, productQty, remarks);
            // Ended Here
            String str = "";
            int arrayLists=arrList.size();
            for (int k = 0; k <arrayLists ; k++) {
                final String element = (String) arrList.get(k);
                str = str + element + CHNL_MESSAGE_SEP;

            }
            if (p_action == ParserUtility.ACTION_CHNL_O2C_RETURN) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_O2C_RET + CHNL_MESSAGE_SEP + str + pin;
            } else {
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_O2C_WTDW + CHNL_MESSAGE_SEP + str + pin;
            }

            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setExternalNetworkCode(extNetworkCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setRequestMap(elementMap);
        }
        // 03-MAR-2014
        catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        }
        // Ended Here
        catch (Exception e) {
            throw new BTSLBaseException(e);
        }
    }

    public static void parseChannelO2CWithdrawRequestAPI(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelO2CWithdrawRequestAPI";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        try {
            parseCommonO2CReturnAPIParsing(ParserUtility.ACTION_CHNL_O2C_WITHDRAW, p_requestVO);
        }
        // 03-MAR-2014
        catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        }
        // Ended Here
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.O2C_WITHDRAW_INVALID_MESSAGE_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.O2C_WITHDRAW_INVALID_MESSAGE_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * Method to parse External Interface Recharge Status Request
     * 
     * @param p_requestVO
     * @throws Exception
     * 
     */
    public static void parseChannelExtRechargeStatusRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtRechargeStatusRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        final String MSG_IDNTFICATION_BOTH = "BOTH";
        final String MSG_IDNTFICATION_TXN_ID = "TXN";
        final String MSG_IDNTFICATION_EXT_REF = "EXT";
        try {
            final HashMap requestHashMap = new HashMap();
            p_requestVO.setRequestMap(requestHashMap);
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
            String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<TXNID>");
            final String txnID = requestStr.substring(index + "<TXNID>".length(), requestStr.indexOf("</TXNID>", index));
            requestHashMap.put("TXNID", txnID);
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));

            // Added By Diwakar on 01-MAR-2014
            XMLStringValidation.validateChannelExtRechargeStatusRequest(p_requestVO, type, date, extNwCode, msisdn, pin, loginId, password, extCode, extRefNumber, txnID,
                language1);
            // Ended Here
           
            parsedRequestStr = PretupsI.SERVICE_TYPE_RECHARGE_STATUS + CHNL_MESSAGE_SEP + txnID + CHNL_MESSAGE_SEP + pin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            // p_requestVO.setDecryptedMessage(parsedRequestStr)
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            //Added in case of only PIN is coming into the request and MSISDN is not coming
            if(BTSLUtil.isNullString(msisdn)){
				p_requestVO.setPinValidationRequired(false);
            }
            if (!BTSLUtil.isNullString(extRefNumber) && !BTSLUtil.isNullString(txnID)) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_RECHARGE_STATUS + CHNL_MESSAGE_SEP + txnID + CHNL_MESSAGE_SEP + extRefNumber + CHNL_MESSAGE_SEP + MSG_IDNTFICATION_BOTH + CHNL_MESSAGE_SEP + pin;
            }
            else if (!BTSLUtil.isNullString(extRefNumber)) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_RECHARGE_STATUS + CHNL_MESSAGE_SEP + extRefNumber + CHNL_MESSAGE_SEP + MSG_IDNTFICATION_EXT_REF + CHNL_MESSAGE_SEP + pin;
            }
            else if (!BTSLUtil.isNullString(txnID)) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_RECHARGE_STATUS + CHNL_MESSAGE_SEP + txnID + CHNL_MESSAGE_SEP + MSG_IDNTFICATION_TXN_ID + CHNL_MESSAGE_SEP + pin;
            }
            else
            	throw new BTSLBaseException(PretupsErrorCodesI.CHNL_ERROR_LRCH_INVALIDMESSAGEFORMAT,new String[] { p_requestVO.getActualMessageFormat() });
       
           
          
            //BTSLUtil.getDateFromTransactionId(txnID);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
        }
        // 03-MAR-2014
        catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        }
        // Ended Here
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseC2STransferRequest(RequestVO p_requestVO, int actionId) throws Exception {
        final String methodName = "parseC2STransferRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String extnwcode = null;
        String switchId = null;
        final int out_of_bound = -1;
        try {
            String info1 = null;
            String info2 = null;
            String info3 = null;
            String info4 = null;
            String info5 = null;
            String info6 = null;
            String info7 = null;
            String info8 = null;
            String info9 = null;
            String info10 = null;
			String bonus = "0";

            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */
            int index = 0;
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                index = requestStr.indexOf("<EXTNWCODE>");
                extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                requestHashMap.put("EXTNWCODE", extnwcode);
            }
			//Added for Multi Product
			String productCode= null;
			if(requestStr.contains("<PRODUCTCODE>") && requestStr.contains("</PRODUCTCODE>")) {
			index=requestStr.indexOf("<PRODUCTCODE>");
			productCode=requestStr.substring(index+"<PRODUCTCODE>".length(),requestStr.indexOf("</PRODUCTCODE>",index));
			requestHashMap.put("PRODUCTCODE",productCode);
			}
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn1);
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            p_requestVO.setLogin(loginId);
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            p_requestVO.setPassword(password);
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            p_requestVO.setSenderExternalCode(extCode);
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            p_requestVO.setExternalReferenceNum(extRefNumber);
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN2", msisdn2);
            //index = requestStr.indexOf("<AMOUNT>");
            //String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            //requestHashMap.put("AMOUNT", amount);
            boolean multiAmountEnabled = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.MULTI_AMOUNT_ENABLED);
            String c2sTrnsfrAmtBlckSrvCtyp = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.C2S_TRNSFR_AMTBLCK_SRVCTYP);
			String amount=null;
            if (actionId != ParserUtility.ACTION_DTH) {
            	  index = requestStr.indexOf("<AMOUNT>");
                  amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
                  requestHashMap.put("AMOUNT", amount);
                  if (BTSLUtil.isNullString(amount)) {
                      amount = "0";
                  }
            }
            else if(actionId == ParserUtility.ACTION_DTH)  {
            	 if (!multiAmountEnabled && !c2sTrnsfrAmtBlckSrvCtyp.contains(PretupsI.INTERFACE_CATEGORY_DTH)) {
               	  index = requestStr.indexOf("<AMOUNT>");
                  amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
                  requestHashMap.put("AMOUNT", amount);
                     if (BTSLUtil.isNullString(amount)) {
                         amount = "0";
                     }
                  }
            }
			
			index = requestStr.indexOf("<BONUS>");
			if(index >=0){
				bonus = requestStr.substring(index + "<BONUS>".length(), requestStr.indexOf("</BONUS>", index));
				if(BTSLUtil.isNullString(bonus) || bonus.trim().length()==0)
					bonus = "0";
			}
			requestHashMap.put("BONUS", bonus);
			
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            index = requestStr.indexOf("<LANGUAGE2>");
            String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
			if(BTSLUtil.isNullString(language2)){
				language2="1";
			}			
            requestHashMap.put("LANGUAGE2", language2);
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            XMLTagValueValidation.validateSelector(selector, XMLTagValueValidation.isTagManadatory());
            requestHashMap.put("SELECTOR", selector);
            index = requestStr.indexOf("<INFO1>");
            if (index != -1) {
                info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
            }
            index = requestStr.indexOf("<INFO2>");
            if (index != -1) {
                info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
            }
            index = requestStr.indexOf("<INFO3>");
            if (index != -1) {
                info3 = requestStr.substring(index + "<INFO3>".length(), requestStr.indexOf("</INFO3>", index));
            }
            index = requestStr.indexOf("<INFO4>");
            if (index != -1) {
                info4 = requestStr.substring(index + "<INFO4>".length(), requestStr.indexOf("</INFO4>", index));
            }
            index = requestStr.indexOf("<INFO5>");
            if (index != -1) {
                info5 = requestStr.substring(index + "<INFO5>".length(), requestStr.indexOf("</INFO5>", index));
            }
            index = requestStr.indexOf("<INFO6>");
            if (index != -1) {
                info6 = requestStr.substring(index + "<INFO6>".length(), requestStr.indexOf("</INFO6>", index));
            }
            index = requestStr.indexOf("<INFO7>");
            if (index != -1) {
                info7 = requestStr.substring(index + "<INFO7>".length(), requestStr.indexOf("</INFO7>", index));
            }
            index = requestStr.indexOf("<INFO8>");
            if (index != -1) {
                info8 = requestStr.substring(index + "<INFO8>".length(), requestStr.indexOf("</INFO8>", index));
            }
            index = requestStr.indexOf("<INFO9>");
            if (index != -1) {
                info9 = requestStr.substring(index + "<INFO9>".length(), requestStr.indexOf("</INFO9>", index));
            }
            index = requestStr.indexOf("<INFO10>");
            if (index != -1) {
                info10 = requestStr.substring(index + "<INFO10>".length(), requestStr.indexOf("</INFO10>", index));
            }
            index = requestStr.indexOf("<RECMSG>");
            String recmsg = "Y";// if there is no tag value setting default
            // value to Y for sending SMS
            if (index != out_of_bound) {
                recmsg = requestStr.substring(index + "<RECMSG>".length(), requestStr.indexOf("</RECMSG>", index));
            }
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }
            
            index = requestStr.indexOf("<CURRENCY>");
            if (index != -1) {
            	requestHashMap.put("CURRENCY", requestStr.substring(index + "<CURRENCY>".length(), requestStr.indexOf("</CURRENCY>", index)));
            }
            
            requestHashMap.put("CELLID", cellId);
            requestHashMap.put("SWITCHID", switchId);
            

            p_requestVO.setRequestMap(requestHashMap);

            if (BTSLUtil.isNullString(amount)) {
                amount = "0";
            }

            if (BTSLUtil.isNullString(pin)) {
                pin = "0";
            }
            int minMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH))).intValue();
            int maxMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE))).intValue();
            if (BTSLUtil.isNullString(msisdn2)) {
                _log.error(methodName, "msisdn2 field is null ");
                final String[] strArr = new String[] { msisdn2, String.valueOf(minMsisdnLength), String.valueOf(maxMsisdnLength) };
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_NOTINRANGE, 0, strArr, null);
            }
            if (!(BTSLUtil.isNullString(info1))) {
                final int length = info1.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO1);
                }
            }
            if (!(BTSLUtil.isNullString(info2))) {
                final int length = info2.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO2);
                }
            }
            if (!(BTSLUtil.isNullString(info3))) {
                final int length = info3.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO3);
                }
            }
            if (!(BTSLUtil.isNullString(info4))) {
                final int length = info4.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO4);
                }
            }
            if (!(BTSLUtil.isNullString(info5))) {
                final int length = info5.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO5);
                }
            }
            if (!(BTSLUtil.isNullString(info6))) {
                final int length = info6.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO6);
                }
            }
            if (!(BTSLUtil.isNullString(info7))) {
                final int length = info7.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO7);
                }
            }
            if (!(BTSLUtil.isNullString(info8))) {
                final int length = info8.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO8);
                }
            }
            if (!(BTSLUtil.isNullString(info9))) {
                final int length = info9.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO9);
                }
            }
            if (!(BTSLUtil.isNullString(info10))) {
                final int length = info10.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO10);
                }
            }

            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                String selectorAction = "";
                if (actionId == ParserUtility.ACTION_DTH) {
                    selectorAction = PretupsI.INTERFACE_CATEGORY_DTH;
                } else if (actionId == ParserUtility.ACTION_CHNL_EXT_CREDIT_TRANSFER) {
                    selectorAction = PretupsI.SERVICE_TYPE_CHNL_RECHARGE;
					if(!BTSLUtil.isNullString(productCode)){
						selectorAction=productCode+selectorAction;
					}
                } else if (actionId == ParserUtility.ACTION_DC) {
                    selectorAction = PretupsI.INTERFACE_CATEGORY_DATACARD;
                } else if (actionId == ParserUtility.ACTION_PIN) {
                    selectorAction = PretupsI.INTERFACE_CATEGORY_PIN;
                } else if (actionId == ParserUtility.ACTION_PMD) {
                    selectorAction = PretupsI.INTERFACE_CATEGORY_PMD;
                } else if (actionId == ParserUtility.ACTION_BPB) {
                    selectorAction = PretupsI.INTERFACE_CATEGORY_BPB;
                } else if (actionId == ParserUtility.ACTION_FLRC) {
                    selectorAction = PretupsI.INTERFACE_CATEGORY_FLRC;
                } else if (actionId == ParserUtility.ACTION_EXDATATRFREQ_REQUEST) {
                    selectorAction = PretupsI.INTERFACE_CATEGORY_DATARECHARGE;
                }

                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(selectorAction);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            String defFrcXmlSelC2S = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEF_FRCXML_SEL_C2S);
            // if we have to forcibaly change the value of default selecter in
            // case of ussd request.
            if (!BTSLUtil.isNullString(defFrcXmlSelC2S)) {
                if (_log.isDebugEnabled()) {
                    _log.debug(methodName, "using default force selecter of XML");
                }
                selector = "" + defFrcXmlSelC2S;
            }
            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }
          if (actionId == ParserUtility.ACTION_DTH) {
                //parsedRequestStr = PretupsI.INTERFACE_CATEGORY_DTH + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;
				if (!BTSLUtil.isNullString(amount)) {
                  parsedRequestStr = PretupsI.INTERFACE_CATEGORY_DTH  + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2+ CHNL_MESSAGE_SEP + pin;
				} else if (multiAmountEnabled && BTSLUtil.isNullString(amount)&& c2sTrnsfrAmtBlckSrvCtyp.contains(PretupsI.INTERFACE_CATEGORY_DTH)) {
                  parsedRequestStr = PretupsI.INTERFACE_CATEGORY_DTH  + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + PretupsI.VAS_BLANK_SLCTR_AMNT + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2+ CHNL_MESSAGE_SEP + pin;
				} else {
                  throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.AMOUNT_REQUIRED);
				}
				
            } else if (actionId == ParserUtility.ACTION_CHNL_EXT_CREDIT_TRANSFER) {
            	if(p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW))
                    parsedRequestStr=PretupsI.SERVICE_TYPE_CHNL_RECHARGE+CHNL_MESSAGE_SEP+msisdn2+CHNL_MESSAGE_SEP+amount+CHNL_MESSAGE_SEP+selector+CHNL_MESSAGE_SEP+language2;
            	else
            		parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;
				if(!BTSLUtil.isNullString(productCode)){
					parsedRequestStr=productCode+parsedRequestStr;
				}

            } else if (actionId == ParserUtility.ACTION_DC) {
                parsedRequestStr = PretupsI.INTERFACE_CATEGORY_DATACARD + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;

            } else if (actionId == ParserUtility.ACTION_PIN) {
                parsedRequestStr = PretupsI.INTERFACE_CATEGORY_PIN + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;

            } else if (actionId == ParserUtility.ACTION_PMD) {
                parsedRequestStr = PretupsI.INTERFACE_CATEGORY_PMD + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;

            } else if (actionId == ParserUtility.ACTION_BPB) {
                parsedRequestStr = PretupsI.INTERFACE_CATEGORY_BPB + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;

            } else if (actionId == ParserUtility.ACTION_FLRC) {
                parsedRequestStr = PretupsI.INTERFACE_CATEGORY_FLRC + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;
            } else if (actionId == ParserUtility.ACTION_EXDATATRFREQ_REQUEST) {
            	if(p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW))
                    parsedRequestStr=PretupsI.SERVICE_TYPE_CHNL_DATA_RECHARGE+CHNL_MESSAGE_SEP+msisdn2+CHNL_MESSAGE_SEP+amount+CHNL_MESSAGE_SEP+selector+CHNL_MESSAGE_SEP+language2;
            	else
            		parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_DATA_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;

            }
          
            XMLTagValueValidation.validateExtRefNum(extRefNumber, false);
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
            p_requestVO.setExternalNetworkCode(extnwcode);
			 p_requestVO.setPromoBonus(bonus);
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                p_requestVO.setExternalNetworkCode(extnwcode);
                p_requestVO.setSenderExternalCode(extCode);
                p_requestVO.setSenderLoginID(loginId);
                p_requestVO.setPassword(password);
                p_requestVO.setExternalReferenceNum(extRefNumber);

            }
            p_requestVO.setInfo1(info1);
            p_requestVO.setInfo2(info2);
            p_requestVO.setInfo3(info3);
            p_requestVO.setInfo4(info4);
            p_requestVO.setInfo5(info5);
            p_requestVO.setInfo6(info6);
            p_requestVO.setInfo7(info7);
            p_requestVO.setInfo8(info8);
            p_requestVO.setInfo9(info9);
            p_requestVO.setInfo10(info10);
            p_requestVO.setRecmsg(recmsg);
        } catch (BTSLBaseException be) {
            _log.error(methodName, " BTSL Exception while parsing Request Message :" + be.getMessage());
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }
    /*
     * method to parse xml request for modifying voucher profile id based on serial number and master serial number
     */
    public static void parseVoucherProfileBasedModificationRequest(RequestVO p_requestVO, int actionId) throws Exception {
        final String methodName = "parseVoucherProfileBasedModificationRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        String extnwcode = null;
 
        final int out_of_bound = -1;
        try {
         

            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = 0;
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                index = requestStr.indexOf("<EXTNWCODE>");
                extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                requestHashMap.put("EXTNWCODE", extnwcode);
            }
			
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn1);
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            p_requestVO.setLogin(loginId);
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            p_requestVO.setPassword(password);
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            p_requestVO.setSenderExternalCode(extCode);
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            p_requestVO.setExternalReferenceNum(extRefNumber);
            requestHashMap.put("EXTREFNUM", extRefNumber);
            String masterSerialNo = null;
            if(requestStr.contains("<MASTERSERIALNO>")){
	            index = requestStr.indexOf("<MASTERSERIALNO>");
	            masterSerialNo = requestStr.substring(index + "<MASTERSERIALNO>".length(), requestStr.indexOf("</MASTERSERIALNO>", index));
	            requestHashMap.put("MASTERSERIALNO", masterSerialNo);
            }
            index = requestStr.indexOf("<SERIALNO>");
            final String serialNo = requestStr.substring(index + "<SERIALNO>".length(), requestStr.indexOf("</SERIALNO>", index));
            requestHashMap.put("SERIALNO", serialNo);
            p_requestVO.setSerialNo(serialNo);
            index = requestStr.indexOf("<PRODUCTID>");
            final String productId = requestStr.substring(index + "<PRODUCTID>".length(), requestStr.indexOf("</PRODUCTID>", index));
            requestHashMap.put("PRODUCTID", productId);
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            p_requestVO.setRequestMap(requestHashMap);
            
            if (BTSLUtil.isNullString(serialNo) && BTSLUtil.isNullString(masterSerialNo)) {
                _log.error(methodName, "serialNo field is null ");
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.SERIALNO_OR_MASTERSERIALNO_IS_REQUIRED);
            }
            
            if (actionId == ParserUtility.ACTION_VOU_PRF_MOD_REQ) {
            	if(p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW) ){
            			parsedRequestStr=PretupsI.SERVICE_TYPE_VOU_PRF_MOD+CHNL_MESSAGE_SEP+serialNo+CHNL_MESSAGE_SEP+productId+CHNL_MESSAGE_SEP+pin;
            	} 
            	else
            		throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            }
                   
            XMLTagValueValidation.validateExtRefNum(extRefNumber, false);
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setExternalNetworkCode(extnwcode);
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                p_requestVO.setExternalNetworkCode(extnwcode);
                p_requestVO.setSenderExternalCode(extCode);
                p_requestVO.setSenderLoginID(loginId);
                p_requestVO.setPassword(password);
                p_requestVO.setExternalReferenceNum(extRefNumber);

            }
        } catch (BTSLBaseException be) {
            _log.error(methodName, " BTSL Exception while parsing Request Message :" + be.getMessage());
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    // C2S transfer bill payment - Ranjana[23/10/07]
    /**
     * Method to parse External Interface Recharge Request
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void parseChannelExtTransferBillPayment(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtTransferBillPayment";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        final int out_of_bound = -1;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            String info1 = null;
            String info2 = null;
            String info3 = null;
            String info4 = null;
            String info5 = null;
            String info6 = null;
            String info7 = null;
            String info8 = null;
            String info9 = null;
            String info10 = null;
			String bonus = "0";
			
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
            String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
			
			 index = requestStr.indexOf("<BONUS>");
			if(index >=0){
				bonus = requestStr.substring(index + "<BONUS>".length(), requestStr.indexOf("</BONUS>", index));
				if(BTSLUtil.isNullString(bonus) || bonus.trim().length()==0)
					bonus = "0";
			}
			requestHashMap.put("BONUS", bonus);
			
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            index = requestStr.indexOf("<INFO1>");
            if (index != -1) {
                info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
            }
            index = requestStr.indexOf("<INFO2>");
            if (index != -1) {
                info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
            }
            index = requestStr.indexOf("<INFO3>");
            if (index != -1) {
                info3 = requestStr.substring(index + "<INFO3>".length(), requestStr.indexOf("</INFO3>", index));
            }
            index = requestStr.indexOf("<INFO4>");
            if (index != -1) {
                info4 = requestStr.substring(index + "<INFO4>".length(), requestStr.indexOf("</INFO4>", index));
            }
            index = requestStr.indexOf("<INFO5>");
            if (index != -1) {
                info5 = requestStr.substring(index + "<INFO5>".length(), requestStr.indexOf("</INFO5>", index));
            }
            index = requestStr.indexOf("<INFO6>");
            if (index != -1) {
                info6 = requestStr.substring(index + "<INFO6>".length(), requestStr.indexOf("</INFO6>", index));
            }
            index = requestStr.indexOf("<INFO7>");
            if (index != -1) {
                info7 = requestStr.substring(index + "<INFO7>".length(), requestStr.indexOf("</INFO7>", index));
            }
            index = requestStr.indexOf("<INFO8>");
            if (index != -1) {
                info8 = requestStr.substring(index + "<INFO8>".length(), requestStr.indexOf("</INFO8>", index));
            }
            index = requestStr.indexOf("<INFO9>");
            if (index != -1) {
                info9 = requestStr.substring(index + "<INFO9>".length(), requestStr.indexOf("</INFO9>", index));
            }
            index = requestStr.indexOf("<INFO10>");
            if (index != -1) {
                info10 = requestStr.substring(index + "<INFO10>".length(), requestStr.indexOf("</INFO10>", index));
            }
            index = requestStr.indexOf("<RECMSG>");
            String recmsg = "Y";// if there is no tag value setting default
            // value to Y for sending SMS
            if (index != out_of_bound) {
                recmsg = requestStr.substring(index + "<RECMSG>".length(), requestStr.indexOf("</RECMSG>", index));

            }

            // Added By Diwakar on 01-MAR-2014
            XMLStringValidation.validateChannelExtTransferBillPayment(p_requestVO, type, date, extNwCode, msisdn, pin, loginId, password, extCode, extRefNumber, msisdn2,
                amount, language1, language2, selector);
            // Ended Here
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache
                    .getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_POSTPAID_BILL_PAYMENT);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            if (BTSLUtil.isNullString(amount)) {
                _log.error(methodName, "Amount field is null ");
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_AMOUNT);
            }
            if (!(BTSLUtil.isNullString(info1))) {
                final int length = info1.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO1);
                }
            }
            if (!(BTSLUtil.isNullString(info2))) {
                final int length = info2.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO2);
                }
            }
            if (!(BTSLUtil.isNullString(info3))) {
                final int length = info3.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO3);
                }
            }
            if (!(BTSLUtil.isNullString(info4))) {
                final int length = info4.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO4);
                }
            }
            if (!(BTSLUtil.isNullString(info5))) {
                final int length = info5.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO5);
                }
            }
            if (!(BTSLUtil.isNullString(info6))) {
                final int length = info6.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO6);
                }
            }
            if (!(BTSLUtil.isNullString(info7))) {
                final int length = info7.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO7);
                }
            }
            if (!(BTSLUtil.isNullString(info8))) {
                final int length = info8.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO8);
                }
            }
            if (!(BTSLUtil.isNullString(info9))) {
                final int length = info9.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO9);
                }
            }
            if (!(BTSLUtil.isNullString(info10))) {
                final int length = info10.length();
                if (length > 100) {
                    _log.debug(methodName, "length is " + length);
                    _log.error(methodName, "Characters are more than 100 ");
                    throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_MAX_100_INFO10);
                }
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_POSTPAID_BILL_PAYMENT + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);
			p_requestVO.setPromoBonus(bonus);
            // VFE 6 CR
            p_requestVO.setInfo1(info1);
            p_requestVO.setInfo2(info2);
            p_requestVO.setInfo3(info3);
            p_requestVO.setInfo4(info4);
            p_requestVO.setInfo5(info5);
            p_requestVO.setInfo6(info6);
            p_requestVO.setInfo7(info7);
            p_requestVO.setInfo8(info8);
            p_requestVO.setInfo9(info9);
            p_requestVO.setInfo10(info10);
            p_requestVO.setRecmsg(recmsg);
        } catch (BTSLBaseException be) {
            _log.error(methodName, " BTSL Exception while parsing Request Message :" + be.getMessage());
            // 03-MAR-2014
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            // 03-MAR-2014
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, "parseChannelExtCreditTransferRequest", PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    // C2S Enquiry request - Ranjana[14/12/07]
    /**
     * Method to parse External Interface Recharge Request
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void parseChannelExtEnquiryRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtEnquiryRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            /*
             * index=requestStr.indexOf("<DATE>")
             * String
             * date=requestStr.substring(index+"<DATE>".length(),requestStr
             * .indexOf("</DATE>",index))
             * requestHashMap.put("DATE",date)
             */index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTTXNNUMBER>");
            final String extTxnNumber = requestStr.substring(index + "<EXTTXNNUMBER>".length(), requestStr.indexOf("</EXTTXNNUMBER>", index));
            requestHashMap.put("EXTTXNNUMBER", extTxnNumber);
            index = requestStr.indexOf("<EXTTXNDATE>");
             String extTxnDate = requestStr.substring(index + "<EXTTXNDATE>".length(), requestStr.indexOf("</EXTTXNDATE>", index));
             extTxnDate = BTSLDateUtil.getGregorianDateInString(extTxnDate);
             requestHashMap.put("EXTTXNDATE", extTxnDate);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            // requestHashMap.put("MSISDN2",msisdn2)

            index = requestStr.indexOf("<SERVICETYPE>");
            final String enquiryServiceType = requestStr.substring(index + "<SERVICETYPE>".length(), requestStr.indexOf("</SERVICETYPE>", index));
            // requestHashMap.put("SERVICETYPE",serviceType)

            index = requestStr.indexOf("<REMARKS>");
            final String remarks = requestStr.substring(index + "<REMARKS>".length(), requestStr.indexOf("</REMARKS>", index));
            /*
             * index=requestStr.indexOf("<LANGUAGE1>");
             * String
             * language1=requestStr.substring(index+"<LANGUAGE1>".length()
             * ,requestStr.indexOf("</LANGUAGE1>",index));
             */
            parsedRequestStr = PretupsI.SERVICE_TYPE_C2S_ENQUIRY + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + enquiryServiceType;
            // p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1))
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setEnquiryServiceType(enquiryServiceType);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseChannelExtCommonRechargeRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtCommonRechargeRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
            String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            final String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            if (!BTSLUtil.isNullString("selector")) {
                boolean serviceSelector = false;
                // check value of selector for sevice type RC
                final ArrayList list = ServiceSelectorMappingCache.getSelectorListForServiceType(PretupsI.SERVICE_TYPE_CHNL_RECHARGE);
                ServiceSelectorMappingVO serviceSelectorMappingVO = null;
                int lists=list.size();
                for (int i = 0; i <lists ; i++) {
                    serviceSelectorMappingVO = (ServiceSelectorMappingVO) list.get(i);
                    if (serviceSelectorMappingVO.getSelectorCode().equals(selector)) {
                        serviceSelector = true;
                        break;
                    }
                }
                // check value of selector for sevice type PPB
                if (!serviceSelector) {
                    final ArrayList arrlist = ServiceSelectorMappingCache.getSelectorListForServiceType(PretupsI.SERVICE_TYPE_POSTPAID_BILL_PAYMENT);
                    int arrlists=arrlist.size();
                    for (int i = 0; i <arrlists ; i++) {
                        serviceSelectorMappingVO = (ServiceSelectorMappingVO) arrlist.get(i);
                        if (serviceSelectorMappingVO.getSelectorCode().equals(selector)) {
                            serviceSelector = true;
                            break;
                        }

                    }
                }
                // if selecor value is invalid then throw exception
                if (!serviceSelector) {
                    _log.error(CLASS_NAME, methodName, "invalid value of selector");
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
                }
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_COMMON_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }

    }

    /**
     * Method to parse External Interface Recharge Status Request
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void parseChannelExtPostRechargeStatusRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtPostRechargeStatusRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        final String MSG_IDNTFICATION_BOTH = "BOTH";
        final String MSG_IDNTFICATION_TXN_ID = "TXN";
        final String MSG_IDNTFICATION_EXT_REF = "EXT";
        try {
            final HashMap requestHashMap = new HashMap();
            p_requestVO.setRequestMap(requestHashMap);
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
            String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<TXNID>");
            final String txnID = requestStr.substring(index + "<TXNID>".length(), requestStr.indexOf("</TXNID>", index));
            requestHashMap.put("TXNID", txnID);
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));

            parsedRequestStr = PretupsI.SERVICE_TYPE_RECHARGE_STATUS + CHNL_MESSAGE_SEP + txnID + CHNL_MESSAGE_SEP + pin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            // p_requestVO.setDecryptedMessage(parsedRequestStr)
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);

            if (!BTSLUtil.isNullString(extRefNumber) && !BTSLUtil.isNullString(txnID)) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_RECHARGE_STATUS + CHNL_MESSAGE_SEP + txnID + CHNL_MESSAGE_SEP + extRefNumber + CHNL_MESSAGE_SEP + MSG_IDNTFICATION_BOTH + CHNL_MESSAGE_SEP + pin;
            }
            if (!BTSLUtil.isNullString(extRefNumber)) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_RECHARGE_STATUS + CHNL_MESSAGE_SEP + extRefNumber + CHNL_MESSAGE_SEP + MSG_IDNTFICATION_EXT_REF + CHNL_MESSAGE_SEP + pin;
            }
            if (!BTSLUtil.isNullString(txnID)) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_RECHARGE_STATUS + CHNL_MESSAGE_SEP + txnID + CHNL_MESSAGE_SEP + MSG_IDNTFICATION_TXN_ID + CHNL_MESSAGE_SEP + pin;
            }

            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setDecryptedMessage(parsedRequestStr);

        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * Method to parse External Interface Gift Recharge Request
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void parseExtGiftRechargeRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseExtGiftRechargeRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
            String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            if (BTSLUtil.isNullString(selector)) {
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_GIFT_RECHARGE);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }

            index = requestStr.indexOf("<GIFTER_MSISDN>");
            final String gifterMsisdn = requestStr.substring(index + "<GIFTER_MSISDN>".length(), requestStr.indexOf("</GIFTER_MSISDN>", index));
            index = requestStr.indexOf("<GIFTER_NAME>");
            final String gifterName = requestStr.substring(index + "<GIFTER_NAME>".length(), requestStr.indexOf("</GIFTER_NAME>", index));
            index = requestStr.indexOf("<GIFTER_LANGUAGE>");
            final String gifterLanguage = requestStr.substring(index + "<GIFTER_LANGUAGE>".length(), requestStr.indexOf("</GIFTER_LANGUAGE>", index));
            LocaleMasterVO localeMasterVO = null;
            if (BTSLUtil.isNullString(amount)) {
                _log.error(methodName, "Amount field is null ");
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_AMOUNT);
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
            if (BTSLUtil.isNullString(language1)) {
                p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
                localeMasterVO = LocaleMasterCache.getLocaleDetailsFromlocale(p_requestVO.getSenderLocale());
                language1 = localeMasterVO.getLanguage_code();
            }

            if (BTSLUtil.isNullString(language2)) {
                p_requestVO.setReceiverLocale(new Locale(defaultLanguage, defaultCountry));
                localeMasterVO = LocaleMasterCache.getLocaleDetailsFromlocale(p_requestVO.getReceiverLocale());
                language2 = localeMasterVO.getLanguage_code();
            }
            if(LocaleMasterCache.getLocaleFromCodeDetails(language1) == null )
            {
          	  throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.LANG_CODE_NOT_EXIST);
            }
            if(LocaleMasterCache.getLocaleFromCodeDetails(language2)==null)
            {
          	  throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.LANG_CODE_NOT_EXIST);
            }
            
            if (BTSLUtil.isNullString(msisdn2)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            }

            if (BTSLUtil.isNullString(gifterMsisdn)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.CHNL_ERROR_GIFTER_MSISDN_NULL_GIFTRECHARGE);
            }

            if (BTSLUtil.isNullString(gifterName)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.CHNL_ERROR_GIFTER_NAME_NULL_GIFTRECHARGE);
            }

            parsedRequestStr = PretupsI.SERVICE_TYPE_CHANNEL_GIFT_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + language1 + CHNL_MESSAGE_SEP + gifterMsisdn + CHNL_MESSAGE_SEP + gifterName + CHNL_MESSAGE_SEP + gifterLanguage;

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(language2));
            p_requestVO.setGifterLocale(LocaleMasterCache.getLocaleFromCodeDetails(gifterLanguage));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setGifterMSISDN(gifterMsisdn);
            p_requestVO.setGifterName(gifterName);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setRequestNetworkCode(extCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);
        } catch (BTSLBaseException be) {
            _log.error(methodName, " BTSL Exception while parsing Request Message :" + be.getMessage());
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * Parse the EVD request from the external system.
     * 
     * @param p_requestVO
     * @throws Exception
     */

    public static void parseExtEVDRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseExtEVDRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
        	Boolean PRIVATE_RECHARGE_ALLOWED = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.PRIVATE_RECHARGE_ALLOWED);
            
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);

            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            String msisdn2 = null;
            String language2 = language1;
            if (PRIVATE_RECHARGE_ALLOWED) {
                msisdn2 = msisdn;
            } else {
                index = requestStr.indexOf("<MSISDN2>");
                msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
                index = requestStr.indexOf("<LANGUAGE2>");
                language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            }
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            index = requestStr.indexOf("<INFO1>");
            if(index>0)
            {
            	final String info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
            	requestHashMap.put("INFO1", info1);
            }
            index = requestStr.indexOf("<INFO2>");
            if(index>0)
            {
            	final String info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
            	requestHashMap.put("INFO2", info2);
            }
            index = requestStr.indexOf("<INFO3>");
            if(index>0)
            {
            	final String info3 = requestStr.substring(index + "<INFO3>".length(), requestStr.indexOf("</INFO3>", index));
            	requestHashMap.put("INFO3", info3);
            }
            index = requestStr.indexOf("<INFO4>");
            if(index>0)
            {
            	final String info4 = requestStr.substring(index + "<INFO4>".length(), requestStr.indexOf("</INFO4>", index));
            	requestHashMap.put("INFO4", info4);
            }
            index = requestStr.indexOf("<INFO5>");
            if(index>0)
            {
            	final String info5 = requestStr.substring(index + "<INFO5>".length(), requestStr.indexOf("</INFO5>", index));
            	requestHashMap.put("INFO5", info5);
            }
            
            // Added By Diwakar on 01-MAR-2014
            XMLStringValidation.validateExtEVDRequest(p_requestVO, type, date, extNwCode, msisdn, pin, loginId, password, extCode, extRefNumber, msisdn2, amount, language1,
                language2, selector);
            // Ended Here

            if (BTSLUtil.isNullString("selector")) {
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache
                    .getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_COMMON_RECHARGE);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            if (PRIVATE_RECHARGE_ALLOWED && selector.equals("1")) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_EVD + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;
            } else {
                parsedRequestStr = PretupsI.SERVICE_TYPE_EVD + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;
            }
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
        }
        // 03-MAR-2014
        catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        }
        // Ended Here
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /*
     * C2C transfer,Withdraw, Return Api through external system
     */
    public static void parseExtC2CTransferRequest(RequestVO p_requestVO, int p_action) throws Exception {
        final String methodName = "parseExtC2CTransferRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
        	Boolean CHANNEL_TRANSFERS_INFO_REQUIRED = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CHANNEL_TRANSFERS_INFO_REQUIRED);
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }
            final ArrayList arrList = new ArrayList();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);

            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            requestHashMap.put("MSISDN1", msisdn1);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);

            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);

            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);

            index = requestStr.indexOf("<EXTREFNUM>");
            String extRefNumber = null;
            if(index > 0)
            {
            	extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            	XMLTagValueValidation.validateRefNum(extRefNumber, XMLTagValueValidation.isTagOptinal());
            }
            requestHashMap.put("EXTREFNUM", extRefNumber);

            index = requestStr.indexOf("<EXTTXNDATE>");
            String extTxnDate = null;
            if(index > 0)
            	extTxnDate = requestStr.substring(index + "<EXTTXNDATE>".length(), requestStr.indexOf("</EXTTXNDATE>", index));
            requestHashMap.put("EXTTXNDATE", extTxnDate);
            
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN2", msisdn2);

            index = requestStr.indexOf("<LOGINID2>");
            final String loginId2 = requestStr.substring(index + "<LOGINID2>".length(), requestStr.indexOf("</LOGINID2>", index));
            requestHashMap.put("LOGINID2", loginId2);

            index = requestStr.indexOf("<EXTCODE2>");
            final String extCode2 = requestStr.substring(index + "<EXTCODE2>".length(), requestStr.indexOf("</EXTCODE2>", index));
            requestHashMap.put("EXTCODE2", extCode2);

            index = requestStr.indexOf("<PRODUCTS>");
            String products = null;
            if(index>0)
            {
            	String productsTemp = requestStr.substring(index + "<PRODUCTS>".length(), requestStr.indexOf("</PRODUCTS>", index));
                products = productsTemp.replaceAll("\r","").replaceAll("\n", "").replaceAll(" ", "").replaceAll("\t", "");
            }
            else
            {
            	throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXTSYS_BLANK);
            }
            
            int startLength = 0;
            final int endLength = products.length();
            String productCode = null;
            String productQty = null;
            int i = 0;
            int innerIndex = -1;
            while (startLength < endLength) {
                innerIndex = products.indexOf("<PRODUCTCODE>", innerIndex);
                if(innerIndex<0)
                	throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXTSYS_BLANK);
                productCode = products.substring(innerIndex + "<PRODUCTCODE>".length(), products.indexOf("</PRODUCTCODE>", innerIndex));
                startLength = products.indexOf("</PRODUCTCODE>", innerIndex) + "</PRODUCTCODE>".length();
                if (startLength > endLength) {
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.BILLPAY_INVALID_MESSAGE_FORMAT);
                }
                innerIndex = products.indexOf("<QTY>", innerIndex);
                productQty = products.substring(innerIndex + "<QTY>".length(), products.indexOf("</QTY>", innerIndex));
                if (BTSLUtil.isNullString(productQty)) {
                    productQty = "0";
                }
                startLength = products.indexOf("</QTY>", innerIndex) + "</QTY>".length();
                arrList.add(i, productQty);
                arrList.add(++i, productCode);
                i = i + 1;
            }
            
            index = requestStr.indexOf("<REFNUMBER>");
            String refNumber = null;
            if(index > 0)
            {
            	refNumber = requestStr.substring(index + "<REFNUMBER>".length(), requestStr.indexOf("</REFNUMBER>", index));
            	requestHashMap.put("REFNUMBER", refNumber);
            }
            

            index = requestStr.indexOf("<PAYMENTDETAILS>");
            String payments = null;
            String paymentType = null;
            String paymentNumber = null;
            String paymentDate = null;
            if(index > 0)
            {
            payments = requestStr.substring(index + "<PAYMENTDETAILS>".length(), requestStr.indexOf("</PAYMENTDETAILS>", index));
            index = payments.indexOf("<PAYMENTTYPE>");
            paymentType = payments.substring(index + "<PAYMENTTYPE>".length(), payments.indexOf("</PAYMENTTYPE>", index));
            requestHashMap.put("PAYMENTTYPE", paymentType);

            index = payments.indexOf("<PAYMENTINSTNUMBER>");
            paymentNumber = payments.substring(index + "<PAYMENTINSTNUMBER>".length(), payments.indexOf("</PAYMENTINSTNUMBER>", index));
            requestHashMap.put("PAYMENTINSTNUMBER", paymentNumber);

            index = payments.indexOf("<PAYMENTDATE>");
            paymentDate = payments.substring(index + "<PAYMENTDATE>".length(), payments.indexOf("</PAYMENTDATE>", index));
            paymentDate = BTSLDateUtil.getGregorianDateInString(paymentDate);
            requestHashMap.put("PAYMENTDATE", paymentDate);
            }
            
            
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);

            index = requestStr.indexOf("<REMARKS>");
            if(index>0)
            {
            	final String remarks = requestStr.substring(index + "<REMARKS>".length(), requestStr.indexOf("</REMARKS>", index));
                requestHashMap.put("REMARKS", remarks);
            }

	index = requestStr.indexOf("<CURRENCY>");
            if (index != -1)
            {
                final String currency = requestStr.substring(index + "<CURRENCY>".length(), requestStr.indexOf("</CURRENCY>", index));
                requestHashMap.put("CURRENCY", currency);
            }	
            
          //added by Anjali for C2C Info Tag in Channel Transfers HCPT
            Boolean isTagReq=false;
            isTagReq=CHANNEL_TRANSFERS_INFO_REQUIRED;
            if(isTagReq)
            {
	            index = requestStr.indexOf("<INFO1>");
	            if(index>0)
	            {
		            final String info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
		            requestHashMap.put("INFO1", info1);
	            }
	            index = requestStr.indexOf("<INFO2>");
	            if(index>0)
	            {
		            final String info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
		            requestHashMap.put("INFO2", info2);
	            }
            }
            // Added By Diwakar on 01-MAR-2014
            XMLStringValidation.validateExtC2CTransferRequest(p_requestVO, extNwCode, msisdn1, pin, loginId, password, extCode, extRefNumber, msisdn2, extCode2, loginId2,
                productCode, productQty, language1);
            // Ended Here

            String str = "";
            int arryLists=arrList.size();
            for (int k = 0; k <arryLists ; k++) {
                final String element = (String) arrList.get(k);
                str = str + element + CHNL_MESSAGE_SEP;

            }
            if (!BTSLUtil.isNullString(CHNL_MESSAGE_SEP)) {
                str = str.substring(0, str.length() - 1);
            }

            // finding the transfer ,retuen and withdraw

            if (p_action == ParserUtility.ACTION_C2C_TRANSFER_EXT_XML) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_TRANSFER + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + str;
            } else if (p_action == ParserUtility.ACTION_C2C_RETURN_EXT_XML) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_RETURN + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + str;
            } else if (p_action == ParserUtility.ACTION_C2C_WITHDRAW_EXT_XML) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_WITHDRAW + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + str;
            }

            // if(BTSLUtil.isNullString())

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));

            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setReceiverMsisdn(msisdn2);
            p_requestVO.setReceiverExtCode(extCode2);
            p_requestVO.setReceiverLoginID(loginId2);
            p_requestVO.setProductQuantityList(arrList);
            p_requestVO.setExternalTransactionDate(extTxnDate);
            p_requestVO.setReferenceNumber(refNumber);
            p_requestVO.setPaymentType(paymentType);
            p_requestVO.setPaymentInstNumber(paymentNumber);
            p_requestVO.setPaymentDate(paymentDate);

            // XMLStringValidation.validateExtC2CTransferRequest(p_requestVO)
        }
        // 03-MAR-2014
        catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        }
        // Ended Here
        /*
         * catch(BTSLBaseException be)
         * {
         * throw be;
         * }
         */
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseExtC2CTransferRequestReceiver(RequestVO p_requestVO, int p_action) throws Exception {
    	final String methodName = "parseExtC2CTransferRequestReceiver";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }
            final ArrayList arrList = new ArrayList();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);

            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            requestHashMap.put("MSISDN1", msisdn1);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);

            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);

            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);

            String extRefNumber = null;
            index = requestStr.indexOf("<EXTREFNUM>");
            if(index > 0)
            	extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);

            String extTxnDate = null;
            index = requestStr.indexOf("<EXTTXNDATE>");
            if(index > 0)
            	extTxnDate = requestStr.substring(index + "<EXTTXNDATE>".length(), requestStr.indexOf("</EXTTXNDATE>", index));
            requestHashMap.put("EXTTXNDATE", extTxnDate);
            
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN2", msisdn2);

            index = requestStr.indexOf("<LOGINID2>");
            final String loginId2 = requestStr.substring(index + "<LOGINID2>".length(), requestStr.indexOf("</LOGINID2>", index));
            requestHashMap.put("LOGINID2", loginId2);

            index = requestStr.indexOf("<EXTCODE2>");
            final String extCode2 = requestStr.substring(index + "<EXTCODE2>".length(), requestStr.indexOf("</EXTCODE2>", index));
            requestHashMap.put("EXTCODE2", extCode2);

            index = requestStr.indexOf("<PRODUCTS>");
            String productsTemp = requestStr.substring(index + "<PRODUCTS>".length(), requestStr.indexOf("</PRODUCTS>", index));
            final String products = productsTemp.replaceAll("\r","").replaceAll("\n", "");
            int startLength = 0;
            final int endLength = products.length();
            String productCode = null;
            String productQty = null;
            int i = 0;
            int innerIndex = -1;
            while (startLength < endLength) {
                innerIndex = products.indexOf("<PRODUCTCODE>", innerIndex);
                productCode = products.substring(innerIndex + "<PRODUCTCODE>".length(), products.indexOf("</PRODUCTCODE>", innerIndex));
                startLength = products.indexOf("</PRODUCTCODE>", innerIndex) + "</PRODUCTCODE>".length();
                if (startLength > endLength) {
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.BILLPAY_INVALID_MESSAGE_FORMAT);
                }
                innerIndex = products.indexOf("<QTY>", innerIndex);
                productQty = products.substring(innerIndex + "<QTY>".length(), products.indexOf("</QTY>", innerIndex));
                if (BTSLUtil.isNullString(productQty)) {
                    productQty = "0";
                }
                startLength = products.indexOf("</QTY>", innerIndex) + "</QTY>".length();
                arrList.add(i, productQty);
                arrList.add(++i, productCode);
                i = i + 1;
            }

            index = requestStr.indexOf("<REFNUMBER>");
            final String refNumber = requestStr.substring(index + "<REFNUMBER>".length(), requestStr.indexOf("</REFNUMBER>", index));
            requestHashMap.put("REFNUMBER", refNumber);

            index = requestStr.indexOf("<PAYMENTDETAILS>");
            final String payments = requestStr.substring(index + "<PAYMENTDETAILS>".length(), requestStr.indexOf("</PAYMENTDETAILS>", index));

            index = payments.indexOf("<PAYMENTTYPE>");
            final String paymentType = payments.substring(index + "<PAYMENTTYPE>".length(), payments.indexOf("</PAYMENTTYPE>", index));
            requestHashMap.put("PAYMENTTYPE", paymentType);

            index = payments.indexOf("<PAYMENTINSTNUMBER>");
            final String paymentNumber = payments.substring(index + "<PAYMENTINSTNUMBER>".length(), payments.indexOf("</PAYMENTINSTNUMBER>", index));
            requestHashMap.put("PAYMENTINSTNUMBER", paymentNumber);

            index = payments.indexOf("<PAYMENTDATE>");
            String paymentDate = payments.substring(index + "<PAYMENTDATE>".length(), payments.indexOf("</PAYMENTDATE>", index));
            paymentDate = BTSLDateUtil.getGregorianDateInString(paymentDate);
            requestHashMap.put("PAYMENTDATE", paymentDate);
            
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            boolean channelTransferInfoRequired = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CHANNEL_TRANSFERS_INFO_REQUIRED);
          //added by Anjali for C2C Info Tag in Channel Transfers HCPT
            Boolean isTagReq=false;
            isTagReq=channelTransferInfoRequired;
            if(isTagReq)
            {
            	
                index = requestStr.indexOf("<REMARKS>");
                if(index>0)
                {
	            	final String remarks = requestStr.substring(index + "<REMARKS>".length(), requestStr.indexOf("</REMARKS>", index));
	                requestHashMap.put("REMARKS", remarks);
                }
	            index = requestStr.indexOf("<INFO1>");
	            if(index>0)
	            {
		            final String info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
		            requestHashMap.put("INFO1", info1);
	            }
	            index = requestStr.indexOf("<INFO2>");
	            if(index>0)
	            {
		            final String info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
		            requestHashMap.put("INFO2", info2);
	            }
            }
            // Added By Diwakar on 01-MAR-2014
            XMLStringValidation.validateExtC2CTransferRequest(p_requestVO, extNwCode, msisdn1, pin, loginId, password, extCode, extRefNumber, msisdn2, extCode2, loginId2,
                productCode, productQty, language1);
            // Ended Here

            String str = "";
            int arryLists=arrList.size();
            for (int k = 0; k <arryLists ; k++) {
                final String element = (String) arrList.get(k);
                str = str + element + CHNL_MESSAGE_SEP;

            }
            if (!BTSLUtil.isNullString(CHNL_MESSAGE_SEP)) {
                str = str.substring(0, str.length() - 1);
            }

            // finding the transfer ,retuen and withdraw

            
                parsedRequestStr = PretupsI.SERVICE_TYPE_C2C_INITIATE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + str;
            

            // if(BTSLUtil.isNullString())

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));

            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setReceiverMsisdn(msisdn2);
            p_requestVO.setReceiverExtCode(extCode2);
            p_requestVO.setReceiverLoginID(loginId2);
            p_requestVO.setReferenceNumber(refNumber);
            p_requestVO.setPaymentType(paymentType);
            p_requestVO.setPaymentInstNumber(paymentNumber);
            p_requestVO.setPaymentDate(paymentDate);

            // XMLStringValidation.validateExtC2CTransferRequest(p_requestVO)
        }
        // 03-MAR-2014
        catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        }
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
        }
    

    
    
    
    
    
    
    
    public static void parseExtPassbookRpt(RequestVO p_requestVO, int p_action) throws Exception {
    	
    	final String methodName = "parseExtPassbookRpt";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }
            final ArrayList arrList = new ArrayList();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
  
          
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            requestHashMap.put("LANGUAGE2", language2);
            
		   
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            
    	
            
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            
            
            index = requestStr.indexOf("<FROMDATE>");
            final String fromDate = requestStr.substring(index + "<FROMDATE>".length(), requestStr.indexOf("</FROMDATE>", index));
            requestHashMap.put("FROMDATE", fromDate);
            
            
            
            index = requestStr.indexOf("<TODATE>");
            final String toDate = requestStr.substring(index + "<TODATE>".length(), requestStr.indexOf("</TODATE>", index));
            requestHashMap.put("TODATE", toDate);
                   
            
            ChannelUserVO  channelUserVO = new ChannelUserVO();
            
            parsedRequestStr = PretupsI.SERVICE_TYPE_PSBKRPT + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + loginId +CHNL_MESSAGE_SEP+pin+CHNL_MESSAGE_SEP+fromDate+CHNL_MESSAGE_SEP+toDate;;
            
          	
			p_requestVO.setToDate(toDate);
			p_requestVO.setFromDate(fromDate);
			p_requestVO.setUserLoginId(loginId);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setPin(pin);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderVO(channelUserVO);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);

        }
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
        }

    
    
    public static void parseExtUserHierarchy(RequestVO p_requestVO, int p_action) throws Exception {
    	final String methodName = "parseExtUserHierarchy";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }
            final ArrayList arrList = new ArrayList();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
  
          
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            requestHashMap.put("LANGUAGE2", language2);
            
		   
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            
    	
            
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            
            
            
            ChannelUserVO  channelUserVO = new ChannelUserVO();
            
            parsedRequestStr = PretupsI.SERVICE_TYPE_UPUSRHRCHY + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + loginId +CHNL_MESSAGE_SEP+pin;
            
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setPin(pin);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderVO(channelUserVO);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);

        }
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
        }
   
    
    
    
    public static void parseC2cUserBuyEnquiry(RequestVO p_requestVO, int p_action) throws Exception {
    	final String methodName = "parseExtUserHierarchy";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
  
          
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            requestHashMap.put("LANGUAGE2", language2);
            
		   
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            
    	
            
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            
            
            
            ChannelUserVO  channelUserVO = new ChannelUserVO();
            
            parsedRequestStr = PretupsI.SERVICE_TYPE_C2CBUYENQ + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + loginId +CHNL_MESSAGE_SEP+pin;
            
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setPin(pin);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderVO(channelUserVO);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);

        }
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
        }
    public static void parseC2sServiceDetails(RequestVO p_requestVO, int p_action) throws Exception {
    	final String methodName = "parseC2sServiceDetails";
        StringBuilder loggerValue= new StringBuilder();
        if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append(ENTRY_KEY);
        	loggerValue.append(p_requestVO.toString());
        	loggerValue.append(p_action);
        	_log.debug(methodName, loggerValue);
        }
        String parsedRequestStr = null;
        try {
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
  
          
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            requestHashMap.put("LANGUAGE2", language2);
            
		   
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            
    	
            
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            
            index = requestStr.indexOf("<FROMDATE>");
            final String fromdate = requestStr.substring(index + "<FROMDATE>".length(), requestStr.indexOf("</FROMDATE>", index));
            requestHashMap.put("FROMDATE", fromdate);
            
            index = requestStr.indexOf("<TODATE>");
            final String todate = requestStr.substring(index + "<TODATE>".length(), requestStr.indexOf("</TODATE>", index));
            requestHashMap.put("TODATE", todate);
            
            
            
            ChannelUserVO  channelUserVO = new ChannelUserVO();
            
            parsedRequestStr = PretupsI.SERVICE_TYPE_C2STRFSVCNT + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + loginId +CHNL_MESSAGE_SEP+pin;
            
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setPin(pin);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderVO(channelUserVO);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);

        }
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
        }
    /**
     * 
     * @param p_requestVO
     * @param p_action
     * @throws Exception
     */
    
    public static void parseExtC2CVoucherApproval(RequestVO p_requestVO, int p_action) throws Exception {
    	final String methodName = "parseExtC2CVoucherApproval";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }
            final ArrayList arrList = new ArrayList();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            
          
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

          
            index = requestStr.indexOf("<STATUS>");
            final String status = requestStr.substring(index + "<STATUS>".length(), requestStr.indexOf("</STATUS>", index));
            requestHashMap.put("STATUS", status);

            
       
            index = requestStr.indexOf("<PAYMENTINSTCODE>");
            final String paymentInstCode = requestStr.substring(index + "<PAYMENTINSTCODE>".length(), requestStr.indexOf("</PAYMENTINSTCODE>", index));
            requestHashMap.put("PAYMENTINSTCODE", paymentInstCode);
            
            

            index = requestStr.indexOf("<PAYMENTINSTDATE>");
            final String paymentDate = requestStr.substring(index + "<PAYMENTINSTDATE>".length(), requestStr.indexOf("</PAYMENTINSTDATE>", index));
            requestHashMap.put("PAYMENTDATE", paymentDate);
            
            

            index = requestStr.indexOf("<PAYMENTINSTNUM>");
            final String paymentInstNum = requestStr.substring(index + "<PAYMENTINSTNUM>".length(), requestStr.indexOf("</PAYMENTINSTNUM>", index));
            requestHashMap.put("PAYMENTINSTNUM", paymentInstNum);
            
            
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            requestHashMap.put("LANGUAGE2", language2);
            

            index = requestStr.indexOf("<TRANSFERID>");
            final String transferId = requestStr.substring(index + "<TRANSFERID>".length(), requestStr.indexOf("</TRANSFERID>", index));
            requestHashMap.put("TRANSFERID", transferId);
            
            StringBuffer serialNoRange = new StringBuffer();
    		index = requestStr.indexOf("<VOUCHERSSERIALDETAILS>");
    		final String voucherDetails = requestStr.substring(index + "<VOUCHERSSERIALDETAILS>".length(),
    				requestStr.indexOf("</VOUCHERSSERIALDETAILS>", index));

    		String[] voucherDetailsArr = voucherDetails.split("<VOUCHERDETAIL>");

    		for (String voucherDetailsArrObj : voucherDetailsArr) {
    			if (voucherDetailsArrObj != null && voucherDetailsArrObj.trim().length() > 0) {
    				index = voucherDetailsArrObj.indexOf("<FROMSERIALNO>");
    				final String fromSerialNo = voucherDetailsArrObj.substring(index + "<FROMSERIALNO>".length(),
    						voucherDetailsArrObj.indexOf("</FROMSERIALNO>", index));

    				index = voucherDetailsArrObj.indexOf("<TOSERIALNO>");
    				final String toSerialNo = voucherDetailsArrObj.substring(index + "<TOSERIALNO>".length(),
    						voucherDetailsArrObj.indexOf("</TOSERIALNO>", index));

    				serialNoRange.append(fromSerialNo+":"+toSerialNo+",");
    			}

    		}
    		
    		requestHashMap.put("VOUCHER_DETAILS", serialNoRange);
              
    		
    		
            
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            

            index = requestStr.indexOf("<REMARKS>");
            final String remarks = requestStr.substring(index + "<REMARKS>".length(), requestStr.indexOf("</REMARKS>", index));
            requestHashMap.put("REMARKS", remarks);
            
            
            ChannelUserVO  channelUserVO = new ChannelUserVO();
            parsedRequestStr = PretupsI.SERVICE_TYPE_C2C_VOUCHER_APPROVAL + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + transferId + CHNL_MESSAGE_SEP + status + CHNL_MESSAGE_SEP+ status+CHNL_MESSAGE_SEP+pin;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setPin(pin);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderVO(channelUserVO);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setStatus(status);
        }
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
        }

    
    public static void parseExtC2CApproval(RequestVO p_requestVO, int p_action) throws Exception {
    	final String methodName = "parseExtC2CApproval";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }
            final ArrayList arrList = new ArrayList();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            
            index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            requestHashMap.put("MSISDN1", msisdn1);

            index = requestStr.indexOf("<LOGINID>");
            String loginid = null;
            if(index > 0){
            loginid = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginid);
            }
            
            index = requestStr.indexOf("<PASSWORD>");
            String password = null;
            if(index > 0){
            password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            }
            
            index = requestStr.indexOf("<EXTCODE>");
            String extcode = null;
            if(index > 0){
            extcode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extcode);
            }
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            
            String extRefNumber = null;
            index = requestStr.indexOf("<EXTREFNUM>");
            if(index > 0)
            	extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);

            String extTxnDate = null;
            index = requestStr.indexOf("<EXTTXNDATE>");
            if(index > 0)
            	extTxnDate = requestStr.substring(index + "<EXTTXNDATE>".length(), requestStr.indexOf("</EXTTXNDATE>", index));
            requestHashMap.put("EXTTXNDATE", extTxnDate);
            
            index = requestStr.indexOf("<TXNID>");
            final String txnId = requestStr.substring(index + "<TXNID>".length(), requestStr.indexOf("</TXNID>", index));
            requestHashMap.put("TXNID", txnId);

            index = requestStr.indexOf("<PRODUCTS>");	
            String productsTemp = requestStr.substring(index + "<PRODUCTS>".length(), requestStr.indexOf("</PRODUCTS>", index));	
            final String products = productsTemp.replaceAll("\r","").replaceAll("\n", "");	
            int startLength = 0;	
            final int endLength = products.length();	
            String productCode = null;	
            String productQty = null;	
            int i = 0;	
            int innerIndex = -1;	
            while (startLength < endLength) {	
                innerIndex = products.indexOf("<PRODUCTCODE>", innerIndex);	
                productCode = products.substring(innerIndex + "<PRODUCTCODE>".length(), products.indexOf("</PRODUCTCODE>", innerIndex));	
                startLength = products.indexOf("</PRODUCTCODE>", innerIndex) + "</PRODUCTCODE>".length();	
                if (startLength > endLength) {	
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.BILLPAY_INVALID_MESSAGE_FORMAT);	
                }	
                innerIndex = products.indexOf("<QTY>", innerIndex);	
                productQty = products.substring(innerIndex + "<QTY>".length(), products.indexOf("</QTY>", innerIndex));	
                if (BTSLUtil.isNullString(productQty)) {	
                    productQty = "0";	
                }	
                startLength = products.indexOf("</QTY>", innerIndex) + "</QTY>".length();	
                arrList.add(i, productQty);	
                arrList.add(++i, productCode);	
                i = i + 1;	
            }
            
            index = requestStr.indexOf("<REFNUMBER>");
            final String refNumber = requestStr.substring(index + "<REFNUMBER>".length(), requestStr.indexOf("</REFNUMBER>", index));
            requestHashMap.put("REFNUMBER", refNumber);

            index = requestStr.indexOf("<PAYMENTDETAILS>");
            final String payments = requestStr.substring(index + "<PAYMENTDETAILS>".length(), requestStr.indexOf("</PAYMENTDETAILS>", index));

            index = payments.indexOf("<PAYMENTTYPE>");
            final String paymentType = payments.substring(index + "<PAYMENTTYPE>".length(), payments.indexOf("</PAYMENTTYPE>", index));
            requestHashMap.put("PAYMENTTYPE", paymentType);

            index = payments.indexOf("<PAYMENTINSTNUMBER>");
            final String paymentNumber = payments.substring(index + "<PAYMENTINSTNUMBER>".length(), payments.indexOf("</PAYMENTINSTNUMBER>", index));
            requestHashMap.put("PAYMENTINSTNUMBER", paymentNumber);

            index = payments.indexOf("<PAYMENTDATE>");
            String paymentDate = payments.substring(index + "<PAYMENTDATE>".length(), payments.indexOf("</PAYMENTDATE>", index));
            paymentDate = BTSLDateUtil.getGregorianDateInString(paymentDate);
            requestHashMap.put("PAYMENTDATE", paymentDate);
            
            index = requestStr.indexOf("<CURRENTSTATUS>");
            final String currentStatus = requestStr.substring(index + "<CURRENTSTATUS>".length(), requestStr.indexOf("</CURRENTSTATUS>", index));
            requestHashMap.put("CURRENTSTATUS", currentStatus);

            index = requestStr.indexOf("<STATUS>");
            final String status = requestStr.substring(index + "<STATUS>".length(), requestStr.indexOf("</STATUS>", index));
            requestHashMap.put("STATUS", status);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            
            index = requestStr.indexOf("<REMARKS>");
            String remarks = null;
            if(index > 0){
            remarks = requestStr.substring(index + "<REMARKS>".length(), requestStr.indexOf("</REMARKS>", index));
            requestHashMap.put("REMARKS", remarks);
            }
            
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            boolean channelTransferInfoRequired = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CHANNEL_TRANSFERS_INFO_REQUIRED);
            Boolean isTagReq=false;
            isTagReq=channelTransferInfoRequired;
            if(isTagReq)
            {
	            index = requestStr.indexOf("<INFO1>");
	            if(index>0)
	            {
		            final String info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
		            requestHashMap.put("INFO1", info1);
	            }
	            index = requestStr.indexOf("<INFO2>");
	            if(index>0)
	            {
		            final String info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
		            requestHashMap.put("INFO2", info2);
	            }
            }
            

            String str = "";
            int arryLists=arrList.size();
            for (int k = 0; k <arryLists ; k++) {
                final String element = (String) arrList.get(k);
                str = str + element + CHNL_MESSAGE_SEP;

            }
            if (!BTSLUtil.isNullString(CHNL_MESSAGE_SEP)) {
                str = str.substring(0, str.length() - 1);
            }

            parsedRequestStr = PretupsI.SERVICE_TYPE_C2C_APPROVAL + CHNL_MESSAGE_SEP + msisdn1 + CHNL_MESSAGE_SEP + txnId + CHNL_MESSAGE_SEP + currentStatus + CHNL_MESSAGE_SEP+ status+CHNL_MESSAGE_SEP+pin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));

            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setTransactionID(txnId);
            p_requestVO.setCurrentStatus(currentStatus);
            p_requestVO.setStatus(status);
            p_requestVO.setPin(pin);
            p_requestVO.setSenderExternalCode(extcode);
            p_requestVO.setSenderLoginID(loginid);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setRemarks(remarks);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setProductQuantityList(arrList);
            p_requestVO.setReferenceNumber(refNumber);
            p_requestVO.setPaymentType(paymentType);
            p_requestVO.setPaymentInstNumber(paymentNumber);
            p_requestVO.setPaymentDate(paymentDate);
        }
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
        }
    
    /**
     * Added for CDMA Bank Recharge via external system.
     * 
     * @param p_requestVO
     * @param p_action
     * @throws Exception
     * @author kapil.mehta
     */

    public static void parseChannelExtCreditTransferRequestCDMA(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtCreditTransferRequestCDMA";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
            String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_RECHARGE);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            if (BTSLUtil.isNullString(amount)) {
                _log.error("parseCreditRechargeRequestCDMA", "Amount field is null ");
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_AMOUNT);
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_RECHARGE_CDMA + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
        } catch (BTSLBaseException be) {
            _log.error(methodName, " BTSL Exception while parsing Request Message :" + be.getMessage());
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * Added for PSTN Bank Recharge via external system.
     * 
     * @param p_requestVO
     * @param p_action
     * @throws Exception
     * @author kapil.mehta
     */

    public static void parseChannelExtCreditTransferRequestPSTN(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtCreditTransferRequestPSTN";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_RECHARGE_PSTN);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            if (BTSLUtil.isNullString(msisdn) && BTSLUtil.isNullString(loginId) && BTSLUtil.isNullString(extCode)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            }
            if (BTSLUtil.isNullString(msisdn2)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_BLANK);
            }
            
            index = requestStr.indexOf("<NOTIFICATION_MSISDN>");
            final String notification_msisdn = requestStr.substring(index + "<NOTIFICATION_MSISDN>".length(), requestStr.indexOf("</NOTIFICATION_MSISDN>", index));
            if (BTSLUtil.isNullString(notification_msisdn)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_NOTIFICATION_MSISDN_BLANK);
            }
            
            if (!BTSLUtil.isValidMSISDN(notification_msisdn)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_USRADD_INVALID_MSISDN);
            }
            if (BTSLUtil.isNullString(amount)) {
                _log.error("parseCreditRechargeRequestPSTN", "Amount field is null ");
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_AMOUNT);
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_RECHARGE_PSTN + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + notification_msisdn + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
            p_requestVO.setNotificationMSISDN(notification_msisdn);

        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage()); 
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * Added for Bradband Bank Recharge via external system.
     * 
     * @param p_requestVO
     * @param p_action
     * @throws Exception
     * @author kapil.mehta
     */

    public static void parseChannelExtCreditTransferRequestINTR(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtCreditTransferRequestINTR";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
             requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            
            
            

            if(BTSLUtil.isNullString(msisdn) && BTSLUtil.isNullString(loginId) && BTSLUtil.isNullString(extCode))
            {
            	 throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.MANDATORY_EMPTY);
            }
            
            
            if (BTSLUtil.isNullString(msisdn2)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_BLANK);
            }
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_RECHARGE_INTR);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            index = requestStr.indexOf("<NOTIFICATION_MSISDN>");
            final String notification_msisdn = requestStr.substring(index + "<NOTIFICATION_MSISDN>".length(), requestStr.indexOf("</NOTIFICATION_MSISDN>", index));
            if (BTSLUtil.isNullString(notification_msisdn)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_NOTIFICATION_MSISDN_BLANK);
            }
            if (!BTSLUtil.isValidMSISDN(notification_msisdn)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.INVALID_MSISDN);
            }
            
            
            if (BTSLUtil.isNullString(amount)) {
                _log.error("parseCreditRechargeRequestINTR", "Amount field is null ");
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_AMOUNT);
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_RECHARGE_INTR + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + notification_msisdn + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
            p_requestVO.setNotificationMSISDN(notification_msisdn);

        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * parseExtVasSellingRequest
     * Request of CRBT(registration and song selection) from the external
     * system.
     * 
     * @param p_requestVO
     * @param p_action
     * @throws Exception
     * @author vikasy
     */
    public static void parseExtVasSellingRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseExtVasSellingRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            final HashMap requestHashMap = new HashMap();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);

            index = requestStr.indexOf("<EXTNWCODE>");
            final String extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extnwcode);

            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            index = requestStr.indexOf("<LOGINID>");
            final String loginid = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginid);

            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);

            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);

            index = requestStr.indexOf("<EXTREFNUM>");
            final String extrefnum = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extrefnum);

            index = requestStr.indexOf("<SUBSMSISDN>");
            final String subMsisdn = requestStr.substring(index + "<SUBSMSISDN>".length(), requestStr.indexOf("</SUBSMSISDN>", index));
            requestHashMap.put("SUBSMSISDN", subMsisdn);

            index = requestStr.indexOf("<AMT>");
            final String amount = requestStr.substring(index + "<AMT>".length(), requestStr.indexOf("</AMT>", index));
            requestHashMap.put("AMT", amount);

            index = requestStr.indexOf("<SUBSERVICE>");
            final String subService = requestStr.substring(index + "<SUBSERVICE>".length(), requestStr.indexOf("</SUBSERVICE>", index));
            requestHashMap.put("SUBSERVICE", subService);

            index = requestStr.indexOf("<OTHERINFO>");
            final String otherInfo = requestStr.substring(index + "<OTHERINFO>".length(), requestStr.indexOf("</OTHERINFO>", index));
            requestHashMap.put("OTHERINFO", otherInfo);
            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(subMsisdn) || BTSLUtil.isNullString(amount) || BTSLUtil.isNullString(type) || BTSLUtil
                .isNullString(subService)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            }

            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_VAS_CRBT + CHNL_MESSAGE_SEP + subMsisdn + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + subService;

            p_requestVO.setReqSelector(subService);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalNetworkCode(extnwcode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setExternalReferenceNum(extrefnum);
        }

        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * parseExtChannelLastTransferStatusRequest
     * Parse the last transfer status request from the external system.
     * 
     * @param p_requestVO
     * @throws Exception
     * @author ved.sharma
     */
    public static void parseExtChannelLastTransferStatusRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseExtChannelLastTransferStatusRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        try {
            String parsedRequestStr = null;

            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }
            String requestStr = p_requestVO.getRequestMessage();
            String msisdn = null;
            String extRefNumber = null;
            String password = null;
            String extCode = null;
            String extNwCode = null;
            String date = null;
            String language1 = null;
            
            String pin = null;
            boolean areMandatoryFieldsPresent = false;
            
            requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
            if (index > 0) {
                date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                date = BTSLDateUtil.getGregorianDateInString(date);
                requestHashMap.put("DATE", date);
            }

            index = requestStr.indexOf("<EXTNWCODE>");
            extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<MSISDN>");
            if (index > 0) {
                msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
                requestHashMap.put("MSISDN", msisdn);
            }
            
            index = requestStr.indexOf("<PIN>");
            
            if(index > 0)
            {
            	pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));            	
            	requestHashMap.put("PIN", pin);
            	
            	if(!BTSLUtil.isNullString(msisdn) && !BTSLUtil.isNullString(pin))
                	areMandatoryFieldsPresent = true;
            	
            }
            
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            
            index = requestStr.indexOf("<PASSWORD>");
            if (index > 0) {
                password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                requestHashMap.put("PASSWORD", password);
                
                if(!areMandatoryFieldsPresent && !BTSLUtil.isNullString(loginId) && !BTSLUtil.isNullString(password))
                	areMandatoryFieldsPresent = true;
            }
            
            index = requestStr.indexOf("<EXTCODE>");
            if (index > 0) {
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
                requestHashMap.put("EXTCODE", extCode);
                
                if(!areMandatoryFieldsPresent && !BTSLUtil.isNullString(extCode))
                	areMandatoryFieldsPresent = true;
            }
            
            index = requestStr.indexOf("<EXTREFNUM>");
            if (index > 0) {
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                requestHashMap.put("EXTREFNUM", extRefNumber);
            }
            index = requestStr.indexOf("<LANGUAGE1>");
            if (index > 0) {
                language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
                requestHashMap.put("LANGUAGE1", language1);
                if (!BTSLUtil.isNullString(language1)) {
                    p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
                }
            }

            parsedRequestStr = PretupsI.SERVICE_TYPE_LAST_TRANSFER_STATUS;

            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(language1) || BTSLUtil.isNullString(extNwCode)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            }
            
            if (BTSLUtil.isNullString(pin) && BTSLUtil.isNullString(msisdn) && !BTSLUtil.isNullString(loginId) && !BTSLUtil.isNullString(password)) {
                p_requestVO.setPinValidationRequired(false);
            }
            if (BTSLUtil.isNullString(pin) && BTSLUtil.isNullString(msisdn) && !BTSLUtil.isNullString(extCode)) {
                p_requestVO.setPinValidationRequired(false);
            }
            
            if(!areMandatoryFieldsPresent)
            	throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            
        } catch (BTSLBaseException be) {
            _log.errorTrace(methodName, be);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, be.getMessageKey());
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * Parsing request to check the balance of External System user
     * (POS/ATM/WEB)
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void parseExtChannelUserBalanceRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseExtChannelUserBalanceRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);

            // Added By Diwakar on 01-MAR-2014
            XMLStringValidation.validateExtChannelUserBalanceRequest(p_requestVO, type, date, extNwCode, msisdn, pin, loginId, password, extCode, extRefNumber,null);
            // Ended Here

            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_BALANCE_XML;

            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);

         if (BTSLUtil.isNullString(pin) && BTSLUtil.isNullString(msisdn) && !BTSLUtil.isNullString(loginId) && !BTSLUtil.isNullString(password)) {
                p_requestVO.setPinValidationRequired(false);
            }
            if (BTSLUtil.isNullString(pin) && BTSLUtil.isNullString(msisdn) && !BTSLUtil.isNullString(extCode)) {
                p_requestVO.setPinValidationRequired(false);
            }

        }
        // 03-MAR-2014
        catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        }
        // Ended Here
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }

    }

    /**
     * Parsing request to check the balance of External System user
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void parseExtUserOtherBalEnqReq(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseExtUserOtherBalEnqReq";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            p_requestVO.setRequestMap(requestHashMap);
            final String requestStr = p_requestVO.getRequestMessage();
            String msisdn = null;
            String extRefNumber = null;
            String password = null;
            String extCode = null;
            String extNwCode = null;
            String date = null;
            String language1 = null;

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
            if (index > 0) {
                date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                date = BTSLDateUtil.getGregorianDateInString(date);
                requestHashMap.put("DATE", date);
            }
            index = requestStr.indexOf("<EXTNWCODE>");
            extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            if (index > 0) {
                msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
                requestHashMap.put("MSISDN", msisdn);
            }
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            if (index > 0) {
                password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                requestHashMap.put("PASSWORD", password);
            }
         
            index = requestStr.indexOf("<EXTCODE>");
            if (index > 0) {
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
                requestHashMap.put("EXTCODE", extCode);
            }
            index = requestStr.indexOf("<EXTREFNUM>");
            if (index > 0) {
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                requestHashMap.put("EXTREFNUM", extRefNumber);
            }
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN2", msisdn2);

            index = requestStr.indexOf("<LANGUAGE1>");
            if (index > 0) {
                language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
                requestHashMap.put("LANGUAGE1", language1);
                if (!BTSLUtil.isNullString(language1)) {
                    p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
                }
            }
            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(extNwCode) || BTSLUtil.isNullString(language1) || BTSLUtil.isNullString(msisdn2)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            }

   
            if(!BTSLUtil.isNullString(loginId)){
            	if(!BTSLUtil.isNullString(password)){
            		requestHashMap.put("PASSWORD_CHECK_REQUIRED", "Y");
            	}
            	else{
            		throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            	}
            }
            else{
            	requestHashMap.put("PASSWORD_CHECK_REQUIRED", "N");
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_BALANCE_ENQUIRY + CHNL_MESSAGE_SEP + msisdn2;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);
        } catch (BTSLBaseException be) {
            _log.errorTrace(methodName, be);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, be.getMessageKey());
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * parseExtChangepinResponse
     * Request of Change Pin request from the external system.
     * 
     * @param p_requestVO
     * @param p_action
     * @throws Exception
     * @author bobba
     */

    public static void parseExtChangepinRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseExtChangepinRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn1);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<NEWPIN>");
            final String newPin = requestStr.substring(index + "<NEWPIN>".length(), requestStr.indexOf("</NEWPIN>", index));
            requestHashMap.put("NEWPIN", newPin);
            index = requestStr.indexOf("<CONFIRMPIN>");
            final String confirmPin = requestStr.substring(index + "<CONFIRMPIN>".length(), requestStr.indexOf("</CONFIRMPIN>", index));
            requestHashMap.put("CONFIRMPIN", confirmPin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginID = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginID);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_CHANGEPIN + CHNL_MESSAGE_SEP + pin + CHNL_MESSAGE_SEP + newPin + CHNL_MESSAGE_SEP + confirmPin;
            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(extNwCode) || BTSLUtil.isNullString(pin) || BTSLUtil.isNullString(newPin) || BTSLUtil
                .isNullString(confirmPin) || BTSLUtil.isNullString(language1) || BTSLUtil.isNullString(msisdn1)) {
                throw new BTSLBaseException(CLASS_NAME, "parseExtChannelLastTransferStatusRequest", PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            }
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setRequestMap(requestHashMap);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * Method to parse External Interface Recharge Status Request
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void parseExtLastXTransferEnq(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseExtLastXTransferEnq";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            p_requestVO.setRequestMap(requestHashMap);
            final String requestStr = p_requestVO.getRequestMessage();
            String msisdn = null;
            String extRefNumber = null;
            String password = null;
            String extCode = null;
            String extNwCode = null;
            String date = null;
            String language1 = null;
			String noOfLastXTxn=null;
	    	String recMsisdn=null;
            String txnDate = null;
			
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
            if (index > 0) {
                date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                date = BTSLDateUtil.getGregorianDateInString(date);
                requestHashMap.put("DATE", date);
            }
            index = requestStr.indexOf("<EXTNWCODE>");
            extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            if (index > 0) {
                msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
                requestHashMap.put("MSISDN", msisdn);
            }
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            
            
            if(!((String) (PreferenceCache.getSystemPreferenceValue(PreferenceI.SMS_PIN_BYPASS_GATEWAY_CODE))).contains(p_requestVO.getRequestGatewayCode()) && BTSLUtil.isNullString(pin))
    		{
    			throw new BTSLBaseException("XMLStringParser",methodName,PretupsErrorCodesI.PIN_REQUIRED);
    		}
            
            
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            if (index > 0) {
                password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                requestHashMap.put("PASSWORD", password);
            }
            index = requestStr.indexOf("<EXTCODE>");
            if (index > 0) {
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
                requestHashMap.put("EXTCODE", extCode);
            }
            index = requestStr.indexOf("<EXTREFNUM>");
            if (index > 0) {
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                requestHashMap.put("EXTREFNUM", extRefNumber);
            }
            index = requestStr.indexOf("<LANGUAGE1>");
            if (index > 0) {
                language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
                requestHashMap.put("LANGUAGE1", language1);
                if (!BTSLUtil.isNullString(language1)) {
                    p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
                }
            }
			index=requestStr.indexOf("<NUMBER_OF_LAST_X_TXN>");
		    if(index>0)
		    {
		        noOfLastXTxn=requestStr.substring(index+"<NUMBER_OF_LAST_X_TXN>".length(),requestStr.indexOf("</NUMBER_OF_LAST_X_TXN>",index));
		        if(!BTSLUtil.isNullString(noOfLastXTxn)){
		        	if(!BTSLUtil.isNumeric(noOfLastXTxn)){
		        		throw new BTSLBaseException("XMLStringParser",methodName,PretupsErrorCodesI.LASTX_TRANSFER_NOOFTXN_NOTNUMERIC);
						}
		        	requestHashMap.put("NUMBER_OF_LAST_X_TXN",noOfLastXTxn);
		        }
		    }
	    	index=requestStr.indexOf("<RECEIVER_MSISDN>");
		    if(index>0)
		    {
		        recMsisdn=requestStr.substring(index+"<RECEIVER_MSISDN>".length(),requestStr.indexOf("</RECEIVER_MSISDN>",index));
		        if(!BTSLUtil.isNullString(recMsisdn)){
		        	requestHashMap.put("RECEIVER_MSISDN",recMsisdn);
		        }
		    }
            index=requestStr.indexOf("<TRANSACTION_DATE>");
            if(index>0)
            {
            	txnDate=requestStr.substring(index+"<TRANSACTION_DATE>".length(),requestStr.indexOf("</TRANSACTION_DATE>",index));
                if(!BTSLUtil.isNullString(txnDate)){
                        requestHashMap.put("TRANSACTION_DATE",txnDate);
                }
            }
                    
            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(extNwCode) || BTSLUtil.isNullString(language1)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            }
            p_requestVO.setExternalReferenceNum(extRefNumber);
            if(!BTSLUtil.isNullString(loginId)){
            	if(!BTSLUtil.isNullString(password)){
            		requestHashMap.put("PASSWORD_CHECK_REQUIRED", "Y");
            	}
            	else{
            		throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            	}
            }
            else{
            	requestHashMap.put("PASSWORD_CHECK_REQUIRED", "N");
            }
            if(BTSLUtil.isNullString(loginId)&&BTSLUtil.isNullString(msisdn)&&BTSLUtil.isNullString(extCode)){
            	throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_LASTX_TRANSFER_REPORT;
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
           //p_requestVO.setFilteredMSISDN(msisdn);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setRequestMap(requestHashMap);
            
            p_requestVO.setDecryptedMessage(parsedRequestStr);
        } catch (BTSLBaseException be) {
            _log.errorTrace(methodName, be);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, be.getMessageKey());
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * Method to parse External Interface Recharge Status Request
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void parseExtCustomerEnqReq(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseExtCustomerEnqReq";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            p_requestVO.setRequestMap(requestHashMap);
            final String requestStr = p_requestVO.getRequestMessage();
            String msisdn = null;
            String extRefNumber = null;
            String password = null;
            String extCode = null;
            String extNwCode = null;
            String date = null;
            // String date=null
            String language1 = null;

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
            if (index > 0) {
                date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                date = BTSLDateUtil.getGregorianDateInString(date);
                requestHashMap.put("DATE", date);
            }

            index = requestStr.indexOf("<EXTNWCODE>");
            extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            if (index > 0) {
                msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
                requestHashMap.put("MSISDN", msisdn);
            }

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);

            index = requestStr.indexOf("<PASSWORD>");
            if (index > 0) {
                password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                requestHashMap.put("PASSWORD", password);
            }

            index = requestStr.indexOf("<EXTCODE>");
            if (index > 0) {
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
                requestHashMap.put("EXTCODE", extCode);
            }

            index = requestStr.indexOf("<EXTREFNUM>");
            if (index > 0) {
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                requestHashMap.put("EXTREFNUM", extRefNumber);
            }
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));

            index = requestStr.indexOf("<LANGUAGE1>");
            if (index > 0) {
                language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
                requestHashMap.put("LANGUAGE1", language1);
                if (!BTSLUtil.isNullString(language1)) {
                    p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
                }
            }

            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(extNwCode) || BTSLUtil.isNullString(msisdn2) || BTSLUtil.isNullString(language1)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_CUSTX_ENQUIRY + CHNL_MESSAGE_SEP + msisdn2;
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setDecryptedMessage(parsedRequestStr);

        } catch (BTSLBaseException be) {
            _log.errorTrace(methodName, be);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, be.getMessageKey());
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * parseExtDailyTransactionRequest
     * Parse the daily Transaction Report request from the external system.
     * 
     * @param p_requestVO
     * @throws Exception
     * @author ved.sharma
     */
    public static void parseExtDailyTransactionRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseExtDailyTransactionRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        try {
            String parsedRequestStr = null;
            String language1 = null;
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }

            final String requestStr = p_requestVO.getRequestMessage();
            String msisdn = null;
            String extRefNumber = null;
            String password = null;
            String extCode = null;
            String extNwCode = null;
            String date = null;

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
            if (index > 0) {
                date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                date = BTSLDateUtil.getGregorianDateInString(date);
                requestHashMap.put("DATE", date);
            }

            index = requestStr.indexOf("<EXTNWCODE>");
            extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<MSISDN>");
            if (index > 0) {
                msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
                requestHashMap.put("MSISDN", msisdn);
            }

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);

            index = requestStr.indexOf("<PASSWORD>");
            if (index > 0) {
                password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                requestHashMap.put("PASSWORD", password);
            }

            index = requestStr.indexOf("<EXTCODE>");
            if (index > 0) {
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
                requestHashMap.put("EXTCODE", extCode);
            }

            index = requestStr.indexOf("<EXTREFNUM>");
            if (index > 0) {
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                requestHashMap.put("EXTREFNUM", extRefNumber);
            }

            index = requestStr.indexOf("<LANGUAGE1>");
            if (index > 0) {
                language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
                requestHashMap.put("LANGUAGE1", language1);
                if (!BTSLUtil.isNullString(language1)) {
                    p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
                }
            }

            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(language1) || BTSLUtil.isNullString(extNwCode)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            }

            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_DAILY_STATUS_REPORT;

            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setFilteredMSISDN(msisdn);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setRequestMap(requestHashMap);
        } catch (BTSLBaseException be) {
            _log.errorTrace(methodName, be);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, be.getMessageKey());
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * This method parses the request in the case of C2S/C2C/O2C enquiry.
     * 
     * @param p_requestVO
     * @throws Exception
     * @author Ankuj.Arora
     * @Date 20/5/2011
     */
    public static void parseEnquiryTxnIDExtCodeDateRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseEnquiryTxnIDExtCodeDateRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        final HashMap requestMap = new HashMap();
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestMap.put("TYPE", type);
            index = requestStr.indexOf("<TXNTYPE>");
            String txntype = requestStr.substring(index + "<TXNTYPE>".length(), requestStr.indexOf("</TXNTYPE>", index));
            if (BTSLUtil.isNullString(txntype)) {
                txntype = PretupsI.ENQ_TXNID_NVL;
            }
            requestMap.put("TXNTYPE", txntype);
            index = requestStr.indexOf("<TXNSUBTYPE>");
            String txnsubtype = requestStr.substring(index + "<TXNSUBTYPE>".length(), requestStr.indexOf("</TXNSUBTYPE>", index));
            if (BTSLUtil.isNullString(txnsubtype)) {
                txnsubtype = PretupsI.CHANNEL_TRANSFER_SUB_TYPE_TRANSFER;
            }
            requestMap.put("TXNSUBTYPE", txnsubtype);
            index = requestStr.indexOf("<DATE>");
            String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            if (BTSLUtil.isNullString(date)) {
                date = PretupsI.ENQ_TXNID_NVL;
            }
            requestMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            // if (BTSLUtil.isNullString(extnwcode))
            // extnwcode=PretupsI.ENQ_TXNID_NVL
            requestMap.put("EXTNWCODE", extnwcode);
            index = requestStr.indexOf("<TXNID>");
            final String txnid = requestStr.substring(index + "<TXNID>".length(), requestStr.indexOf("</TXNID>", index));
            // if (BTSLUtil.isNullString(txnid))
            // txnid=PretupsI.ENQ_TXNID_NVL
            requestMap.put("TXNID", txnid);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extrefnum = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            // if (BTSLUtil.isNullString(extrefnum))
            // extrefnum=PretupsI.ENQ_TXNID_NVL
            requestMap.put("EXTREFNUM", extrefnum);
            index = requestStr.indexOf("<FROMDATE>");
            // Date
            // from_date=BTSLUtil.getDateFromDateString(requestStr.substring(index+"<FROMDATE>".length(),requestStr.indexOf("</FROMDATE>",index)))
             String from_date = requestStr.substring(index + "<FROMDATE>".length(), requestStr.indexOf("</FROMDATE>", index));
             from_date = BTSLDateUtil.getGregorianDateInString(from_date);
             // if (BTSLUtil.isNullString(from_date))
            // from_date=PretupsI.ENQ_TXNID_NVL
            requestMap.put("FROMDATE", from_date);
            index = requestStr.indexOf("<TODATE>");
            // Date
            // to_date=BTSLUtil.getDateFromDateString(requestStr.substring(index+"<TODATE>".length(),requestStr.indexOf("</TODATE>",index)))
             String to_date = requestStr.substring(index + "<TODATE>".length(), requestStr.indexOf("</TODATE>", index));
             to_date = BTSLDateUtil.getGregorianDateInString(to_date);
             // if (BTSLUtil.isNullString(to_date))
            // to_date=PretupsI.ENQ_TXNID_NVL
            requestMap.put("TODATE", to_date);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestMap.put("MSISDN", msisdn);
            p_requestVO.setRequestMSISDN(msisdn);

            index = requestStr.indexOf("<LOGINID>");
            final String login_id = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestMap.put("LOGINID", login_id);
            p_requestVO.setSenderLoginID(login_id);

            index = requestStr.indexOf("PASSWORD");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestMap.put("PASSWORD", password);

            index = requestStr.indexOf("<EXTCODE>");
            final String ext_code = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestMap.put("EXTCODE", ext_code);
            p_requestVO.setRequestNetworkCode(ext_code);

            parsedRequestStr = PretupsI.ENQ_TXNID_DATE_EXTNO + P2P_MESSAGE_SEP + txntype + P2P_MESSAGE_SEP + txnsubtype + P2P_MESSAGE_SEP + date + P2P_MESSAGE_SEP + extnwcode + P2P_MESSAGE_SEP + txnid + P2P_MESSAGE_SEP + extrefnum + P2P_MESSAGE_SEP + from_date + P2P_MESSAGE_SEP + to_date;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            requestMap.put("PASSWORD_CHECK_REQUIRED", "N");
            // create network admin in system with login id EXTGW.
            // p_requestVO.setSenderLoginID("EXTGW")
            p_requestVO.setRequestMap(requestMap);
            p_requestVO.setExternalNetworkCode(extnwcode);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[parseEnquiryTxnIDExtCodeDateRequest]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "parseEnquiryTxnIDExtCodeDateRequest:" + e
                    .getMessage());
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }

    }

    /**
     * Parse the EVD request from the external system.
     * 
     * @param p_requestVO
     * @throws Exception
     */

    public static void parseExtPrivateRechargeRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseExtPrivateRechargeRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
             requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            if (BTSLUtil.isNullString("selector")) {
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache
                    .getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_COMMON_RECHARGE);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_EVD + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector;

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * Parse the EVR request from the external system.
     * 
     * @param p_requestVO
     * @throws Exception
     * @author harpreet.kaur
     */
    public static void parseExtEVRRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseExtEVRRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
             requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            if (BTSLUtil.isNullString("selector")) {
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache
                    .getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_COMMON_RECHARGE);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_EVR + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
            if (_log.isDebugEnabled()) {
                _log.debug(methodName, "Exiting p_requestVO: " + p_requestVO.toString());
            }
        }
    }

    /*
     * C2C transfer,Withdraw, Return Api through external system
     */
    public static void parseExtC2CTrfDrCrRequest(RequestVO p_requestVO, int p_action) throws Exception {
        final String methodName = "parseExtC2CTrfDrCrRequest";
        StringBuilder loggerValue= new StringBuilder();
        if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append(ENTRY_KEY);
        	loggerValue.append(p_requestVO.toString());
        	loggerValue.append(" p_action=");
        	loggerValue.append(p_action);
        	_log.debug(methodName, loggerValue);
        }
        String parsedRequestStr = null;
        try {
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }
            final ArrayList arrList = new ArrayList();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<DATE>");
            String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);

            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            requestHashMap.put("MSISDN1", msisdn1);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);

            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);

            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);

            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);

            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN2", msisdn2);

            index = requestStr.indexOf("<EXTCODE2>");
            final String extCode2 = requestStr.substring(index + "<EXTCODE2>".length(), requestStr.indexOf("</EXTCODE2>", index));
            requestHashMap.put("EXTCODE2", extCode2);

            index = requestStr.indexOf("<LOGINID2>");
            final String loginId2 = requestStr.substring(index + "<LOGINID2>".length(), requestStr.indexOf("</LOGINID2>", index));
            requestHashMap.put("LOGINID2", loginId2);

            index = requestStr.indexOf("<PRODUCTS>");
            String productsTemp = requestStr.substring(index + "<PRODUCTS>".length(), requestStr.indexOf("</PRODUCTS>", index));
            final String products = productsTemp.replaceAll("\r","").replaceAll("\n", "");
            int startLength = 0;
            final int endLength = products.length();
            String productCode = null;
            String productQty = null;
            int i = 0;
            int innerIndex = -1;
            while (startLength < endLength) {
                innerIndex = products.indexOf("<PRODUCTCODE>", innerIndex);
                productCode = products.substring(innerIndex + "<PRODUCTCODE>".length(), products.indexOf("</PRODUCTCODE>", innerIndex));
                startLength = products.indexOf("</PRODUCTCODE>", innerIndex) + "</PRODUCTCODE>".length();
                if (startLength > endLength) {
                    throw new BTSLBaseException(CLASS_NAME, "parseExtC2CTransferRequest", PretupsErrorCodesI.BILLPAY_INVALID_MESSAGE_FORMAT);
                }
                innerIndex = products.indexOf("<QTY>", innerIndex);
                productQty = products.substring(innerIndex + "<QTY>".length(), products.indexOf("</QTY>", innerIndex));
                if (BTSLUtil.isNullString(productQty)) {
                    productQty = "0";
                }
                startLength = products.indexOf("</QTY>", innerIndex) + "</QTY>".length();
                arrList.add(i, productQty);
                arrList.add(++i, productCode);
                i = i + 1;
            }

            index = requestStr.indexOf("<TXNTYPE>");
            final String txntype = requestStr.substring(index + "<TXNTYPE>".length(), requestStr.indexOf("</TXNTYPE>", index));
            requestHashMap.put("TXNTYPE", txntype);

            index = requestStr.indexOf("<PURPOSE>");
            final String purpose = requestStr.substring(index + "<PURPOSE>".length(), requestStr.indexOf("</PURPOSE>", index));
            requestHashMap.put("PURPOSE", purpose);

            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);

            String str = "";
            int arraylists=arrList.size();
            for (int k = 0; k < arraylists; k++) {
                final String element = (String) arrList.get(k);
                str = str + element + CHNL_MESSAGE_SEP;
            }
            if (!BTSLUtil.isNullString(CHNL_MESSAGE_SEP)) {
                str = str.substring(0, str.length() - 1);
            }

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));

            p_requestVO.setTxnType(txntype);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
            p_requestVO.setPurpose(purpose);

            /*
             * if(BTSLUtil.isNullString(msisdn1))
             * throw new
             * BTSLBaseException(CLASS_NAME,"parseExtC2CTrfDrCrRequest"
             * ,PretupsErrorCodesI.SENDER_MSISDN_NULL);
             * if(BTSLUtil.isNullString(msisdn2))
             * throw new
             * BTSLBaseException(CLASS_NAME,"parseExtC2CTrfDrCrRequest"
             * ,PretupsErrorCodesI.RECEIVER_MSISDN_NULL);
             */

            if (PretupsI.CREDIT.equalsIgnoreCase(p_requestVO.getTxnType())) {
                p_requestVO.setRequestMSISDN(msisdn1);
                p_requestVO.setSenderExternalCode(extCode);
                p_requestVO.setSenderLoginID(loginId);
                p_requestVO.setReceiverMsisdn(msisdn2);
                p_requestVO.setReceiverExtCode(extCode2);
                p_requestVO.setReceiverLoginID(loginId2);
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_DRCR_TRANSFER + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + str;
            } else if (PretupsI.DEBIT.equalsIgnoreCase(p_requestVO.getTxnType())) {
                p_requestVO.setRequestMSISDN(msisdn2);
                p_requestVO.setSenderExternalCode(extCode2);
                p_requestVO.setSenderLoginID(loginId2);
                p_requestVO.setReceiverMsisdn(msisdn1);
                p_requestVO.setReceiverExtCode(extCode);
                p_requestVO.setReceiverLoginID(loginId);
                parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_DRCR_TRANSFER + CHNL_MESSAGE_SEP + msisdn1 + CHNL_MESSAGE_SEP + str;
            } else {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.INVALID_TXN_TYPE);
            }
            p_requestVO.setDecryptedMessage(parsedRequestStr);

        } catch (BTSLBaseException e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.INVALID_TXN_TYPE);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw e;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * this method parse Channel User Suspend Resume XML request String form
     * External gateway formating into white space seperated String
     * 
     * @param p_requestVO
     *            RequestVO
     * @author gaurav.pandey
     * @param void
     *        added for suspend resume channel user (road map 5.8)
     */
    public static void parseChannelUserSuspendResumeEx(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelUserSuspendResumeEx";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }

            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            requestHashMap.put("MSISDN1", msisdn1);

            index = requestStr.indexOf("<NETWORK>");
            final String network = requestStr.substring(index + "<NETWORK>".length(), requestStr.indexOf("</NETWORK>", index));
            requestHashMap.put("NETWORK", network);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN", msisdn2);

            index = requestStr.indexOf("<ACTION>");
            final String action = requestStr.substring(index + "<ACTION>".length(), requestStr.indexOf("</ACTION>", index));
            requestHashMap.put("ACTION", action);

            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);

            // Channel User Suspend resume

            parsedRequestStr = PretupsI.SERVICE_TYPE_USR_SUSPEND_RESUME + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + action;

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));

            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setExternalNetworkCode(network);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setType(PretupsI.USER_TYPE_CHANNEL);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setReceiverMsisdn(msisdn2);

        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * Method to parse External Interface Vas Recharge Request
     * 
     * @param p_requestVO
     * @throws Exception
     * @author rahul.dutt
     */
    public static void parseChannelExtVASTransferRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtVASTransferRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
            if (!BTSLUtil.isNullString(date) && !BTSLUtil.isValidDatePattern(date)) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.INVALID_DATE);
                String systemDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.SYSTEM_DATE_FORMAT);
                final String args[] = { systemDateFormat };
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.INVALID_DATE, args);
            }
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            if ((!BTSLUtil.isNullString(msisdn) && BTSLUtil.isNullString(pin)) || (!BTSLUtil.isNullString(loginId) && BTSLUtil.isNullString(password))) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.XML_ERROR_INVALIDMESSAGEFORMAT);
            }
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            if (BTSLUtil.isNullString(msisdn2)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_BLANK);
            }
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            final String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
			index = requestStr.indexOf("<PRODUCTCODE>");
			String productcode=null;
			if(index>0)
            {
            productcode = requestStr.substring(index + "<PRODUCTCODE>".length(), requestStr.indexOf("</PRODUCTCODE>", index));
            requestHashMap.put("PRODUCTCODE", productcode);
			}
            index = requestStr.indexOf("<INFO1>");
            if(index>0)
            {
            	final String info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
            	requestHashMap.put("INFO1", info1);
            }
            index = requestStr.indexOf("<INFO2>");
            if(index>0)
            {
            	final String info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
            	requestHashMap.put("INFO2", info2);
            }
            index = requestStr.indexOf("<INFO3>");
            if(index>0)
            {
            	final String info3 = requestStr.substring(index + "<INFO3>".length(), requestStr.indexOf("</INFO3>", index));
            	requestHashMap.put("INFO3", info3);
            }
            index = requestStr.indexOf("<INFO4>");
            if(index>0)
            {
            	final String info4 = requestStr.substring(index + "<INFO4>".length(), requestStr.indexOf("</INFO4>", index));
            	requestHashMap.put("INFO4", info4);
            }
            index = requestStr.indexOf("<INFO5>");
            if(index>0)
            {
            	final String info5 = requestStr.substring(index + "<INFO5>".length(), requestStr.indexOf("</INFO5>", index));
            	requestHashMap.put("INFO5", info5);
            }

            if (BTSLUtil.isNullString(selector)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.VAS_PROMOVAS_REQ_SELECTOR_MISSING);
            }
            boolean multiAmountEnabled = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.MULTI_AMOUNT_ENABLED);
            if (!BTSLUtil.isNullString(amount) && multiAmountEnabled) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_VAS_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;
            } else if (!multiAmountEnabled) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_VAS_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;
            } else if (multiAmountEnabled && BTSLUtil.isNullString(amount)) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_VAS_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + PretupsI.VAS_BLANK_SLCTR_AMNT + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;
            } else {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.AMOUNT_REQUIRED);
            }
			if (!BTSLUtil.isNullString(productcode)) {
            	parsedRequestStr =productcode+parsedRequestStr;
            }
            
            
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
			p_requestVO.setProductCode(productcode);
            // Transaction
            // Status with
            // External
            // Refrence Number
            if (BTSLUtil.isNullString(pin) && BTSLUtil.isNullString(msisdn) && !BTSLUtil.isNullString(loginId) && !BTSLUtil.isNullString(password)) {
                p_requestVO.setPinValidationRequired(false);
            }
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     * @author rahul.dutt
     *         This method parses External interface request for Promo vas
     *         service
     */
    public static void parseChannelExtPrVASTransferRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtPrVASTransferRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        boolean multiAmountEnabled = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.MULTI_AMOUNT_ENABLED);
        String systemDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.SYSTEM_DATE_FORMAT);
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            if (!BTSLUtil.isNullString(date) && !BTSLUtil.isValidDatePattern(date)) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.INVALID_DATE);
                final String args[] = { systemDateFormat };
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.INVALID_DATE, args);
            }
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            if ((!BTSLUtil.isNullString(msisdn) && BTSLUtil.isNullString(pin)) || (!BTSLUtil.isNullString(loginId) && BTSLUtil.isNullString(password))) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.XML_ERROR_INVALIDMESSAGEFORMAT);
            }
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            if (BTSLUtil.isNullString(msisdn2)) {
                throw new BTSLBaseException(CLASS_NAME, "parseChannelExtVASTransferRequest", PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_BLANK);
            }
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            final String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            if (BTSLUtil.isNullString(selector)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.VAS_PROMOVAS_REQ_SELECTOR_MISSING);
            }
            /*
             * if(BTSLUtil.isNullString(amount))
             * {
             * _log.error("parseChannelExtPrVASTransferRequest",
             * "Amount field is null ");
             * throw new BTSLBaseException(CLASS_NAME,
             * "parseChannelExtPrVASTransferRequest"
             * ,PretupsErrorCodesI.C2S_ERROR_BLANK_AMOUNT);
             * }
             */
            if (!BTSLUtil.isNullString(amount) && multiAmountEnabled) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_PVAS_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;
            } else if (!multiAmountEnabled) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_PVAS_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;
            } else {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.AMOUNT_REQUIRED);
            }
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
            if (BTSLUtil.isNullString(pin) && BTSLUtil.isNullString(msisdn) && !BTSLUtil.isNullString(loginId) && !BTSLUtil.isNullString(password)) {
                p_requestVO.setPinValidationRequired(false);
            }
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * parseExtGeographyRequest
     * Parse the response for Geography request from external system
     * 
     * @param RequestVO
     * @throws Exception
     * @author ankur.dhawan
     */

    public static void parseExtGeographyRequest(RequestVO p_requestVO) throws BTSLBaseException, Exception {
        final String methodName = "parseExtGeographyRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        try {
            String parsedRequestStr = null;
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }

            final String requestStr = p_requestVO.getRequestMessage();
            String type = null;
            String date = null;
            String extNwCode = null;
            String extRefNumber = null;
            String catCode = null;
            String msisdn = null;
            String loginId = null;
            String extCode = null;
            String geoCode = null;

            int index = requestStr.indexOf("<TYPE>");
            type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<DATE>");
            if (index > 0) {
                date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                date = BTSLDateUtil.getGregorianDateInString(date);
                if (!BTSLUtil.isValidDatePattern(date)) {
                    p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_GRPH_INVALID_DATE);
                    String systemDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.SYSTEM_DATE_FORMAT);
                    final String args[] = { systemDateFormat };
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_GRPH_INVALID_DATE, args);
                }
                requestHashMap.put("DATE", date);
            }

            index = requestStr.indexOf("<EXTNWCODE>");
            extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<EXTREFNUM>");
            if (index > 0) {
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                requestHashMap.put("EXTREFNUM", extRefNumber);
            }
            p_requestVO.setExternalReferenceNum(extRefNumber);
            index = requestStr.indexOf("<CATCODE>");
            catCode = requestStr.substring(index + "<CATCODE>".length(), requestStr.indexOf("</CATCODE>", index));
            requestHashMap.put("CATCODE", catCode.trim());

            index = requestStr.indexOf("<MSISDN>");
            if (index > 0) {
                msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
                requestHashMap.put("MSISDN", msisdn.trim());
            }

            index = requestStr.indexOf("<USERLOGINID>");
            if (index > 0) {
                loginId = requestStr.substring(index + "<USERLOGINID>".length(), requestStr.indexOf("</USERLOGINID>", index));
                requestHashMap.put("LOGINID", loginId.trim());
            }

            index = requestStr.indexOf("<EXTCODE>");
            if (index > 0) {
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
                requestHashMap.put("EXTCODE", extCode.trim());
            }

            index = requestStr.indexOf("<GEOCODE>");
            if (index > 0) {
                geoCode = requestStr.substring(index + "<GEOCODE>".length(), requestStr.indexOf("</GEOCODE>", index));
                requestHashMap.put("GEOCODE", geoCode.trim());
            }

            if (BTSLUtil.isNullString(msisdn) && BTSLUtil.isNullString(loginId) && BTSLUtil.isNullString(extCode) && BTSLUtil.isNullString(geoCode)) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_GRPH_ERROR_MISSING_PARENT_DETAILS);
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_GRPH_ERROR_MISSING_PARENT_DETAILS);
            }

            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(extNwCode) || BTSLUtil.isNullString(catCode)) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_GRPH_ERROR_MISSING_MANDATORY_FIELDS);
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_GRPH_ERROR_MISSING_MANDATORY_FIELDS);
            }
            if (BTSLUtil.isNullString(msisdn)) {
                msisdn = "0";
            }
            if (BTSLUtil.isNullString(loginId)) {
                loginId = "0";
            }
            if (BTSLUtil.isNullString(extCode)) {
                extCode = "0";
            }
            if (BTSLUtil.isNullString(geoCode)) {
                geoCode = "0";
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_EXT_GEOGRAPHY + CHNL_MESSAGE_SEP + geoCode + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + extCode + CHNL_MESSAGE_SEP + loginId;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalNetworkCode(extNwCode);
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (StringIndexOutOfBoundsException sbe) {
            _log.errorTrace(methodName, sbe);
            p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_GRPH_INVALID_MESSAGE_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(sbe.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_GRPH_INVALID_MESSAGE_FORMAT);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_GRPH_INVALID_MESSAGE_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_GRPH_INVALID_MESSAGE_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * 
     */
    public static void parseExtTrfRuleTypeRequest(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseExtTrfRuleTypeRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            p_requestVO.setRequestMap(requestHashMap);
            final String requestStr = p_requestVO.getRequestMessage();
            String msisdn = null;
            String extRefNumber = null;
            String extNwCode = null;
            String date = null;
            String loginId = null;
            String extCode = null;

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
            if (index > 0) {
                date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                date = BTSLDateUtil.getGregorianDateInString(date);
                if (!BTSLUtil.isValidDatePattern(date)) {
                    p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_TRF_RULE_TYPE_INVALID_DATE);
                    String systemDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.SYSTEM_DATE_FORMAT);
                    final String args[] = { systemDateFormat };
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_TRF_RULE_TYPE_INVALID_DATE, args);
                }
                requestHashMap.put("DATE", date);
            }

            index = requestStr.indexOf("<EXTNWCODE>");
            extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<EXTREFNUM>");
            if (index > 0) {
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                requestHashMap.put("EXTREFNUM", extRefNumber);
            }
            index = requestStr.indexOf("<MSISDN>");
            if (index > 0) {
                msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
                requestHashMap.put("MSISDN", msisdn);
            }
            index = requestStr.indexOf("<LOGINID>");
            if (index > 0) {
                loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                requestHashMap.put("LOGINID", loginId);
            }

            index = requestStr.indexOf("<CATCODE>");
            final String catCode = requestStr.substring(index + "<CATCODE>".length(), requestStr.indexOf("</CATCODE>", index));
            requestHashMap.put("CATCODE", catCode);

            index = requestStr.indexOf("<EXTCODE>");
            if (index > 0) {
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
                requestHashMap.put("EXTCODE", extCode);
            }
            /*
             * if(BTSLUtil.isNullString(msisdn) &&
             * BTSLUtil.isNullString(loginId) && BTSLUtil.isNullString(extCode))
             * {
             * throw new BTSLBaseException(CLASS_NAME,
             * "parseExtTrfRuleTypeRequest"
             * ,PretupsErrorCodesI.EXT_XML_ERROR_MSISDN_LOGINID_EXTCODE_ALL_MISSING
             * );
             * }
             */
            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(extNwCode) || BTSLUtil.isNullString(catCode)) {
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_XML_ERROR_MISSING_MANDATORY_VALUE);
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_TRF_RULE_TYPE + CHNL_MESSAGE_SEP + loginId;
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * parseExtUserRequest
     * Parse the response for User Creation request from external system
     * 
     * @param RequestVO
     * @throws Exception
     * @author ankur.dhawan
     */

    public static void parseExtUserRequest(RequestVO p_requestVO) throws BTSLBaseException, Exception {
        final String methodName = "parseExtUserRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        boolean isTrfRuleUserLevelAllow = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.TRF_RULE_USER_LEVEL_ALLOW);
        try {
            String parsedRequestStr = null;
            HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap == null) {
                requestHashMap = new HashMap();
            }

            final String requestStr = p_requestVO.getRequestMessage();
            String type = null;
            String date = null;
            String extNwCode = null;
            String extRefNumber = null;
            String catCode = null;
            String msisdn = null;
            String loginId = null;
            String extCode = null;
            String geoCode = null;
            String optLoginId = null;
            String rsa = null;
            String ssn = null;
            String userName = null;
            String ownerMsisdn = null;
            String parentMsisdn = null;
            String empCode = null;
            String ruleType = null;

            int index = requestStr.indexOf("<TYPE>");
            type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<DATE>");
            if (index > 0) {
                date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                date = BTSLDateUtil.getGregorianDateInString(date);
                if (!BTSLUtil.isValidDatePattern(date)) {
                    p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_USRADD_INVALID_DATE);
                    String systemDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.SYSTEM_DATE_FORMAT);
                    final String args[] = { systemDateFormat };
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_USRADD_INVALID_DATE, args);
                }
                requestHashMap.put("DATE", date);
            }

            index = requestStr.indexOf("<EXTNWCODE>");
            extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<EXTREFNUM>");
            if (index > 0) {
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                requestHashMap.put("EXTREFNUM", extRefNumber);
            }
            p_requestVO.setExternalReferenceNum(extRefNumber);

            index = requestStr.indexOf("<OPTLOGINID>");
            optLoginId = requestStr.substring(index + "<OPTLOGINID>".length(), requestStr.indexOf("</OPTLOGINID>", index));
            requestHashMap.put("OPTLOGINID", optLoginId.trim());

            index = requestStr.indexOf("<CATCODE>");
            catCode = requestStr.substring(index + "<CATCODE>".length(), requestStr.indexOf("</CATCODE>", index));
            requestHashMap.put("CATCODE", catCode.trim());

            index = requestStr.indexOf("<OWNERMSISDN>");
            if (index > 0) {
                ownerMsisdn = requestStr.substring(index + "<OWNERMSISDN>".length(), requestStr.indexOf("</OWNERMSISDN>", index));
                requestHashMap.put("OWNERMSISDN", ownerMsisdn.trim());
            }

            index = requestStr.indexOf("<PARENTMSISDN>");
            if (index > 0) {
                parentMsisdn = requestStr.substring(index + "<PARENTMSISDN>".length(), requestStr.indexOf("</PARENTMSISDN>", index));
                requestHashMap.put("PARENTMSISDN", parentMsisdn.trim());
            }

            index = requestStr.indexOf("<MSISDN>");
            msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn.trim());

            index = requestStr.indexOf("<USERNAME>");
            userName = requestStr.substring(index + "<USERNAME>".length(), requestStr.indexOf("</USERNAME>", index));
            requestHashMap.put("USERNAME", userName.trim());

            index = requestStr.indexOf("<LOGINID>");
            if (index > 0) {
                loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                requestHashMap.put("LOGINID", loginId.trim());
            }

            index = requestStr.indexOf("<EMPCODE>");
            if (index > 0) {
                empCode = requestStr.substring(index + "<EMPCODE>".length(), requestStr.indexOf("</EMPCODE>", index));
                requestHashMap.put("EMPCODE", empCode.trim());
            }

            index = requestStr.indexOf("<RSA>");
            if (index > 0) {
                rsa = requestStr.substring(index + "<RSA>".length(), requestStr.indexOf("</RSA>", index));
                requestHashMap.put("RSA", rsa.trim());
            }

            index = requestStr.indexOf("<SSN>");
            if (index > 0) {
                ssn = requestStr.substring(index + "<SSN>".length(), requestStr.indexOf("</SSN>", index));
                requestHashMap.put("SSN", ssn.trim());
            }

            index = requestStr.indexOf("<EXTCODE>");
            if (index > 0) {
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
                requestHashMap.put("EXTCODE", extCode.trim());
            }

            index = requestStr.indexOf("<GEOGRAPHY>");
            geoCode = requestStr.substring(index + "<GEOGRAPHY>".length(), requestStr.indexOf("</GEOGRAPHY>", index));
            requestHashMap.put("GEOGRAPHY", geoCode.trim());

            index = requestStr.indexOf("<RULETYPE>");
            ruleType = requestStr.substring(index + "<RULETYPE>".length(), requestStr.indexOf("</RULETYPE>", index));
            requestHashMap.put("RULETYPE", ruleType.trim());

            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(optLoginId) || BTSLUtil.isNullString(extNwCode)) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_USRADD_ERROR_MISSING_MANDATORY_FIELDS);
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_USRADD_ERROR_MISSING_MANDATORY_FIELDS);
            }
            if (BTSLUtil.isNullString(catCode) || BTSLUtil.isNullString(msisdn) || BTSLUtil.isNullString(userName) || BTSLUtil.isNullString(geoCode)) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_USRADD_ERROR_MISSING_USER_DETAILS);
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_USRADD_ERROR_MISSING_USER_DETAILS);
            }
            if (isTrfRuleUserLevelAllow && BTSLUtil.isNullString(ruleType)) {
                p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_USRADD_RULETYPE_MANADATORY);
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_USRADD_RULETYPE_MANADATORY);
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_EXT_USR_ADD + CHNL_MESSAGE_SEP + optLoginId;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalNetworkCode(extNwCode);
            // p_requestVO.setSenderLoginID(optLoginId)
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (StringIndexOutOfBoundsException sbe) {
            _log.errorTrace(methodName, sbe);
            p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_USRADD_INVALID_MESSAGE_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(sbe.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_USRADD_INVALID_MESSAGE_FORMAT);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_USRADD_INVALID_MESSAGE_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXT_USRADD_INVALID_MESSAGE_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     * @author sonali.garg
     */
    public static void parseChannelExtSubscriberEnqRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtSubscriberEnqRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;

        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<MSISDN1>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
            requestHashMap.put("MSISDN1", msisdn1);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);

            index = requestStr.indexOf("<EXTTXNNUMBER>");
            final String extTxnNumber = requestStr.substring(index + "<EXTTXNNUMBER>".length(), requestStr.indexOf("</EXTTXNNUMBER>", index));
            requestHashMap.put("EXTTXNNUMBER", extTxnNumber);

            index = requestStr.indexOf("<EXTTXNDATE>");
             String extDate = requestStr.substring(index + "<EXTTXNDATE>".length(), requestStr.indexOf("</EXTTXNDATE>", index));
             extDate = BTSLDateUtil.getGregorianDateInString(extDate);
             requestHashMap.put("EXTTXNDATE", extDate);

            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN2", msisdn2);

            index = requestStr.indexOf("<SERVICETYPE>");
            final String enquiryServiceType = requestStr.substring(index + "<SERVICETYPE>".length(), requestStr.indexOf("</SERVICETYPE>", index));
            requestHashMap.put("SERVICETYPE", enquiryServiceType);

            index = requestStr.indexOf("<REMARKS>");
            final String remarks = requestStr.substring(index + "<REMARKS>".length(), requestStr.indexOf("</REMARKS>", index));
            requestHashMap.put("REMARKS", remarks);

            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            parsedRequestStr = PretupsI.SERVICE_TYPE_SUBSCRIBER_ENQUIRY + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + enquiryServiceType;

            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setReceiverMsisdn(msisdn2);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setExternalTransactionNum(extTxnNumber);
            p_requestVO.setRemarks(remarks);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setEnquiryServiceType(enquiryServiceType);
            // here requestType is used to differentiate whether it's for
            // prepaid or postpaid
            // if requestType=RC =>Prepaid else if type=PPB => Postpaid
            if (enquiryServiceType.equals(PretupsI.SERVICE_TYPE_CHNL_RECHARGE)) {
                p_requestVO.setEnquiryServiceType("RC");
                if (BTSLUtil.isNullString(selector)) {
                    final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache
                        .getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_RECHARGE);
                    if (serviceSelectorMappingVO != null) {
                        selector = serviceSelectorMappingVO.getSelectorCode();
                    }
                }
            } else if (enquiryServiceType.equals(PretupsI.SERVICE_TYPE_CHNL_BILLPAY)) {
                p_requestVO.setEnquiryServiceType("PPB");
                if (BTSLUtil.isNullString(selector)) {
                    final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_BILLPAY);
                    if (serviceSelectorMappingVO != null) {
                        selector = serviceSelectorMappingVO.getSelectorCode();
                    }
                }
            }

            p_requestVO.setReqSelector(selector);
            p_requestVO.setRequestMap(requestHashMap);

        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseChannelExtHelpDeskRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtHelpDeskRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
             requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));

            parsedRequestStr = PretupsI.SERVICE_TYPE_HLPDSK_REQUEST + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + pin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
        }

        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     * @author akanksha.gupta
     */
    public static void parseO2CExtSAPEnqRequest(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseO2CExtSAPEnqRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            parseCommonXMLRequestForCCE(p_requestVO);
            HashMap requestMap = null;
            requestMap = p_requestVO.getRequestMap();
            final String requestStr = (String) p_requestVO.getRequestMap().get("DATA");
            int index = requestStr.indexOf("<FROMDATE>");
             String fromDate = requestStr.substring(index + "<FROMDATE>".length(), requestStr.indexOf("</FROMDATE>", index));
             fromDate = BTSLDateUtil.getGregorianDateInString(fromDate);
             requestMap.put("FROMDATE", fromDate);
            index = requestStr.indexOf("<TODATE>");
             String toDate = requestStr.substring(index + "<TODATE>".length(), requestStr.indexOf("</TODATE>", index));
             toDate = BTSLDateUtil.getGregorianDateInString(toDate);
             requestMap.put("TODATE", toDate);
            parsedRequestStr = PretupsI.O2C_SAP_ENQUIRY;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMap(requestMap);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }

    }

    /**
     * This method parse common part of request from XML String to hashmap
     * 
     * @param p_requestVO
     *            RequestVO
     */
    public static void parseCommonXMLRequestForCCE(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseCommonXMLRequestForCCE";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            if (!(requestStr.indexOf("<COMMAND>") != -1)) {
                throw new BTSLBaseException(PretupsErrorCodesI.XML_ERROR_INVALIDMESSAGEFORMAT);
            }
            if (!(requestStr.endsWith("</COMMAND>"))) {
                throw new BTSLBaseException(PretupsErrorCodesI.XML_ERROR_INVALIDMESSAGEFORMAT);
            }

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
             requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<CATCODE>");
            final String catCode = requestStr.substring(index + "<CATCODE>".length(), requestStr.indexOf("</CATCODE>", index));
            requestHashMap.put("CATCODE", catCode);
            index = requestStr.indexOf("<EMPCODE>");
            final String empCode = requestStr.substring(index + "<EMPCODE>".length(), requestStr.indexOf("</EMPCODE>", index));
            requestHashMap.put("EMPCODE", empCode);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<DATA>");
            final String requestData = requestStr.substring(index + "<DATA>".length(), requestStr.indexOf("</DATA>", index));
            requestHashMap.put("DATA", requestData);
            p_requestVO.setDecryptedMessage(type);
            p_requestVO.setRequestMap(requestHashMap);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[parseCommonXMLRequestForCCE]",
                PretupsErrorCodesI.XML_ERROR_INVALIDMESSAGEFORMAT, "", "", "parseCommonXMLRequestForCCE:" + e.getMessage());
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.XML_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     * @author akanksha.gupta
     */
    public static void parseO2CExtCodeUpdateRequest(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseO2CExtCodeUpdateRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;

        try {
            parseCommonXMLRequestForCCE(p_requestVO);
            HashMap requestMap = null;
            requestMap = p_requestVO.getRequestMap();
            final String data = (String) p_requestVO.getRequestMap().get("DATA");
            int index = data.indexOf("<TRANSFER_ID>");
            final String transferID = data.substring(index + "<TRANSFER_ID>".length(), data.indexOf("</TRANSFER_ID>", index));
            requestMap.put("TRANSFERID", transferID);

            index = data.indexOf("<EXT_TXN_ID>");
            final String extTxnId = data.substring(index + "<EXT_TXN_ID>".length(), data.indexOf("</EXT_TXN_ID>", index));
            requestMap.put("EXT_TXN_ID", extTxnId);

            index = data.indexOf("<EXT_TXN_DATE>");
             String extTxnDate = data.substring(index + "<EXT_TXN_DATE>".length(), data.indexOf("</EXT_TXN_DATE>", index));
             extTxnDate = BTSLDateUtil.getGregorianDateInString(extTxnDate);
             requestMap.put("EXT_TXN_DATE", extTxnDate);

            parsedRequestStr = PretupsI.O2C_SAP_UPDATE;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMap(requestMap);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setTransactionID(transferID);
            p_requestVO.setExternalTransactionNum(extTxnId);
            p_requestVO.setExternalTransactionDate(extTxnDate);

        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }

    }

    /**
     * Method to parse External Interface Collection Enquiry Request
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void parseChannelExtCollectionEnquiryRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtCollectionEnquiryRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_RECHARGE);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            int minMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH))).intValue();
            int maxMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE))).intValue();
            if (BTSLUtil.isNullString(msisdn2)) {
                _log.error(methodName, "msisdn2 field is null ");
                final String[] strArr = new String[] { msisdn2, String.valueOf(minMsisdnLength), String.valueOf(maxMsisdnLength) };
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_NOTINRANGE, 0, strArr, null);
            }
            final int amount = 0;
            if (BTSLUtil.isNullString(pin)) {
                pin = "0";
            }
            parsedRequestStr = PretupsI.COLLECTION_ENQUIRY + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;

            if (BTSLUtil.isNullString(pin) && BTSLUtil.isNullString(msisdn) && !BTSLUtil.isNullString(loginId) && !BTSLUtil.isNullString(password)) {
                p_requestVO.setPinValidationRequired(false);
            }

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setValidatePin(pin);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * Method to parse External Interface Collection Bill Payment Request
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void parseChannelExtCollectionBillPaymentRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtCollectionBillPaymentRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<AMOUNT>");
            String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_RECHARGE);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }

            if (BTSLUtil.isNullString(amount)) {
                amount = "0";
            }
            int minMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH))).intValue();
            int maxMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE))).intValue();
            if (BTSLUtil.isNullString(msisdn2)) {
                _log.error("parseC2STransferRequest", "msisdn2 field is null ");
                final String[] strArr = new String[] { msisdn2, String.valueOf(minMsisdnLength), String.valueOf(maxMsisdnLength) };
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_NOTINRANGE, 0, strArr, null);
            }

            if (BTSLUtil.isNullString(pin)) {
                pin = "0";
            }
            parsedRequestStr = PretupsI.COLLECTION_BILLPAYMENT + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;

            if (BTSLUtil.isNullString(pin) && BTSLUtil.isNullString(msisdn) && !BTSLUtil.isNullString(loginId) && !BTSLUtil.isNullString(password)) {
                p_requestVO.setPinValidationRequired(false);
            }

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setValidatePin(pin);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number

        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * Method to parse External Interface Collection Bill Payment Request
     * Reversal
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void parseC2SPostPaidReversalRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseC2SPostPaidReversalRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.COLLECTION_CANCELATION);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            index = requestStr.indexOf("<TRANSACTIONID>");
            String transferid = requestStr.substring(index + "<TRANSACTIONID>".length(), requestStr.indexOf("</TRANSACTIONID>", index));
            requestHashMap.put("TRANSACTIONID", transferid);
            int minMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH))).intValue();
            int maxMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE))).intValue();
            if (BTSLUtil.isNullString(msisdn2)) {
                _log.error(methodName, "msisdn2 field is null ");
                final String[] strArr = new String[] { msisdn2, String.valueOf(minMsisdnLength), String.valueOf(maxMsisdnLength) };
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_NOTINRANGE, 0, strArr, null);
            }

            if (BTSLUtil.isNullString(transferid)) {
                transferid = "0";
            }

            final int amount = 0;

            if (BTSLUtil.isNullString(pin)) {
                pin = "0";
            }
            parsedRequestStr = PretupsI.COLLECTION_CANCELATION + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin + CHNL_MESSAGE_SEP + transferid;

            if (BTSLUtil.isNullString(pin) && BTSLUtil.isNullString(msisdn) && !BTSLUtil.isNullString(loginId) && !BTSLUtil.isNullString(password)) {
                p_requestVO.setPinValidationRequired(false);
            }

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setValidatePin(pin);
            p_requestVO.setRequestMap(requestHashMap);
            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
            // Transaction
            // Status with
            // External
            // Refrence Number
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseUserAddRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseUserAddRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            String reqDate = null;
            String externalNetworkCode = null;
            final String categoryCode = null;
            String employeeCode = null;
            String requestLoginId = null;
            String password = null;
            String extRefNum = null;
            final String userLoginId = null;
            final String userMsisdn = null;
            String geographycode=null;/*added for geography code*/
            String msisdn = null;
            String pin = null;
            String parentMsisdn = null;
            String parentExtCode = null;
            String userCategory = null;
            String userName = null;
            String shortName = null;
            String userNamePrefix = null;
            String subscriberCode = null;
            String externalCode = null;
            String contactPerson = null;
            String contactNumber = null;
            String ssn = null;
            String address1 = null;
            String address2 = null;
            String city = null;
            String state = null;
            String country = null;
            String emailId = null;
            String webloginId = null;
            String webPassword = null;
            String msisdn1 = null;
            String msisdn2 = null;
            String msisdn3 = null;
            final HashMap elementMap = new HashMap();
            try {
                final String[] validateTag = { "<COMMAND>", "</COMMAND>", "<TYPE>", "</TYPE>", "<DATE>", "</DATE>", "<EXTNWCODE>", "</EXTNWCODE>", "<EMPCODE>", "</EMPCODE>", "<LOGINID>", "</LOGINID>", "<PASSWORD>", "</PASSWORD>", "<MSISDN>", "</MSISDN>", "<PIN>", "</PIN>", "<EXTREFNUM>", "</EXTREFNUM>", "<DATA>", "</DATA>" };
                XMLStringValidation.validateTags(requestStr, validateTag);

                index = requestStr.indexOf("<DATE>");
                reqDate = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                reqDate = BTSLDateUtil.getGregorianDateInString(reqDate);
                elementMap.put("DATE", reqDate);
                index = requestStr.indexOf("<EXTNWCODE>");
                externalNetworkCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                elementMap.put("EXTNWCODE", externalNetworkCode);
                index = requestStr.indexOf("<EMPCODE>");
                employeeCode = requestStr.substring(index + "<EMPCODE>".length(), requestStr.indexOf("</EMPCODE>", index));
                elementMap.put("EMPCODE", employeeCode);

                index = requestStr.indexOf("<LOGINID>");
                requestLoginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                elementMap.put("LOGINID", requestLoginId);
                index = requestStr.indexOf("<PASSWORD>");
                password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                elementMap.put("PASSWORD", password);
                index = requestStr.indexOf("<MSISDN>");
                msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
                elementMap.put("MSISDN", msisdn);
                index = requestStr.indexOf("<PIN>");
                pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
                // 03-MAR-2014
                elementMap.put("PIN", pin);
                // Ended Here
                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNum = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                index = requestStr.indexOf("<DATA>");
                final String requestData = requestStr.substring(index + "<DATA>".length(), requestStr.indexOf("</DATA>", index));
            	final String[] validateTag4Data = {"<PARENTMSISDN>", "</PARENTMSISDN>", "<PARENTEXTERNALCODE>", "</PARENTEXTERNALCODE>", "<USERCATCODE>", "</USERCATCODE>", "<USERNAME>", "</USERNAME>", "<SHORTNAME>", "</SHORTNAME>", "<USERNAMEPREFIX>", "</USERNAMEPREFIX>", "<SUBSCRIBERCODE>", "</SUBSCRIBERCODE>", "<EXTERNALCODE>", "</EXTERNALCODE>", "<CONTACTPERSON>", "</CONTACTPERSON>", "<CONTACTNUMBER>", "</CONTACTNUMBER>", "<SSN>", "</SSN>", "<ADDRESS1>", "</ADDRESS1>", "<ADDRESS2>", "</ADDRESS2>", "<CITY>", "</CITY>", "<STATE>", "</STATE>", "<COUNTRY>", "</COUNTRY>", "<EMAILID>", "</EMAILID>", "<WEBLOGINID>", "</WEBLOGINID>", "<WEBPASSWORD>", "</WEBPASSWORD>", "<MSISDNS>", "</MSISDNS>" };
                XMLStringValidation.validateTags(requestData, validateTag4Data);
                boolean isDefaultProfile = ((Boolean) (PreferenceCache.getSystemPreferenceValue(PreferenceI.IS_DEFAULT_PROFILE))).booleanValue();
                /* If IS_DEFAULT_PROFILE is False in system then <GEOGRAPHYCODE> valuse is mandatory*/
                if(!isDefaultProfile){
                	
                	final String[] validateTag4Data1 = {"<GEOGRAPHYCODE>","</GEOGRAPHYCODE>"};
                    XMLStringValidation.validateTags(requestData, validateTag4Data1);
                	
                    index = requestData.indexOf("<GEOGRAPHYCODE>");     	
                    geographycode = requestData.substring(index+"<GEOGRAPHYCODE>".length(),requestData.indexOf("</GEOGRAPHYCODE>",index));
					elementMap.put("GEOGRAPHYCODE", geographycode);					
               
                } else if(isDefaultProfile){
                	
                	final String[] validateTag4Data1 = {"<GEOGRAPHYCODE>","</GEOGRAPHYCODE>"};
                	XMLStringValidation.validateTags(requestData, validateTag4Data1);
                	
                    index = requestData.indexOf("<GEOGRAPHYCODE>");     	
                    geographycode = requestData.substring(index+"<GEOGRAPHYCODE>".length(),requestData.indexOf("</GEOGRAPHYCODE>",index));
					elementMap.put("GEOGRAPHYCODE", geographycode);					
               
                }
                
                index = requestData.indexOf("<PARENTMSISDN>");
                parentMsisdn = requestData.substring(index + "<PARENTMSISDN>".length(), requestData.indexOf("</PARENTMSISDN>", index));
                elementMap.put("PARENTMSISDN", parentMsisdn);
                index = requestData.indexOf("<PARENTEXTERNALCODE>");
                parentExtCode = requestData.substring(index + "<PARENTEXTERNALCODE>".length(), requestData.indexOf("</PARENTEXTERNALCODE>", index));
                elementMap.put("PARENTEXTERNALCODE", parentExtCode);
                index = requestData.indexOf("<USERCATCODE>");
                userCategory = requestData.substring(index + "<USERCATCODE>".length(), requestData.indexOf("</USERCATCODE>", index));
                elementMap.put("USERCATCODE", userCategory);
                index = requestData.indexOf("<USERNAME>");
                userName = requestData.substring(index + "<USERNAME>".length(), requestData.indexOf("</USERNAME>", index));
                elementMap.put("USERNAME", userName);
                index = requestData.indexOf("<SHORTNAME>");
                shortName = requestData.substring(index + "<SHORTNAME>".length(), requestData.indexOf("</SHORTNAME>", index));
                elementMap.put("SHORTNAME", shortName);
                index = requestData.indexOf("<USERNAMEPREFIX>");
                userNamePrefix = requestData.substring(index + "<USERNAMEPREFIX>".length(), requestData.indexOf("</USERNAMEPREFIX>", index));
                elementMap.put("USERNAMEPREFIX", userNamePrefix);
                index = requestData.indexOf("<SUBSCRIBERCODE>");
                subscriberCode = requestData.substring(index + "<SUBSCRIBERCODE>".length(), requestData.indexOf("</SUBSCRIBERCODE>", index));
                elementMap.put("SUBSCRIBERCODE", subscriberCode);
                index = requestData.indexOf("<EXTERNALCODE>");
                externalCode = requestData.substring(index + "<EXTERNALCODE>".length(), requestData.indexOf("</EXTERNALCODE>", index));
                elementMap.put("EXTERNALCODE", externalCode);
                index = requestData.indexOf("<CONTACTPERSON>");
                contactPerson = requestData.substring(index + "<CONTACTPERSON>".length(), requestData.indexOf("</CONTACTPERSON>", index));
                elementMap.put("CONTACTPERSON", contactPerson);
                index = requestData.indexOf("<CONTACTNUMBER>");
                contactNumber = requestData.substring(index + "<CONTACTNUMBER>".length(), requestData.indexOf("</CONTACTNUMBER>", index));
                elementMap.put("CONTACTNUMBER", contactNumber);
                index = requestData.indexOf("<SSN>");
                ssn = requestData.substring(index + "<SSN>".length(), requestData.indexOf("</SSN>", index));
                elementMap.put("SSN", ssn);
                index = requestData.indexOf("<ADDRESS1>");
                address1 = requestData.substring(index + "<ADDRESS1>".length(), requestData.indexOf("</ADDRESS1>", index));
                elementMap.put("ADDRESS1", address1);
                index = requestData.indexOf("<ADDRESS2>");
                address2 = requestData.substring(index + "<ADDRESS2>".length(), requestData.indexOf("</ADDRESS2>", index));
                elementMap.put("ADDRESS2", address2);
                index = requestData.indexOf("<CITY>");
                city = requestData.substring(index + "<CITY>".length(), requestData.indexOf("</CITY>", index));
                elementMap.put("CITY", city);
                index = requestData.indexOf("<STATE>");
                state = requestData.substring(index + "<STATE>".length(), requestData.indexOf("</STATE>", index));
                elementMap.put("STATE", state);
                index = requestData.indexOf("<COUNTRY>");
                country = requestData.substring(index + "<COUNTRY>".length(), requestData.indexOf("</COUNTRY>", index));
                elementMap.put("COUNTRY", country);
                index = requestData.indexOf("<EMAILID>");
                emailId = requestData.substring(index + "<EMAILID>".length(), requestData.indexOf("</EMAILID>", index));
                elementMap.put("EMAILID", emailId);
                index = requestData.indexOf("<WEBLOGINID>");
                webloginId = requestData.substring(index + "<WEBLOGINID>".length(), requestData.indexOf("</WEBLOGINID>", index));
                elementMap.put("WEBLOGINID", webloginId);
                index = requestData.indexOf("<WEBPASSWORD>");
                webPassword = requestData.substring(index + "<WEBPASSWORD>".length(), requestData.indexOf("</WEBPASSWORD>", index));
                elementMap.put("WEBPASSWORD", webPassword);
                index = requestStr.indexOf("<MSISDNS>");
                final String requestData2 = requestStr.substring(index + "<MSISDNS>".length(), requestStr.indexOf("</MSISDNS>", index));

                final String[] validateTag4Data4DataMsisdn = { "<MSISDN1>", "</MSISDN1>", "<MSISDN2>", "</MSISDN2>", "<MSISDN3>", "</MSISDN3>" };
                XMLStringValidation.validateTags(requestData2, validateTag4Data4DataMsisdn);

                index = requestData2.indexOf("<MSISDN1>");
                msisdn1 = requestData2.substring(index + "<MSISDN1>".length(), requestData2.indexOf("</MSISDN1>", index));
                elementMap.put("PRIMARYMSISDN", msisdn1);
                index = requestData2.indexOf("<MSISDN2>");
                msisdn2 = requestData2.substring(index + "<MSISDN2>".length(), requestData2.indexOf("</MSISDN2>", index));
                elementMap.put("MSISDN2", msisdn2);
                index = requestData2.indexOf("<MSISDN3>");
                msisdn3 = requestData2.substring(index + "<MSISDN3>".length(), requestData2.indexOf("</MSISDN3>", index));
                elementMap.put("MSISDN3", msisdn3);
                final ArrayList MSISDNLIST = new ArrayList(3);
                MSISDNLIST.add(msisdn1);
                MSISDNLIST.add(msisdn2);
                MSISDNLIST.add(msisdn3);
                elementMap.put("MSISDNLIST", MSISDNLIST);
            } catch (BTSLBaseException be) {
                _log.errorTrace(methodName, be);
                p_requestVO.setMessageCode(be.getMessageKey());
                p_requestVO.setMessageArguments(be.getArgs());
                throw be;
            } catch (RuntimeException e) {
                // TODO Auto-generated catch block
                _log.errorTrace(methodName, e);
                p_requestVO.setMessageCode(PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT);
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT);
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
            p_requestVO.setLocale(new Locale(defaultLanguage, defaultCountry));
            p_requestVO.setRequestIDStr(type);
            p_requestVO.setType(type);
            p_requestVO.setReqDate(reqDate);
            p_requestVO.setExternalNetworkCode(externalNetworkCode);
            p_requestVO.setCategoryCode(categoryCode);
            p_requestVO.setEmployeeCode(employeeCode);
            p_requestVO.setSenderLoginID(requestLoginId);
            p_requestVO.setPassword(password);
            p_requestVO.setExternalReferenceNum(extRefNum);
            p_requestVO.setRequestLoginId(userLoginId);
            p_requestVO.setRequestMSISDN(userMsisdn);
            p_requestVO.setUserCategory(userCategory);
            p_requestVO.setRequestMap(elementMap);

            XMLStringValidation.validateExtChannelUserAddRequest(p_requestVO, type, reqDate, externalNetworkCode, employeeCode, msisdn, requestLoginId, password, extRefNum,
                parentMsisdn, userCategory, userName, userNamePrefix, externalCode, msisdn1, shortName, userNamePrefix, subscriberCode, contactPerson, contactNumber, ssn,
                address1, address2, city, state, country, emailId, webloginId, webPassword, pin, msisdn2, msisdn3);

            /*
             * if(BTSLUtil.isNullString(type)|| BTSLUtil.isNullString(reqDate)
             * || BTSLUtil.isNullString(externalNetworkCode)
             * || ( BTSLUtil.isNullString(employeeCode) &&
             * BTSLUtil.isNullString(msisdn) &&
             * (BTSLUtil.isNullString(requestLoginId) ||
             * BTSLUtil.isNullString(password)))
             * || BTSLUtil.isNullString(extRefNum) ||
             * BTSLUtil.isNullString(parentMsisdn)||
             * BTSLUtil.isNullString(userCategory)
             * || BTSLUtil.isNullString(userName)||
             * BTSLUtil.isNullString(userNamePrefix)||
             * BTSLUtil.isNullString(externalCode)
             * || BTSLUtil.isNullString(msisdn1))
             * {
             * _log.error("parseUserAddRequest","type =  "+type+"  | reqDate = "+
             * reqDate+"  |  externalNetworkCode ="+externalNetworkCode
             * +"  | employeeCode=  "+
             * employeeCode+"  | msisdn = "+msisdn+"  | requestLoginId = "
             * +requestLoginId
             * +"  | extRefNum = "+
             * extRefNum+"  | parentMsisdn =  "+parentMsisdn
             * +"  |  userCategory ="+userCategory
             * +"  | userName =  "+
             * userName+"  | userNamePrefix = "+userNamePrefix
             * +"  | externalCode=   "+externalCode
             * +"  | msisdn1 "+ msisdn1)
             * throw new
             * BTSLBaseException(CLASS_NAME,"parseUserAddRequest"
             * ,PretupsErrorCodesI
             * .USER_ADD_ERROR_MISSING_MANDATORY_FIELDS_VALUE)
             * }
             */

            parsedRequestStr = PretupsI.SERVICE_TYPE_EXT_USER_ADD + CHNL_MESSAGE_SEP + type + CHNL_MESSAGE_SEP + reqDate + CHNL_MESSAGE_SEP + externalNetworkCode + CHNL_MESSAGE_SEP + employeeCode + CHNL_MESSAGE_SEP + requestLoginId + CHNL_MESSAGE_SEP + password + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + pin + CHNL_MESSAGE_SEP + extRefNum + CHNL_MESSAGE_SEP + parentMsisdn + CHNL_MESSAGE_SEP + parentExtCode + CHNL_MESSAGE_SEP + userCategory + CHNL_MESSAGE_SEP + userName + CHNL_MESSAGE_SEP + shortName + CHNL_MESSAGE_SEP + userNamePrefix + CHNL_MESSAGE_SEP + subscriberCode + CHNL_MESSAGE_SEP + externalCode + CHNL_MESSAGE_SEP + contactPerson + CHNL_MESSAGE_SEP + contactNumber + CHNL_MESSAGE_SEP + ssn + CHNL_MESSAGE_SEP + address1 + CHNL_MESSAGE_SEP + address2 + CHNL_MESSAGE_SEP + city + CHNL_MESSAGE_SEP + state + CHNL_MESSAGE_SEP + country + CHNL_MESSAGE_SEP + emailId + CHNL_MESSAGE_SEP + webloginId + CHNL_MESSAGE_SEP + webPassword + CHNL_MESSAGE_SEP + msisdn1 + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + msisdn3;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setDecryptedMessage(PretupsI.SERVICE_TYPE_EXT_USER_ADD);

        } catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseUserModifyRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseUserModifyRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            String reqDate = null;
            String externalNetworkCode = null;
            final String categoryCode = null;
            String employeeCode = null;
            String requestLoginId = null;
            String password = null;
            String extRefNum = null;
            final String userLoginId = null;
            final String userMsisdn = null;
            String msisdn = null;
            String pin = null;
            String existingUserMsisdn = null;
            String existingExtCode = null;
            String newExtCode = null;
            String userName = null;
            String shortName = null;
            String userNamePrefix = null;
            String subscriberCode = null;
            final String externalCode = null;
            String contactPerson = null;
            String contactNumber = null;
            String ssn = null;
            String address1 = null;
            String address2 = null;
            String city = null;
            String state = null;
            String country = null;
            String emailId = null;
            String webloginId = null;
            String webPassword = null;
            String msisdn1 = null;
            String msisdn2 = null;
            String msisdn3 = null;
            final HashMap elementMap = new HashMap();
            try {

                final String[] validateTag = { "<COMMAND>", "</COMMAND>", "<TYPE>", "</TYPE>", "<DATE>", "</DATE>", "<EXTNWCODE>", "</EXTNWCODE>", "<EMPCODE>", "</EMPCODE>", "<LOGINID>", "</LOGINID>", "<PASSWORD>", "</PASSWORD>", "<MSISDN>", "</MSISDN>", "<PIN>", "</PIN>", "<EXTREFNUM>", "</EXTREFNUM>", "<DATA>", "</DATA>" };
                XMLStringValidation.validateTags(requestStr, validateTag);

                index = requestStr.indexOf("<DATE>");
                reqDate = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                reqDate = BTSLDateUtil.getGregorianDateInString(reqDate);
                elementMap.put("DATE", reqDate);
                index = requestStr.indexOf("<EXTNWCODE>");
                externalNetworkCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                elementMap.put("EXTNWCODE", externalNetworkCode);
                index = requestStr.indexOf("<EMPCODE>");
                employeeCode = requestStr.substring(index + "<EMPCODE>".length(), requestStr.indexOf("</EMPCODE>", index));
                elementMap.put("EMPCODE", employeeCode);

                index = requestStr.indexOf("<LOGINID>");
                requestLoginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                elementMap.put("LOGINID", requestLoginId);
                index = requestStr.indexOf("<PASSWORD>");
                password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                elementMap.put("PASSWORD", password);
                index = requestStr.indexOf("<MSISDN>");
                msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
                elementMap.put("MSISDN", msisdn);
                index = requestStr.indexOf("<PIN>");
                pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
                // 03-MAR-2014
                elementMap.put("PIN", pin);
                // Ended Here
                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNum = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));

                index = requestStr.indexOf("<DATA>");
                final String requestData = requestStr.substring(index + "<DATA>".length(), requestStr.indexOf("</DATA>", index));

                final String[] validateTag4Data = { "<USERMSISDN>", "</USERMSISDN>", "<EXTERNALCODE>", "</EXTERNALCODE>", "<NEWEXTERNALCODE>", "</NEWEXTERNALCODE>", "<USERNAME>", "</USERNAME>", "<SHORTNAME>", "</SHORTNAME>", "<USERNAMEPREFIX>", "</USERNAMEPREFIX>", "<SUBSCRIBERCODE>", "</SUBSCRIBERCODE>", "<EXTERNALCODE>", "</EXTERNALCODE>", "<CONTACTPERSON>", "</CONTACTPERSON>", "<CONTACTNUMBER>", "</CONTACTNUMBER>", "<SSN>", "</SSN>", "<ADDRESS1>", "</ADDRESS1>", "<ADDRESS2>", "</ADDRESS2>", "<CITY>", "</CITY>", "<STATE>", "</STATE>", "<COUNTRY>", "</COUNTRY>", "<EMAILID>", "</EMAILID>", "<WEBLOGINID>", "</WEBLOGINID>", "<WEBPASSWORD>", "</WEBPASSWORD>", "<MSISDNS>", "</MSISDNS>" };
                XMLStringValidation.validateTags(requestData, validateTag4Data);

                index = requestData.indexOf("<USERMSISDN>");
                existingUserMsisdn = requestData.substring(index + "<USERMSISDN>".length(), requestData.indexOf("</USERMSISDN>", index));
                elementMap.put("USERMSISDN", existingUserMsisdn);
                index = requestData.indexOf("<EXTERNALCODE>");
                existingExtCode = requestData.substring(index + "<EXTERNALCODE>".length(), requestData.indexOf("</EXTERNALCODE>", index));
                elementMap.put("EXTERNALCODE", existingExtCode);
                index = requestData.indexOf("<NEWEXTERNALCODE>");
                newExtCode = requestData.substring(index + "<NEWEXTERNALCODE>".length(), requestData.indexOf("</NEWEXTERNALCODE>", index));
                elementMap.put("NEWEXTERNALCODE", newExtCode);
                index = requestData.indexOf("<USERNAME>");
                userName = requestData.substring(index + "<USERNAME>".length(), requestData.indexOf("</USERNAME>", index));
                elementMap.put("USERNAME", userName);
                index = requestData.indexOf("<SHORTNAME>");
                shortName = requestData.substring(index + "<SHORTNAME>".length(), requestData.indexOf("</SHORTNAME>", index));
                elementMap.put("SHORTNAME", shortName);
                index = requestData.indexOf("<USERNAMEPREFIX>");
                userNamePrefix = requestData.substring(index + "<USERNAMEPREFIX>".length(), requestData.indexOf("</USERNAMEPREFIX>", index));
                elementMap.put("USERNAMEPREFIX", userNamePrefix);
                index = requestData.indexOf("<SUBSCRIBERCODE>");
                subscriberCode = requestData.substring(index + "<SUBSCRIBERCODE>".length(), requestData.indexOf("</SUBSCRIBERCODE>", index));
                elementMap.put("SUBSCRIBERCODE", subscriberCode);
                index = requestData.indexOf("<CONTACTPERSON>");
                contactPerson = requestData.substring(index + "<CONTACTPERSON>".length(), requestData.indexOf("</CONTACTPERSON>", index));
                elementMap.put("CONTACTPERSON", contactPerson);
                index = requestData.indexOf("<CONTACTNUMBER>");
                contactNumber = requestData.substring(index + "<CONTACTNUMBER>".length(), requestData.indexOf("</CONTACTNUMBER>", index));
                elementMap.put("CONTACTNUMBER", contactNumber);
                index = requestData.indexOf("<SSN>");
                ssn = requestData.substring(index + "<SSN>".length(), requestData.indexOf("</SSN>", index));
                elementMap.put("SSN", ssn);
                index = requestData.indexOf("<ADDRESS1>");
                address1 = requestData.substring(index + "<ADDRESS1>".length(), requestData.indexOf("</ADDRESS1>", index));
                elementMap.put("ADDRESS1", address1);
                index = requestData.indexOf("<ADDRESS2>");
                address2 = requestData.substring(index + "<ADDRESS2>".length(), requestData.indexOf("</ADDRESS2>", index));
                elementMap.put("ADDRESS2", address2);
                index = requestData.indexOf("<CITY>");
                city = requestData.substring(index + "<CITY>".length(), requestData.indexOf("</CITY>", index));
                elementMap.put("CITY", city);
                index = requestData.indexOf("<STATE>");
                state = requestData.substring(index + "<STATE>".length(), requestData.indexOf("</STATE>", index));
                elementMap.put("STATE", state);
                index = requestData.indexOf("<COUNTRY>");
                country = requestData.substring(index + "<COUNTRY>".length(), requestData.indexOf("</COUNTRY>", index));
                elementMap.put("COUNTRY", country);
                index = requestData.indexOf("<EMAILID>");
                emailId = requestData.substring(index + "<EMAILID>".length(), requestData.indexOf("</EMAILID>", index));
                elementMap.put("EMAILID", emailId);
                index = requestData.indexOf("<WEBLOGINID>");
                webloginId = requestData.substring(index + "<WEBLOGINID>".length(), requestData.indexOf("</WEBLOGINID>", index));
                elementMap.put("WEBLOGINID", webloginId);
                index = requestData.indexOf("<WEBPASSWORD>");
                webPassword = requestData.substring(index + "<WEBPASSWORD>".length(), requestData.indexOf("</WEBPASSWORD>", index));
                elementMap.put("WEBPASSWORD", webPassword);
                index = requestStr.indexOf("<MSISDNS>");
                final String requestData2 = requestStr.substring(index + "<MSISDNS>".length(), requestStr.indexOf("</MSISDNS>", index));

                final String[] validateTag4Data4DataMsisdn = { "<MSISDN1>", "</MSISDN1>", "<MSISDN2>", "</MSISDN2>", "<MSISDN3>", "</MSISDN3>" };
                XMLStringValidation.validateTags(requestData2, validateTag4Data4DataMsisdn);

                index = requestData2.indexOf("<MSISDN1>");
                msisdn1 = requestData2.substring(index + "<MSISDN1>".length(), requestData2.indexOf("</MSISDN1>", index));
                elementMap.put("PRIMARYMSISDN", msisdn1);
                index = requestData2.indexOf("<MSISDN2>");
                msisdn2 = requestData2.substring(index + "<MSISDN2>".length(), requestData2.indexOf("</MSISDN2>", index));
                elementMap.put("MSISDN2", msisdn2);
                index = requestData2.indexOf("<MSISDN3>");
                msisdn3 = requestData2.substring(index + "<MSISDN3>".length(), requestData2.indexOf("</MSISDN3>", index));
                elementMap.put("MSISDN3", msisdn3);
                final ArrayList MSISDNLIST = new ArrayList(3);
                MSISDNLIST.add(msisdn1);
                MSISDNLIST.add(msisdn2);
                MSISDNLIST.add(msisdn3);
                elementMap.put("MSISDNLIST", MSISDNLIST);
            } catch (BTSLBaseException be) {
                p_requestVO.setMessageCode(be.getMessageKey());
                p_requestVO.setMessageArguments(be.getArgs());
                throw be;
            } catch (RuntimeException e) {
                _log.errorTrace(methodName, e);
                p_requestVO.setMessageCode(PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT);
                _log.error(methodName, EXCEPTION + e);
                throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT);
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
            p_requestVO.setLocale(new Locale(defaultLanguage, defaultCountry));
            p_requestVO.setRequestIDStr(type);
            p_requestVO.setType(type);
            p_requestVO.setReqDate(reqDate);
            p_requestVO.setExternalNetworkCode(externalNetworkCode);
            p_requestVO.setCategoryCode(categoryCode);
            p_requestVO.setEmployeeCode(employeeCode);
            p_requestVO.setSenderLoginID(requestLoginId);
            p_requestVO.setPassword(password);
            p_requestVO.setExternalReferenceNum(extRefNum);
            p_requestVO.setRequestLoginId(userLoginId);
            p_requestVO.setRequestMSISDN(userMsisdn);
            p_requestVO.setUserCategory(newExtCode);
            p_requestVO.setRequestMap(elementMap);

            XMLStringValidation.validateExtChannelUserModifyRequest(p_requestVO, type, reqDate, externalNetworkCode, employeeCode, msisdn, requestLoginId, password,
                extRefNum, existingUserMsisdn, existingExtCode, newExtCode, userName, userNamePrefix, msisdn1, shortName, subscriberCode, contactPerson, contactNumber, ssn,
                address1, address2, city, state, country, emailId, webloginId, webPassword, pin, msisdn2, msisdn3);

            /*
             * if(BTSLUtil.isNullString(type)|| BTSLUtil.isNullString(reqDate)
             * || BTSLUtil.isNullString(externalNetworkCode)
             * || ( BTSLUtil.isNullString(employeeCode) &&
             * BTSLUtil.isNullString(msisdn) &&
             * (BTSLUtil.isNullString(requestLoginId) ||
             * BTSLUtil.isNullString(password)))
             * || BTSLUtil.isNullString(extRefNum) ||
             * BTSLUtil.isNullString(existingUserMsisdn)||
             * BTSLUtil.isNullString(newExtCode)
             * || BTSLUtil.isNullString(userName)||
             * BTSLUtil.isNullString(userNamePrefix)||
             * BTSLUtil.isNullString(existingExtCode)
             * || BTSLUtil.isNullString(msisdn1))
             * {
             * _log.error("parseUserModifyRequest","type =  "+type+"  | reqDate = "
             * +reqDate+"  |  externalNetworkCode ="+externalNetworkCode
             * +"  | employeeCode=  "+
             * employeeCode+"  | msisdn = "+msisdn+"  | requestLoginId = "
             * +requestLoginId
             * +"  | extRefNum = "+
             * extRefNum+"  | parentMsisdn =  "+existingUserMsisdn
             * +"  |  userCategory ="+newExtCode
             * +"  | userName =  "+
             * userName+"  | userNamePrefix = "+userNamePrefix
             * +"  | externalCode=   "+externalCode
             * +"  | msisdn1 "+ msisdn1);
             * throw new
             * BTSLBaseException(CLASS_NAME,"parseUserModifyRequest"
             * ,PretupsErrorCodesI.USER_MODIFY_ERROR_MISSING_MANDATORY_FIELD);
             * }
             */

            parsedRequestStr = PretupsI.SERVICE_TYPE_EXT_USER_MODIFY + CHNL_MESSAGE_SEP + type + CHNL_MESSAGE_SEP + reqDate + CHNL_MESSAGE_SEP + externalNetworkCode + CHNL_MESSAGE_SEP + employeeCode + CHNL_MESSAGE_SEP + requestLoginId + CHNL_MESSAGE_SEP + password + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + pin + CHNL_MESSAGE_SEP + extRefNum + CHNL_MESSAGE_SEP + existingUserMsisdn + CHNL_MESSAGE_SEP + existingExtCode + CHNL_MESSAGE_SEP + newExtCode + CHNL_MESSAGE_SEP + userName + CHNL_MESSAGE_SEP + shortName + CHNL_MESSAGE_SEP + userNamePrefix + CHNL_MESSAGE_SEP + subscriberCode + CHNL_MESSAGE_SEP + externalCode + CHNL_MESSAGE_SEP + contactPerson + CHNL_MESSAGE_SEP + contactNumber + CHNL_MESSAGE_SEP + ssn + CHNL_MESSAGE_SEP + address1 + CHNL_MESSAGE_SEP + address2 + CHNL_MESSAGE_SEP + city + CHNL_MESSAGE_SEP + state + CHNL_MESSAGE_SEP + country + CHNL_MESSAGE_SEP + emailId + CHNL_MESSAGE_SEP + webloginId + CHNL_MESSAGE_SEP + webPassword + CHNL_MESSAGE_SEP + msisdn1 + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + msisdn3;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setDecryptedMessage(PretupsI.SERVICE_TYPE_EXT_USER_MODIFY);

        } catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseUserDeleteRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseUserDeleteRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            String reqDate = null;
            String externalNetworkCode = null;
            String categoryCode = null;
            String employeeCode = null;
            String operatorLoginId = null;
            String operatorPassword = null;
            String extRefNum = null;
            String userLoginId = null;
            final String userMsisdn = null;
            String msisdn = null;
            String externalCode = null;
            String remark = null;
            String forceDelete = null;
            final HashMap elementMap = new HashMap();
            try {

                final String[] validateTag = { "<COMMAND>", "</COMMAND>", "<TYPE>", "</TYPE>", "<DATE>", "</DATE>", "<EXTCODE>", "</EXTCODE>", "<CATCODE>", "</CATCODE>", "<EMPCODE>", "</EMPCODE>", "<LOGINID>", "</LOGINID>", "<PASSWORD>", "</PASSWORD>", "<EXTREFNUM>", "</EXTREFNUM>", "<DATA>", "</DATA>" };
                XMLStringValidation.validateTags(requestStr, validateTag);

                index = requestStr.indexOf("<DATE>");
                reqDate = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                reqDate = BTSLDateUtil.getGregorianDateInString(reqDate);
                index = requestStr.indexOf("<EXTCODE>");
                externalCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
                elementMap.put("EXTCODE", externalCode);
                index = requestStr.indexOf("<CATCODE>");
                categoryCode = requestStr.substring(index + "<CATCODE>".length(), requestStr.indexOf("</CATCODE>", index));
                elementMap.put("CATCODE", categoryCode);
                index = requestStr.indexOf("<EMPCODE>");
                employeeCode = requestStr.substring(index + "<EMPCODE>".length(), requestStr.indexOf("</EMPCODE>", index));
                elementMap.put("EMPCODE", employeeCode);
                index = requestStr.indexOf("<LOGINID>");
                operatorLoginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                elementMap.put("LOGINID", operatorLoginId);
                index = requestStr.indexOf("<PASSWORD>");
                operatorPassword = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                elementMap.put("PASSWORD", operatorPassword);
                // 03-MAR-2014
                // index=requestStr.indexOf("<MSISDN>")
                // msisdn =
                // requestStr.substring(index+"<MSISDN>".length(),requestStr.indexOf("</MSISDN>",index))
                // elementMap.put("MSISDN", msisdn)
                // index=requestStr.indexOf("<PIN>")
                // pin =
                // requestStr.substring(index+"<PIN>".length(),requestStr.indexOf("</PIN>",index))
                // elementMap.put("PIN",pin)
                // Ended Here
                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNum = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                elementMap.put("EXTREFNUM", extRefNum);

                index = requestStr.indexOf("<DATA>");
                final String requestData = requestStr.substring(index + "<DATA>".length(), requestStr.indexOf("</DATA>", index));
                
                index = requestData.indexOf("<FORCEDELETE>");
                if(index>0)
                {
                	forceDelete=requestData.substring(index + "<FORCEDELETE>".length(), requestData.indexOf("</FORCEDELETE>", index));
                	elementMap.put("FORCEDELETE", forceDelete);
                	System.out.println("forceDelete: "+forceDelete);
                }
                
                if(requestData.indexOf("<LOGINID>")>0)
                {
                	final String[] validateTag4Data = { "<MSISDN>", "</MSISDN>", "<LOGINID>", "</LOGINID>", "<EXTNWCODE>", "</EXTNWCODE>", "<REMARKS>", "</REMARKS>" };
                	XMLStringValidation.validateTags(requestData, validateTag4Data);
                }
                else if(requestData.indexOf("<USERLOGINID>")>0)
                {
                	final String[] validateTag4Data = { "<MSISDN>", "</MSISDN>", "<USERLOGINID>", "</USERLOGINID>", "<EXTNWCODE>", "</EXTNWCODE>", "<REMARKS>", "</REMARKS>" };
                	XMLStringValidation.validateTags(requestData, validateTag4Data);
                }
                index = requestData.indexOf("<MSISDN>");
                msisdn = requestData.substring(index + "<MSISDN>".length(), requestData.indexOf("</MSISDN>", index));
                elementMap.put("USERMSISDN", msisdn);
                index = requestData.indexOf("<LOGINID>");
                if(index>0){
                	userLoginId = requestData.substring(index + "<LOGINID>".length(), requestData.indexOf("</LOGINID>", index));
                }
                else{
                	index = requestData.indexOf("<USERLOGINID>");
                	userLoginId = requestData.substring(index + "<USERLOGINID>".length(), requestData.indexOf("</USERLOGINID>", index));
                }
                elementMap.put("USERLOGINID", userLoginId);
                index = requestData.indexOf("<EXTNWCODE>");
                externalNetworkCode = requestData.substring(index + "<EXTNWCODE>".length(), requestData.indexOf("</EXTNWCODE>", index));
                elementMap.put("EXTNWCODE", externalNetworkCode);
                index = requestData.indexOf("<REMARKS>");
                remark = requestData.substring(index + "<REMARKS>".length(), requestData.indexOf("</REMARKS>", index));
                elementMap.put("REMARKS", remark);

            } catch (BTSLBaseException be) {
                p_requestVO.setMessageCode(be.getMessageKey());
                p_requestVO.setMessageArguments(be.getArgs());
                throw be;
            } catch (RuntimeException e) {
                // TODO Auto-generated catch block
                _log.errorTrace(methodName, e);
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
            p_requestVO.setSenderLocale(new Locale(defaultLanguage, defaultCountry));
            p_requestVO.setRequestIDStr(type);
            p_requestVO.setLogin(operatorLoginId);
            p_requestVO.setType(type);
            p_requestVO.setReqDate(reqDate);
            p_requestVO.setExternalNetworkCode(externalNetworkCode);
            p_requestVO.setCategoryCode(categoryCode);
            p_requestVO.setEmployeeCode(employeeCode);
            p_requestVO.setLogin(operatorLoginId);
            p_requestVO.setPassword(operatorPassword);
            p_requestVO.setExternalReferenceNum(extRefNum);
            p_requestVO.setRequestLoginId(userLoginId);
            p_requestVO.setRequestMSISDN(userMsisdn);
            p_requestVO.setRequestMap(elementMap);

            XMLStringValidation.validateExtChannelUserDeleteRequest(p_requestVO, type, reqDate, externalNetworkCode, categoryCode, employeeCode, msisdn, operatorLoginId,
                operatorPassword, extRefNum, userLoginId, externalCode, remark);

            /*
             * if(BTSLUtil.isNullString(type)
             * || ( BTSLUtil.isNullString(employeeCode) &&
             * BTSLUtil.isNullString(msisdn) &&
             * (BTSLUtil.isNullString(operatorLoginId) ||
             * BTSLUtil.isNullString(operatorPassword)))
             * || BTSLUtil.isNullString(externalNetworkCode))
             * {
             * throw new
             * BTSLBaseException(CLASS_NAME,"parseUserDeleteRequest"
             * ,
             * PretupsErrorCodesI.CHANGE_PASSWORD_ERROR_MISSING_MANDATORY_FIELD)
             * ;
             * }
             */

            parsedRequestStr = PretupsI.SERVICE_TYPE_EXT_USER_DELETE + CHNL_MESSAGE_SEP + type + CHNL_MESSAGE_SEP + reqDate + CHNL_MESSAGE_SEP + externalCode + CHNL_MESSAGE_SEP + categoryCode + CHNL_MESSAGE_SEP + employeeCode + CHNL_MESSAGE_SEP + operatorLoginId + CHNL_MESSAGE_SEP + operatorPassword + CHNL_MESSAGE_SEP + extRefNum + CHNL_MESSAGE_SEP + userMsisdn + CHNL_MESSAGE_SEP + userLoginId + CHNL_MESSAGE_SEP + externalCode + CHNL_MESSAGE_SEP + remark;
            p_requestVO.setDecryptedMessage(parsedRequestStr);

            p_requestVO.setDecryptedMessage(PretupsI.SERVICE_TYPE_EXT_USER_DELETE);

        } catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_INVALID_REQUEST_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.ERROR_INVALID_REQUEST_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseUserSuspendOrResumeRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseUserSuspendOrResumeRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        final HashMap elementMap = new HashMap();
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            String reqDate = null;
            String externalNetworkCode = null;
            final String categoryCode = null;
            String employeeCode = null;
            String operatorLoginId = null;
            String operatorPassword = null;
            String extRefNum = null;
            String userLoginId = null;
            String userMsisdn = null;
            final String newPassword = null;
            final String confirmNewPassword = null;
            String msisdn = null;
            String pin = null;

            String externalCode = null;
            String action = null;
            try {
                final String[] validateTag = { "<COMMAND>", "</COMMAND>", "<TYPE>", "</TYPE>", "<DATE>", "</DATE>", "<EXTNWCODE>", "</EXTNWCODE>", "<EMPCODE>", "</EMPCODE>", "<LOGINID>", "</LOGINID>", "<PASSWORD>", "</PASSWORD>", "<MSISDN>", "</MSISDN>", "<PIN>", "</PIN>", "<EXTREFNUM>", "</EXTREFNUM>", "<DATA>", "</DATA>" };
                XMLStringValidation.validateTags(requestStr, validateTag);

                index = requestStr.indexOf("<DATE>");
                reqDate = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                reqDate = BTSLDateUtil.getGregorianDateInString(reqDate);
                index = requestStr.indexOf("<EXTNWCODE>");
                externalNetworkCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                elementMap.put("EXTNWCODE", externalNetworkCode);
                index = requestStr.indexOf("<EMPCODE>");
                employeeCode = requestStr.substring(index + "<EMPCODE>".length(), requestStr.indexOf("</EMPCODE>", index));
                elementMap.put("EMPCODE", employeeCode);
                index = requestStr.indexOf("<LOGINID>");
                operatorLoginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                elementMap.put("LOGINID", operatorLoginId);
                index = requestStr.indexOf("<PASSWORD>");
                operatorPassword = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                elementMap.put("PASSWORD", operatorPassword);
                index = requestStr.indexOf("<MSISDN>");
                msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
                elementMap.put("MSISDN", msisdn);
                index = requestStr.indexOf("<PIN>");
                pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
                elementMap.put("PIN", pin);
                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNum = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                elementMap.put("EXTREFNUM", extRefNum);

                index = requestStr.indexOf("<DATA>");
                final String requestData = requestStr.substring(index + "<DATA>".length(), requestStr.indexOf("</DATA>", index));

                final String[] validateTag4Data = { "<USERMSISDN>", "</USERMSISDN>", "<USERLOGINID>", "</USERLOGINID>", "<EXTERNALCODE>", "</EXTERNALCODE>", "<ACTION>", "</ACTION>" };
                XMLStringValidation.validateTags(requestData, validateTag4Data);

                index = requestData.indexOf("<USERMSISDN>");
                userMsisdn = requestData.substring(index + "<USERMSISDN>".length(), requestData.indexOf("</USERMSISDN>", index));
                elementMap.put("USERMSISDN", userMsisdn);
                index = requestData.indexOf("<USERLOGINID>");
                userLoginId = requestData.substring(index + "<USERLOGINID>".length(), requestData.indexOf("</USERLOGINID>", index));
                elementMap.put("USERLOGINID", userLoginId);
                index = requestData.indexOf("<EXTERNALCODE>");
                externalCode = requestData.substring(index + "<EXTERNALCODE>".length(), requestData.indexOf("</EXTERNALCODE>", index));
                elementMap.put("EXTERNALCODE", externalCode);
                index = requestData.indexOf("<ACTION>");
                action = requestData.substring(index + "<ACTION>".length(), requestData.indexOf("</ACTION>", index));
                elementMap.put("ACTION", action);

            } catch (BTSLBaseException be) {
                p_requestVO.setMessageCode(be.getMessageKey());
                p_requestVO.setMessageArguments(be.getArgs());
                throw be;
            } catch (RuntimeException e) {
                // TODO Auto-generated catch block
                _log.errorTrace(methodName, e);
            }

            p_requestVO.setRequestIDStr(type);
            p_requestVO.setLogin(operatorLoginId);
            p_requestVO.setType(type);
            p_requestVO.setReqDate(reqDate);
            p_requestVO.setExternalNetworkCode(externalNetworkCode);
            p_requestVO.setCategoryCode(categoryCode);
            p_requestVO.setEmployeeCode(employeeCode);
            p_requestVO.setLogin(operatorLoginId);
            p_requestVO.setPassword(operatorPassword);
            p_requestVO.setExternalReferenceNum(extRefNum);
            p_requestVO.setRequestLoginId(userLoginId);
            p_requestVO.setRequestMSISDN(userMsisdn);
            p_requestVO.setNewPassword(newPassword);
            p_requestVO.setConfirmNewPassword(confirmNewPassword);
            p_requestVO.setRequestMap(elementMap);

            XMLStringValidation.validateExtChannelUserSuspendResumeRequest(p_requestVO, type, reqDate, externalNetworkCode, categoryCode, employeeCode, msisdn,
                operatorLoginId, operatorPassword, extRefNum, msisdn, userLoginId, externalCode, pin, userMsisdn);
            /*
             * if(BTSLUtil.isNullString(type) ||
             * BTSLUtil.isNullString(externalNetworkCode)
             * || ( BTSLUtil.isNullString(employeeCode) &&
             * BTSLUtil.isNullString(msisdn) &&
             * (BTSLUtil.isNullString(operatorLoginId) ||
             * BTSLUtil.isNullString(operatorPassword)))
             * || BTSLUtil.isNullString(userMsisdn)||
             * BTSLUtil.isNullString(userLoginId)
             * || BTSLUtil.isNullString(externalCode)||
             * BTSLUtil.isNullString(action)){
             * throw new
             * BTSLBaseException(CLASS_NAME,"parseUserDeleteRequest"
             * ,
             * PretupsErrorCodesI.CHANGE_PASSWORD_ERROR_MISSING_MANDATORY_FIELD)
             * 
             * }
             */

            parsedRequestStr = PretupsI.SERVICE_TYPE_EXT_USER_SUSPEND_RESUME + CHNL_MESSAGE_SEP + type + CHNL_MESSAGE_SEP + reqDate + CHNL_MESSAGE_SEP + externalNetworkCode + CHNL_MESSAGE_SEP + employeeCode + CHNL_MESSAGE_SEP + operatorLoginId + CHNL_MESSAGE_SEP + operatorPassword + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + pin + CHNL_MESSAGE_SEP + extRefNum + CHNL_MESSAGE_SEP + userMsisdn + CHNL_MESSAGE_SEP + userLoginId + CHNL_MESSAGE_SEP + externalCode + CHNL_MESSAGE_SEP + action;
            // p_requestVO.setSenderLocale()
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setDecryptedMessage(PretupsI.SERVICE_TYPE_EXT_USER_SUSPEND_RESUME);

        } catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_INVALID_REQUEST_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.ERROR_INVALID_REQUEST_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    
    
    

    public static void generateUserHierarchyResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateUserHierarchyResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            
            
			if (p_requestVO.getResponseMap() != null && p_requestVO.getResponseMap().get("RESPONSE") != null) {
				String response = p_requestVO.getResponseMap().get("RESPONSE").toString();

				sbf.append("<UPWARDHIERARCHY>");

				sbf.append(response);

				sbf.append("</UPWARDHIERARCHY>");
				
				
			} else {

				sbf.append("<UPWARDHIERARCHY>");

				sbf.append("No data found");

				sbf.append("</UPWARDHIERARCHY>");
				
			}
                        
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelCreditTransferResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChannelCreditTransferResponse:" + e
                    .getMessage());
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }
    public static void generateC2cBuyUserResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateC2cBuyUserResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            
            
			if (p_requestVO.getResponseMap() != null && p_requestVO.getResponseMap().get("RESPONSE") != null) {
				String response = p_requestVO.getResponseMap().get("RESPONSE").toString();

				sbf.append("<C2CBUYENQUIRY>");

				sbf.append(response);

				sbf.append("</C2CBUYENQUIRY>");
				
				
			} else {

				sbf.append("<C2CBUYENQUIRY>");

				sbf.append("No data found");

				sbf.append("</C2CBUYENQUIRY>");
				
			}
                        
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelCreditTransferResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChannelCreditTransferResponse:" + e
                    .getMessage());
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void generateC2sServiceDetailsResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateC2sServiceDetailsResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            
            
			if (p_requestVO.getResponseMap() != null && p_requestVO.getResponseMap().get("RESPONSE") != null) {
				String response = p_requestVO.getResponseMap().get("RESPONSE").toString();

				sbf.append("<C2SSERVICEDETAILS>");

				sbf.append(response);

				sbf.append("</C2SSERVICEDETAILS>");
				
				
			} else {

				sbf.append("<C2SSERVICEDETAILS>");

				sbf.append("No data found");

				sbf.append("</C2SSERVICEDETAILS>");
				
			}
                        
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelCreditTransferResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChannelCreditTransferResponse:" + e
                    .getMessage());
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    
    
    public static void generateChannelCreditTransferResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelCreditTransferResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>RCTRFRESP</TYPE>");
            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelCreditTransferResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChannelCreditTransferResponse:" + e
                    .getMessage());
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void generateChannelChangeResponse(RequestVO p_requestVO, String p_type) throws Exception {
        final String methodName = "generateChannelChangeResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>").append(p_type).append("</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateChannelChangeResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChannelChangeResponse:" + e.getMessage());
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /*
     * public static void generateChannelNotificationLanguageResponse(RequestVO
     * p_requestVO) throws Exception
     * {
     * final String methodName = "generateChannelNotificationLanguageResponse";
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Entered p_requestID: "+p_requestVO.getRequestIDStr(
     * ))
     * }
     * String responseStr= null
     * StringBuilder sbf=null
     * try
     * {
     * sbf=new StringBuilder(1024)
     * sbf.append(
     * DOC_TYPE
     * )
     * sbf.append("<TYPE>RCLANGRESP</TYPE>")
     * if(p_requestVO.isSuccessTxn()) {
     * sbf.append("<TXNSTATUS>"+PretupsI.TXN_STATUS_SUCCESS+"</TXNSTATUS>")
     * } else {
     * sbf.append("<TXNSTATUS>"+p_requestVO.getMessageCode()+"</TXNSTATUS>")
     * }
     * sbf.append("</COMMAND>")
     * responseStr = sbf.toString()
     * p_requestVO.setSenderReturnMessage(responseStr)
     * }
     * catch(Exception e)
     * {
     * _log.errorTrace(methodName,e)
     * _log.error(methodName,"Exception e: "+e)
     * p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION)
     * EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI
     * .RAISED,EventLevelI.FATAL,
     * "ExtAPIXMLStringParser[generateChannelNotificationLanguageResponse]"
     * ,PretupsErrorCodesI
     * .XML_ERROR_EXCEPTION,"","","generateChannelNotificationLanguageResponse:"
     * +e.getMessage())
     * }
     * finally
     * {
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Exiting responseStr: "+responseStr)
     * }
     * }
     * }
     */

    /*
     * public static void generateChannelTransferResponse(RequestVO
     * p_requestVO,int p_action) throws Exception
     * {
     * final String methodName = "generateChannelTransferResponse"
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Entered p_requestVO: "+p_requestVO.toString())
     * }
     * String responseStr= null
     * StringBuilder sbf=null
     * try
     * {
     * sbf=new StringBuilder(1024)
     * sbf.append(
     * DOC_TYPE
     * )
     * if(p_action==ParserUtility.ACTION_CHNL_TRANSFER_MESSAGE) {
     * sbf.append("<TYPE>TRFRESP</TYPE>")
     * } else if(p_action==ParserUtility.ACTION_CHNL_RETURN_MESSAGE) {
     * sbf.append("<TYPE>RETRESP</TYPE>")
     * } else if(p_action==ParserUtility.ACTION_CHNL_WITHDRAW_MESSAGE) {
     * sbf.append("<TYPE>WDTHRESP</TYPE>")
     * }
     * 
     * if(p_requestVO.isSuccessTxn()) {
     * sbf.append("<TXNSTATUS>"+PretupsI.TXN_STATUS_SUCCESS+"</TXNSTATUS>")
     * } else {
     * sbf.append("<TXNSTATUS>"+p_requestVO.getMessageCode()+"</TXNSTATUS>")
     * }
     * sbf.append("</COMMAND>")
     * responseStr = sbf.toString()
     * p_requestVO.setSenderReturnMessage(responseStr)
     * }
     * catch(Exception e)
     * {
     * _log.errorTrace(methodName,e)
     * _log.error(methodName,"Exception e: "+e)
     * p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION)
     * EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI
     * .RAISED,EventLevelI.FATAL,
     * "ExtAPIXMLStringParser[generateChannelTransferResponse]"
     * ,PretupsErrorCodesI
     * .XML_ERROR_EXCEPTION,"","","generateChannelTransferResponse:"
     * +e.getMessage())
     * }
     * finally
     * {
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Exiting responseStr: "+responseStr)
     * }
     * }
     * }
     */

    public static void generateChannelPostPaidBillPaymentResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelPostPaidBillPaymentResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>PPBTRFRESP</TYPE>");
            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelPostPaidBillPaymentResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "",
                "generateChannelPostPaidBillPaymentResponse:" + e.getMessage());
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseUserRoleAddOrDeleteRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseUserRoleAddOrDeleteRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));

            String reqDate = null;
            String externalNetworkCode = null;
            String categoryCode = null;
            String employeeCode = null;
            String operatorLoginId = null;
            String operatorPassword = null;
            String extRefNum = null;
            String userLoginId = null;
            String userMsisdn = null;
            final String msisdn = null;
            final String pin = null;
            final String externalCode = null;
            String action = null;
            String roleCode = null;
            final HashMap elementMap = new HashMap();
            try {
                final String[] validateTag = { "<COMMAND>", "</COMMAND>", "<TYPE>", "</TYPE>", "<DATE>", "</DATE>", "<EXTNWCODE>", "</EXTNWCODE>", "<CATCODE>", "</CATCODE>", "<EMPCODE>", "</EMPCODE>", "<LOGINID>", "</LOGINID>", "<PASSWORD>", "</PASSWORD>", "<EXTREFNUM>", "</EXTREFNUM>", "<DATA>", "</DATA>" };
                XMLStringValidation.validateTags(requestStr, validateTag);

                index = requestStr.indexOf("<DATE>");
                reqDate = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                reqDate = BTSLDateUtil.getGregorianDateInString(reqDate);
                index = requestStr.indexOf("<EXTNWCODE>");
                externalNetworkCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                elementMap.put("EXTNWCODE", externalNetworkCode);
                index = requestStr.indexOf("<CATCODE>");
                categoryCode = requestStr.substring(index + "<CATCODE>".length(), requestStr.indexOf("</CATCODE>", index));
                elementMap.put("CATCODE", categoryCode);
                index = requestStr.indexOf("<EMPCODE>");
                employeeCode = requestStr.substring(index + "<EMPCODE>".length(), requestStr.indexOf("</EMPCODE>", index));
                elementMap.put("EMPCODE", employeeCode);
                index = requestStr.indexOf("<LOGINID>");
                operatorLoginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                elementMap.put("LOGINID", operatorLoginId);
                index = requestStr.indexOf("<PASSWORD>");
                operatorPassword = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                elementMap.put("PASSWORD", operatorPassword);
                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNum = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                elementMap.put("EXTREFNUM", extRefNum);

                index = requestStr.indexOf("<DATA>");
                final String requestData = requestStr.substring(index + "<DATA>".length(), requestStr.indexOf("</DATA>", index));

                final String[] validateTag4Data = { "<LOGINID>", "</LOGINID>", "<ROLECODE>", "</ROLECODE>", "<USERMSISDN>", "</USERMSISDN>", "<ACTION>", "</ACTION>" };
                XMLStringValidation.validateTags(requestData, validateTag4Data);

                index = requestData.indexOf("<LOGINID>");
                userLoginId = requestData.substring(index + "<LOGINID>".length(), requestData.indexOf("</LOGINID>", index));
                elementMap.put("USERLOGINID", userLoginId);
                index = requestData.indexOf("<ROLECODE>");
                roleCode = requestData.substring(index + "<ROLECODE>".length(), requestData.indexOf("</ROLECODE>", index));
                elementMap.put("ROLECODE", roleCode);
                index = requestData.indexOf("<USERMSISDN>");
                userMsisdn = requestData.substring(index + "<USERMSISDN>".length(), requestData.indexOf("</USERMSISDN>", index));
                elementMap.put("USERMSISDN", userMsisdn);
                index = requestData.indexOf("<ACTION>");
                action = requestData.substring(index + "<ACTION>".length(), requestData.indexOf("</ACTION>", index));
                elementMap.put("ACTION", action);

            } catch (BTSLBaseException be) {
                p_requestVO.setMessageCode(be.getMessageKey());
                p_requestVO.setMessageArguments(be.getArgs());
                throw be;
            } catch (RuntimeException e) {
                _log.errorTrace(methodName, e);
            }

            p_requestVO.setRequestIDStr(type);
            p_requestVO.setLogin(operatorLoginId);
            p_requestVO.setType(type);
            p_requestVO.setReqDate(reqDate);
            p_requestVO.setExternalNetworkCode(externalNetworkCode);
            p_requestVO.setCategoryCode(categoryCode);
            p_requestVO.setEmployeeCode(employeeCode);
            p_requestVO.setLogin(operatorLoginId);
            p_requestVO.setPassword(operatorPassword);
            p_requestVO.setExternalReferenceNum(extRefNum);
            p_requestVO.setRequestLoginId(userLoginId);
            p_requestVO.setRequestMSISDN(userMsisdn);
            p_requestVO.setRequestMap(elementMap);

            XMLStringValidation.validateExtChannelUserRoleAddOrDeleteRequest(p_requestVO, type, reqDate, externalNetworkCode, categoryCode, employeeCode, msisdn,
                operatorLoginId, operatorPassword, extRefNum, userLoginId, externalCode, pin, action, roleCode, userMsisdn);
            /*
             * if(BTSLUtil.isNullString(type) ||
             * BTSLUtil.isNullString(externalNetworkCode)
             * || ( BTSLUtil.isNullString(employeeCode) &&
             * BTSLUtil.isNullString(msisdn) &&
             * (BTSLUtil.isNullString(operatorLoginId) ||
             * BTSLUtil.isNullString(operatorPassword)))
             * || (BTSLUtil.isNullString(userMsisdn)||
             * BTSLUtil.isNullString(userLoginId))
             * || BTSLUtil.isNullString(roleCode)||
             * BTSLUtil.isNullString(action)){
             * throw new
             * BTSLBaseException(CLASS_NAME,"parseUserDeleteRequest"
             * ,
             * PretupsErrorCodesI.CHANGE_PASSWORD_ERROR_MISSING_MANDATORY_FIELD)
             * 
             * }
             */

            parsedRequestStr = PretupsI.SERVICE_TYPE_EXT_USER_ROLE_ADD_MODIFY + CHNL_MESSAGE_SEP + type + CHNL_MESSAGE_SEP + reqDate + CHNL_MESSAGE_SEP + externalNetworkCode + CHNL_MESSAGE_SEP + categoryCode + CHNL_MESSAGE_SEP + employeeCode + CHNL_MESSAGE_SEP + operatorLoginId + CHNL_MESSAGE_SEP + operatorPassword + CHNL_MESSAGE_SEP + extRefNum + CHNL_MESSAGE_SEP + userLoginId + CHNL_MESSAGE_SEP + roleCode + CHNL_MESSAGE_SEP + userMsisdn + CHNL_MESSAGE_SEP + CHNL_MESSAGE_SEP + action;
            // p_requestVO.setSenderLocale()
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setDecryptedMessage(PretupsI.SERVICE_TYPE_EXT_USER_ROLE_ADD_MODIFY);

        } catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_INVALID_REQUEST_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.ERROR_INVALID_REQUEST_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    // Added By Diwakar on 20-JAN-2014 for ROBI
    /**
     * @Description : This method parse change passowrd request from XML String
     *              and fromating into white space seperated String
     * @author : diwakar
     * @date : 20-JAN-2014
     * @param p_requestVO
     *            RequestVO
     */
    public static void parseChangePasswordRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChangePasswordRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;

        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            String reqDate = null;
            String externalNetworkCode = null;
            String categoryCode = null;
            String employeeCode = null;
            String requestLoginId = null;
            String password = null;
            String extRefNum = null;
            String userLoginId = null;
            String userMsisdn = null;
            String newPassword = null;
            String confirmNewPassword = null;
            final HashMap elementMap = new HashMap();
            try {
                final String[] validateTag = { "<COMMAND>", "</COMMAND>", "<TYPE>", "</TYPE>", "<DATE>", "</DATE>", "<EXTNWCODE>", "</EXTNWCODE>", "<CATCODE>", "</CATCODE>", "<EMPCODE>", "</EMPCODE>", "<LOGINID>", "</LOGINID>", "<PASSWORD>", "</PASSWORD>", "<EXTREFNUM>", "</EXTREFNUM>", "<DATA>", "</DATA>" };
                XMLStringValidation.validateTags(requestStr, validateTag);

                index = requestStr.indexOf("<DATE>");
                reqDate = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                reqDate = BTSLDateUtil.getGregorianDateInString(reqDate);
                elementMap.put("DATE", reqDate);
                index = requestStr.indexOf("<EXTNWCODE>");
                externalNetworkCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                elementMap.put("EXTNWCODE", externalNetworkCode);
                index = requestStr.indexOf("<CATCODE>");
                categoryCode = requestStr.substring(index + "<CATCODE>".length(), requestStr.indexOf("</CATCODE>", index));
                elementMap.put("CATCODE", categoryCode);
                index = requestStr.indexOf("<EMPCODE>");
                employeeCode = requestStr.substring(index + "<EMPCODE>".length(), requestStr.indexOf("</EMPCODE>", index));
                elementMap.put("EMPCODE", employeeCode);
                index = requestStr.indexOf("<LOGINID>");
                requestLoginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                elementMap.put("LOGINID", requestLoginId);
                index = requestStr.indexOf("<PASSWORD>");
                password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                elementMap.put("PASSWORD", password);
                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNum = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                elementMap.put("EXTREFNUM", extRefNum);
                final String requestData = requestStr.substring(index + "<DATA>".length(), requestStr.indexOf("</DATA>", index));

                final String[] validateTag4Data = { "<LOGINID>", "</LOGINID>", "<USERMSISDN>", "</USERMSISDN>", "<NEWPASSWD>", "</NEWPASSWD>", "<CONFIRMPASSWD>", "</CONFIRMPASSWD>" };
                XMLStringValidation.validateTags(requestData, validateTag4Data);

                index = requestData.indexOf("<LOGINID>");
                userLoginId = requestData.substring(index + "<LOGINID>".length(), requestData.indexOf("</LOGINID>", index));
                elementMap.put("USERLOGINID", userLoginId);
                index = requestData.indexOf("<USERMSISDN>");
                userMsisdn = requestData.substring(index + "<USERMSISDN>".length(), requestData.indexOf("</USERMSISDN>", index));
                elementMap.put("USERMSISDN", userMsisdn);
                index = requestData.indexOf("<NEWPASSWD>");
                newPassword = requestData.substring(index + "<NEWPASSWD>".length(), requestData.indexOf("</NEWPASSWD>", index));
                elementMap.put("NEWPASSWD", newPassword);
                index = requestData.indexOf("<CONFIRMPASSWD>");
                confirmNewPassword = requestData.substring(index + "<CONFIRMPASSWD>".length(), requestData.indexOf("</CONFIRMPASSWD>", index));
            } catch (RuntimeException e) {
                // TODO Auto-generated catch block
                _log.errorTrace(methodName, e);
            }

            /*
             * if(BTSLUtil.isNullString(type) ||
             * BTSLUtil.isNullString(externalNetworkCode) ||
             * BTSLUtil.isNullString(categoryCode) ||
             * BTSLUtil.isNullString(employeeCode)
             * || BTSLUtil.isNullString(requestLoginId) ||
             * BTSLUtil.isNullString(password) ||
             * (BTSLUtil.isNullString(userLoginId) &&
             * BTSLUtil.isNullString(userMsisdn))
             * ||BTSLUtil.isNullString(newPassword)
             * ||BTSLUtil.isNullString(confirmNewPassword))
             * {
             * throw new BTSLBaseException(CLASS_NAME,
             * "parseChangePasswordRequest"
             * ,PretupsErrorCodesI.CHANGE_PASSWORD_ERROR_MISSING_MANDATORY_FIELD
             * )
             * }
             */
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
            p_requestVO.setLocale(new Locale(defaultLanguage, defaultCountry));
            p_requestVO.setRequestIDStr(type);
            p_requestVO.setType(type);
            p_requestVO.setReqDate(reqDate);
            p_requestVO.setExternalNetworkCode(externalNetworkCode);
            p_requestVO.setCategoryCode(categoryCode);
            p_requestVO.setEmployeeCode(employeeCode);
            p_requestVO.setSenderLoginID(requestLoginId);
            p_requestVO.setPassword(password);
            p_requestVO.setExternalReferenceNum(extRefNum);
            p_requestVO.setRequestLoginId(userLoginId);
            p_requestVO.setRequestMSISDN(userMsisdn);
            p_requestVO.setRequestMap(elementMap);

            XMLStringValidation.validateExtChannelUserChangePasswordRequest(p_requestVO, type, reqDate, externalNetworkCode, categoryCode, employeeCode, requestLoginId,
                password, extRefNum, userLoginId, userMsisdn, newPassword, confirmNewPassword);

            parsedRequestStr = PretupsI.SERVICE_TYPE_EXT_CHANGE_PASSWORD + CHNL_MESSAGE_SEP + type + CHNL_MESSAGE_SEP + reqDate + CHNL_MESSAGE_SEP + externalNetworkCode + CHNL_MESSAGE_SEP + categoryCode + CHNL_MESSAGE_SEP + employeeCode + CHNL_MESSAGE_SEP + requestLoginId + CHNL_MESSAGE_SEP + password + CHNL_MESSAGE_SEP + extRefNum + CHNL_MESSAGE_SEP + userLoginId + CHNL_MESSAGE_SEP + userMsisdn + CHNL_MESSAGE_SEP + newPassword + CHNL_MESSAGE_SEP + confirmNewPassword;

            p_requestVO.setDecryptedMessage(parsedRequestStr);
        } catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_INVALID_REQUEST_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.ERROR_INVALID_REQUEST_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * This method parse MNP Upload Request from XML String to hashmap
     * 
     * @param p_requestVO
     *            RequestVO
     */
    public static void parseMNPUploadRequest(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseMNPUploadRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        try {
            parseCommonXMLRequestForCCE(p_requestVO);
            HashMap requestMap = null;
            requestMap = p_requestVO.getRequestMap();
            final String requestStr = (String) p_requestVO.getRequestMap().get("DATA");
            int index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            // requestMap.put("MSISDN",msisdn)
            // Changed on 21-02-2104
            requestMap.put("USERMSISDN", msisdn);
            // Ended Here
            index = requestStr.indexOf("<SUBSTYPE>");
            final String subsType = requestStr.substring(index + "<SUBSTYPE>".length(), requestStr.indexOf("</SUBSTYPE>", index));
            requestMap.put("SUBSTYPE", subsType);
            index = requestStr.indexOf("<PORTTYPE>");
            final String action = requestStr.substring(index + "<PORTTYPE>".length(), requestStr.indexOf("</PORTTYPE>", index));
            requestMap.put("PORTTYPE", action);
            p_requestVO.setRequestMap(requestMap);
            // Diwakar on21-02-2014
            p_requestVO.setExternalNetworkCode(p_requestVO.getRequestMap().get("EXTNWCODE").toString());
            p_requestVO.setRequestMSISDN(p_requestVO.getRequestMap().get("USERMSISDN").toString());
            final String parsedRequestStr = PretupsI.SERVICE_TYPE_EXT_MNP_UPLOAD + CHNL_MESSAGE_SEP + p_requestVO.getRequestMap().get("USERMSISDN").toString() + CHNL_MESSAGE_SEP + p_requestVO
                .getRequestMap().get("SUBSTYPE").toString() + CHNL_MESSAGE_SEP + p_requestVO.getRequestMap().get("PORTTYPE").toString();
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            // Ended Here

            // Added By Diwakar on 03-MAR-2014
            XMLStringValidation.validateMNPUploadRequest(p_requestVO, p_requestVO.getRequestMap().get("TYPE").toString(), p_requestVO.getRequestMap().get("DATE").toString(),
                p_requestVO.getRequestMap().get("EXTNWCODE").toString(), p_requestVO.getRequestMap().get("CATCODE").toString(), p_requestVO.getRequestMap().get("LOGINID")
                    .toString(), p_requestVO.getRequestMap().get("PASSWORD").toString(), p_requestVO.getRequestMap().get("EXTREFNUM").toString(), msisdn, subsType, action,
                p_requestVO.getRequestMap().get("EMPCODE").toString());// Updated
            // on
            // 11-MAR-2014
            // as
            // EMPCODE
            // was
            // missing
            // Ended Here
        }
        // Added By Diwakar on 11-MAR-2014
        catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        }
        // ENded Here
        catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[parseMNPUploadRequest]",
                PretupsErrorCodesI.XML_ERROR_INVALIDMESSAGEFORMAT, "", "", "parseMNPUploadRequest:" + e.getMessage());
            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.XML_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void parseMSISDNAssociationWithICCIDRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseMSISDNAssociationWithICCIDRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));

            String reqDate = null;
            String externalNetworkCode = null;
            String categoryCode = null;
            String employeeCode = null;
            String operatorLoginId = null;
            String operatorPassword = null;
            String extRefNum = null;
            String iccid = null;
            String userMsisdn = null;
            final String msisdn = null;
            final String externalCode = null;
            final String action = null;
            String iccidConfirm = null;
            final HashMap elementMap = new HashMap();
            try {
                final String[] validateTag = { "<COMMAND>", "</COMMAND>", "<TYPE>", "</TYPE>", "<DATE>", "</DATE>", "<EXTNWCODE>", "</EXTNWCODE>", "<CATCODE>", "</CATCODE>", "<EMPCODE>", "</EMPCODE>", "<LOGINID>", "</LOGINID>", "<PASSWORD>", "</PASSWORD>", "<EXTREFNUM>", "</EXTREFNUM>", "<DATA>", "</DATA>" };
                XMLStringValidation.validateTags(requestStr, validateTag);

                index = requestStr.indexOf("<DATE>");
                reqDate = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
                reqDate = BTSLDateUtil.getGregorianDateInString(reqDate);
                index = requestStr.indexOf("<EXTNWCODE>");
                externalNetworkCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                elementMap.put("EXTNWCODE", externalNetworkCode);
                index = requestStr.indexOf("<CATCODE>");
                categoryCode = requestStr.substring(index + "<CATCODE>".length(), requestStr.indexOf("</CATCODE>", index));
                elementMap.put("CATCODE", categoryCode);
                index = requestStr.indexOf("<EMPCODE>");
                employeeCode = requestStr.substring(index + "<EMPCODE>".length(), requestStr.indexOf("</EMPCODE>", index));
                elementMap.put("EMPCODE", employeeCode);
                index = requestStr.indexOf("<LOGINID>");
                operatorLoginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                elementMap.put("LOGINID", operatorLoginId);
                index = requestStr.indexOf("<PASSWORD>");
                operatorPassword = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                elementMap.put("PASSWORD", operatorPassword);
                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNum = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                elementMap.put("EXTREFNUM", extRefNum);

                index = requestStr.indexOf("<DATA>");
                final String requestData = requestStr.substring(index + "<DATA>".length(), requestStr.indexOf("</DATA>", index));

                final String[] validateTag4Data = { "<ICCID>", "</ICCID>", "<MSISDN>", "</MSISDN>" };
                XMLStringValidation.validateTags(requestData, validateTag4Data);

                index = requestData.indexOf("<ICCID>");
                iccid = requestData.substring(index + "<ICCID>".length(), requestData.indexOf("</ICCID>", index));
                elementMap.put("ICCID", iccid);
                iccidConfirm=iccid;
                elementMap.put("ICCIDCONFIRM", iccidConfirm);
                index = requestData.indexOf("<MSISDN>");
                userMsisdn = requestData.substring(index + "<MSISDN>".length(), requestData.indexOf("</MSISDN>", index));
                elementMap.put("USERMSISDN", userMsisdn);

            } catch (BTSLBaseException be) {
                p_requestVO.setMessageCode(be.getMessageKey());
                p_requestVO.setMessageArguments(be.getArgs());
                throw be;
            } catch (RuntimeException e) {
                _log.errorTrace(methodName, e);
            }

            p_requestVO.setRequestIDStr(type);
            p_requestVO.setLogin(operatorLoginId);
            p_requestVO.setType(type);
            p_requestVO.setReqDate(reqDate);
            p_requestVO.setExternalNetworkCode(externalNetworkCode);
            p_requestVO.setCategoryCode(categoryCode);
            p_requestVO.setEmployeeCode(employeeCode);
            p_requestVO.setLogin(operatorLoginId);
            p_requestVO.setPassword(operatorPassword);
            p_requestVO.setExternalReferenceNum(extRefNum);
            p_requestVO.setRequestLoginId(iccid);
            p_requestVO.setRequestMSISDN(userMsisdn);
            p_requestVO.setRequestMap(elementMap);

            XMLStringValidation.validateExtChannelUserMSISDNAssociationWithICCIDRequest(p_requestVO, type, reqDate, externalNetworkCode, categoryCode, employeeCode, msisdn,
                operatorLoginId, operatorPassword, extRefNum, iccid, externalCode, iccidConfirm, userMsisdn);
            /*
             * if(BTSLUtil.isNullString(type) ||
             * BTSLUtil.isNullString(externalNetworkCode)
             * || ( BTSLUtil.isNullString(employeeCode) &&
             * BTSLUtil.isNullString(msisdn) &&
             * (BTSLUtil.isNullString(operatorLoginId) ||
             * BTSLUtil.isNullString(operatorPassword)))
             * || (BTSLUtil.isNullString(userMsisdn)||
             * BTSLUtil.isNullString(userLoginId))
             * || BTSLUtil.isNullString(roleCode)||
             * BTSLUtil.isNullString(action)){
             * throw new
             * BTSLBaseException(CLASS_NAME,"parseUserDeleteRequest"
             * ,
             * PretupsErrorCodesI.CHANGE_PASSWORD_ERROR_MISSING_MANDATORY_FIELD)
             * 
             * }
             */

            parsedRequestStr = PretupsI.SERVICE_TYPE_EXT_ICCID_MSISDN_MAP + CHNL_MESSAGE_SEP + type + CHNL_MESSAGE_SEP + reqDate + CHNL_MESSAGE_SEP + externalNetworkCode + CHNL_MESSAGE_SEP + categoryCode + CHNL_MESSAGE_SEP + employeeCode + CHNL_MESSAGE_SEP + operatorLoginId + CHNL_MESSAGE_SEP + operatorPassword + CHNL_MESSAGE_SEP + extRefNum + CHNL_MESSAGE_SEP + iccid + CHNL_MESSAGE_SEP + iccidConfirm + CHNL_MESSAGE_SEP + userMsisdn + CHNL_MESSAGE_SEP + CHNL_MESSAGE_SEP + action;
            // p_requestVO.setSenderLocale()
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setDecryptedMessage(PretupsI.SERVICE_TYPE_EXT_ICCID_MSISDN_MAP);

        } catch (BTSLBaseException be) {
            p_requestVO.setMessageCode(be.getMessageKey());
            p_requestVO.setMessageArguments(be.getArgs());
            throw be;
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_INVALID_REQUEST_FORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(CLASS_NAME, "parseUserRoleAddOrDeleteRequest", PretupsErrorCodesI.ERROR_INVALID_REQUEST_FORMAT);
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    public static void generateChannelO2CAPIResponse(RequestVO p_requestVO, String p_type) throws Exception {
        final String methodName = "generateChannelO2CAPIResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        Boolean channelTransfersInfoReq = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CHANNEL_TRANSFERS_INFO_REQUIRED);
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>").append(p_type).append("</TYPE>");
            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTTXNNUMBER>").append(p_requestVO.getRequestMap().get("EXTTXNNUMBER")).append("</EXTTXNNUMBER>");
            } else {
                sbf.append("<EXTTXNNUMBER></EXTTXNNUMBER>");
            }
            if(channelTransfersInfoReq){
            	if(p_requestVO.getRequestMap()!=null)
            	{
            		sbf.append("<PREBAL>"+(p_requestVO.getRequestMap().get("PREBAL")!=null?p_requestVO.getRequestMap().get("PREBAL"):"")+"</PREBAL>");
            		sbf.append("<POSTBAL>"+(p_requestVO.getRequestMap().get("POSTBAL")!=null?p_requestVO.getRequestMap().get("POSTBAL"):"")+"</POSTBAL>");
            	}
            	else
            	{
            		sbf.append("<PREBAL></PREBAL>");
            		sbf.append("<POSTBAL></POSTBAL>");
            	}
            		
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateChannelO2CAPIResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChannelO2CAPIResponse:" + e.getMessage());
        } finally {
        	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
        }
    }

    /**
     * To generate Recharge Status Response for External interface
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void generateChannelExtRechargeStatusResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelExtRechargeStatusResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            String reqStatus = "";
            String transactionId = "";
            if (p_requestVO.isSuccessTxn() && p_requestVO.getValueObject() != null) {

                reqStatus = ((C2STransferVO) p_requestVO.getValueObject()).getTransferStatus();
                transactionId = ((C2STransferVO) p_requestVO.getValueObject()).getTransferID();
            }
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXRCSTATRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateSystem)).append("</DATE>");
            

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (BTSLUtil.isNullString(transactionId)) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(transactionId).append("</TXNID>");
            }

            sbf.append("<REQSTATUS>").append(reqStatus).append("</REQSTATUS>");
            if (p_requestVO.getMessageArguments() == null) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(),p_requestVO.getMessageCode(),null)).append("</MESSAGE>");
            } else {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelExtRechargeStatusResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "",
                "generateChannelExtRechargeStatusResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static String getMessage(Locale locale, String key, String[] p_args) {
        final String methodName = "getMessage";
        StringBuilder loggerValue= new StringBuilder();
        if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append("Entered: p_requestVO=");
        	loggerValue.append(key.toString());
        	loggerValue.append(" , p_args=");
        	loggerValue.append(Arrays.toString(p_args));
        	 _log.debug(methodName, loggerValue);
        }
        String message = BTSLUtil.getMessage(locale, key, p_args);
        if ( _log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append("message=");
        	loggerValue.append(message);
        	 _log.debug(methodName, loggerValue);
        }
        try {
        	String DEFAULT_LANGUAGE = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
        	String DEFAULT_COUNTRY = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
        	if(locale==null)
				locale = new Locale(DEFAULT_LANGUAGE,DEFAULT_COUNTRY);
            final LocaleMasterVO localeMasterVO = LocaleMasterCache.getLocaleDetailsFromlocale(locale);
            if (message.indexOf("mclass^") == 0) {
                final int colonIndex = message.indexOf(":");
                final String messageClassPID = message.substring(0, colonIndex);
                final String[] messageClassPIDArray = messageClassPID.split("&");
                final String messageClass = messageClassPIDArray[0].split("\\^")[1];
                final String pid = messageClassPIDArray[1].split("\\^")[1];
                message = message.substring(colonIndex + 1);
                int endIndexForMessageCode;
                String messageCode = null;
                if ("ar".equals(localeMasterVO.getLanguage())) {
                    endIndexForMessageCode = message.indexOf("%00%3A");
                    if (endIndexForMessageCode != -1) {
                        messageCode = URLDecoder.decode(message.substring(0, endIndexForMessageCode), "UTF16");
                        // message=message.substring(endIndexForMessageCode+1)
                        message = message.substring(endIndexForMessageCode);
                    }
                } else {
                    endIndexForMessageCode = message.indexOf(":");
                    if (endIndexForMessageCode != -1) {
                        messageCode = message.substring(0, endIndexForMessageCode);
                        message = message.substring(endIndexForMessageCode + 1);
                    }
                }
                /*
                 * Code killed by Avinash: to remove encoding in case of XML
                 * response.
                 */
                /*
                 * if("ar".equals(locale.getLanguage()) &&
                 * !message.startsWith("%"))
                 * message=BTSLUtil.encodeSpecial(message,true,localeMasterVO.
                 * getEncoding())
                 * else if(!"ar".equals(locale.getLanguage()))
                 * message=URLEncoder.encode(message,localeMasterVO.getEncoding()
                 * )
                 */
            }
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            _log.error(methodName, EXCEPTION + e);
        }
        return message;
    }
    
    public static void generateVoucherProfileModificationResponse(RequestVO p_requestVO, String p_type) throws Exception {
        final String methodName = "generateVoucherProfileModificationResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert

            sbf = new StringBuilder(1024);
            String isDoctypeRequired="Y";
			isDoctypeRequired = Constants.getProperty("DOCTYPE_COMMAND_IN_RESPONSE_REQUIRED");
			if(BTSLUtil.isNullString(isDoctypeRequired)) {
				isDoctypeRequired="Y";
			}
			if("Y".equalsIgnoreCase(isDoctypeRequired)){
				sbf.append(DOC_TYPE);
			}else {
				sbf.append("<?xml version=\"1.0\"?><COMMAND>");
			}
            sbf.append("<TYPE>").append(p_type).append("</TYPE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }
            String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");
            if(!p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.GATEWAY_TYPE_USSD))
			{
	            if (p_requestVO.getRequestMap() != null) {
	                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
	            } else {
	                sbf.append("<EXTREFNUM></EXTREFNUM>");
	            }

			}

			if(BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
				sbf.append("<TXNID></TXNID>");
			} else {
				sbf.append("<TXNID>"+p_requestVO.getTransactionID()+"</TXNID>");
			}

            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
                if ("RCREVRESP".equals(p_type)) {
                    sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.C2S_SENDER_SUCCESS_PRE_REVERSAL, p_requestVO.getMessageArguments())).append("</MESSAGE>");
                } else if ("EXDTHTRFRESP".equals(p_type)) {
                    sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.DTH_SENDER_SUCCESS, p_requestVO.getMessageArguments())).append("</MESSAGE>");
                } else if ("EXVOUPRFMODRESP".equals(p_type)) {
                    sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode() , p_requestVO.getMessageArguments())).append("</MESSAGE>");
                } else {
                    sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.C2S_SENDER_SUCCESS, p_requestVO.getMessageArguments())).append("</MESSAGE>");
                }
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateC2STransferResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateC2STransferResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateC2STransferResponse(RequestVO p_requestVO, String p_type) throws Exception {
        final String methodName = "generateC2STransferResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String EXTERNAL_DATE_FORMAT = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert

            sbf = new StringBuilder(1024);
            String isDoctypeRequired="Y";
			isDoctypeRequired = Constants.getProperty("DOCTYPE_COMMAND_IN_RESPONSE_REQUIRED");
			if(BTSLUtil.isNullString(isDoctypeRequired)) {
				isDoctypeRequired="Y";
			}
			if("Y".equalsIgnoreCase(isDoctypeRequired)){
				sbf.append(DOC_TYPE);
			}else {
				sbf.append("<?xml version=\"1.0\"?><COMMAND>");
			}
            sbf.append("<TYPE>").append(p_type).append("</TYPE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), EXTERNAL_DATE_FORMAT)).append("</DATE>");
            if(!p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.GATEWAY_TYPE_USSD))
			{
	            if (p_requestVO.getRequestMap() != null) {
	                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
	            } else {
	                sbf.append("<EXTREFNUM></EXTREFNUM>");
	            }

			}

			if(BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
				sbf.append("<TXNID></TXNID>");
			} else {
				sbf.append("<TXNID>"+p_requestVO.getTransactionID()+"</TXNID>");
			}
            /*
             * if(p_requestVO.getMessageArguments()==null &&
             * !p_requestVO.isSuccessTxn())
             * sbf.append("<MESSAGE>"+p_requestVO.getMessageCode()+"</MESSAGE>");
             * 
             * if (!p_requestVO.isSuccessTxn()) {
             * sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(),
             * p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())
             *).append("</MESSAGE>");
             * } else {
             * sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(),
             * PretupsErrorCodesI.C2S_SENDER_SUCCESS,
             * p_requestVO.getMessageArguments())).append("</MESSAGE>");
             * }
             */

            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
                if ("RCREVRESP".equals(p_type)) {
                    sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.C2S_SENDER_SUCCESS_PRE_REVERSAL, p_requestVO.getMessageArguments())).append("</MESSAGE>");
                } else if ("EXDTHTRFRESP".equals(p_type)) {
                    sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.DTH_SENDER_SUCCESS, p_requestVO.getMessageArguments())).append("</MESSAGE>");
                } else {
                    sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.C2S_SENDER_SUCCESS, p_requestVO.getMessageArguments())).append("</MESSAGE>");
                }
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateC2STransferResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateC2STransferResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }
    
    /**
     * this method construct Daily Self/Child transfer Status in XML format from
     * requestVO
     * 
     * @param p_requestVO
     * @param p_type
     * @return responseStr java.lang.String
     */
    public static void generateDSRResponse(RequestVO p_requestVO, String p_type) throws Exception {
        final String methodName = "ExtAPIXMLStringParser[generateDSRResponse()]";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String channelTransfersInfoReq = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
        	
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);

            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>").append(p_type).append("</TYPE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), channelTransfersInfoReq)).append("</DATE>");
            if(!p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.GATEWAY_TYPE_USSD))
			{
	            if (p_requestVO.getRequestMap() != null) {
	                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
	            } else {
	                sbf.append("<EXTREFNUM></EXTREFNUM>");
	            }

			}
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            
            final HashMap requestHashMap = p_requestVO.getRequestMap();
            
            if (requestHashMap != null) {
            	ArrayList<UserTransferEnquiryVO> userTransferEnquiryVOList = (ArrayList) requestHashMap.get("TRANSFER_ENQUIRY_LIST");
                
                if(userTransferEnquiryVOList!=null && !userTransferEnquiryVOList.isEmpty()) {
                	sbf.append("<SERVICEDETAILS>");
                	for (UserTransferEnquiryVO obj : userTransferEnquiryVOList) {
                		sbf.append("<SERVICEDETAIL>");
                		sbf.append("<SERVICE_TYPE>"+obj.getServiceType()+"</SERVICE_TYPE>");
                		sbf.append("<TOTAL_COUNT>"+obj.getTotalCount()+"</TOTAL_COUNT>");
                		sbf.append("<SUCCESS_COUNT>"+obj.getSuccessCount()+"</SUCCESS_COUNT>");
                		sbf.append("<AMBIGUOUS_COUNT>"+obj.getAmbiguousCount()+"</AMBIGUOUS_COUNT>");
                		sbf.append("<UNDER_PROCESS_COUNT>"+obj.getUnderProcessCount()+"</UNDER_PROCESS_COUNT>");
                		sbf.append("<FAIL_COUNT>"+obj.getFailCount()+"</FAIL_COUNT>");
                		sbf.append("</SERVICEDETAIL>");
                	}
                	sbf.append("</SERVICEDETAILS>");
                }
                if(requestHashMap.get("TOTAL_CHILD")!=null) {
                	sbf.append("<TOTAL_CHILD>"+requestHashMap.get("TOTAL_CHILD")+"</TOTAL_CHILD>");
                }
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, methodName,
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateDSRResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }
    
    /**
     * this method construct Daily Self/Child Stock balance in XML format from
     * requestVO
     * 
     * @param p_requestVO
     * @param p_type
     * @return responseStr java.lang.String
     */
    public static void generateStockBalanceResponse(RequestVO p_requestVO, String p_type) throws Exception {
        final String methodName = "ExtAPIXMLStringParser[generateStockBalanceResponse()]";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String channelTransfersInfoReq = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
        	
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);

            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>").append(p_type).append("</TYPE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), channelTransfersInfoReq)).append("</DATE>");
            if(!p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.GATEWAY_TYPE_USSD))
			{
	            if (p_requestVO.getRequestMap() != null) {
	                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
	            } else {
	                sbf.append("<EXTREFNUM></EXTREFNUM>");
	            }

			}
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            
            final HashMap requestHashMap = p_requestVO.getRequestMap();
            
            if (requestHashMap != null) {
            	ArrayList<UserBalancesVO> userBalanceList = (ArrayList) requestHashMap.get("USER_BALANCE_LIST");
            	
                if(userBalanceList!=null && !userBalanceList.isEmpty()) {
                	sbf.append("<STOCKS>");
                	for (UserBalancesVO ubalanceVO : userBalanceList) {
                		sbf.append("<STOCK>");
                		sbf.append("<PRODUCT_CODE>"+ubalanceVO.getProductCode()+"</PRODUCT_CODE>");
                		sbf.append("<CURRENT_BALANCE>"+ubalanceVO.getBalance()+"</CURRENT_BALANCE>");
                		sbf.append("<OPENING_BALANCE>"+ubalanceVO.getOpeningBalance()+"</OPENING_BALANCE>");
                		sbf.append("<TOTAL_STOCK_HIERARCHY>"+ubalanceVO.getTotalHierarchyBalance()+"</TOTAL_STOCK_HIERARCHY>");
                		sbf.append("<TOTAL_SUM_STOCK_IMD_CHILD>"+ubalanceVO.getTotalChildrenBalance()+"</TOTAL_SUM_STOCK_IMD_CHILD>");
                		sbf.append("</STOCK>");
                	}
                	sbf.append("</STOCKS>");
                }
            if(requestHashMap.get("TOTAL_CHILD")!=null) {
            	sbf.append("<TOTAL_CHILD>"+requestHashMap.get("TOTAL_CHILD")+"</TOTAL_CHILD>");
            }
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, methodName,
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateStockBalanceResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    // added by ranjana for c2s enquiry
    /**
     * this method construct credit transfer response in XML format from
     * requestVO
     * 
     * @param p_requestVO
     *            RequestVO
     * @return responseStr java.lang.String
     */
    public static void generateC2SEnquiryResponse(RequestVO p_requestVO) throws Exception {
    	final String methodName = "generateC2SEnquiryResponse";
    	 StringBuilder loggerValue= new StringBuilder();
         if (_log.isDebugEnabled()) {
         	loggerValue.setLength(0);
         	loggerValue.append("Entered: p_requestVO=");
         	loggerValue.append(p_requestVO.toString());
         	_log.debug(methodName, loggerValue);
         }
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>EXTSYSENQRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            if (p_requestVO.isSlab()) {
                sbf.append("<SLABAMT>").append(p_requestVO.getSlabAmount()).append("</SLABAMT>");
            } else {
                sbf.append("<SLABAMT></SLABAMT>");
            }
            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTTXNNUMBER>").append(p_requestVO.getRequestMap().get("EXTTXNNUMBER")).append("</EXTTXNNUMBER>");
            } else {
                sbf.append("<EXTTXNNUMBER></EXTTXNNUMBER>");
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
        	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateC2SEnquiryResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateC2SEnquiryResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * To generate Recharge Status Response for External interface
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void generateChannelExtPostRechargeStatusResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelExtPostRechargeStatusResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            String reqStatus = "";
            if (p_requestVO.isSuccessTxn() && p_requestVO.getValueObject() != null) {

                reqStatus = ((C2STransferVO) p_requestVO.getValueObject()).getTransferStatus();
            }
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXPPBSTATRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateSystem)).append("</DATE>");
            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }

            sbf.append("<REQSTATUS>").append(reqStatus).append("</REQSTATUS>");
            if (p_requestVO.getMessageArguments() == null) {
                sbf.append("<MESSAGE>").append(p_requestVO.getMessageCode()).append("</MESSAGE>");
            } else {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelExtPostRechargeStatusResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "",
                "generateChannelExtPostRechargeStatusResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * To generate Gift Recharge Response for External interface
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void generateExtGiftRechargeResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtGiftRechargeResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String channelTransfersInfoReq = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXGFTRCRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), channelTransfersInfoReq)).append("</DATE>");
            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }

            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
                sbf.append("<MESSAGE></MESSAGE>");
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_EXCEPTION_GIFTRECHARGE);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtGiftRechargeResponse]", PretupsErrorCodesI.C2S_ERROR_EXCEPTION_GIFTRECHARGE, "", "", "generateExtGiftRechargeResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * Response sent to External system for the channel user balance enquiry
     * request
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void generateExtChannelUserBalanceResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtChannelUserBalanceResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String channelTransfersInfoReq = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXUSRBALRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), channelTransfersInfoReq)).append("</DATE>");

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (p_requestVO.isSuccessTxn()) {
                final ArrayList arrayList = (ArrayList) p_requestVO.getValueObject();
                if (arrayList != null) {
                    UserBalancesVO userBalancesVO = null;
                    final int listSize = arrayList.size();
                    for (int i = 0; i < listSize; i++) {
                        userBalancesVO = (UserBalancesVO) arrayList.get(i);
                        sbf.append("<RECORD>");
                        sbf.append("<PRODUCTCODE>").append(userBalancesVO.getProductShortCode()).append("</PRODUCTCODE>");
                        sbf.append("<PRODUCTSHORTNAME>").append(userBalancesVO.getProductShortName()).append("</PRODUCTSHORTNAME>");
                        sbf.append("<BALANCE>").append(userBalancesVO.getBalanceStr()).append("</BALANCE>");
                        sbf.append("</RECORD>");
                    }
                } else {
                    sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
                }
            } else {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
        	
            String smsFlag = Constants.getProperty("SMS_EXTCHNLUSERBAL_RES_REQD");
			if(!BTSLUtil.isNullString(smsFlag) && smsFlag.equalsIgnoreCase("Y")) {
				p_requestVO.setSenderMessageRequired(true);
			} else {
				p_requestVO.setSenderMessageRequired(false);
			}
			
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtChannelUserBalanceResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtChannelUserBalanceResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * Response sent to External transaction server for EVD request
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void generateExtEVDResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtEVDResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String channelTransfersInfoReq = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>EXEVDRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
                sbf.append("<PIN>").append(p_requestVO.getEvdPin()).append("</PIN>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
                sbf.append("<PIN></PIN>");
            }

            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), channelTransfersInfoReq)).append("</DATE>");

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
			//Added for EXTGW response in English langugae alwayes
			Locale  locale = new Locale("en","US");
            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
				if(PretupsI.GATEWAY_TYPE_EXTGW.equalsIgnoreCase(p_requestVO.getRequestGatewayType())){
					sbf.append("<MESSAGE>"+getMessage(locale,PretupsErrorCodesI.EVD_SENDER_SUCCESS+"_"+PretupsI.GATEWAY_TYPE_EXTGW,p_requestVO.getMessageArguments())+"</MESSAGE>");
				} else {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.EVD_SENDER_SUCCESS, p_requestVO.getMessageArguments())).append("</MESSAGE>");
				}
            }
            boolean privateRechargeAllowed = ((Boolean) (PreferenceCache.getSystemPreferenceValue(PreferenceI.PRIVATE_RECHARGE_ALLOWED))).booleanValue();
            if (privateRechargeAllowed && p_requestVO.getReqSelector() != null && p_requestVO.getReqSelector().equals("1")) {
                if (!BTSLUtil.isNullString(p_requestVO.getEvdPin())) {
                    sbf.append("<EVDPIN>").append(p_requestVO.getEvdPin()).append("</EVDPIN>");
                }
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateExtEVDResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtEVDResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * Added for CDMA Bank Recharge via external system.
     * 
     * @param p_requestVO
     * @param p_type
     *            TODO
     * @param p_action
     * @throws Exception
     * @author kapil.mehta
     */

    public static void generateChannelExtTransferResponse(RequestVO p_requestVO, String p_type) throws Exception {
        final String methodName = "generateChannelExtTransferResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>").append(p_type).append("</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
            	if(!BTSLUtil.isNullString(p_requestVO.getTransactionStatus())){
            		sbf.append("<TXNSTATUS>").append(p_requestVO.getTransactionStatus()).append("</TXNSTATUS>");
            	} else {
	                String message = p_requestVO.getMessageCode();
	                if (message.indexOf("_") != -1) {
	                    message = message.substring(0, message.indexOf("_"));
	                }
	                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            	}
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateSystem)).append("</DATE>");

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            /*
             * if(p_requestVO.getMessageArguments()==null &&
             * !p_requestVO.isSuccessTxn())
             * sbf.append("<MESSAGE>"+p_requestVO.getMessageCode()+"</MESSAGE>")
             */
            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
            	if(p_requestVO.getServiceType().equalsIgnoreCase(PretupsI.SERVICE_TYPE_EVD)) {
            		sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.C2S_SENDER_SUCCESS_EVD, p_requestVO.getMessageArguments())).append("</MESSAGE>");
            	} else {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.C2S_SENDER_SUCCESS, p_requestVO.getMessageArguments())).append("</MESSAGE>");
            	}
                
            }
            // sbf.append("<MESSAGE></MESSAGE>")
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelExtTransferResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChannelExtTransferResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * generateExtC2CTransferResponse
     * Response of C2C transfer request from the external system.
     * 
     * @param p_requestVO
     * @param p_action
     * @throws Exception
     * @author ved.sharma
     */
    public static void generateExtC2CTransferResponse(RequestVO p_requestVO, int p_action) throws Exception {
        final String methodName = "generateExtC2CTransferResponse";
        StringBuilder loggerValue= new StringBuilder();
        if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append("Entered: p_requestVO=");
        	loggerValue.append(p_requestVO.toString());
        	loggerValue.append(" p_action=");
        	loggerValue.append(p_action);
        	_log.debug(methodName, loggerValue);
        }
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            sbf = new StringBuilder(1024);

            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            if (p_action == ParserUtility.ACTION_C2C_TRANSFER_EXT_XML) {
                sbf.append("<TYPE>EXC2CTRFRESP</TYPE>");
            } else if (p_action == ParserUtility.ACTION_C2C_RETURN_EXT_XML) {
                sbf.append("<TYPE>EXC2CRETRESP</TYPE>");
            } else if (p_action == ParserUtility.ACTION_C2C_WITHDRAW_EXT_XML) {
                sbf.append("<TYPE>EXC2CWDRESP</TYPE>");
            }

            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateSystem)).append("</DATE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getExternalReferenceNum())) {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            boolean channelTransferInfoRequired = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CHANNEL_TRANSFERS_INFO_REQUIRED);
			if (channelTransferInfoRequired && !BTSLUtil.isStringIn(p_requestVO.getRequestGatewayCode(),Constants.getProperty("C2C_EXTRA_TAG_NOT_REQUIRED_FOR"))) {
				if(p_requestVO.getRequestMap()!=null){
					sbf.append("<USER_ID>").append((p_requestVO.getSenderVO()!=null?((ChannelUserVO)p_requestVO.getSenderVO()).getUserID():"")).append("</USER_ID>");
					sbf.append("<USER_ID2>" +(p_requestVO.getRequestMap().get("USERID2")!=null?p_requestVO.getRequestMap().get("USERID2"):"")+ "</USER_ID2>");
					sbf.append("<PREBAL>"+(p_requestVO.getRequestMap().get("PREBAL")!=null?p_requestVO.getRequestMap().get("PREBAL"):"")+"</PREBAL>");
					sbf.append("<POSTBAL>"+(p_requestVO.getRequestMap().get("POSTBAL")!=null?p_requestVO.getRequestMap().get("POSTBAL"):"")+"</POSTBAL>");
					sbf.append("<PREBAL2>"+(p_requestVO.getRequestMap().get("PREBAL2")!=null?p_requestVO.getRequestMap().get("PREBAL2"):"")+"</PREBAL2>");
					sbf.append("<POSTBAL2>"+(p_requestVO.getRequestMap().get("POSTBAL2")!=null?p_requestVO.getRequestMap().get("POSTBAL2"):"")+"</POSTBAL2>");
					sbf.append("<AMOUNT>"+(p_requestVO.getRequestMap().get("AMOUNT")!=null?p_requestVO.getRequestMap().get("AMOUNT"):"")+"</AMOUNT>");
				}
				else{
					sbf.append("<USER_ID>").append((p_requestVO.getSenderVO()!=null?((ChannelUserVO)p_requestVO.getSenderVO()).getUserID():"")).append("</USER_ID>");
					sbf.append("<USER_ID2></USER_ID2>");
					sbf.append("<PREBAL></PREBAL>");
					sbf.append("<POSTBAL></POSTBAL>");
					sbf.append("<PREBAL2></PREBAL2>");
					sbf.append("<POSTBAL2></POSTBAL2>");
					sbf.append("<AMOUNT></AMOUNT>");
					}
			}
			String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
            final Locale locale = new Locale(defaultLanguage, defaultCountry);
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtC2CTransferResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtC2CTransferResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }
    
    
    
    
    /**
     * generateExtC2CVoucherTransferRequestResponse
     * Response of C2C Voucher transfer request from the external system.
     * 
     * @param p_requestVO
     * @param p_action
     * @throws Exception
     * @author Akhilesh Mittal
     */
    public static void generateExtC2CVoucherTransferRequestResponse(RequestVO p_requestVO, int p_action) throws Exception {
        final String methodName = "generateExtC2CVoucherTransferRequestResponse";
        StringBuilder loggerValue= new StringBuilder();
        if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append("Entered: p_requestVO=");
        	loggerValue.append(p_requestVO.toString());
        	loggerValue.append(" p_action=");
        	loggerValue.append(p_action);
        	_log.debug(methodName, loggerValue);
        }
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            sbf = new StringBuilder(1024);

            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            if (p_action == ParserUtility.ACTION_C2C_APPR) {
                sbf.append("<TYPE>C2CVOUCERAPPRRESP</TYPE>");
            }

            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);            
            final Locale locale = new Locale(defaultLanguage, defaultCountry);
            sbf.append("<MESSAGE>").append(p_requestVO.getMessageCode()).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtC2CTransferRequestResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtC2CTransferResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    
    
    /**
     * generateExtC2CTransferResponse
     * Response of C2C transfer request from the external system.
     * 
     * @param p_requestVO
     * @param p_action
     * @throws Exception
     * @author Rahul.Arya
     */
    public static void generateExtC2CTransferRequestResponse(RequestVO p_requestVO, int p_action) throws Exception {
        final String methodName = "generateExtC2CTransferRequestResponse";
        StringBuilder loggerValue= new StringBuilder();
        if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append("Entered: p_requestVO=");
        	loggerValue.append(p_requestVO.toString());
        	loggerValue.append(" p_action=");
        	loggerValue.append(p_action);
        	_log.debug(methodName, loggerValue);
        }
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            sbf = new StringBuilder(1024);

            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            if (p_action == ParserUtility.ACTION_C2C_APPR) {
                sbf.append("<TYPE>C2CAPPRRESP</TYPE>");
            }

            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getExternalReferenceNum())) {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            boolean channelTransferInfoRequired = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CHANNEL_TRANSFERS_INFO_REQUIRED);
			if (channelTransferInfoRequired && !BTSLUtil.isStringIn(p_requestVO.getRequestGatewayCode(),Constants.getProperty("C2C_EXTRA_TAG_NOT_REQUIRED_FOR"))) {
				if(p_requestVO.getRequestMap()!=null){
					sbf.append("<USER_ID>").append((p_requestVO.getSenderVO()!=null?((ChannelUserVO)p_requestVO.getSenderVO()).getUserID():"")).append("</USER_ID>");
					sbf.append("<USER_ID2>" +(p_requestVO.getRequestMap().get("USERID2")!=null?p_requestVO.getRequestMap().get("USERID2"):"")+ "</USER_ID2>");
					sbf.append("<PREBAL>"+(p_requestVO.getRequestMap().get("PREBAL")!=null?p_requestVO.getRequestMap().get("PREBAL"):"")+"</PREBAL>");
					sbf.append("<POSTBAL>"+(p_requestVO.getRequestMap().get("POSTBAL")!=null?p_requestVO.getRequestMap().get("POSTBAL"):"")+"</POSTBAL>");
					sbf.append("<PREBAL2>"+(p_requestVO.getRequestMap().get("PREBAL2")!=null?p_requestVO.getRequestMap().get("PREBAL2"):"")+"</PREBAL2>");
					sbf.append("<POSTBAL2>"+(p_requestVO.getRequestMap().get("POSTBAL2")!=null?p_requestVO.getRequestMap().get("POSTBAL2"):"")+"</POSTBAL2>");
					sbf.append("<AMOUNT>"+(p_requestVO.getRequestMap().get("AMOUNT")!=null?p_requestVO.getRequestMap().get("AMOUNT"):"")+"</AMOUNT>");
				}
				else{
					sbf.append("<USER_ID>").append((p_requestVO.getSenderVO()!=null?((ChannelUserVO)p_requestVO.getSenderVO()).getUserID():"")).append("</USER_ID>");
					sbf.append("<USER_ID2></USER_ID2>");
					sbf.append("<PREBAL></PREBAL>");
					sbf.append("<POSTBAL></POSTBAL>");
					sbf.append("<PREBAL2></PREBAL2>");
					sbf.append("<POSTBAL2></POSTBAL2>");
					sbf.append("<AMOUNT></AMOUNT>");
					}
			}
			String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
            final Locale locale = new Locale(defaultLanguage, defaultCountry);
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtC2CTransferRequestResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtC2CTransferResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateExtC2CTransferApprovalResponse(RequestVO p_requestVO, int p_action) throws Exception {
        final String methodName = "generateExtC2CTransferApprovalResponse";
        StringBuilder loggerValue= new StringBuilder();
        if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append("Entered: p_requestVO=");
        	loggerValue.append(p_requestVO.toString());
        	loggerValue.append(" p_action=");
        	loggerValue.append(p_action);
        	_log.debug(methodName, loggerValue);
        }
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        Boolean CHANNEL_TRANSFERS_INFO_REQUIRED = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CHANNEL_TRANSFERS_INFO_REQUIRED);
        String DEFAULT_LANGUAGE = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
        String DEFAULT_COUNTRY = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
        try {
            sbf = new StringBuilder(1024);

            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            if (p_action == ParserUtility.ACTION_C2C_REQ_REC) {
                sbf.append("<TYPE>C2CTRFRECRESP</TYPE>");
            }
            if (p_action == ParserUtility.ACTION_C2C_APPR) {
                sbf.append("<TYPE>C2CAPPRRESP</TYPE>");
            }

            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getExternalReferenceNum())) {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
			
			if (CHANNEL_TRANSFERS_INFO_REQUIRED && !BTSLUtil.isStringIn(p_requestVO.getRequestGatewayCode(),Constants.getProperty("C2C_EXTRA_TAG_NOT_REQUIRED_FOR"))) {
				if(p_requestVO.getRequestMap()!=null){
					sbf.append("<USER_ID>").append((p_requestVO.getSenderVO()!=null?((ChannelUserVO)p_requestVO.getSenderVO()).getUserID():"")).append("</USER_ID>");
					sbf.append("<USER_ID2>" +(p_requestVO.getRequestMap().get("USERID2")!=null?p_requestVO.getRequestMap().get("USERID2"):"")+ "</USER_ID2>");
					sbf.append("<PREBAL>"+(p_requestVO.getRequestMap().get("PREBAL")!=null?p_requestVO.getRequestMap().get("PREBAL"):"")+"</PREBAL>");
					sbf.append("<POSTBAL>"+(p_requestVO.getRequestMap().get("POSTBAL")!=null?p_requestVO.getRequestMap().get("POSTBAL"):"")+"</POSTBAL>");
					sbf.append("<PREBAL2>"+(p_requestVO.getRequestMap().get("PREBAL2")!=null?p_requestVO.getRequestMap().get("PREBAL2"):"")+"</PREBAL2>");
					sbf.append("<POSTBAL2>"+(p_requestVO.getRequestMap().get("POSTBAL2")!=null?p_requestVO.getRequestMap().get("POSTBAL2"):"")+"</POSTBAL2>");
					sbf.append("<AMOUNT>"+(p_requestVO.getRequestMap().get("AMOUNT")!=null?p_requestVO.getRequestMap().get("AMOUNT"):"")+"</AMOUNT>");
				}
				else{
					sbf.append("<USER_ID>").append((p_requestVO.getSenderVO()!=null?((ChannelUserVO)p_requestVO.getSenderVO()).getUserID():"")).append("</USER_ID>");
					sbf.append("<USER_ID2></USER_ID2>");
					sbf.append("<PREBAL></PREBAL>");
					sbf.append("<POSTBAL></POSTBAL>");
					sbf.append("<PREBAL2></PREBAL2>");
					sbf.append("<POSTBAL2></POSTBAL2>");
					sbf.append("<AMOUNT></AMOUNT>");
					}
			}

            final Locale locale = new Locale(DEFAULT_LANGUAGE, DEFAULT_COUNTRY);
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtC2CTransferRequestResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtC2CTransferResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }
    /**
     * generateExtChangepinResponse
     * Response of Change Pin request from the external system.
     * 
     * @param p_requestVO
     * @param p_action
     * @throws Exception
     * @author bobba
     */
    public static void generateExtChangepinResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtChangepinResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXC2SCPNRESP</TYPE>");
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateSystem)).append("</DATE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }
            sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
                // VFE fix
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.EXTSYS_CHANGE_PIN_SUCCESS, null)).append("</MESSAGE>");
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateExtChangepinResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtChangepinResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * generateExtC2CTransferResponse
     * Response of C2C transfer request from the external system.
     * 
     * @param p_requestVO
     * @throws Exception
     * @author ved.sharma
     */
    public static void generateExtLastXTrfResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtLastXTrfResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
        	String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXLST3TRFRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<REQSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</REQSTATUS>");
            } else {
                sbf.append("<REQSTATUS>").append(p_requestVO.getMessageCode()).append("</REQSTATUS>");
            }
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(getDateTime(null, null), externalDateSystem)).append("</DATE>");
            sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            sbf.append("<TXNDETAILS>");
            final HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap != null) {
                final ArrayList lastTransferList = (ArrayList) requestHashMap.get("TRANSFERLIST");
                if (lastTransferList != null && !lastTransferList.isEmpty()) {
                	int lastTransferLists=lastTransferList.size();
                    int xLastTxn = (int)p_requestVO.getRequestMap().get("NUMBER_OF_LAST_X_TXN");
                	int txnCount = (lastTransferLists > xLastTxn) ? xLastTxn : lastTransferLists;
                    for (int i = 0; i < txnCount; i++) {
                        final C2STransferVO c2sTransferVO = (C2STransferVO) lastTransferList.get(i);
                        if (c2sTransferVO != null) {
                            sbf.append("<TXNDETAIL>");
                            sbf.append("<TXNID>").append(c2sTransferVO.getTransferID()).append("</TXNID>");
                            sbf.append("<TXNDATETIME>").append(BTSLDateUtil.getSystemLocaleDate(getDateTime(c2sTransferVO.getTransferDateTime(), null), externalDateSystem)).append("</TXNDATETIME>");
                            sbf.append("<TRFTYPE>").append(c2sTransferVO.getType()).append("</TRFTYPE>");
                            sbf.append("<TXNSTATUS>").append(c2sTransferVO.getStatus()).append("</TXNSTATUS>");
                            sbf.append("<TXNAMOUNT>").append(PretupsBL.getDisplayAmount(c2sTransferVO.getTransferValue())).append("</TXNAMOUNT>");
							sbf.append("<RECEIVERMSISDN>").append(c2sTransferVO.getReceiverMsisdn()).append("</RECEIVERMSISDN>");
                            sbf.append("</TXNDETAIL>");
                        }
                    }
                } else {
                    sbf.append("<TXNDETAIL>");
                    sbf.append("<TXNID></TXNID>");
                    sbf.append("<TXNDATETIME></TXNDATETIME>");
                    sbf.append("<TRFTYPE></TRFTYPE>");
                    sbf.append("<TXNSTATUS></TXNSTATUS>");
                    sbf.append("<TXNAMOUNT></TXNAMOUNT>");
					sbf.append("<RECEIVERMSISDN></RECEIVERMSISDN>");
                    sbf.append("</TXNDETAIL>");
                }
            }
            sbf.append("</TXNDETAILS></COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateExtLastXTrfResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtLastXTrfResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /*
     * External Gateway Parser Added By Babu Kunwar
     */
    /**
     * getDateTime
     * 
     * @param p_date
     * @param p_format
     * @return string
     */
    private static String getDateTime(Date p_date, String p_format) {
    	String systemDateTimeFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.SYSTEM_DATETIME_FORMAT);
        if (p_format == null || p_format.length() <= 0) {
            p_format = systemDateTimeFormat;// "dd/MM/yy HH:mm:ss"
        }
        final SimpleDateFormat sdf = new SimpleDateFormat(p_format);
        sdf.setLenient(false);
        if (p_date == null) {
            p_date = new Date();
        }
        return sdf.format(p_date);
    }

    /**
     * generateExtDailyTransactionResponse
     * Response of daily transfer reports request from the external system.
     * 
     * @param p_requestVO
     * @throws Exception
     * @author ved.sharma
     */
    public static void generateExtDailyTransactionResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtDailyTransactionResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
        	String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXDLYRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(getDateTime(null, null), externalDateSystem) ).append("</DATE>");
            sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");

            final HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap != null) {
                final ArrayList channelIntransferList = (ArrayList) requestHashMap.get("CHANNEL_IN_TRANSFER");
                final ArrayList channelOuttransferList = (ArrayList) requestHashMap.get("CHANNEL_OUT_TRANSFER");
                final ArrayList subscriberOutTransferList = (ArrayList) requestHashMap.get("SUBSCRIBER_OUT_TRANSFER");
                if (channelIntransferList != null && !channelIntransferList.isEmpty()) {
                    for (int i = 0, j = channelIntransferList.size(); i < j; i++) {
                        final ChannelTransfrsReturnsVO channelTransfrsInVO = (ChannelTransfrsReturnsVO) channelIntransferList.get(i);
                        sbf.append("<IN_TRANSACTION>");
                        sbf.append("<PRODSHORTNAME>").append(channelTransfrsInVO.getShortName()).append("</PRODSHORTNAME>");
                        sbf.append("<TRANSFER>").append(PretupsBL.getDisplayAmount(channelTransfrsInVO.getTransfes())).append("</TRANSFER>");
                        sbf.append("<WITHDRAW>").append(PretupsBL.getDisplayAmount(channelTransfrsInVO.getReturns())).append("</WITHDRAW>");
                        sbf.append("</IN_TRANSACTION>");
                    }
                } else {
                    sbf.append("<IN_TRANSACTION>");
                    sbf.append("<PRODSHORTNAME></PRODSHORTNAME>");
                    sbf.append("<TRANSFER></TRANSFER>");
                    sbf.append("<WITHDRAW></WITHDRAW>");
                    sbf.append("</IN_TRANSACTION>");
                }
                if (channelOuttransferList != null && !channelOuttransferList.isEmpty()) {
                    for (int i = 0, j = channelOuttransferList.size(); i < j; i++) {
                        final ChannelTransfrsReturnsVO channelTransfrsOutVO = (ChannelTransfrsReturnsVO) channelOuttransferList.get(i);
                        sbf.append("<OUT_TRANSACTION>");
                        sbf.append("<PRODSHORTNAME>").append(channelTransfrsOutVO.getShortName()).append("</PRODSHORTNAME>");
                        sbf.append("<TRANSFER>").append(PretupsBL.getDisplayAmount(channelTransfrsOutVO.getTransfes())).append("</TRANSFER>");
                        sbf.append("<WITHDRAW>").append(PretupsBL.getDisplayAmount(channelTransfrsOutVO.getReturns())).append("</WITHDRAW>");
                        sbf.append("</OUT_TRANSACTION>");
                    }
                } else {
                    sbf.append("<OUT_TRANSACTION>");
                    sbf.append("<PRODSHORTNAME></PRODSHORTNAME>");
                    sbf.append("<TRANSFER></TRANSFER>");
                    sbf.append("<WITHDRAW></WITHDRAW>");
                    sbf.append("</OUT_TRANSACTION>");
                }
                if (subscriberOutTransferList != null && !subscriberOutTransferList.isEmpty()) {
                    for (int i = 0, j = subscriberOutTransferList.size(); i < j; i++) {
                        final ChannelTransfrsReturnsVO subscriberlTransfrsOutVO = (ChannelTransfrsReturnsVO) subscriberOutTransferList.get(i);
                        sbf.append("<SUBS_OUT_TRANSACTION>");
                        sbf.append("<SERVICE_NAME>").append(subscriberlTransfrsOutVO.getServiceName()).append("</SERVICE_NAME>");
                        sbf.append("<PRODSHORTNAME>").append(subscriberlTransfrsOutVO.getShortName()).append("</PRODSHORTNAME>");
                        sbf.append("<AMOUNT>").append(PretupsBL.getDisplayAmount(subscriberlTransfrsOutVO.getTransfes())).append("</AMOUNT>");
                        sbf.append("</SUBS_OUT_TRANSACTION>");
                    }
                } else {
                    sbf.append("<SUBS_OUT_TRANSACTION>");
                    sbf.append("<SERVICE_NAME></SERVICE_NAME>");
                    sbf.append("<PRODSHORTNAME></PRODSHORTNAME>");
                    sbf.append("<AMOUNT></AMOUNT>");
                    sbf.append("</SUBS_OUT_TRANSACTION>");
                }
            } else {
                sbf.append("<IN_TRANSACTION>");
                sbf.append("<PRODSHORTNAME></PRODSHORTNAME>");
                sbf.append("<TRANSFER></TRANSFER>");
                sbf.append("<WITHDRAW></WITHDRAW>");
                sbf.append("</IN_TRANSACTION>");

                sbf.append("<OUT_TRANSACTION>");
                sbf.append("<PRODSHORTNAME></PRODSHORTNAME>");
                sbf.append("<TRANSFER></TRANSFER>");
                sbf.append("<WITHDRAW></WITHDRAW>");
                sbf.append("</OUT_TRANSACTION>");

                sbf.append("<SUBS_OUT_TRANSACTION>");
                sbf.append("<SERVICE_NAME></SERVICE_NAME>");
                sbf.append("<PRODSHORTNAME></PRODSHORTNAME>");
                sbf.append("<AMOUNT></AMOUNT>");
                sbf.append("</SUBS_OUT_TRANSACTION>");
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtDailyTransactionResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtDailyTransactionResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
        /*
         * Addition of External Gateway Parsers ENDS By Babu Kunwar
         */
    }

    /**
     * @param p_requestVO
     * @throws Exception
     * @author rahul.dutt
     *         used to generate C2S transfer enquiry response
     */
    public static void generate2STransferEnqExtResp(RequestVO p_requestVO) throws Exception {
        final String methodName = "generate2STransferEnqExtResp";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>RCETRANRES</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
            p_requestVO.setSenderMessageRequired(false);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generate2STransferEnqExtResp]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generate2STransferEnqExtResp:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * This method generates the response in the case of C2S/C2C/O2C enquiry.
     * 
     * @param p_requestVO
     * @throws Exception
     * @author Ankuj.Arora
     * @Date 20/5/2011
     */
    public static void parseEnquiryTxnIDExtCodeDateResponse(RequestVO p_requestVO) throws Exception {

        final String methodName = "parseEnquiryTxnIDExtCodeDateResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        int i;
        ChannelTransferVO channelTransferVO = null;
        C2STransferVO c2sTransferVO = null;
        final String[] message = p_requestVO.getRequestMessageArray();
        HashMap compare = new HashMap();

        try {
        	String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            compare = p_requestVO.getRequestMap();
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>EXTXNENQRESP</TYPE>");

            if ((p_requestVO.getType().equalsIgnoreCase("O2C") || p_requestVO.getType().equalsIgnoreCase("C2C"))) {

                sbf.append("<TXNTYPE>").append(message[1]).append("</TXNTYPE>");
                sbf.append("<TXNSUBTYPE>").append(message[2]).append("</TXNSUBTYPE>");
                sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(message[3], externalDateSystem)).append("</DATE>");
                sbf.append("<RECORDS>");
                int requestVORemotePorts=p_requestVO.getRemotePort();
                for (i = 0; i <requestVORemotePorts ; i++) {
                    channelTransferVO = new ChannelTransferVO();
                    channelTransferVO = (ChannelTransferVO) p_requestVO.getRequestMap().get(i);
                    sbf.append("<RECORD>");
                    sbf.append("<TXNID>").append(channelTransferVO.getTransferID()).append("</TXNID>");
                    sbf.append("<EXTREFNUM>").append(channelTransferVO.getReferenceNum()).append("</EXTREFNUM>");
                    sbf.append("<TXNSTATUS>").append(channelTransferVO.getStatusDesc()).append("</TXNSTATUS>");
                    sbf.append("<SMSISDN>").append(channelTransferVO.getUserMsisdn()).append("</SMSISDN>");
                    sbf.append("<RMSISDN>").append(channelTransferVO.getToUserMsisdn()).append("</RMSISDN>");
                    sbf.append("<EXTTXNDATE>").append(channelTransferVO.getExternalTxnDateAsString()).append("</EXTTXNDATE>");
                    sbf.append("<PRODUCTCODE>").append(channelTransferVO.getProductCode()).append("</PRODUCTCODE>");
                    sbf.append("<EXTCODE>").append(channelTransferVO.getErpNum()).append("</EXTCODE>");
                    sbf.append("<QTY>").append(channelTransferVO.getSenderDrQty()).append("</QTY>");
                    sbf.append("<TRFCATEGORY>").append(channelTransferVO.getTransferCategory()).append("</TRFCATEGORY>");
                    sbf.append("<PAYMENTTYPE>").append(channelTransferVO.getPayInstrumentType()).append("</PAYMENTTYPE>");
                    sbf.append("<PAYMENTINSTNUMBER>").append(channelTransferVO.getPayInstrumentNum()).append("</PAYMENTINSTNUMBER>");
                    sbf.append("<PAYMENTDATE>").append(channelTransferVO.getPayInstrumentDate()).append("</PAYMENTDATE>");
                    sbf.append("<REMARKS>");
                    if (!BTSLUtil.isNullString(channelTransferVO.getFirstApprovalRemark())) {
                        sbf.append(channelTransferVO.getFirstApprovalRemark());
                    } else if (!BTSLUtil.isNullString(channelTransferVO.getSecondApprovalRemark())) {
                        sbf.append(channelTransferVO.getSecondApprovalRemark());
                    } else if (!BTSLUtil.isNullString(channelTransferVO.getThirdApprovalRemark())) {
                        sbf.append(channelTransferVO.getThirdApprovalRemark());
                    }
                    sbf.append("</REMARKS>");
                    sbf.append("<RECORD/>");
                }
            } else if (p_requestVO.getType().equalsIgnoreCase("C2S")) {
                sbf.append("<TXNTYPE>").append(message[1]).append("</TXNTYPE>");
                sbf.append("<TXNSUBTYPE>").append(PretupsI.CHANNEL_TRANSFER_SUB_TYPE_TRANSFER).append("</TXNSUBTYPE>");
                sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(message[3], externalDateSystem)).append("</DATE>");
                sbf.append("<RECORDS>");
                int   requestVORemotePorts=p_requestVO.getRemotePort();
                for (i = 0; i <requestVORemotePorts; i++) {
                    c2sTransferVO = new C2STransferVO();
                    c2sTransferVO = (C2STransferVO) p_requestVO.getRequestMap().get(i);
                    sbf.append("<RECORD>");
                    sbf.append("<TXNID>").append(c2sTransferVO.getTransferID()).append("</TXNID>");
                    sbf.append("<TXNSTATUS>").append(c2sTransferVO.getStatus()).append("</TXNSTATUS>");
                    sbf.append("<SMSISDN>").append(c2sTransferVO.getSenderMsisdn()).append("</SMSISDN>");
                    sbf.append("<RMSISDN>").append(c2sTransferVO.getReceiverMsisdn()).append("</RMSISDN>");
                    sbf.append("<PRODUCTCODE>").append(c2sTransferVO.getProductCode()).append("</PRODUCTCODE>");
                    sbf.append("<EXTCODE>").append(c2sTransferVO.getValue()).append("</EXTCODE>");
                    sbf.append("<QTY>").append(c2sTransferVO.getRequestedAmount()).append("</QTY>");
                    sbf.append("<REMARKS></REMARKS>");
                    sbf.append("<RECORD/>");
                }

            }
            sbf.append("</RECORDS>");
            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<ERRORKEY>").append(p_requestVO.getMessageCode()).append("</ERRORKEY>");
            } else {
                sbf.append("<ERRORKEY></ERRORKEY>");
            }
            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(p_requestVO.getMessageCode()).append("</MESSAGE>");
            } else {
                sbf.append("<MESSAGE>").append(PretupsI.TXN_STATUS_SUCCESS_MESSAGE).append("</MESSAGE>");
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[parseEnquiryTxnIDExtCodeDateResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "parseEnquiryTxnIDExtCodeDateResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }

    }

    public static void generateExtC2CTrfDrCrResponse(RequestVO p_requestVO, int p_action) throws Exception {
        final String methodName = "generateExtC2CDrCrTransferResponse";
        StringBuilder loggerValue= new StringBuilder();
        if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append("Entered: p_requestVO=");
        	loggerValue.append(p_requestVO.toString());
        	loggerValue.append(" p_action=");
        	loggerValue.append(p_action);
        	_log.debug(methodName, loggerValue);
        }
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf = new StringBuilder(1024);

            sbf.append("<?xml version=\"1.0\"?><COMMAND>");

            sbf.append("<TYPE>EXC2CDRCRRESP</TYPE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DATESPACEHHMMSS);
            sdf.setLenient(false);
            String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

            if (BTSLUtil.isNullString(p_requestVO.getExternalReferenceNum())) {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
            final Locale locale = new Locale(defaultLanguage, defaultCountry);
            sbf.append("<MESSAGE>").append(getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");

            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<PURPOSE></PURPOSE>");
            } else {
                sbf.append("<PURPOSE>").append(p_requestVO.getPurpose()).append("</PURPOSE>");
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtC2CTransferResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtC2CTransferResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * generateChannelUserSuspendResumeResponse
     * Response of Channel User Suspend Resume service Response from the USSD
     * system.
     * 
     * @param p_requestVO
     * @param p_action
     * @throws Exception
     * @author sanjeew.kumar
     */
    public static void generateChannelUserSuspendResumeResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelUserSuspendResumeResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
            sbf = new StringBuilder(1024);

            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>SRCUSRRESP</TYPE>");
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DATESPACEHHMMSS);
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelUserSuspendResumeResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "",
                "generateChannelUserSuspendResumeResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     * @author rahul.dutt
     *         This method generates the response for Vas recharge request
     *         incoming through extgw
     */
    public static void generateVasExtCreditTransferResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateVasExtCreditTransferResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>VASEXTRFRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date),externalDateSystem)).append("</DATE>");

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            /*
             * if(p_requestVO.getMessageArguments()==null &&
             * !p_requestVO.isSuccessTxn())
             * sbf.append("<MESSAGE>"+p_requestVO.getMessageCode()+"</MESSAGE>");
             */
            if (!p_requestVO.isSuccessTxn()) {
                String message = null;
            	message=BTSLUtil.getMessage(p_requestVO.getLocale(), p_requestVO.getServiceType()+"_"+p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            	if(BTSLUtil.isNullString(message))
                    message = BTSLUtil.getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            	sbf.append("<MESSAGE>").append(message).append("</MESSAGE>");
            } else {
                String message = null;
            	message=BTSLUtil.getMessage(p_requestVO.getLocale(), p_requestVO.getServiceType()+"_"+PretupsErrorCodesI.VAST_SENDER_SUCCESS, p_requestVO.getMessageArguments());
            	if(BTSLUtil.isNullString(message))
            	message=BTSLUtil.getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.VAST_SENDER_SUCCESS, p_requestVO.getMessageArguments());
            	sbf.append("<MESSAGE>").append(message).append("</MESSAGE>");
            }
            // sbf.append("<MESSAGE></MESSAGE>")
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateVasExtCreditTransferResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateVasExtCreditTransferResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     * @author rahul.dutt
     *         This method generates response for Promo Vas request incoming
     *         through extgw
     */
    public static void generatePrVasExtCreditTransferResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generatePrVasExtCreditTransferResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>PRVASEXTRFRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateSystem)).append("</DATE>");

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            /*
             * if(p_requestVO.getMessageArguments()==null &&
             * !p_requestVO.isSuccessTxn())
             * sbf.append("<MESSAGE>"+p_requestVO.getMessageCode()+"</MESSAGE>");
             */
            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.PVAS_SENDER_SUCCESS, p_requestVO.getMessageArguments())).append("</MESSAGE>");
            }
            // sbf.append("<MESSAGE></MESSAGE>")
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generatePrVasExtCreditTransferResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generatePrVasExtCreditTransferResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * generateExtGeographyResponse
     * Generate the response for Geography request from external system
     * 
     * @param RequestVO
     * @throws Exception
     * @author ankur.dhawan
     */
    public static void generateExtGeographyResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtGeographyResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXTGEOGRAPHYRESP</TYPE>");
            sbf.append("<DATE>").append(BTSLDateUtil.getLocaleTimeStamp(getDateTime(null, null))).append("</DATE>");
            if (!BTSLUtil.isNullString(p_requestVO.getExternalReferenceNum())) {
                sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            final String message = getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            if (!BTSLUtil.isNullString(message)) {
                sbf.append("<MESSAGE>").append(message).append("</MESSAGE>");
            } else {
                sbf.append("<MESSAGE></MESSAGE>");
            }
            sbf.append("<GEOGRAPHIES>");
            final HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap != null) {
                final ArrayList geographyList = (ArrayList) p_requestVO.getRequestMap().get(PretupsI.GEOGRAPHY_LIST);
                if (geographyList != null && !geographyList.isEmpty()) {
                    final Iterator listIterator = geographyList.iterator();
                    while (listIterator.hasNext()) {
                        final ListValueVO listVO = (ListValueVO) listIterator.next();
                        sbf.append("<GEODETAILS>");
                        sbf.append("<GEONAME>").append(listVO.getLabel()).append("</GEONAME>");
                        sbf.append("<GEOCODE>").append(listVO.getValue()).append("</GEOCODE>");
                        sbf.append("</GEODETAILS>");
                    }
                } else {
                    sbf.append("<GEODETAILS>");
                    sbf.append("<GEONAME></GEONAME>");
                    sbf.append("<GEOCODE></GEOCODE>");
                    sbf.append("</GEODETAILS>");
                }
            } else {
                sbf.append("<GEODETAILS>");
                sbf.append("<GEONAME></GEONAME>");
                sbf.append("<GEOCODE></GEOCODE>");
                sbf.append("</GEODETAILS>");
            }
            sbf.append("</GEOGRAPHIES>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_GRPH_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateExtGeographyResponse]",
                PretupsErrorCodesI.EXT_GRPH_EXCEPTION, "", "", "generateExtGeographyResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void generateExtTrfRuleTypeResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtTrfRuleTypeResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXTTRFRULETYPERESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            sbf.append("<DATE>").append(BTSLDateUtil.getLocaleTimeStamp(getDateTime(null, null))).append("</DATE>");
            if (!BTSLUtil.isNullString(p_requestVO.getExternalReferenceNum())) {
                sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }
            final String message = getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            if (!BTSLUtil.isNullString(message)) {
                sbf.append("<MESSAGE>").append(message).append("</MESSAGE>");
            } else {
                sbf.append("<MESSAGE></MESSAGE>");
            }
            sbf.append("<TRFRULETYPE>");

            final HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap != null) {
                final ArrayList trfRuleTypeList = (ArrayList) requestHashMap.get(PretupsI.RULETYPEDETAILS_STR);

                if (trfRuleTypeList != null && !trfRuleTypeList.isEmpty()) {
                    for (int i = 0, j = trfRuleTypeList.size(); i < j; i++) {
                        final ListValueVO listValueVO = (ListValueVO) trfRuleTypeList.get(i);
                        sbf.append("<RULETYPEDETAILS>");
                        sbf.append("<RULETYPENAME>").append(listValueVO.getLabel()).append("</RULETYPENAME>");
                        sbf.append("<RULETYPECODE>").append(listValueVO.getValue()).append("</RULETYPECODE>");
                        sbf.append("</RULETYPEDETAILS>");
                    }
                } else {
                    sbf.append("<RULETYPEDETAILS>");
                    sbf.append("<RULETYPENAME></RULETYPENAME>");
                    sbf.append("<RULETYPECODE></RULETYPECODE>");
                    sbf.append("</RULETYPEDETAILS>");
                }
            } else {
                sbf.append("<RULETYPEDETAILS>");
                sbf.append("<RULETYPENAME></RULETYPENAME>");
                sbf.append("<RULETYPECODE></RULETYPECODE>");
                sbf.append("</RULETYPEDETAILS>");
            }
            sbf.append("</TRFRULETYPE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtTrfRuleTypeResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtTrfRuleTypeResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * generateExtUserResponse
     * Generate the response for User Creation request from external system
     * 
     * @param RequestVO
     * @throws Exception
     * @author ankur.dhawan
     */
    public static void generateExtUserResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtUserResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXTADDCHUSRRESP</TYPE>");
            sbf.append("<DATE>").append(BTSLDateUtil.getLocaleTimeStamp(getDateTime(null, null))).append("</DATE>");
            if (!BTSLUtil.isNullString(p_requestVO.getExternalReferenceNum())) {
                sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            final HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap != null) {
                final HashMap userMap = (HashMap) p_requestVO.getRequestMap().get(PretupsI.USER_MAP);

                if (userMap != null && userMap.size() > 0) {
                    final String grpRole = (String) userMap.get("GROUPROLE");
                    final String commProfile = (String) userMap.get("COMMPROFILE");
                    final String trfProfile = (String) userMap.get("TRFPROFILE");
                    final String grade = (String) userMap.get("GRADE");
                    sbf.append("<GROUPROLE>").append(grpRole).append("</GROUPROLE>");
                    sbf.append("<COMMPROFILE>").append(commProfile).append("</COMMPROFILE>");
                    sbf.append("<TRFCTRLPROF>").append(trfProfile).append("</TRFCTRLPROF>");
                    sbf.append("<GRADE>").append(grade).append("</GRADE>");
                } else {
                    sbf.append("<GROUPROLE></GROUPROLE>");
                    sbf.append("<COMMPROFILE></COMMPROFILE>");
                    sbf.append("<TRFCTRLPROF></TRFCTRLPROF>");
                    sbf.append("<GRADE></GRADE>");
                }
            } else {
                sbf.append("<GROUPROLE></GROUPROLE>");
                sbf.append("<COMMPROFILE></COMMPROFILE>");
                sbf.append("<TRFCTRLPROF></TRFCTRLPROF>");
                sbf.append("<GRADE></GRADE>");
            }
            final String message = getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            if (!BTSLUtil.isNullString(message)) {
                sbf.append("<MESSAGE>").append(message).append("</MESSAGE>");
            } else {
                sbf.append("<MESSAGE></MESSAGE>");
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.EXT_USRADD_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateExtUserResponse]",
                PretupsErrorCodesI.EXT_USRADD_EXCEPTION, "", "", "generateExtUserResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     * @author sonali.garg
     */
    public static void generateChannelExtSubscriberEnqResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelExtSubscriberEnqResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXTSYSSUBENQRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }
            if ((p_requestVO.getEnquiryServiceType()).equals(PretupsI.SERVICE_TYPE_CHNL_RECHARGE)) {
                p_requestVO.setType("PRE");
                sbf.append("<MESSAGE>").append(p_requestVO.getType() + "<MESSAGE>");
            } else if ((p_requestVO.getEnquiryServiceType()).equals(PretupsI.SERVICE_TYPE_CHNL_BILLPAY)) {
                p_requestVO.setType("POST");
                sbf.append("<MESSAGE>").append(p_requestVO.getType() + "<MESSAGE>");
            } else {
                sbf.append("<MESSAGE>").append("Error in service type.Select either RC or PPB as service type" + "<MESSAGE>");
            }

            if (p_requestVO.getSlabAmount() != null) {
                sbf.append("<SLABAMT>").append(p_requestVO.getSlabAmount()).append("</SLABAMT>");
            } else {
                sbf.append("<SLABAMT></SLABAMT>");
            }

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTTXNNUMBER>").append(p_requestVO.getRequestMap().get("EXTTXNNUMBER")).append("</EXTTXNNUMBER>");
            } else {
                sbf.append("<EXTTXNNUMBER></EXTTXNNUMBER>");
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelExtSubscriberEnqResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "",
                "generateChannelExtSubscriberEnqResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * generateExtC2CTransferResponse
     * Response of C2C transfer request from the external system.
     * 
     * @param p_requestVO
     * @throws Exception
     * @author ved.sharma
     */
    public static void generateExtChannelLastTransferStatusResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtChannelLastTransferStatusResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXLSTTRFRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<REQSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</REQSTATUS>");
            } else {
                sbf.append("<REQSTATUS>").append(p_requestVO.getMessageCode()).append("</REQSTATUS>");
            }
            sbf.append("<DATE>").append(BTSLDateUtil.getLocaleTimeStamp(getDateTime(null, null))).append("</DATE>");
            sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            // Locale locale=new
            // Locale(defaultLanguage,defaultCountry)
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");

            final HashMap requestHashMap = p_requestVO.getRequestMap();
            if (requestHashMap != null) {
                final String lastTransferType = (String) requestHashMap.get("LASTTRFTYPE");
                if (PretupsI.LAST_TRANSACTION_C2S_TYPE.equalsIgnoreCase(lastTransferType)) {
                    final C2STransferVO c2sTransferVO = (C2STransferVO) requestHashMap.get(PretupsI.LAST_TRANSACTION_C2S_TYPE);
                    if (c2sTransferVO != null) {
                        sbf.append("<TXNID>").append(c2sTransferVO.getTransferID()).append("</TXNID>");
                        sbf.append("<TXNDATETIME>").append(BTSLDateUtil.getLocaleTimeStamp(getDateTime(c2sTransferVO.getTransferDateTime(), null))).append("</TXNDATETIME>");
                        sbf.append("<TRFTYPE>").append(PretupsI.LAST_TRANSACTION_C2S_TYPE).append("</TRFTYPE>");
                        sbf.append("<TXNSTATUS>").append(c2sTransferVO.getValue()).append("</TXNSTATUS>");
                        sbf.append("<RECORD>");
                        sbf.append("<PRODUCTCODE>").append(c2sTransferVO.getProductShortCode()).append("</PRODUCTCODE>");
                        sbf.append("<PRODUCTSHORTNAME>").append(c2sTransferVO.getProductName()).append("</PRODUCTSHORTNAME>");
                        sbf.append("<BALANCE>").append(PretupsBL.getDisplayAmount(c2sTransferVO.getTransferValue())).append("</BALANCE>");
                        sbf.append("</RECORD>");
                    } else {
                        sbf.append("<TXNID></TXNID>");
                        sbf.append("<TXNDATETIME></TXNDATETIME>");
                        sbf.append("<TRFTYPE></TRFTYPE>");
                        sbf.append("<TXNSTATUS></TXNSTATUS>");
                        sbf.append("<RECORD>");
                        sbf.append("<PRODUCTCODE></PRODUCTCODE>");
                        sbf.append("<PRODUCTSHORTNAME></PRODUCTSHORTNAME>");
                        sbf.append("<BALANCE></BALANCE>");
                        sbf.append("</RECORD>");
                    }

                } else if (PretupsI.LAST_TRANSACTION_C2C_TYPE.equalsIgnoreCase(lastTransferType) || PretupsI.LAST_TRANSACTION_O2C_TYPE.equalsIgnoreCase(lastTransferType)) {
                    final ChannelTransferVO channelTransferVO = (ChannelTransferVO) requestHashMap.get(lastTransferType);
                    if (channelTransferVO != null) {
                        sbf.append("<TXNID>").append(channelTransferVO.getTransferID()).append("</TXNID>");
                        sbf.append("<TXNDATETIME>").append(BTSLDateUtil.getLocaleTimeStamp(getDateTime(channelTransferVO.getCreatedOn(), null))).append("</TXNDATETIME>");
                        sbf.append("<TRFTYPE>").append(channelTransferVO.getTransferType()).append("</TRFTYPE>");
                        sbf.append("<TXNSTATUS>").append(channelTransferVO.getStatus()).append("</TXNSTATUS>");
                        final ArrayList list = channelTransferVO.getChannelTransferitemsVOList();
                        ChannelTransferItemsVO channelTransferItemsVO = null;
                        for (int i = 0, j = list.size(); i < j; i++) {
                            channelTransferItemsVO = (ChannelTransferItemsVO) list.get(i);
                            sbf.append("<RECORD>");
                            sbf.append("<PRODUCTCODE>").append(channelTransferItemsVO.getProductShortCode()).append("</PRODUCTCODE>");
                            sbf.append("<PRODUCTSHORTNAME>").append(channelTransferItemsVO.getShortName()).append("</PRODUCTSHORTNAME>");
                            sbf.append("<BALANCE>").append(PretupsBL.getDisplayAmount(channelTransferItemsVO.getApprovedQuantity())).append("</BALANCE>");
                            sbf.append("</RECORD>");
                        }
                    } else {
                        sbf.append("<TXNID></TXNID>");
                        sbf.append("<TXNDATETIME></TXNDATETIME>");
                        sbf.append("<TRFTYPE></TRFTYPE>");
                        sbf.append("<TXNSTATUS></TXNSTATUS>");
                        sbf.append("<RECORD>");
                        sbf.append("<PRODUCTCODE></PRODUCTCODE>");
                        sbf.append("<PRODUCTSHORTNAME></PRODUCTSHORTNAME>");
                        sbf.append("<BALANCE></BALANCE>");
                        sbf.append("</RECORD>");
                    }
                } else {
                    sbf.append("<TXNID></TXNID>");
                    sbf.append("<TXNDATETIME></TXNDATETIME>");
                    sbf.append("<TRFTYPE></TRFTYPE>");
                    sbf.append("<TXNSTATUS></TXNSTATUS>");
                    sbf.append("<RECORD>");
                    sbf.append("<PRODUCTCODE></PRODUCTCODE>");
                    sbf.append("<PRODUCTSHORTNAME></PRODUCTSHORTNAME>");
                    sbf.append("<BALANCE></BALANCE>");
                    sbf.append("</RECORD>");
                }
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtChannelLastTransferStatusResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "",
                "generateExtChannelLastTransferStatusResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * Response sent to External system for the channel user balace enquiry
     * request
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void generateExtChannelUserOtherBalRes(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtChannelUserBalanceResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXOTHUSRBALRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateSystem)).append("</DATE>");

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (p_requestVO.isSuccessTxn()) {
                final ArrayList arrayList = (ArrayList) p_requestVO.getValueObject();
                if (arrayList != null) {
                    UserBalancesVO userBalancesVO = null;
                    final int listSize = arrayList.size();
                    for (int i = 0; i < listSize; i++) {
                        userBalancesVO = (UserBalancesVO) arrayList.get(i);
                        sbf.append("<RECORD>");
                        sbf.append("<PRODUCTCODE>").append(userBalancesVO.getProductShortCode()).append("</PRODUCTCODE>");
                        sbf.append("<PRODUCTSHORTNAME>").append(userBalancesVO.getProductShortName()).append("</PRODUCTSHORTNAME>");
                        sbf.append("<BALANCE>").append(userBalancesVO.getBalanceStr()).append("</BALANCE>");
                        sbf.append("</RECORD>");
                    }
                }
            }
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtChannelUserBalanceResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtChannelUserBalanceResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateChannelExtHelpDeskResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelExtHelpDeskResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>HLPDSKRSP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateSystem)).append("</DATE>");
            final HashMap requestHashMap = p_requestVO.getRequestMap();
            /*
             * if(!p_requestVO.isSuccessTxn()) {
             * sbf.append("<MESSAGE>"+getMessage(p_requestVO.getLocale(),p_requestVO
             * .
             * getMessageCode(),p_requestVO.getMessageArguments())+"</MESSAGE>")
             * ;
             * } else
             */{
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            }
            // sbf.append("<MESSAGE></MESSAGE>")
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelExtHelpDeskResponse]", PretupsErrorCodesI.C2S_ERROR_EXCEPTION, "", "", "generateChannelExtHelpDeskResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     * @author akanksha.gupta
     */
    public static void generateO2CExtSAPEnqResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateO2CExtSAPEnqResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        StringBuilder sbf = null;
        try {
        	String EXTERNAL_DATE_FORMAT = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            final SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
            final SimpleDateFormat sd1 = new SimpleDateFormat("dd-MM-yyyy");

            sdf.setLenient(true); // this is required else it will convert
            sd1.setLenient(true); // this is required else it will convert

            ChannelTransferVO transferVO = null;

            sbf = new StringBuilder(1024);
            generateCommonXMLResponseForCCE(p_requestVO, "O2CEXTENQRES");
            sbf.append(p_requestVO.getSenderReturnMessage());
            sbf.append("<DATA>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<RECORDTYPE>SUMMARY</RECORDTYPE>");

                final ArrayList TransferList = (ArrayList) p_requestVO.getRequestMap().get("TRANSFERLIST");
                if (TransferList != null && !TransferList.isEmpty()) {
                	int TransferLists=TransferList.size();
                    for (int i = 0; i < TransferLists; i++) {
                        transferVO = (ChannelTransferVO) TransferList.get(i);
                        if (transferVO != null) {
                            sbf.append("<RECORD>");
                            sbf.append("<TRANSACTIONID>").append(transferVO.getTransferID()).append("</TRANSACTIONID>");
                            sbf.append("<TXNDATE>").append(BTSLDateUtil.getSystemLocaleDate(sd1.format(BTSLUtil.getDateFromDateString(transferVO.getTransferDateAsString())))).append("</TXNDATE>");
                            sbf.append("<NETWORK>").append(transferVO.getNetworkCode()).append("</NETWORK>");
                            sbf.append("<MSISDN>").append(transferVO.getUserMsisdn()).append("</MSISDN>");
                            sbf.append("<TRFCATEGORY>").append(transferVO.getTransferCategory()).append("</TRFCATEGORY>");
                            sbf.append("<PRODUCT>").append(transferVO.getProductCode()).append("</PRODUCT>");
                            sbf.append("<EXTCODE>").append(transferVO.getFromUserCode()).append("</EXTCODE>");
                            sbf.append("<APPROVEDBY>").append(transferVO.getFirstApprovedBy()).append("</APPROVEDBY>");
                            sbf.append("<APPROVEDON>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(transferVO.getFirstApprovedOn()), EXTERNAL_DATE_FORMAT)).append("</APPROVEDON>");
                            sbf.append("<TRFTYPE>").append(transferVO.getTransferType()).append("</TRFTYPE>");
                            sbf.append("<REQVALUE>").append(PretupsBL.getDisplayAmount(transferVO.getRequestedQuantity())).append("</REQVALUE>");
                            sbf.append("<AMOUNT>").append(PretupsBL.getDisplayAmount(transferVO.getPayableAmount())).append("</AMOUNT>");
                            sbf.append("<STATUS>").append(transferVO.getStatus()).append("</STATUS>");
                            sbf.append("</RECORD>");
                        }
                    }

                }
            }
            sbf.append("</DATA></COMMAND>");
            p_requestVO.setSenderReturnMessage(sbf.toString());
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateO2CTrfEnquiryResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateO2CTrfEnquiryResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     * @author akanksha.gupta
     */
    public static void generateO2CExtCodeUpdateResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateO2CExtCodeUpdateResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        final String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
            final SimpleDateFormat sd1 = new SimpleDateFormat("dd-MM-yyyy");

            sd1.setLenient(true); // this is required else it will convert
            ChannelTransferVO transferVO = null;

            sbf = new StringBuilder(1024);
            generateCommonXMLResponseForCCE(p_requestVO, "O2CEXTCODEUPDRES");
            sbf.append(p_requestVO.getSenderReturnMessage());
            sbf.append("<DATA>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<RECORDTYPE>SUMMARY</RECORDTYPE>");

                final ArrayList TransferList = (ArrayList) p_requestVO.getRequestMap().get("TRANSFERLIST");
                if (TransferList != null && !TransferList.isEmpty()) {
                	int TransfersLists=TransferList.size();
                    for (int i = 0; i < TransfersLists; i++) {
                        transferVO = (ChannelTransferVO) TransferList.get(i);
                        if (transferVO != null) {
                            sbf.append("<RECORD>");
                            sbf.append("<TRANSACTIONID>").append(transferVO.getTransferID()).append("</TRANSACTIONID>");
                            sbf.append("<TXNDATE>").append(BTSLDateUtil.getSystemLocaleDate(sd1.format(BTSLUtil.getDateFromDateString(transferVO.getTransferDateAsString())))).append("</TXNDATE>");
                            sbf.append("<NETWORK>").append(transferVO.getNetworkCode()).append("</NETWORK>");
                            sbf.append("<MSISDN>").append(transferVO.getUserMsisdn()).append("</MSISDN>");
                            sbf.append("<AMOUNT>").append(PretupsBL.getDisplayAmount(transferVO.getPayableAmount())).append("</AMOUNT>");
                            final String[] messageArgArray = { p_requestVO.getExternalTransactionNum(), p_requestVO.getExternalTransactionDate(), p_requestVO
                                .getTransactionID() };
                            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.AUTO_O2C_EXTCODE_UPDATE_SUCCESS, messageArgArray)).append("</MESSAGE>");
                            sbf.append("</RECORD>");
                        }
                    }

                }
            }
            sbf.append("</DATA></COMMAND>");
            p_requestVO.setSenderReturnMessage(sbf.toString());
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelExtSubscriberEnqResponse]", PretupsErrorCodesI.C2S_ERROR_EXCEPTION, "", "",
                "generateChannelExtSubscriberEnqResponse:" + e.getMessage());

        } finally {
        	printExitLogger(methodName, loggerValue, responseStr);
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     * @author akanksha.gupta
     */
    public static void generateChannelExtColEnqResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelExtColEnqResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        int invoiceSize = 0;
        EnquiryVO enqVO = null;
        try {
            final SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            final SimpleDateFormat sd1 = new SimpleDateFormat("dd-MM-yyyy");
            sdf.setLenient(true); // this is required else it will convert
            sd1.setLenient(true); // this is required else it will convert

            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>COLENQRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }
            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TRANSACTIONID></TRANSACTIONID>");
            } else {
                sbf.append("<TRANSACTIONID>").append(p_requestVO.getTransactionID()).append("</TRANSACTIONID>");
            }
            if ((!p_requestVO.isSuccessTxn())) {
                sbf.append("<ERRORKEY>").append(p_requestVO.getMessageCode()).append("</ERRORKEY>");
            } else {
                sbf.append("<ERRORKEY></ERRORKEY>");
            }

            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.C2S_SENDER_ENQ_SUCCESS, p_requestVO.getMessageArguments())).append("</MESSAGE>");
            }

            sbf.append("<DATA>");

            if (p_requestVO.isSuccessTxn()) {
                if (p_requestVO.getRequestMap() != null) {
                    sbf.append("<RECORDTYPE>SUMMARY</RECORDTYPE>");
                    sbf.append("<INVOICESIZE>").append(p_requestVO.getInvoiceSize()).append("</INVOICESIZE>");
                    sbf.append("<TOTALPENDINGBALANCE>").append(p_requestVO.getXMontoDeudaTotal()).append("</TOTALPENDINGBALANCE>");
                    sbf.append("<SERVICECODE>").append(p_requestVO.getXCodTipoServicio()).append("</SERVICECODE>");
                    sbf.append("<SERVICENAME>").append(p_requestVO.getXOpcionRecaudacion()).append("</SERVICENAME>");
                    invoiceSize = p_requestVO.getInvoiceSize();
                    if (invoiceSize != 0 && invoiceSize > 0) {
                        for (int i = 0; i < invoiceSize; i++) {
                            enqVO = (EnquiryVO) p_requestVO.getEnquiryItemList().get(i);
                            if (enqVO != null) {
                                sbf.append("<RECORD>");
                                sbf.append("<INVOICENUM>").append(enqVO.getxNumeroDoc()).append("</INVOICENUM>");
                                sbf.append("<SERVICECODE>").append(enqVO.getxTipoServicio()).append("</SERVICECODE>");
                                sbf.append("<SERVICENAME>").append(enqVO.getxDescripServ()).append("</SERVICENAME>");
                                sbf.append("<PERIODPENDINGBALANCE>").append(enqVO.getxMontoDebe()).append("</PERIODPENDINGBALANCE>");
                                sbf.append("<MINPENDINGBALANCE>").append(enqVO.getxMontoFact()).append("</MINPENDINGBALANCE>");
                                sbf.append("<INVOICEDPENDINGBALANCE>").append(enqVO.getxImportePagoMin()).append("</INVOICEDPENDINGBALANCE>");
                                sbf.append("<BILLPERIODSTART>").append(enqVO.getxFechaEmision()).append("</BILLPERIODSTART>");
                                sbf.append("<BILLPERIODEND>").append(enqVO.getxFechaVenc()).append("</BILLPERIODEND>");
                                sbf.append("</RECORD>");
                            }
                        }
                    }

                }
            }
            sbf.append("</DATA>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelExtColEnqResponse]", PretupsErrorCodesI.C2S_ERROR_EXCEPTION, "", "", "generateChannelExtSubscriberEnqResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }


    public static void generateChannelCollectionBillPaymentResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelCollectionBillPaymentResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert

            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>COLBPRESP</TYPE>");
            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateSystem)).append("</DATE>");

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.C2S_SENDER_SUCCESS, p_requestVO.getMessageArguments())).append("</MESSAGE>");
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelCollectionBillPaymentResponse]", PretupsErrorCodesI.C2S_ERROR_EXCEPTION, "", "",
                "generateChannelPostPaidBillPaymentResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateC2SPostPaidReversalResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateC2SPostPaidReversalResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert

            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>COLCCNRESP</TYPE>");
            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateSystem)).append("</DATE>");

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.C2S_REVERSAL_SUCCESS, p_requestVO.getMessageArguments())).append("</MESSAGE>");
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateC2SPostPaidReversalResponse]", PretupsErrorCodesI.C2S_ERROR_EXCEPTION, "", "",
                "generateChannelCollectionCancallationResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateUserAddResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateUserAddResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        ChannelUserVO channelUserVO = null;
        try {
        	String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            if (p_requestVO.getRequestMap() != null) {
                channelUserVO = (ChannelUserVO) p_requestVO.getRequestMap().get("CHNUSERVO");
            }
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?>");
            sbf.append("<COMMAND>");
            sbf.append("<TYPE>").append(ADD_USER_RES).append("</TYPE>");
            if (channelUserVO != null) {
                sbf.append("<USERID>").append(channelUserVO.getUserID()).append("</USERID>");
            } else {
                sbf.append("<USERID></USERID>");
            }
            sbf.append("<EXTERNALCODE>").append(p_requestVO.getRequestMap().get("EXTERNALCODE").toString()+ "</EXTERNALCODE>");
            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<MSISDN>").append(p_requestVO.getRequestMap().get("PRIMARYMSISDN").toString()).append("</MSISDN>");
            } else {
                sbf.append("<MSISDN></MSISDN>");
            }
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            Locale locale;
            if (p_requestVO.getLocale() != null) {
                locale = p_requestVO.getLocale();
            } else {
            	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
                String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
                locale = new Locale(defaultLanguage, defaultCountry);
            }
            final String senderMessage = getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            sbf.append("<MESSAGE>").append(senderMessage).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateUserAddResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChangePasswordResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateUserModifyResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateUserModifyResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        ChannelUserVO channelUserVO = null;
        try {
        	String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            if (p_requestVO.getRequestMap() != null) {
                channelUserVO = (ChannelUserVO) p_requestVO.getRequestMap().get("CHNUSERVO");
            }
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?>");
            sbf.append("<COMMAND>");
            sbf.append("<TYPE>").append(MODIFY_USER_RES).append("</TYPE>");
            if (channelUserVO != null) {
                sbf.append("<USERID>").append(channelUserVO.getUserID()).append("</USERID>");
            } else {
                sbf.append("<USERID></USERID>");
            }

            if(channelUserVO!=null)
                sbf.append("<EXTERNALCODE>").append((channelUserVO.getExternalCode()==null?"":channelUserVO.getExternalCode())).append("</EXTERNALCODE>");
            else
                sbf.append("<EXTERNALCODE></EXTERNALCODE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            Locale locale;
            if (p_requestVO.getLocale() != null) {
                locale = p_requestVO.getLocale();
            } else {
            	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
                String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
                locale = new Locale(defaultLanguage, defaultCountry);
            }
            final String senderMessage = getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            sbf.append("<MESSAGE>").append(senderMessage).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateUserModifyResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChangePasswordResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateCommonXMLResponseForCCE(RequestVO p_requestVO, String type) throws Exception {
        final String methodName = "generateCommonXMLResponseForCCE";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        final SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
        sdf.setLenient(false); // this is required else it will convert
        String channelTransfersInfoReq = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>").append(type).append("</TYPE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsErrorCodesI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            if (p_requestVO.getRequestMap() != null && !BTSLUtil.isNullString((String) p_requestVO.getRequestMap().get("RES_ERR_KEY"))) {
                sbf.append("<ERROR_KEY>").append((String) p_requestVO.getRequestMap().get("RES_ERR_KEY")).append("</ERROR_KEY>");
            } else if (p_requestVO.getRequestMap() != null) {
                sbf.append("<ERROR_KEY></ERROR_KEY>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), channelTransfersInfoReq)).append("</DATE>");
            if (p_requestVO.getRequestMap() != null && !BTSLUtil.isNullString((String) p_requestVO.getRequestMap().get("EXTREFNUM"))) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateCommonXMLResponseForCCE]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateCommonXMLResponseForCCE:" + e.getMessage());
            // throw new
            // BTSLBaseException(CLASS_NAME,"generateCommonXMLResponseForCCE",PretupsErrorCodesI.ERROR_EXCEPTION)
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateUserDeleteResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateUserDeleteResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String externalDateSystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?>");
            sbf.append("<COMMAND>");
            sbf.append("<TYPE>").append(DELETE_USER_RES).append("</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            Locale locale;
            if (p_requestVO.getLocale() != null) {
                locale = p_requestVO.getLocale();
            } else {
            	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
                String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
                locale = new Locale(defaultLanguage, defaultCountry);
            }
            final String senderMessage = getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());

            sbf.append("<MESSAGE>").append(senderMessage).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateUserDeleteResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChangePasswordResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateUserSuspendOrResumeResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateUserSuspendOrResumeResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        ChannelUserVO channelUserVO = null;
        try {
            if (p_requestVO.getRequestMap() != null) {
                channelUserVO = (ChannelUserVO) p_requestVO.getRequestMap().get("CHNUSERVO");
            }
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?>");
            sbf.append("<COMMAND>");
            sbf.append("<TYPE>").append(SUSPEND_RESUME_USER_RES).append("</TYPE>");
            if (channelUserVO != null) {
                sbf.append("<USERID>").append(channelUserVO.getUserID()).append("</USERID>");
            } else {
                sbf.append("<USERID></USERID>");
            }
            // Changes on 21-02-2014
            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTERNALCODE>").append(p_requestVO.getRequestMap().get("EXTERNALCODE").toString()).append("</EXTERNALCODE>");
            } else {
                sbf.append("<EXTERNALCODE></EXTERNALCODE>");
            }
            // Ended Here
            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<ACTION>").append(p_requestVO.getRequestMap().get("ACTION").toString()).append("</ACTION>");
            } else {
                sbf.append("<ACTION></ACTION>");
            }

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            Locale locale;
            if (p_requestVO.getLocale() != null) {
                locale = p_requestVO.getLocale();
            } else {
            	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
                String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
                locale = new Locale(defaultLanguage, defaultCountry);
            }
            final String senderMessage = getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            sbf.append("<MESSAGE>").append(senderMessage).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateUserSuspendOrResumeResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChangePasswordResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateUserRoleAddOrDeleteResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateUserRoleAddOrDeleteResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?>");
            sbf.append("<COMMAND>");
            sbf.append("<TYPE>").append(ADD_MODIFY_USER_ROLE_RES).append("</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            Locale locale;
            if (p_requestVO.getLocale() != null) {
                locale = p_requestVO.getLocale();
            } else {
            	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
                String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
                locale = new Locale(defaultLanguage, defaultCountry);
            }
            _log.debug(methodName, ">>>>>>>>>>> " + p_requestVO.getMessageCode() + "<<<<" + p_requestVO.getMessageArguments());
            final String senderMessage = getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());

            sbf.append("<MESSAGE>").append(senderMessage).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateUserRoleAddOrDeleteResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChangePasswordResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateChangePasswordResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChangePasswordResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?>");
            sbf.append("<COMMAND>");
            sbf.append("<TYPE>").append(CHANE_PASSWORD_RES).append("</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            final String senderMessage = getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            sbf.append("<MESSAGE>").append(senderMessage).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChangePasswordResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChangePasswordResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * This method generates MNPUpload Response from hashmap to XML string
     * 
     * @param p_requestVO
     *            RequestVO
     */
    public static void generateMNPUploadResponse(RequestVO p_requestVO) {
        final String methodName = "generateMNPUploadResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            generateCommonXMLResponseForCCE(p_requestVO);
            sbf.append(p_requestVO.getSenderReturnMessage());
            sbf.append("<DATA>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append(p_requestVO.getSenderReturnMessage());
            }
            sbf.append("</DATA></COMMAND>");
            p_requestVO.setSenderReturnMessage(sbf.toString());
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateMNPUploadResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateMNPUploadResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * This method generates common response from hashmap to XML string
     * 
     * @param p_requestVO
     *            RequestVO
     */
    public static void generateCommonXMLResponseForCCE(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateCommonXMLResponseForCCE";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
        sdf.setLenient(false); // this is required else it will convert
        String channelTransfersInfoReq = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            if (p_requestVO.getRequestMap() != null && !BTSLUtil.isNullString((String) p_requestVO.getRequestMap().get("TYPE")))
            // sbf.append("<TYPE>"+p_requestVO.getRequestMap().get("TYPE")+"RESP</TYPE>")
            // Added By Diwakar on 11-MAR-2014
            {
                final String requestType = (String) p_requestVO.getRequestMap().get("TYPE");
                if (requestType.equalsIgnoreCase(ParserUtility.MNP_REQ)) {
                    sbf.append("<TYPE>").append(MNP_RES).append("</TYPE>");
                } else {
                    sbf.append("<TYPE>").append(p_requestVO.getRequestMap().get("TYPE")).append("RESP</TYPE>");
                }
            }
            // Ended Here
            else {
                sbf.append("<TYPE>RESP</TYPE>");
            }
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsErrorCodesI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            if (p_requestVO.getRequestMap() != null && !BTSLUtil.isNullString((String) p_requestVO.getRequestMap().get("RES_ERR_KEY"))) {
                sbf.append("<ERROR_KEY>").append((String) p_requestVO.getRequestMap().get("RES_ERR_KEY")).append("</ERROR_KEY>");
            } else if (p_requestVO.getRequestMap() != null) {
                sbf.append("<ERROR_KEY></ERROR_KEY>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), channelTransfersInfoReq)).append("</DATE>");
            if (p_requestVO.getRequestMap() != null && !BTSLUtil.isNullString((String) p_requestVO.getRequestMap().get("EXTREFNUM"))) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateCommonXMLResponseForCCE]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateCommonXMLResponseForCCE:" + e.getMessage());
            // throw new
            // BTSLBaseException(CLASS_NAME,"generateCommonXMLResponseForCCE",PretupsErrorCodesI.ERROR_EXCEPTION)
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void parseLMBDebitRequest(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseLMBDebitRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            final HashMap requestMap = BTSLUtil.getStringToHash(requestStr, "&", "=");
            final String type = (String) requestMap.get("TYPE");
            final String msisdn = (String) requestMap.get("MSISDN");
            final String lmbAmt = (String) requestMap.get("LMB_AMT");
            final String amtCredited = (String) requestMap.get("AMT_CREDITED");
            final String mrp = (String) requestMap.get("MRP");
            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(msisdn) || BTSLUtil.isNullString(lmbAmt) || BTSLUtil.isNullString(amtCredited) || BTSLUtil
                .isNullString(mrp)) {
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_LMBDEBIT + P2P_MESSAGE_SEP + msisdn + P2P_MESSAGE_SEP + lmbAmt + P2P_MESSAGE_SEP + amtCredited + P2P_MESSAGE_SEP + mrp;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateMSISDNAssociationWithICCIDResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateMSISDNAssociationWithICCIDResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?>");
            sbf.append("<COMMAND>");
            sbf.append("<TYPE>").append(ICCID_MSISDN_MAP_RES).append("</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
                p_requestVO.setMessageCode(PretupsErrorCodesI.CCE_XML_SUCCESS_ICCID_DETAILS_FOUND4MSISDN); 
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            Locale locale;
            if (p_requestVO.getLocale() != null) {
                locale = p_requestVO.getLocale();
            } else {
            	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
                String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
                locale = new Locale(defaultLanguage, defaultCountry);
            }
            final String senderMessage = getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());

            sbf.append("<MESSAGE>").append(senderMessage).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateUserRoleAddOrDeleteResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChangePasswordResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateLMBDebitResponse(RequestVO p_requestVO) throws Exception {
    	final String methodName = "generateLMBDebitResponse";
    	StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append("TYPE=LMBDBTRESP");
            sbf.append("&MSISDN=" + p_requestVO.getFilteredMSISDN());
            sbf.append("&DATE-TIME=" + BTSLDateUtil.getLocaleTimeStamp(getDateTime(p_requestVO.getCreatedOn(), null)));
            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("&TXNID=" + _blank);
            } else {
                sbf.append("&TXNID=" + p_requestVO.getTransactionID());
            }
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("&TXN_STATUS=" + PretupsI.TXN_STATUS_SUCCESS);
                p_requestVO.setMessageCode(PretupsI.TXN_STATUS_SUCCESS);
            } else {
                sbf.append("&ERROR_CODE=" + p_requestVO.getMessageCode());
            }

            sbf.append("&Description=" + getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments()));

            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
        	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateLMBDebitResponse]",
                PretupsErrorCodesI.P2P_ERROR_EXCEPTION, "", "", "generateLMBDebitResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    // parsePrepaidRCReversalRequest
    public static void parsePrepaidRCReversalRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parsePrepaidRCReversalRequest";// "parseC2STransferRequest"
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        final String cellId = null;
        String extnwcode = null;
        final String switchId = null;
        try {

            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            String loginId=null;
			String password=null;
			String extCode=null;
			String extRefNumber=null;
            int index = 0;
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                index = requestStr.indexOf("<EXTNWCODE>");
                extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                requestHashMap.put("EXTNWCODE", extnwcode);
            }
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn1);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
        	index=requestStr.indexOf("<LOGINID>");
			if(index>=0){
			 loginId=requestStr.substring(index+"<LOGINID>".length(),requestStr.indexOf("</LOGINID>",index));
			p_requestVO.setLogin(loginId);
			requestHashMap.put("LOGINID",loginId);
			}
			index=requestStr.indexOf("<PASSWORD>");
			if(index>=0){
			 password=requestStr.substring(index+"<PASSWORD>".length(),requestStr.indexOf("</PASSWORD>",index));
			p_requestVO.setPassword(password);
			requestHashMap.put("PASSWORD",password);
			}
			index=requestStr.indexOf("<EXTCODE>");
			if(index>=0){
			 extCode=requestStr.substring(index+"<EXTCODE>".length(),requestStr.indexOf("</EXTCODE>",index));
			p_requestVO.setSenderExternalCode(extCode);
			requestHashMap.put("EXTCODE",extCode);
			}
			index=requestStr.indexOf("<EXTREFNUM>");
			if(index>=0){
			 extRefNumber=requestStr.substring(index+"<EXTREFNUM>".length(),requestStr.indexOf("</EXTREFNUM>",index));
			p_requestVO.setExternalReferenceNum(extRefNumber);
			requestHashMap.put("EXTREFNUM",extRefNumber);
			}
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN2", msisdn2);
            index = requestStr.indexOf("<TXNID>");
            String txnId = requestStr.substring(index + "<TXNID>".length(), requestStr.indexOf("</TXNID>", index));
            requestHashMap.put("TXNID", txnId);
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            requestHashMap.put("LANGUAGE2", language2);
            index = requestStr.indexOf("<CELLID>");
            p_requestVO.setRequestMap(requestHashMap);

            if (BTSLUtil.isNullString(txnId)) {
                txnId = "0";
            }
            int minMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH))).intValue();
            int maxMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE))).intValue();
         /*  if (BTSLUtil.isNullString(msisdn2)) {
              _log.error(methodName, "msisdn2 field is null ");
                final String[] strArr = new String[] { msisdn2, String.valueOf(minMsisdnLength), String.valueOf(maxMsisdnLength) };
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_NOTINRANGE, 0, strArr, null);
            } */

            // tagsMandatory=(boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)
            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }

            if (BTSLUtil.isNullString(language1) && BTSLUtil.isNullString(language2)) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + txnId + CHNL_MESSAGE_SEP + pin;
            } else if (!BTSLUtil.isNullString(language1) && BTSLUtil.isNullString(language2)) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + txnId + CHNL_MESSAGE_SEP + language1 + CHNL_MESSAGE_SEP + pin;
                p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            } else if (BTSLUtil.isNullString(language1) && !BTSLUtil.isNullString(language2)) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + txnId + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;
                p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(language2));
            } else if (!BTSLUtil.isNullString(language1) && !BTSLUtil.isNullString(language2)) {
                parsedRequestStr = PretupsI.SERVICE_TYPE_C2S_PREPAID_REVERSAL + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + txnId + CHNL_MESSAGE_SEP + language1 + CHNL_MESSAGE_SEP + language2 + CHNL_MESSAGE_SEP + pin;
                p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
                p_requestVO.setReceiverLocale(LocaleMasterCache.getLocaleFromCodeDetails(language2));
            }

            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
            if(!BTSLUtil.isNullString(msisdn2))
            p_requestVO.setReceiverMsisdn(msisdn2); 

            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                if (!BTSLUtil.isNullString(extnwcode)) {
                    p_requestVO.setExternalNetworkCode(extnwcode);
                }
                if (!BTSLUtil.isNullString(extCode)) {
                    p_requestVO.setSenderExternalCode(extCode);
                }
                if (!BTSLUtil.isNullString(loginId)) {
                    p_requestVO.setSenderLoginID(loginId);
                }
                if (!BTSLUtil.isNullString(password)) {
                    p_requestVO.setPassword(password);
                }
                if (!BTSLUtil.isNullString(extRefNumber)) {
                    p_requestVO.setExternalReferenceNum(extRefNumber);
                }
            }
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void parseGetMyNumberRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseGetMyNumberRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        try {

            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = 0;
            index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extnwcode);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn1);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            p_requestVO.setExternalReferenceNum(extRefNumber);
            requestHashMap.put("EXTREFNUM", extRefNumber);
            p_requestVO.setRequestMap(requestHashMap);
            int minMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH))).intValue();
            int maxMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE))).intValue();
            if (BTSLUtil.isNullString(msisdn1)) {
                _log.error(methodName, "msisdn1 field is null ");
                final String[] strArr = new String[] { msisdn1, String.valueOf(minMsisdnLength), String.valueOf(maxMsisdnLength) };
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_NOTINRANGE, 0, strArr, null);
            }

            parsedRequestStr = PretupsI.EXTGW_GET_MY_NUMBER + CHNL_MESSAGE_SEP + msisdn1;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                p_requestVO.setExternalNetworkCode(extnwcode);
                p_requestVO.setRequestMSISDN(msisdn1);
                p_requestVO.setExternalReferenceNum(extRefNumber);

            }
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateGetMyNumberResponse(RequestVO p_requestVO, String p_type) throws Exception {
        final String methodName = "generateGetMyNumberResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>").append(p_type).append("</TYPE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsErrorCodesI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            if (p_requestVO.getMessageCode() != null) {
                sbf.append("<ERROR_CODE>").append(p_requestVO.getMessageCode()).append("</ERROR_CODE>");
            } else if (p_requestVO.getRequestMap() != null) {
                sbf.append("<ERROR_CODE></ERROR_CODE>");
            }

            if (p_requestVO.getRequestMap() != null && !BTSLUtil.isNullString((String) p_requestVO.getRequestMap().get("EXTREFNUM"))) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }
            if (p_requestVO.getRequestMap() != null && !BTSLUtil.isNullString((String) p_requestVO.getRequestMap().get("MSISDN"))) {
                sbf.append("<MSISDN>").append((String) p_requestVO.getRequestMap().get("MSISDN")).append("</MSISDN>");
            } else {
                sbf.append("<MSISDN></MSISDN>");
            }
            Locale locale;
            if (p_requestVO.getLocale() != null) {
                locale = p_requestVO.getLocale();
            } else {
            	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
                String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
                locale = new Locale(defaultLanguage, defaultCountry);
            }
            final String senderMessage = getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            sbf.append("<MESSAGE>").append(senderMessage).append("</MESSAGE>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateCommonXMLResponseForCCE]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateCommonXMLResponseForCCE:" + e.getMessage());
            // throw new
            // BTSLBaseException("ExtAPIXMLStringParser","generateCommonXMLResponseForCCE",PretupsErrorCodesI.ERROR_EXCEPTION)
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * parseChannelExtChangeMsisdn
     * Request of Change MSISDN request from the external system.
     * 
     * @param p_requestVO
     * @throws Exception
     */
    // for MSISDN Change Functionality Start
    public static void parseChannelExtChangeMsisdn(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtChangeMsisdn";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);

            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            index = requestStr.indexOf("<NEWMSISDN>");
            final String newMsisdn = requestStr.substring(index + "<NEWMSISDN>".length(), requestStr.indexOf("</NEWMSISDN>", index));
            requestHashMap.put("NEWMSISDN", newMsisdn);

            index = requestStr.indexOf("<LOGINID>");
            final String loginID = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginID);

            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);

            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);

            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);

            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);

            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_CHANGEMSISDN + CHNL_MESSAGE_SEP + newMsisdn + CHNL_MESSAGE_SEP + pin;
            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(pin) || BTSLUtil.isNullString(newMsisdn) || BTSLUtil.isNullString(msisdn)) {
                throw new BTSLBaseException("ExtAPIXMLStringParser", "parseChannelExtChangeMsisdn", PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            }
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setRequestMap(requestHashMap);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    } // for MSISDN Change Functionality End

    /**
     * parseChannelExtETopUpRechargeStatus
     * Request of Changing ETop up Recharge Status request from the external
     * system.
     * 
     * @param p_requestVO
     * @throws Exception
     */
    // for ETU Change Recharge Status Functionality Start
    public static void parseChannelExtETopUpRechargeStatus(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtETopUpRechargeStatus";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        try {
            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);

            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
            date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);

            index = requestStr.indexOf("<EXTNWCODE>");
            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extNwCode);

            index = requestStr.indexOf("<MSISDN>");
            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn);

            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            index = requestStr.indexOf("<STATE>");
            final String state = requestStr.substring(index + "<STATE>".length(), requestStr.indexOf("</STATE>", index));
            requestHashMap.put("STATE", state);

            index = requestStr.indexOf("<LOGINID>");
            final String loginID = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            requestHashMap.put("LOGINID", loginID);

            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            requestHashMap.put("PASSWORD", password);

            index = requestStr.indexOf("<LANGUAGE1>");
            final String language = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language);

            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            requestHashMap.put("EXTREFNUM", extRefNumber);

            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            requestHashMap.put("EXTCODE", extCode);

            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_ETURECHARGE + CHNL_MESSAGE_SEP + state + CHNL_MESSAGE_SEP + pin;
            if (BTSLUtil.isNullString(type) || BTSLUtil.isNullString(pin) || BTSLUtil.isNullString(state) || BTSLUtil.isNullString(msisdn)) {
                throw new BTSLBaseException("ExtAPIXMLStringParser", "parseChannelExtETopUpRechargeStatus", PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
            }
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language));
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setRequestMap(requestHashMap);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    } // for ETU Change Recharge Status Functionality End

    /**
     * generateExtChangeMsisdnResponse
     * Response of Change MSISDN request from the external system.
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void generateExtChangeMsisdnResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtChangeMSISDNResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String EXTERNAL_DATE_FORMAT = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXCHNGMSISDNREQ</TYPE>");
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), EXTERNAL_DATE_FORMAT)).append("</DATE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }
            sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
                // VFE fix
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.EXTSYS_CHANGE_MSISDN_SUCCESS, null)).append("</MESSAGE>");
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtChangeMsisdnResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtChangeMsisdnResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * generateExtETopUpRechargeStatusResponse
     * Response of ETop Up Recharge Status from the external system.
     * 
     * @param p_requestVO
     * @throws Exception
     */
    public static void generateExtETopUpRechargeStatusResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateExtETopUpRechargeStatusResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String EXTERNAL_DATE_FORMAT = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>EXCHNGSTATUSRESP</TYPE>");
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), EXTERNAL_DATE_FORMAT)).append("</DATE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }
            sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
                // VFE fix
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.EXTSYS_MSISDN_RECHARGE_STATUS_SUCCESS, null)).append("</MESSAGE>");
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtETopUpRechargeStatusResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "",
                "generateExtETopUpRechargeStatusResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void parseChannelExtWarrantyRechargeRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtWarrantyRechargeRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String extnwcode = null;
        String switchId = null;
        try {

            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>")
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index))
             */
            int index = 0;
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                index = requestStr.indexOf("<EXTNWCODE>");
                extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                requestHashMap.put("EXTNWCODE", extnwcode);
            }
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn1);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            p_requestVO.setLogin(loginId);
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            p_requestVO.setPassword(password);
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            p_requestVO.setSenderExternalCode(extCode);
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            p_requestVO.setExternalReferenceNum(extRefNumber);
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN2", msisdn2);
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            requestHashMap.put("AMOUNT", amount);
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            requestHashMap.put("LANGUAGE2", language2);
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            requestHashMap.put("SELECTOR", selector);
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }

            requestHashMap.put("CELLID", cellId);
            requestHashMap.put("SWITCHID", switchId);

            p_requestVO.setRequestMap(requestHashMap);
            int minMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH))).intValue();
            int maxMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE))).intValue();
            if (BTSLUtil.isNullString(msisdn2)) {
                _log.error(methodName, "msisdn2 field is null ");
                final String[] strArr = new String[] { msisdn2, String.valueOf(minMsisdnLength), String.valueOf(maxMsisdnLength) };
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_NOTINRANGE, 0, strArr, null);
            }
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_RECHARGE);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            if (BTSLUtil.isNullString(amount)) {
                _log.error("parseChannelExtWarrantyRechargeRequest", "Amount field is null ");
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_AMOUNT);
            }
            if (BTSLUtil.isNullString(pin)) {
                _log.error("parseChannelExtWarrantyRechargeRequest", "PIN field is null ");
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_PIN_BLANK);
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_WARRANTY_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + pin;

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
            p_requestVO.setExternalNetworkCode(extnwcode);
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                p_requestVO.setExternalNetworkCode(extnwcode);
                p_requestVO.setSenderExternalCode(extCode);
                p_requestVO.setSenderLoginID(loginId);
                p_requestVO.setPassword(password);
                p_requestVO.setExternalReferenceNum(extRefNumber);

            }
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateChannelExtWarrantyRechargeResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelExtWarrantyRechargeResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
        sdf.setLenient(false); // this is required else it will convert
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>EXWRCRESP</TYPE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsErrorCodesI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");
            if (p_requestVO.getRequestMap() != null && !BTSLUtil.isNullString((String) p_requestVO.getRequestMap().get("EXTREFNUM"))) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }
            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            Locale locale;
            if (p_requestVO.getLocale() != null) {
                locale = p_requestVO.getLocale();
            } else {
            	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
                String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
                locale = new Locale(defaultLanguage, defaultCountry);
            }
            final String senderMessage = getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            sbf.append("<MESSAGE>").append(senderMessage).append("</MESSAGE>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelExtWarrantyRechargeResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateCommonXMLResponseForCCE:" + e
                    .getMessage());
            // throw new
            // BTSLBaseException("ExtAPIXMLStringParser","generateCommonXMLResponseForCCE",PretupsErrorCodesI.ERROR_EXCEPTION)
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void parseChannelExtAdvanceRechargeRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtAdvanceRechargeRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String extnwcode = null;
        String switchId = null;
        try {

            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */
            int index = 0;
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                index = requestStr.indexOf("<EXTNWCODE>");
                extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                requestHashMap.put("EXTNWCODE", extnwcode);
            }
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn1);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            p_requestVO.setLogin(loginId);
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            p_requestVO.setPassword(password);
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            p_requestVO.setSenderExternalCode(extCode);
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            p_requestVO.setExternalReferenceNum(extRefNumber);
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN2", msisdn2);
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            requestHashMap.put("AMOUNT", amount);
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            requestHashMap.put("LANGUAGE2", language2);
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            requestHashMap.put("SELECTOR", selector);
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }

            requestHashMap.put("CELLID", cellId);
            requestHashMap.put("SWITCHID", switchId);

            p_requestVO.setRequestMap(requestHashMap);
            int minMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH))).intValue();
            int maxMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE))).intValue();
            if (BTSLUtil.isNullString(msisdn2)) {
                _log.error(methodName, "msisdn2 field is null ");
                final String[] strArr = new String[] { msisdn2, String.valueOf(minMsisdnLength), String.valueOf(maxMsisdnLength) };
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_NOTINRANGE, 0, strArr, null);
            }
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_RECHARGE);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            if (BTSLUtil.isNullString(amount)) {
                _log.error("parseChannelExtAdvanceRechargeRequest", "Amount field is null ");
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_AMOUNT);
            }
            if (BTSLUtil.isNullString(pin)) {
                _log.error("parseChannelExtAdvanceRechargeRequest", "PIN field is null ");
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_PIN_BLANK);
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_ADVANCE_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + pin;

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
            p_requestVO.setExternalNetworkCode(extnwcode);
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                p_requestVO.setExternalNetworkCode(extnwcode);
                p_requestVO.setSenderExternalCode(extCode);
                p_requestVO.setSenderLoginID(loginId);
                p_requestVO.setPassword(password);
                p_requestVO.setExternalReferenceNum(extRefNumber);

            }
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateChannelExtAdvanceRechargeResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelExtAdvanceRechargeResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
        sdf.setLenient(false); // this is required else it will convert
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>EXADVRESP</TYPE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsErrorCodesI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");
            if (p_requestVO.getRequestMap() != null && !BTSLUtil.isNullString((String) p_requestVO.getRequestMap().get("EXTREFNUM"))) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }
            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            Locale locale;
            if (p_requestVO.getLocale() != null) {
                locale = p_requestVO.getLocale();
            } else {
            	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
                String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
                locale = new Locale(defaultLanguage, defaultCountry);
            }
            final String senderMessage = getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            sbf.append("<MESSAGE>").append(senderMessage).append("</MESSAGE>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelExtAdvanceRechargeResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateCommonXMLResponseForCCE:" + e
                    .getMessage());
            // throw new
            // BTSLBaseException("ExtAPIXMLStringParser","generateCommonXMLResponseForCCE",PretupsErrorCodesI.ERROR_EXCEPTION)
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void parseChannelExtCautionRechargeRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseChannelExtCautionRechargeRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String extnwcode = null;
        String switchId = null;
        try {

            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            /*
             * int index=requestStr.indexOf("<TYPE>");
             * String
             * type=requestStr.substring(index+"<TYPE>".length(),requestStr
             * .indexOf("</TYPE>",index));
             */
            int index = 0;
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                index = requestStr.indexOf("<EXTNWCODE>");
                extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                requestHashMap.put("EXTNWCODE", extnwcode);
            }
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn1);
            index = requestStr.indexOf("<PIN>");
            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            p_requestVO.setLogin(loginId);
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            p_requestVO.setPassword(password);
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            p_requestVO.setSenderExternalCode(extCode);
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            p_requestVO.setExternalReferenceNum(extRefNumber);
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN2", msisdn2);
            index = requestStr.indexOf("<AMOUNT>");
            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            requestHashMap.put("AMOUNT", amount);
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            requestHashMap.put("LANGUAGE2", language2);
            index = requestStr.indexOf("<SELECTOR>");
            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            requestHashMap.put("SELECTOR", selector);
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }

            requestHashMap.put("CELLID", cellId);
            requestHashMap.put("SWITCHID", switchId);

            p_requestVO.setRequestMap(requestHashMap);
            int minMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH))).intValue();
            int maxMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE))).intValue();
            if (BTSLUtil.isNullString(msisdn2)) {
                _log.error(methodName, "msisdn2 field is null ");
                final String[] strArr = new String[] { msisdn2, String.valueOf(minMsisdnLength), String.valueOf(maxMsisdnLength) };
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_NOTINRANGE, 0, strArr, null);
            }
            if (BTSLUtil.isNullString(selector)) {
                // selector=""+SystemPreferences.C2S_TRANSFER_DEF_SELECTOR_CODE
                // Changed on 27/05/07 for Service Type selector Mapping
                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache.getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_RECHARGE);
                if (serviceSelectorMappingVO != null) {
                    selector = serviceSelectorMappingVO.getSelectorCode();
                }
            }
            if (BTSLUtil.isNullString(amount)) {
                _log.error("parseChannelExtCautionRechargeRequest", "Amount field is null ");
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_AMOUNT);
            }
            if (BTSLUtil.isNullString(pin)) {
                _log.error("parseChannelExtCautionRechargeRequest", "PIN field is null ");
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_PIN_BLANK);
            }
            parsedRequestStr = PretupsI.SERVICE_TYPE_CHNL_CAUTION_RECHARGE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + pin;

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
            p_requestVO.setExternalNetworkCode(extnwcode);
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                p_requestVO.setExternalNetworkCode(extnwcode);
                p_requestVO.setSenderExternalCode(extCode);
                p_requestVO.setSenderLoginID(loginId);
                p_requestVO.setPassword(password);
                p_requestVO.setExternalReferenceNum(extRefNumber);

            }
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateChannelExtCautionRechargeResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelExtCautionRechargeResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        // SimpleDateFormat sdf = new SimpleDateFormat ("yyyyMMddHHmmss")
        final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
        sdf.setLenient(false); // this is required else it will convert
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>EXCAUTRESP</TYPE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsErrorCodesI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }

            /*
             * if(p_requestVO.getMessageCode()!=null) {
             * sbf.append("<ERROR_CODE>"+p_requestVO.getMessageCode()+
             * "</ERROR_CODE>");
             * } else if (p_requestVO.getRequestMap()!=null) {
             * sbf.append("<ERROR_CODE></ERROR_CODE>");
             * }
             */
            String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");
            if (p_requestVO.getRequestMap() != null && !BTSLUtil.isNullString((String) p_requestVO.getRequestMap().get("EXTREFNUM"))) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }
            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }
            Locale locale;
            if (p_requestVO.getLocale() != null) {
                locale = p_requestVO.getLocale();
            } else {
            	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
                String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
                locale = new Locale(defaultLanguage, defaultCountry);
            }
            final String senderMessage = getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments());
            sbf.append("<MESSAGE>").append(senderMessage).append("</MESSAGE>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateChannelExtCautionRechargeResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateCommonXMLResponseForCCE:" + e
                    .getMessage());
            // throw new
            // BTSLBaseException("ExtAPIXMLStringParser","generateCommonXMLResponseForCCE",PretupsErrorCodesI.ERROR_EXCEPTION)
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /*
     * //added Brajesh for Loyalty Points Enquiry By channel User
     * // this method generates the respone msg for LMS points enquiry service.
     * this gives the enquiry type, transaction status, current loyalty points,
     * //cellid and swithid
     * //for USSD Gateway
     * public static void generateLMSPointsEnquiryResponse(RequestVO
     * p_requestVO) throws Exception
     * {
     * final String methodName = "generateLMSPointsEnquiryResponse"
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Entered p_requestVO: "+p_requestVO.toString())
     * }
     * String responseStr= null
     * StringBuilder sbf=null
     * java.util.Date date=new java.util.Date()
     * try
     * {
     * sbf=new StringBuilder(1024)
     * sbf.append("<?xml version=\"1.0\"?><COMMAND>")
     * sbf.append("<TYPE>LMSPTENQRES</TYPE>")
     * if(p_requestVO.isSuccessTxn()) {
     * sbf.append("<TXNSTATUS>"+PretupsI.TXN_STATUS_SUCCESS+"</TXNSTATUS>")
     * } else
     * { String key=p_requestVO.getMessageCode()
     * String message = BTSLUtil.getMessage(p_requestVO.getLocale(), key, null)
     * if(message.indexOf("_") != -1)
     * {
     * message = message.substring(0,message.indexOf("_"))
     * }
     * sbf.append("<TXNSTATUS>"+message+"</TXNSTATUS>")
     * }
     * sbf.append("<POINTS>"+p_requestVO.getCurrentLoyaltyPoints()+"</POINTS>")
     * sbf.append("<CELLID>"+p_requestVO.getCellId()+"</CELLID>")
     * sbf.append("<SWITCHID>"+p_requestVO.getSwitchId()+"</SWITCHID>")
     * sbf.append("</COMMAND>")
     * responseStr = sbf.toString()
     * p_requestVO.setSenderReturnMessage(responseStr)
     * }
     * catch(Exception e)
     * {
     * _log.errorTrace(methodName, e)
     * _log.error(methodName,"Exception e: "+e)
     * p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION)
     * EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI
     * .RAISED,EventLevelI.FATAL,
     * "ExtAPIXMLStringParser[generateLMSPointsEnquiryResponse]"
     * ,PretupsErrorCodesI
     * .XML_ERROR_EXCEPTION,"","","generateLMSPointsEnquiryResponse:"
     * +e.getMessage())
     * }
     * finally
     * {
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Exiting responseStr: "+responseStr)
     * }
     * }
     * }
     * 
     * //added Brajesh for Loyalty Points Enquiry By channel User
     * // this method generates the respone msg for LMS points enquiry service.
     * this gives the enquiry type, transaction status, current loyalty points,
     * //cellid and swithid
     * //for USSD Gateway
     * public static void generateLMSPointsRedemptionResponse(RequestVO
     * p_requestVO) throws Exception
     * {
     * final String methodName = "generateLMSPointsRedemptionResponse"
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Entered p_requestVO: "+p_requestVO.toString())
     * }
     * String responseStr= null
     * StringBuilder sbf=null
     * java.util.Date date=new java.util.Date()
     * try
     * {
     * sbf=new StringBuilder(1024)
     * sbf.append("<?xml version=\"1.0\"?><COMMAND>")
     * sbf.append("<TYPE>LMSPTREDRES</TYPE>")
     * if(p_requestVO.isSuccessTxn()) {
     * sbf.append("<TXNSTATUS>"+PretupsI.TXN_STATUS_SUCCESS+"</TXNSTATUS>")
     * } else
     * {
     * String message = p_requestVO.getMessageCode()
     * if(message.indexOf("_") != -1)
     * {
     * message = message.substring(0,message.indexOf("_"))
     * }
     * sbf.append("<TXNSTATUS>"+message+"</TXNSTATUS>")
     * }
     * sbf.append("<REDTXNID>"+p_requestVO.getRedemptionId()+"</REDTXNID>")
     * sbf.append("<REMPOINTS>"+p_requestVO.getCurrentLoyaltyPoints()+"</REMPOINTS>"
     * )
     * sbf.append("<CREDITEDAMOUNT>"+p_requestVO.getCreditedAmount()+
     * "</CREDITEDAMOUNT>")
     * 
     * sbf.append("<CELLID>"+p_requestVO.getCellId()+"</CELLID>")
     * sbf.append("<SWITCHID>"+p_requestVO.getSwitchId()+"</SWITCHID>")
     * sbf.append("</COMMAND>")
     * responseStr = sbf.toString()
     * p_requestVO.setSenderReturnMessage(responseStr)
     * }
     * catch(Exception e)
     * {
     * _log.errorTrace(methodName, e)
     * _log.error(methodName,"Exception e: "+e)
     * p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION)
     * EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI
     * .RAISED,EventLevelI.FATAL,
     * "ExtAPIXMLStringParser[generateLMSPointsEnquiryResponse]"
     * ,PretupsErrorCodesI
     * .XML_ERROR_EXCEPTION,"","","generateLMSPointsEnquiryResponse:"
     * +e.getMessage())
     * }
     * finally
     * {
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Exiting responseStr: "+responseStr)
     * }
     * }
     * }
     */

    // Added By Brajesh For Loyalts Points Enquiry Through External Gateway
    // this method will recieve the message from in XML format from EXTGW
    // gateway and Parse that message and extract the msisd, pin,
    // cellid,switchid
    /*
     * public static void parseLMSPointsEnquiryRequestEXTGW(RequestVO
     * p_requestVO) throws Exception
     * {
     * final String methodName = "parseLMSPointsEnquiryRequestEXTGW";
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Entered p_requestVO: "+p_requestVO.toString())
     * }
     * String parsedRequestStr=null
     * String extnwcode=null
     * String extCode = null
     * String password = null
     * String loginId = null
     * String language1=null
     * String msisdn1=null
     * String pin=null
     * 
     * 
     * try
     * {
     * 
     * HashMap requestHashMap =new HashMap()
     * String requestStr=p_requestVO.getRequestMessage()
     * int index=0
     * if(p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.
     * REQUEST_SOURCE_TYPE_EXTGW))
     * {
     * index=requestStr.indexOf("<EXTNWCODE>")
     * extnwcode=requestStr.substring(index+"<EXTNWCODE>".length(),requestStr.
     * indexOf("</EXTNWCODE>",index))
     * requestHashMap.put("EXTNWCODE",extnwcode)
     * }
     * index=requestStr.indexOf("<TYPE>")
     * String
     * type=requestStr.substring(index+"<TYPE>".length(),requestStr.indexOf
     * ("</TYPE>",index))
     * requestHashMap.put("TYPE",type)
     * 
     * index=requestStr.indexOf("<DATE>")
     * String
     * date=requestStr.substring(index+"<DATE>".length(),requestStr.indexOf
     * ("</DATE>",index))
     * requestHashMap.put("DATE",date)
     * 
     * 
     * index=requestStr.indexOf("<MSISDN1>")
     * if(index>0)
     * {
     * msisdn1=requestStr.substring(index+"<MSISDN1>".length(),requestStr.indexOf
     * ("</MSISDN1>",index));
     * requestHashMap.put("MSISDN1",msisdn1)
     * }
     * index=requestStr.indexOf("<PIN>")
     * if(index>0)
     * {
     * pin=requestStr.substring(index+"<PIN>".length(),requestStr.indexOf("</PIN>"
     * ,index))
     * requestHashMap.put("PIN",pin)
     * }
     * 
     * index=requestStr.indexOf("<LOGINID>")
     * if(index>0)
     * {
     * loginId=requestStr.substring(index+"<LOGINID>".length(),requestStr.indexOf
     * ("</LOGINID>",index))
     * p_requestVO.setLogin(loginId)
     * requestHashMap.put("LOGINID",loginId)
     * }
     * index=requestStr.indexOf("<PASSWORD>")
     * if(index>0)
     * {
     * password=requestStr.substring(index+"<PASSWORD>".length(),requestStr.indexOf
     * ("</PASSWORD>",index))
     * p_requestVO.setPassword(password)
     * requestHashMap.put("PASSWORD",password)
     * }
     * index=requestStr.indexOf("<EXTCODE>")
     * if(index>0)
     * {
     * extCode=requestStr.substring(index+"<EXTCODE>".length(),requestStr.indexOf
     * ("</EXTCODE>",index))
     * p_requestVO.setSenderExternalCode(extCode)
     * requestHashMap.put("EXTCODE",extCode)
     * }
     * index=requestStr.indexOf("<LANGUAGE1>")
     * if(index>0)
     * {
     * language1=requestStr.substring(index+"<LANGUAGE1>".length(),requestStr.
     * indexOf("</LANGUAGE1>",index))
     * requestHashMap.put("LANGUAGE1",language1)
     * }
     * 
     * p_requestVO.setRequestMap(requestHashMap)
     * 
     * 
     * 
     * if(BTSLUtil.isNullString(language1) ){
     * parsedRequestStr=PretupsI.SERVICE_TYPE_LMS_POINTS_ENQUIRY+CHNL_MESSAGE_SEP
     * +msisdn1+CHNL_MESSAGE_SEP+pin
     * }else if(!BTSLUtil.isNullString(language1))
     * {
     * parsedRequestStr=PretupsI.SERVICE_TYPE_LMS_POINTS_ENQUIRY+CHNL_MESSAGE_SEP
     * +msisdn1+CHNL_MESSAGE_SEP+pin+CHNL_MESSAGE_SEP+language1
     * p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(
     * language1))
     * }
     * 
     * 
     * p_requestVO.setDecryptedMessage(parsedRequestStr)
     * p_requestVO.setRequestMSISDN(msisdn1)
     * if(p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.
     * REQUEST_SOURCE_TYPE_EXTGW))
     * {
     * if(!BTSLUtil.isNullString(extnwcode)) {
     * p_requestVO.setExternalNetworkCode(extnwcode)
     * }
     * if(!BTSLUtil.isNullString(extCode)) {
     * p_requestVO.setSenderExternalCode(extCode)
     * }
     * if(!BTSLUtil.isNullString(loginId)) {
     * p_requestVO.setSenderLoginID(loginId)
     * }
     * if(!BTSLUtil.isNullString(password)) {
     * p_requestVO.setPassword(password)
     * }
     * 
     * }
     * }
     * catch(Exception e)
     * {
     * _log.errorTrace(methodName,e);
     * p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT
     * )
     * _log.error(methodName,"Exception e: "+e)
     * throw new
     * BTSLBaseException("ExtAPIXMLStringParser",methodName,PretupsErrorCodesI
     * .C2S_ERROR_INVALIDMESSAGEFORMAT)
     * }
     * finally
     * {
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Exiting parsedRequestStr="+parsedRequestStr+
     * "p_requestVO: "+p_requestVO.toString())
     * }
     * 
     * }
     * }
     */

    /*
     * public static void parseLMSPointsRedemptionRequestEXTGW(RequestVO
     * p_requestVO) throws Exception
     * {
     * final String methodName = "parseLMSPointsRedemptionRequestEXTGW";
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Entered p_requestVO: "+p_requestVO.toString())
     * }
     * String parsedRequestStr=null
     * String extnwcode=null
     * String extCode = null
     * String password = null
     * String loginId = null
     * String language1=null
     * String msisdn1=null
     * String pin=null
     * try
     * {
     * 
     * HashMap requestHashMap =new HashMap()
     * String requestStr=p_requestVO.getRequestMessage()
     * int index=0
     * if(p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.
     * REQUEST_SOURCE_TYPE_EXTGW))
     * {
     * index=requestStr.indexOf("<EXTNWCODE>")
     * extnwcode=requestStr.substring(index+"<EXTNWCODE>".length(),requestStr.
     * indexOf("</EXTNWCODE>",index))
     * requestHashMap.put("EXTNWCODE",extnwcode)
     * }
     * index=requestStr.indexOf("<TYPE>")
     * String
     * type=requestStr.substring(index+"<TYPE>".length(),requestStr.indexOf
     * ("</TYPE>",index))
     * requestHashMap.put("TYPE",type)
     * 
     * index=requestStr.indexOf("<DATE>")
     * String
     * date=requestStr.substring(index+"<DATE>".length(),requestStr.indexOf
     * ("</DATE>",index))
     * requestHashMap.put("DATE",date)
     * 
     * 
     * index=requestStr.indexOf("<MSISDN1>")
     * if(index>0)
     * {
     * msisdn1=requestStr.substring(index+"<MSISDN1>".length(),requestStr.indexOf
     * ("</MSISDN1>",index))
     * requestHashMap.put("MSISDN1",msisdn1)
     * }
     * index=requestStr.indexOf("<PIN>")
     * if(index>0)
     * {
     * pin=requestStr.substring(index+"<PIN>".length(),requestStr.indexOf("</PIN>"
     * ,index))
     * requestHashMap.put("PIN",pin)
     * }
     * 
     * index=requestStr.indexOf("<POINTS>")
     * String
     * points=requestStr.substring(index+"<POINTS>".length(),requestStr.indexOf
     * ("</POINTS>",index))
     * requestHashMap.put("POINTS",points)
     * 
     * index=requestStr.indexOf("<LOGINID>")
     * if(index>0)
     * {
     * loginId=requestStr.substring(index+"<LOGINID>".length(),requestStr.indexOf
     * ("</LOGINID>",index))
     * p_requestVO.setLogin(loginId)
     * requestHashMap.put("LOGINID",loginId)
     * }
     * index=requestStr.indexOf("<PASSWORD>");
     * if(index>0)
     * {
     * password=requestStr.substring(index+"<PASSWORD>".length(),requestStr.indexOf
     * ("</PASSWORD>",index))
     * p_requestVO.setPassword(password)
     * requestHashMap.put("PASSWORD",password)
     * }
     * index=requestStr.indexOf("<EXTCODE>")
     * if(index>0)
     * {
     * extCode=requestStr.substring(index+"<EXTCODE>".length(),requestStr.indexOf
     * ("</EXTCODE>",index))
     * p_requestVO.setSenderExternalCode(extCode)
     * requestHashMap.put("EXTCODE",extCode)
     * }
     * index=requestStr.indexOf("<LANGUAGE1>")
     * if(index>0)
     * {
     * language1=requestStr.substring(index+"<LANGUAGE1>".length(),requestStr.
     * indexOf("</LANGUAGE1>",index))
     * requestHashMap.put("LANGUAGE1",language1)
     * }
     * 
     * p_requestVO.setRequestMap(requestHashMap)
     * 
     * 
     * 
     * 
     * if(BTSLUtil.isNullString(language1) ){
     * parsedRequestStr=PretupsI.SERVICE_TYPE_LMS_POINTS_REDEMPTION+CHNL_MESSAGE_SEP
     * +msisdn1+CHNL_MESSAGE_SEP+pin+CHNL_MESSAGE_SEP+points
     * }else if(!BTSLUtil.isNullString(language1))
     * {
     * parsedRequestStr=PretupsI.SERVICE_TYPE_LMS_POINTS_REDEMPTION+CHNL_MESSAGE_SEP
     * +msisdn1+CHNL_MESSAGE_SEP+pin+CHNL_MESSAGE_SEP+points+CHNL_MESSAGE_SEP+
     * language1
     * p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(
     * language1))
     * }
     * 
     * 
     * p_requestVO.setDecryptedMessage(parsedRequestStr)
     * p_requestVO.setRequestMSISDN(msisdn1)
     * if(p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.
     * REQUEST_SOURCE_TYPE_EXTGW))
     * {
     * if(!BTSLUtil.isNullString(extnwcode)) {
     * p_requestVO.setExternalNetworkCode(extnwcode)
     * }
     * if(!BTSLUtil.isNullString(extCode)) {
     * p_requestVO.setSenderExternalCode(extCode)
     * }
     * if(!BTSLUtil.isNullString(loginId)) {
     * p_requestVO.setSenderLoginID(loginId)
     * }
     * if(!BTSLUtil.isNullString(password)) {
     * p_requestVO.setPassword(password)
     * }
     * 
     * }
     * }
     * catch(Exception e)
     * {
     * _log.errorTrace(methodName,e)
     * p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT
     * )
     * _log.error(methodName,"Exception e: "+e)
     * throw new
     * BTSLBaseException("ExtAPIXMLStringParser",methodName,PretupsErrorCodesI
     * .C2S_ERROR_INVALIDMESSAGEFORMAT)
     * }
     * finally
     * {
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Exiting parsedRequestStr="+parsedRequestStr+
     * "p_requestVO: "+p_requestVO.toString())
     * }
     * 
     * }
     * }
     */
    // Added By Brajesh For Loyalts Points Enquiry Through External Gateway
    // this method will generate the message in XML format for EXTGW gateway and
    // Parse that message and extract the msisdn
    /*
     * public static void generateLMSPointsEnquiryResponseEXTGW(RequestVO
     * p_requestVO) throws Exception
     * {
     * final String methodName = "generateLMSPointsEnquiryResponseEXTGW"
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Entered p_requestVO: "+p_requestVO.toString())
     * }
     * String responseStr= null
     * StringBuilder sbf=null
     * java.util.Date date=new java.util.Date()
     * try
     * {
     * sbf=new StringBuilder(1024)
     * sbf.append("<?xml version=\"1.0\"?><COMMAND>")
     * sbf.append("<TYPE>LMSPTREDRES</TYPE>")
     * // sbf.append("<DATE>"+p_requestVO.getCellId()+"</DATE>")
     * //sbf.append("<EXTNWCODE>"+p_requestVO.getSwitchId()+"</EXTNWCODE>")
     * if(p_requestVO.isSuccessTxn()) {
     * sbf.append("<TXNSTATUS>"+PretupsI.TXN_STATUS_SUCCESS+"</TXNSTATUS>")
     * } else
     * {
     * String message = p_requestVO.getMessageCode()
     * if(message.indexOf("_") != -1)
     * {
     * message = message.substring(0,message.indexOf("_"))
     * }
     * sbf.append("<TXNSTATUS>"+message+"</TXNSTATUS>")
     * }
     * sbf.append("<POINTS>"+p_requestVO.getCurrentLoyaltyPoints()+"</POINTS>")
     * 
     * sbf.append("</COMMAND>")
     * responseStr = sbf.toString()
     * p_requestVO.setSenderReturnMessage(responseStr)
     * }
     * catch(Exception e)
     * {
     * _log.errorTrace(methodName, e)
     * _log.error(methodName,"Exception e: "+e)
     * p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION)
     * EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI
     * .RAISED,EventLevelI.FATAL,
     * "ExtAPIXMLStringParser[generateLMSPointsEnquiryResponse]"
     * ,PretupsErrorCodesI
     * .XML_ERROR_EXCEPTION,"","","generateLMSPointsEnquiryResponse:"
     * +e.getMessage())
     * }
     * finally
     * {
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Exiting responseStr: "+responseStr)
     * }
     * }
     * }
     */
    /*
     * public static void generateLMSPointsRedemptionResponseEXTGW(RequestVO
     * p_requestVO) throws Exception
     * {
     * final String methodName = "generateLMSPointsRedemptionResponseEXTGW"
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Entered p_requestVO: "+p_requestVO.toString())
     * }
     * String responseStr= null
     * StringBuilder sbf=null
     * java.util.Date date=new java.util.Date()
     * try
     * {
     * sbf=new StringBuilder(1024)
     * sbf.append("<?xml version=\"1.0\"?><COMMAND>")
     * sbf.append("<TYPE>LMSPTREDRES</TYPE>")
     * // sbf.append("<DATE>"+p_requestVO.getCellId()+"</DATE>")
     * //sbf.append("<EXTNWCODE>"+p_requestVO.getSwitchId()+"</EXTNWCODE>")
     * if(p_requestVO.isSuccessTxn()) {
     * sbf.append("<TXNSTATUS>"+PretupsI.TXN_STATUS_SUCCESS+"</TXNSTATUS>")
     * } else
     * {
     * String message = p_requestVO.getMessageCode()
     * if(message.indexOf("_") != -1)
     * {
     * message = message.substring(0,message.indexOf("_"))
     * }
     * sbf.append("<TXNSTATUS>"+message+"</TXNSTATUS>")
     * }
     * 
     * sbf.append("<REDTXNID>"+p_requestVO.getRedemptionId()+"</REDTXNID>")
     * sbf.append("<REMPOINTS>"+p_requestVO.getCurrentLoyaltyPoints()+"</REMPOINTS>"
     * )
     * sbf.append("<CREDITEDAMOUNT>"+p_requestVO.getCreditedAmount()+
     * "</CREDITEDAMOUNT>")
     * sbf.append("</COMMAND>")
     * responseStr = sbf.toString()
     * p_requestVO.setSenderReturnMessage(responseStr)
     * }
     * catch(Exception e)
     * {
     * _log.errorTrace(methodName, e)
     * _log.error(methodName,"Exception e: "+e)
     * p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION)
     * EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI
     * .RAISED,EventLevelI.FATAL,
     * "ExtAPIXMLStringParser[generateLMSPointsRedemptionResponseEXTGW]"
     * ,PretupsErrorCodesI
     * .XML_ERROR_EXCEPTION,"","","generateLMSPointsRedemptionResponseEXTGW:"
     * +e.getMessage())
     * }
     * finally
     * {
     * if(_log.isDebugEnabled()) {
     * _log.debug(methodName,"Exiting responseStr: "+responseStr)
     * }
     * }
     * }
     */

    public static void parseVoucherConsumptionRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseVoucherConsumptionRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String extnwcode = null;
        String switchId = null;
        final int out_of_bound = -1;
        
        try {

            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = 0;
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                index = requestStr.indexOf("<EXTNWCODE>");
                extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                requestHashMap.put("EXTNWCODE", extnwcode);
            }
            

            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn1);
            
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN2", msisdn2);
            
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);

            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            p_requestVO.setSenderExternalCode(extCode);
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            p_requestVO.setExternalReferenceNum(extRefNumber);
            requestHashMap.put("EXTREFNUM", extRefNumber);

            index = requestStr.indexOf("<AMOUNT>");
            String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            requestHashMap.put("AMOUNT", amount);
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            requestHashMap.put("LANGUAGE2", language2);
            index = requestStr.indexOf("<SELECTOR>");
            final String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            requestHashMap.put("SELECTOR", selector);
            index = requestStr.indexOf("<VOUCHERCODE>");
            String vouchercode = requestStr.substring(index + "<VOUCHERCODE>".length(), requestStr.indexOf("</VOUCHERCODE>", index));
            index = requestStr.indexOf("<SERIALNUMBER>");
            String serialNo = requestStr.substring(index + "<SERIALNUMBER>".length(), requestStr.indexOf("</SERIALNUMBER>", index));
            //vouchercode = VomsUtil.decryptText(vouchercode);
            vouchercode = _operatorUtil.decryptPINPassword(vouchercode);
            requestHashMap.put("VOUCHERCODE", vouchercode);
            requestHashMap.put("SERIALNUMBER", serialNo);
            
            
            index = requestStr.indexOf("<CELLID>");
            if (index > 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
                requestHashMap.put("CELLID", cellId);
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index > 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
                requestHashMap.put("SWITCHID", switchId);
            }
            
            index = requestStr.indexOf("<INFO1>");
            if(index>0)
            {
            	final String info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
            	requestHashMap.put("INFO1", info1);
            }
            index = requestStr.indexOf("<INFO2>");
            if(index>0)
            {
            	final String info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
            	requestHashMap.put("INFO2", info2);
            }
            index = requestStr.indexOf("<INFO3>");
            if(index>0)
            {
            	final String info3 = requestStr.substring(index + "<INFO3>".length(), requestStr.indexOf("</INFO3>", index));
            	requestHashMap.put("INFO3", info3);
            }
            index = requestStr.indexOf("<INFO4>");
            if(index>0)
            {
            	final String info4 = requestStr.substring(index + "<INFO4>".length(), requestStr.indexOf("</INFO4>", index));
            	requestHashMap.put("INFO4", info4);
            }
            index = requestStr.indexOf("<INFO5>");
            if(index>0)
            {
            	final String info5 = requestStr.substring(index + "<INFO5>".length(), requestStr.indexOf("</INFO5>", index));
            	requestHashMap.put("INFO5", info5);
            }
            
            p_requestVO.setRequestMap(requestHashMap);

            if(msisdn2 != null && !msisdn2.isEmpty() ){
                pin = "0";
            }

            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }
           	p_requestVO.setRequestMSISDN(msisdn1);
           	p_requestVO.setFilteredMSISDN(msisdn1);
           	int vomsDamgPinLengthAllow = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.VOMS_DAMG_PIN_LNTH_ALLOW))).intValue();
           	int vomsPinMinLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.VOMS_PIN_MIN_LENGTH))).intValue();
           	int vomsPinMaxLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.VOMS_PIN_MAX_LENGTH))).intValue();
           	if (BTSLUtil.isNullString(vouchercode)) {
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_VOUCHERCODE);
            }
            else if (vomsDamgPinLengthAllow>vouchercode.length()) {
            	final String[] strArr = new String[] {((Integer)vomsDamgPinLengthAllow).toString()};
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.ERROR_VOMS_INVALID_PIN_LENGTH, 0, strArr, null);
               
            }else if((vouchercode.length()<vomsPinMinLength || vouchercode.length()>vomsPinMaxLength) &&
            		BTSLUtil.isNullString(serialNo)){
            	throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.CHNL_ERROR_SNDR_INVALID_PIN);
            }
			
          
           	if(msisdn2 != null && !msisdn2.isEmpty() ){
           		parsedRequestStr = PretupsI.SERVICE_TYPE_VOUCHER_CONSUMPTION + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + vouchercode;
           	}else{
           	 parsedRequestStr = PretupsI.SERVICE_TYPE_VOUCHER_CONSUMPTION + CHNL_MESSAGE_SEP + msisdn1 + CHNL_MESSAGE_SEP + vouchercode;
           	}
            
           if(serialNo != null){
        	   parsedRequestStr = parsedRequestStr + CHNL_MESSAGE_SEP + serialNo;
           }
           
           if(selector != null){
        	   parsedRequestStr = parsedRequestStr + CHNL_MESSAGE_SEP + selector;
           }
            /*if (language1 != null) {
                parsedRequestStr = parsedRequestStr + CHNL_MESSAGE_SEP + language1;
            }
            if (cellId != null) {
                parsedRequestStr = parsedRequestStr + CHNL_MESSAGE_SEP + cellId;
            }
            if (switchId != null) {
                parsedRequestStr = parsedRequestStr + CHNL_MESSAGE_SEP + switchId;
            }*/

            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            

            p_requestVO.setLanguage1(language1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
            p_requestVO.setExternalNetworkCode(extnwcode);
            p_requestVO.setVoucherCode(vouchercode);
            p_requestVO.setSerialnumber(serialNo);
            
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                p_requestVO.setExternalNetworkCode(extnwcode);
                p_requestVO.setSenderExternalCode(extCode);
                p_requestVO.setExternalReferenceNum(extRefNumber);

            }

        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void parseChannelInfoRequest(RequestVO p_requestVO) throws Exception {
        final String methodName = "parseGetChannelInfoRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        try {

            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = 0;
            index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            requestHashMap.put("TYPE", type);
            index = requestStr.indexOf("<EXTNWCODE>");
            final String extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
            requestHashMap.put("EXTNWCODE", extnwcode);
            index = requestStr.indexOf("<DATE>");
             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
             date = BTSLDateUtil.getGregorianDateInString(date);
            requestHashMap.put("DATE", date);
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn1);

            p_requestVO.setRequestMap(requestHashMap);
            int minMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_MSISDN_LENGTH))).intValue();
            int maxMsisdnLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MAX_MSISDN_LENGTH_CODE))).intValue();
            if (BTSLUtil.isNullString(msisdn1)) {
                _log.error(methodName, "msisdn1 field is null ");
                final String[] strArr = new String[] { msisdn1, String.valueOf(minMsisdnLength), String.valueOf(maxMsisdnLength) };
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.CHNL_ERROR_RECR_MSISDN_NOTINRANGE, 0, strArr, null);
            }

            parsedRequestStr = PretupsI.EXTGW_CHANNEL_USER_DETAILS + CHNL_MESSAGE_SEP + msisdn1;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                p_requestVO.setExternalNetworkCode(extnwcode);
                p_requestVO.setRequestMSISDN(msisdn1);

            }
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void generateChannelInfoResponse(RequestVO p_requestVO, String p_type) throws Exception {
        final String methodName = "generateChannelInfoResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        ChannelUserVO channelUserVO = null;
        final HashMap requestHashMap = p_requestVO.getRequestMap();
        final ArrayList chnlList = (ArrayList) requestHashMap.get("CHNLUSRLIST");
        if (chnlList != null) {
            channelUserVO = (ChannelUserVO) chnlList.get(0);
        }
        try {
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>").append(p_type).append("</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<STATUS>").append(channelUserVO.getStatus()).append("</STATUS>");
                sbf.append("<LANG>").append(channelUserVO.getLanguage()).append("</LANG>");
                final ArrayList arrayList = (ArrayList) p_requestVO.getValueObject();
                if (arrayList != null) {
                    UserBalancesVO userBalancesVO = null;
                    UserBalancesVO userBalancesVO1 = null;
                    final int listSize = arrayList.size();
                    sbf.append("<USERBALANCES>");
                    for (int i = 0; i < listSize; i++) {

                        userBalancesVO = (UserBalancesVO) arrayList.get(i);
                        if ("MAIN".equals(userBalancesVO.getBalanceType())) {
                            sbf.append("<RECORD>");
                            sbf.append("<PRODUCTCODE>").append(userBalancesVO.getProductShortCode()).append("</PRODUCTCODE>");
                            sbf.append("<PRODUCTSHORTNAME>").append(userBalancesVO.getProductShortName()).append("</PRODUCTSHORTNAME>");
                            sbf.append("<BALANCE>").append(userBalancesVO.getBalanceStr()).append("</BALANCE>");
                            boolean userProductMultipleWallet = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USER_PRODUCT_MULTIPLE_WALLET);
                            if (userProductMultipleWallet) {
                                sbf.append("<OTHERBALANCES>");
                                sbf.append("<BALANCES>");
                                for (int j = 0; j < listSize; j++) {
                                    userBalancesVO1 = (UserBalancesVO) arrayList.get(j);
                                    if (userBalancesVO.getProductShortCode().equals(userBalancesVO1.getProductShortCode()) && !"MAIN".equals(userBalancesVO1.getBalanceType())) {
                                        sbf.append("<BALANCETYPE>").append(userBalancesVO1.getBalanceType()).append("</BALANCETYPE>");
                                        sbf.append("<VALUE>").append(userBalancesVO1.getBalanceStr()).append("</VALUE>");
                                    }
                                }
                                sbf.append("</BALANCES>");
                                sbf.append("</OTHERBALANCES>");
                            }
                            sbf.append("</RECORD>");
                            sbf.append("</USERBALANCES>");
                        }

                    }
                } else {
                    sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
                }

                String assServType = null;
                String assMSISDN = null;
                final String assMSISDNType = null;
                final String assMSISDNDate = null;
                for (int m = 0; m < channelUserVO.getAssociatedServiceTypeList().size(); m++) {
                    if (m == 0) {
                        assServType = ((ListValueVO) channelUserVO.getAssociatedServiceTypeList().get(m)).getValue();
                    } else {
                        assServType = assServType + "," + ((ListValueVO) channelUserVO.getAssociatedServiceTypeList().get(m)).getValue();
                    }
                }
                sbf.append("<ASSO_SERVICES>").append(assServType).append("</ASSO_SERVICES>");
                sbf.append("<CREATION_DATE>").append(channelUserVO.getCreatedOn()).append("</CREATION_DATE>");
                sbf.append("<CATEGORY>").append(channelUserVO.getCategoryCode()).append("</CATEGORY>");
                sbf.append("<EXTERNAL_CODE>").append(channelUserVO.getExternalCode()).append("</EXTERNAL_CODE>");
                int channelUserVAsscMsisdnLists=channelUserVO.getAsscMsisdnList().size();
                for (int m = 0; m < channelUserVAsscMsisdnLists; m++) {
                    if (channelUserVO.getAsscMsisdnList().size() > 0) {
                        if (m == 0) {
                            assMSISDN = ((ListValueVO) channelUserVO.getAsscMsisdnList().get(m)).getLabel();
                        } else {
                            assMSISDN = assMSISDN + "," + ((ListValueVO) channelUserVO.getAsscMsisdnList().get(m)).getLabel();
                        }
                    } else {
                        sbf.append("<ASSOCIATED_MSISDN></ASSOCIATED_MSISDN>");
                    }
                }
                if (!BTSLUtil.isNullString(assMSISDN)) {
                    sbf.append("<ASSOCIATEDMSISDN>").append(assMSISDN).append("</ASSOCIATEDMSISDN>");
                } else {
                    sbf.append("<ASSOCIATED_MSISDN></ASSOCIATED_MSISDN>");
                }
                if ("SLAVE".equalsIgnoreCase(channelUserVO.getCategoryCode())) {
                    sbf.append("<ASSOCIATEDMSISDNTYPE>SLAVE</ASSOCIATEDMSISDNTYPE>");
                    sbf.append("<PPSMASSDATE></PPSMASSDATE>");
                } else {
                    if (channelUserVO.getAsscMsisdnList() != null && !channelUserVO.getAsscMsisdnList().isEmpty()) {
                        sbf.append("<ASSOCIATEDMSISDNTYPE>").append(((ListValueVO) channelUserVO.getAsscMsisdnList().get(0)).getValue().split("[,]")[0]).append("</ASSOCIATEDMSISDNTYPE>");
                        sbf.append("<PPSMASSDATE>").append(((ListValueVO) channelUserVO.getAsscMsisdnList().get(0)).getValue().split("[,]")[1]).append("</PPSMASSDATE>");
                    } else {
                        sbf.append("<ASSOCIATEDMSISDNTYPE></ASSOCIATEDMSISDNTYPE>");
                        sbf.append("<PPSMASSDATE></PPSMASSDATE>");
                    }

                }
                sbf.append("<EMPCODE>").append(channelUserVO.getEmpCode()).append("</EMPCODE>");
                sbf.append("<PINRESETRQD>").append(channelUserVO.getPinReset()).append("</PINRESETRQD>");
                sbf.append("<PSWDRESETRQD>").append(channelUserVO.getPasswordReset()).append("</PSWDRESETRQD>");
            } else {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            }

            Locale locale;
            if (p_requestVO.getLocale() != null) {
                locale = p_requestVO.getLocale();
            } else {
            	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
                String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
                locale = new Locale(defaultLanguage, defaultCountry);
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateExtChannelUserBalanceResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtChannelUserBalanceResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    public static void parseVoucherConsumptionO2CRequest(RequestVO p_requestVO) throws Exception {

        final String methodName = "parseVoucherConsumptionO2CRequest";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        // boolean tagsMandatory
        String cellId = null;
        String extnwcode = null;
        String switchId = null;
        final int out_of_bound = -1;
        try {

            final HashMap requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();

            int index = 0;
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                index = requestStr.indexOf("<EXTNWCODE>");
                extnwcode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                requestHashMap.put("EXTNWCODE", extnwcode);
            }
            index = requestStr.indexOf("<MSISDN>");
            final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
            requestHashMap.put("MSISDN", msisdn1);
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            requestHashMap.put("PIN", pin);
            index = requestStr.indexOf("<LOGINID>");
            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
            p_requestVO.setLogin(loginId);
            requestHashMap.put("LOGINID", loginId);
            index = requestStr.indexOf("<PASSWORD>");
            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
            p_requestVO.setPassword(password);
            requestHashMap.put("PASSWORD", password);
            index = requestStr.indexOf("<EXTCODE>");
            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            p_requestVO.setSenderExternalCode(extCode);
            requestHashMap.put("EXTCODE", extCode);
            index = requestStr.indexOf("<EXTREFNUM>");
            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
            p_requestVO.setExternalReferenceNum(extRefNumber);
            requestHashMap.put("EXTREFNUM", extRefNumber);
            index = requestStr.indexOf("<MSISDN2>");
            final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
            requestHashMap.put("MSISDN2", msisdn2);
            index = requestStr.indexOf("<AMOUNT>");
            String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
            requestHashMap.put("AMOUNT", amount);
            index = requestStr.indexOf("<LANGUAGE1>");
            final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
            requestHashMap.put("LANGUAGE1", language1);
            index = requestStr.indexOf("<LANGUAGE2>");
            final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
            requestHashMap.put("LANGUAGE2", language2);
            index = requestStr.indexOf("<SELECTOR>");
            final String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            requestHashMap.put("SELECTOR", selector);
            index = requestStr.indexOf("<VOUCHERCODE>");
            final String vouchercode = requestStr.substring(index + "<VOUCHERCODE>".length(), requestStr.indexOf("</VOUCHERCODE>", index));
            requestHashMap.put("VOUCHERCODE", vouchercode);
            p_requestVO.setVoucherCode(vouchercode);

            index = requestStr.indexOf("<SERIALNUMBER>");
            final String serialnumber = requestStr.substring(index + "<SERIALNUMBER>".length(), requestStr.indexOf("</SERIALNUMBER>", index));
            if (!BTSLUtil.isNullString(serialnumber)) {
            	int minVoucherCodeLength = ((Integer) (PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_VOUCHER_CODE_LENGTH))).intValue();
                if (vouchercode.length() < minVoucherCodeLength) {
                    throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.ERROR_INSUFF_LENGTH_VOUCHERCODE);
                }

            }
            requestHashMap.put("SERIALNUMBER", serialnumber);
            p_requestVO.setSerialnumber(serialnumber);
            index = requestStr.indexOf("<CELLID>");
            if (index >= 0) {
                cellId = requestStr.substring(index + "<CELLID>".length(), requestStr.indexOf("</CELLID>", index));
            }
            index = requestStr.indexOf("<SWITCHID>");
            if (index >= 0) {
                switchId = requestStr.substring(index + "<SWITCHID>".length(), requestStr.indexOf("</SWITCHID>", index));
            }

            requestHashMap.put("CELLID", cellId);
            requestHashMap.put("SWITCHID", switchId);

            p_requestVO.setRequestMap(requestHashMap);

            if (BTSLUtil.isNullString(amount)) {
                amount = "0";
            }

            if (BTSLUtil.isNullString(pin)) {
                pin = "0";
            }

            if ((boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY)) {
                try {
                    if (BTSLUtil.isNullString(cellId)) {
                        throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
                    }
                    if (BTSLUtil.isNullString(switchId)) {
                        throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
                    }
                } catch (BTSLBaseException btsle) {
                    throw btsle;
                }
            }

            parsedRequestStr = PretupsI.SERVICE_TYPE_VOUCHER_CONSUMPTION_O2C + CHNL_MESSAGE_SEP + msisdn1 + CHNL_MESSAGE_SEP + vouchercode;
            if (language1 != null) {
                parsedRequestStr = parsedRequestStr + CHNL_MESSAGE_SEP + language1;
            }
            parsedRequestStr = parsedRequestStr + CHNL_MESSAGE_SEP + pin;
            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
            p_requestVO.setReqSelector(selector);
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setRequestMSISDN(msisdn1);
            p_requestVO.setCellId(cellId);
            p_requestVO.setSwitchId(switchId);
            p_requestVO.setExternalNetworkCode(extnwcode);
            if (p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW)) {
                p_requestVO.setExternalNetworkCode(extnwcode);
                p_requestVO.setSenderExternalCode(extCode);
                p_requestVO.setSenderLoginID(loginId);
                p_requestVO.setPassword(password);
                p_requestVO.setExternalReferenceNum(extRefNumber);

            }

        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }

    }

    public static void generateVoucherConsumptionO2CResponse(RequestVO p_requestVO, String p_type) throws Exception {

        final String methodName = "generateVoucherConsumptionO2CResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String EXTERNAL_DATE_FORMAT = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert

            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>").append(p_type).append("</TYPE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), EXTERNAL_DATE_FORMAT)).append("</DATE>");

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }

            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }

            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.VOUCHER_CONSUMPTION_SUCCESS, p_requestVO.getMessageArguments())).append("</MESSAGE>");
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateC2STransferResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateC2STransferResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }

    }

    public static void generateVoucherConsumptionResponse(RequestVO p_requestVO, String p_type) throws Exception {

        final String methodName = "generateVoucherConsumptionResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String EXTERNAL_DATE_FORMAT = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false); // this is required else it will convert

            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>").append(p_type).append("</TYPE>");

            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), EXTERNAL_DATE_FORMAT)).append("</DATE>");

            if (p_requestVO.getRequestMap() != null) {
                sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
            } else {
                sbf.append("<EXTREFNUM></EXTREFNUM>");
            }
            if(PretupsI.REQUEST_SOURCE_TYPE_EXTGW.equals(p_requestVO.getRequestGatewayType())){
            	          
            if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                sbf.append("<TXNID></TXNID>");
            } else {
                sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
            }

            if (!p_requestVO.isSuccessTxn()) {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
                sbf.append("<TOPUP></TOPUP>");
            	sbf.append("<POSTBALANCE></POSTBALANCE>");
            	sbf.append("<EXPDATE></EXPDATE>");
            	
            } else {
                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), PretupsErrorCodesI.VOUCHER_CONSUMPTION_SUCCESS, p_requestVO.getMessageArguments())).append("</MESSAGE>");
               if(p_requestVO.getRequestMap()!=null) {
                	
                	if(p_requestVO.getRequestMap().containsKey("TOPUP_VALUE"))
                		sbf.append("<TOPUP>").append(p_requestVO.getRequestMap().get("TOPUP_VALUE")+ "</TOPUP>");
                	else
                		sbf.append("<TOPUP></TOPUP>");
                	
                	if(p_requestVO.getRequestMap().containsKey("POST_BALANCE"))
                		sbf.append("<POSTBALANCE>").append(p_requestVO.getRequestMap().get("POST_BALANCE")+ "</POSTBALANCE>");
                	else
                		sbf.append("<POSTBALANCE></POSTBALANCE>");
                		
                	if(p_requestVO.getRequestMap().containsKey("EXP_DATE"))
                		sbf.append("<EXPDATE>").append(p_requestVO.getRequestMap().get("EXP_DATE")+ "</EXPDATE>");
                	else
                		sbf.append("<EXPDATE></EXPDATE>");
                }
                else {
                	sbf.append("<TOPUP></TOPUP>");
                	sbf.append("<POSTBALANCE></POSTBALANCE>");
                	sbf.append("<EXPDATE></EXPDATE>");
                }
            }
           
            }

            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateC2STransferResponse]",
                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateC2STransferResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }

    }

    // / added for VOMS

    /**
     * @param p_requestVO
     * @throws Exception
     *             parse the voucher enquiry request
     */
    public static void parseVoucherEnqReq(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseVoucherEnqReq";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        String extNwCode = null;
        String loginId = null;
        String extRefNumber = null;
        String extCode = null;
        String voucherType = null;
        try {
         	final Map requestHashMap = new HashMap();
            
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            index = requestStr.indexOf("<SUBID>");
            final String subsId = requestStr.substring(index + "<SUBID>".length(), requestStr.indexOf("</SUBID>", index));
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            index = requestStr.indexOf("<SNO>");
            final String sno = requestStr.substring(index + "<SNO>".length(), requestStr.indexOf("</SNO>", index));
        
            index = requestStr.indexOf("<VTYPE>");
            if (index > 0) {
                voucherType = requestStr.substring(index + "<VTYPE>".length(), requestStr.indexOf("</VTYPE>", index));
            }

            try {
                index = requestStr.indexOf("<LOGINID>");
                loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                requestHashMap.put("LOGINID", loginId);
                index = requestStr.indexOf("<PASSWORD>");
                final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                index = requestStr.indexOf("<EXTNWCODE>");
                extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                index = requestStr.indexOf("<LANGUAGE1>");
                final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
                index = requestStr.indexOf("<LANGUAGE2>");
                final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
                index = requestStr.indexOf("<EXTCODE>");
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));

            } catch (Exception e) {
                _log.error(methodName, "Exception e: " + e);
            }

            pin = _operatorUtil.decryptPINPassword(pin);
            if (BTSLUtil.isNullString(pin)) {
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_VOUCHERCODE);
            }

            parsedRequestStr = VOMSI.SERVICE_TYPE_VOUCHER_ENQ + CHNL_MESSAGE_SEP + subsId + CHNL_MESSAGE_SEP + pin+CHNL_MESSAGE_SEP + sno;
            
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setReceiverMsisdn(subsId);
            p_requestVO.setVoucherType(voucherType);
            p_requestVO.setRequestMessageArray(PretupsBL.parsePlainMessage(parsedRequestStr));
            p_requestVO.setVoucherCode(pin);
            p_requestVO.setSerialNo(sno);
            p_requestVO.setRequestMap((HashMap)requestHashMap);
            p_requestVO.setNetworkCode(extNwCode);

        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("XMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * this is used to construct response mesage for voucher enq
     * 
     * @param p_requestVO
     *            RequestVO
     * @return responseStr java.lang.String
     */
    public static void generateVoucherConsResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateVoucherConsResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>VOUCONSRESP</TYPE>");
            sbf.append("<TXNSTATUS>").append(BTSLUtil.NullToString(p_requestVO.getVomsMessage())).append("</TXNSTATUS>");
            sbf.append("<SNO>").append(BTSLUtil.NullToString(p_requestVO.getSerialNo())).append("</SNO>");
            sbf.append("<TOPUP>").append(PretupsBL.getDisplayAmount(p_requestVO.getVoucherAmount())).append("</TOPUP>");			
			if(BTSLUtil.isNullString(p_requestVO.getVoucherStatus())){
				sbf.append("<VSTATUS></VSTATUS>");
			}else{
				sbf.append("<VSTATUS>"+p_requestVO.getVoucherStatus()+"</VSTATUS>");
				
			}if(BTSLUtil.isNullString(p_requestVO.getConsumed())){
				sbf.append("<COMSUMED></COMSUMED>");
			}else{
				sbf.append("<COMSUMED>"+p_requestVO.getConsumed()+"</COMSUMED>");
			}
			try{
				sbf.append("<VEXPIRYDATE>"+BTSLUtil.getDateStringFromDate(p_requestVO.getExpiryDate())+"</VEXPIRYDATE>");
			}catch (Exception e) {
				loggerValue.setLength(0);
				loggerValue.append(EXCEPTION);
				loggerValue.append(e.getMessage());
				_log.error(methodName, loggerValue);
			    _log.errorTrace(methodName,e);
				sbf.append("<VEXPIRYDATE></VEXPIRYDATE>");
			}
			sbf.append("<SUBID>"+BTSLUtil.NullToString(p_requestVO.getReceiverMsisdn())+"</SUBID>");
			if(!BTSLUtil.isNullString(p_requestVO.getTransactionID()) && !"null".equalsIgnoreCase(p_requestVO.getTransactionID())){
			sbf.append("<TXNID>"+BTSLUtil.NullToString(p_requestVO.getTransactionID())+"</TXNID>");
			}else
				sbf.append("<TXNID>NA</TXNID>");
			VomsVoucherVO vo=(VomsVoucherVO)p_requestVO.getValueObject();
			
			if(!BTSLUtil.isNullString(p_requestVO.getTalkTime()) && !"null".equalsIgnoreCase(p_requestVO.getTalkTime()))
				sbf.append("<TALKTIME>" +BTSLUtil.NullToString( p_requestVO.getTalkTime())).append("</TALKTIME>");
			else
				sbf.append("<TALKTIME>NA</TALKTIME>");
			if(vo!=null){
			if(!BTSLUtil.isNullString(vo.getProductID()))
				sbf.append("<VOUCHERPROFILEID>").append(vo.getProductID()).append("</VOUCHERPROFILEID>");
			else
				sbf.append("<VOUCHERPROFILEID>NA</VOUCHERPROFILEID>");
			if(!BTSLUtil.isNullString(vo.getProductName()))
	            sbf.append("<VOUCHERPROFILENAME>").append(vo.getProductName()).append("</VOUCHERPROFILENAME>");
			else
				sbf.append("<VOUCHERPROFILENAME>NA</VOUCHERPROFILENAME>");
			}
			else{
				sbf.append("<VOUCHERPROFILEID>NA</VOUCHERPROFILEID>");
				sbf.append("<VOUCHERPROFILENAME>NA</VOUCHERPROFILENAME>");
			}
			if(!BTSLUtil.isNullString(p_requestVO.getValidity()))
	            sbf.append("<VALIDITY>").append(p_requestVO.getValidity()).append("</VALIDITY>");
			else
				sbf.append("<VALIDITY>NA</VALIDITY>");
            if(!BTSLUtil.NullToString(p_requestVO.getVomsError()).equalsIgnoreCase("success"))
                sbf.append("<ERROR>").append(p_requestVO.getVomsMessage()).append("</ERROR>");
    			else
    				sbf.append("<ERROR></ERROR>");
            sbf.append("<MESSAGE>" +BTSLUtil.NullToString( p_requestVO.getVomsError())).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
        	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "XMLStringParser[generateVoucherEnqResponse]",
                PretupsErrorCodesI.P2P_ERROR_EXCEPTION, "", "", "generateVoucherEnqResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     *             to parse voucher consumption request
     */
    public static void parseVoucherConsReq(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseVoucherConsReq";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        String extNwCode = null;
        String loginId = null;
        String extRefNumber = null;
        String extCode = null;
        String voucherType = null;
        String sno = null;
        String txnID =null;
		String password = null;
        String infoType=null;
        int txn_index=0;
        int info_index=0;
        try {
        	final Map requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            index = requestStr.indexOf("<SUBID>");
            final String SUBID = requestStr.substring(index + "<SUBID>".length(), requestStr.indexOf("</SUBID>", index));
            index = requestStr.indexOf("<VTYPE>");
            if (index > 0) {
                voucherType = requestStr.substring(index + "<VTYPE>".length(), requestStr.indexOf("</VTYPE>", index));
            }

            index=requestStr.indexOf("<SNO>");
			if(index>0)
			sno=requestStr.substring(index+"<SNO>".length(),requestStr.indexOf("</SNO>",index));
		
			  txn_index=requestStr.indexOf("<TXNID>");
			if(txn_index>0)
			 txnID=requestStr.substring(txn_index+"<TXNID>".length(),requestStr.indexOf("</TXNID>",txn_index));
		
			info_index=requestStr.indexOf("<INFO_TYPE>");	
			if(info_index>0)
			 infoType=requestStr.substring(info_index+"<INFO_TYPE>".length(),requestStr.indexOf("</INFO_TYPE>",info_index));
			
			if (BTSLUtil.isNullString(pin)) {
			p_requestVO.setVomsMessage(PretupsErrorCodesI.C2S_ERROR_BLANK_PIN);
			p_requestVO.setVomsError("PIN BLANK");
                	throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_PIN);
            }
            pin = _operatorUtil.decryptPINPassword(pin);
            
            if (BTSLUtil.isNullString(SUBID) || SUBID.length()>12) {
		  p_requestVO.setVomsMessage(PretupsErrorCodesI.C2S_ERROR_BLANK_SUBID);
		  p_requestVO.setVomsError("SUBSID BLANK OR INVALID");
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_SUBID);
            }
            
            if (BTSLUtil.isNullString(sno)) {
            	p_requestVO.setVomsMessage(PretupsErrorCodesI.C2S_ERROR_BLANK_SNO);
      		  p_requestVO.setVomsError("SNO BLANK");
                      throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_SNO);
		    }
            if(txn_index>0){
            if (BTSLUtil.isNullString(txnID)|| txnID.length()>15) {
		  p_requestVO.setVomsMessage(PretupsErrorCodesI.C2S_ERROR_BLANK_TXNID);
		  p_requestVO.setVomsError("TXNID BLANK OR TXNID INVALID");
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_TXNID);
            }
            }
            if(info_index>0){
            if (BTSLUtil.isNullString(infoType)|| !infoType.equalsIgnoreCase("1")) {
		  p_requestVO.setVomsMessage(PretupsErrorCodesI.C2S_ERROR_BLANK_INFOTYPE);
		  p_requestVO.setVomsError("INFOTYPE BLANK OR INVALID");
                throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_INFOTYPE);
            }
            }
            try {
                index = requestStr.indexOf("<SUBID>");
                final String subsId = requestStr.substring(index + "<SUBID>".length(), requestStr.indexOf("</SUBID>", index));
                index = requestStr.indexOf("<LOGINID>");
                loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                requestHashMap.put("LOGINID", loginId);
                index = requestStr.indexOf("<PASSWORD>");
                password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                requestHashMap.put("PASSWORD", password);
                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                index = requestStr.indexOf("<EXTNWCODE>");
                extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                index = requestStr.indexOf("<LANGUAGE1>");
                final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
                index = requestStr.indexOf("<LANGUAGE2>");
                final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
                index = requestStr.indexOf("<EXTCODE>");
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            } catch (Exception e) {
                _log.error(methodName, "Exception e: " + e);
            }
            parsedRequestStr = VOMSI.SERVICE_TYPE_VOUCHER_CON + CHNL_MESSAGE_SEP + pin + CHNL_MESSAGE_SEP + SUBID+CHNL_MESSAGE_SEP+txnID+CHNL_MESSAGE_SEP+infoType+CHNL_MESSAGE_SEP+sno;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setPassword(password);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setVoucherType(voucherType);
            p_requestVO.setRequestMessageArray(PretupsBL.parsePlainMessage(parsedRequestStr));
            p_requestVO.setRequestMap((HashMap)requestHashMap);
        }
        catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        }catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("XMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * this is used to construct response mesage for voucher enq
     * 
     * @param p_requestVO
     *            RequestVO
     * @return responseStr java.lang.String
     */
    public static void generateVoucherEnqResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateVoucherEnqResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>VOUENQRESP</TYPE>");
            sbf.append("<TXNSTATUS>").append(p_requestVO.getVomsMessage()).append("</TXNSTATUS>");
            sbf.append("<SNO>").append(p_requestVO.getSerialNo()).append("</SNO>");
            sbf.append("<TOPUP>").append(p_requestVO.getVoucherAmount()).append("</TOPUP>");
            sbf.append("<SUBID>").append(BTSLUtil.NullToString(p_requestVO.getReceiverMsisdn())).append("</SUBID>");
            sbf.append("<REGION>").append(p_requestVO.getVomsRegion()).append("</REGION>");
            sbf.append("<VALID>").append(p_requestVO.getVomsValid()).append("</VALID>");
            sbf.append("<MESSAGE>"+p_requestVO.getVomsMessage()+"</MESSAGE>");
            sbf.append("<ERROR>").append(p_requestVO.getVomsError()).append("</ERROR>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
        	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "XMLStringParser[generateVoucherEnqResponse]",
                PretupsErrorCodesI.P2P_ERROR_EXCEPTION, "", "", "generateVoucherEnqResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * this is used to construct response mesage for voucher enq
     * 
     * @param p_requestVO
     *            RequestVO
     * @return responseStr java.lang.String
     */
    public static void generateVoucherRetResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateVoucherRetResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            String pin = p_requestVO.getEvdPin();
            pin = VomsUtil.encryptText(pin);

            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>VOURETRESP</TYPE>");
            sbf.append("<TXNSTATUS>").append(p_requestVO.getVomsMessage()).append("</TXNSTATUS>");
            sbf.append("<Serial_No>").append(p_requestVO.getSerialNo()).append("</Serial_No>");
            sbf.append("<Pin>").append(pin).append("</Pin>");
            sbf.append("<VOUCHER_EXPIRY_DATE>").append(p_requestVO.getExpiryDate()).append("</VOUCHER_EXPIRY_DATE>");
            sbf.append("<State>").append(p_requestVO.getState()).append("</State>");
            sbf.append("<SUBID>").append(p_requestVO.getReceiverMsisdn()).append("</SUBID>");
            sbf.append("<TALKTIME>").append(p_requestVO.getTalkTime()).append("</TALKTIME>");
            sbf.append("<VALIDITY>").append(p_requestVO.getValidity()).append("</VALIDITY>");
            sbf.append("<ErrorCode>").append(p_requestVO.getVomsError()).append("</ErrorCode>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
        	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "XMLStringParser[generateVoucherEnqResponse]",
                PretupsErrorCodesI.P2P_ERROR_EXCEPTION, "", "", "generateVoucherEnqResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     *             to parse voucher consumption request
     */
    public static void parseVoucherRetReq(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseVoucherRetReq";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        String extNwCode = null;
        String loginId = null;
        String extRefNumber = null;
        String extCode = null;
        final String voucherType = null;
        String QUANTITY = ""; 
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            index = requestStr.indexOf("<SUBID>");
            final String SUBID = requestStr.substring(index + "<SUBID>".length(), requestStr.indexOf("</SUBID>", index));
            index = requestStr.indexOf("<MRP>");
            final String mrp = requestStr.substring(index + "<MRP>".length(), requestStr.indexOf("</MRP>", index));
            index = requestStr.indexOf("<SERVICE>");
            final String service = requestStr.substring(index + "<SERVICE>".length(), requestStr.indexOf("</SERVICE>", index));
            index = requestStr.indexOf("<SELECTOR>");
            final String SELECTOR = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
            if ( (index = requestStr.indexOf("<QUANTITY>") ) != -1 ) {
            	QUANTITY = requestStr.substring(index + "<QUANTITY>".length(), requestStr.indexOf("</QUANTITY>", index));
            }
            index = requestStr.indexOf("<TXNID>");
            final String TXNID = requestStr.substring(index + "<TXNID>".length(), requestStr.indexOf("</TXNID>", index));

            if(!QUANTITY.isEmpty()){
            	parsedRequestStr = VOMSI.SERVICE_TYPE_VOUCHER_REC + CHNL_MESSAGE_SEP + SUBID + CHNL_MESSAGE_SEP + mrp + CHNL_MESSAGE_SEP + service + CHNL_MESSAGE_SEP + SELECTOR + CHNL_MESSAGE_SEP + QUANTITY + CHNL_MESSAGE_SEP + TXNID;
            }
            else{
            	parsedRequestStr = VOMSI.SERVICE_TYPE_VOUCHER_REC + CHNL_MESSAGE_SEP + SUBID + CHNL_MESSAGE_SEP + mrp + CHNL_MESSAGE_SEP + service + CHNL_MESSAGE_SEP + SELECTOR + CHNL_MESSAGE_SEP + TXNID;
            }
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setVoucherType(voucherType);
            p_requestVO.setRequestMessageArray(PretupsBL.parsePlainMessage(parsedRequestStr));
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            _log.errorTrace(methodName, e);
            throw new BTSLBaseException("XMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    // added for voucher query and rollback request
    /**
     * @param p_requestVO
     * @throws Exception
     *             to parse voucher query request
     */
    public static void parseVoucherQueryReq(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseVoucherQueryReq";
        final String className = "ExtAPIStringParser";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        String extNwCode = null;
        String loginId = null;
        String extRefNumber = null;
        String extCode = null;
        String voucherType = null;
        String password = null;
		String action="";
		String masterSerialNo=null;
        try {
        	final Map requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            index = requestStr.indexOf("<VTYPE>");
            if (index > 0) {
                voucherType = requestStr.substring(index + "<VTYPE>".length(), requestStr.indexOf("</VTYPE>", index));
            }
            if(requestStr.contains("<MASTERSERIALNO>")){
	            index = requestStr.indexOf("<MASTERSERIALNO>");
	            masterSerialNo = requestStr.substring(index + "<MASTERSERIALNO>".length(), requestStr.indexOf("</MASTERSERIALNO>", index));
	            requestHashMap.put(VOMSI.MASTER_SERIAL_NO, masterSerialNo);
            }
            index = requestStr.indexOf("<SNO>");
            String serialNo = requestStr.substring(index + "<SNO>".length(), requestStr.indexOf("</SNO>", index));
			// Code modified <ACTION> tag is added  by Naveen
			index=requestStr.indexOf("<ACTION>");
			if(index>0)
			 action=requestStr.substring(index+"<ACTION>".length(),requestStr.indexOf("</ACTION>",index));
			if(!BTSLUtil.isNullString(action)){
			if(action.length()<2 && (action.equalsIgnoreCase(PretupsI.VOUCHER_ENQ_ACTION_PIN) || action.equalsIgnoreCase(PretupsI.VOUCHER_ENQ_ACTION_SNO) || action.equalsIgnoreCase(PretupsI.VOUCHER_ENQ_ACTION_BOTH)))
			{}else{
				throw new BTSLBaseException(className,methodName,PretupsErrorCodesI.C2S_ERROR_INVALID_ACTION_MSGFORMAT);
			   }
			}
                        
            pin = _operatorUtil.decryptPINPassword(pin);
            
            if (BTSLUtil.isNullString(pin))
            {
            	pin="0";
            }
            if (BTSLUtil.isNullString(serialNo))
            {
            	serialNo="0";
            }
            
            try {
            		String SystemWiseGatewayCode="";
	                SystemWiseGatewayCode = Constants.getProperty("SYSTEM_TYPE_CHANNEL_GATEWAY_CODES");
	                if(!SystemWiseGatewayCode.contains(p_requestVO.getRequestGatewayCode())){	            
		                index = requestStr.indexOf("<LOGINID>");
		                loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
		                requestHashMap.put("LOGINID", loginId);
		                index = requestStr.indexOf("<PASSWORD>");
		                password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
		                requestHashMap.put("PASSWORD", password);
		                index = requestStr.indexOf("<LANGUAGE2>");
		                final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
		                index = requestStr.indexOf("<EXTCODE>");
		                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
		                index = requestStr.indexOf("<LANGUAGE1>");
		                final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
	                }

                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                index = requestStr.indexOf("<EXTNWCODE>");
                extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                

            } catch (Exception e) {
                _log.errorTrace(methodName, e);
                _log.error(methodName, "Exception e: " + e.getMessage());
            }
            
            parsedRequestStr = VOMSI.SERVICE_TYPE_VOUCHER_QRY + CHNL_MESSAGE_SEP + pin + CHNL_MESSAGE_SEP + serialNo;
            
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            //set password
            p_requestVO.setPassword(password);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setVoucherType(voucherType);
            
            p_requestVO.setVoucherCode(pin);
            p_requestVO.setSerialnumber(serialNo);
           
            
            p_requestVO.setRequestMessageArray(PretupsBL.parsePlainMessage(parsedRequestStr));
            
			requestHashMap.put("voucherAction", action);
            p_requestVO.setRequestMap((HashMap)requestHashMap);
        } catch (BTSLBaseException be) {
            _log.error("parseCreditTransferRequest", " BTSL Exception while parsing Request Message :" + be.getMessage());
            if(be.isKey())
			{
				p_requestVO.setVomsMessage(be.getMessageKey());
				p_requestVO.setVomsError(BTSLUtil.getMessage(p_requestVO.getLocale(), be.getMessageKey(), be.getArgs()));
			}
			throw be;
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(className, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    // added for voucher query and rollback request
    /**
     * this is used to construct response mesage for voucher query
     * 
     * @param p_requestVO
     *            RequestVO
     * @return responseStr java.lang.String
     */
    public static void generateVoucherQueryResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateVoucherQueryResponse";
        final String classMethodName = "ExtAPIStringParser[generateVoucherQueryResponse]";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        VomsVoucherVO vo=new VomsVoucherVO();
		String action =null;
        try {
            String pin = p_requestVO.getPin();
			if(null!=p_requestVO.getRequestMap()){
			if(p_requestVO.getRequestMap().containsKey("voucherAction")){
				action=(String)p_requestVO.getRequestMap().get("voucherAction");	
				}
			}
			if(!BTSLUtil.isNullString(pin))
            pin = VomsUtil.encryptText(pin);

            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>VOUQRYRESP</TYPE>");
            sbf.append("<TXNSTATUS>").append(p_requestVO.getVomsMessage()).append("</TXNSTATUS>");
			String success = "200";
			if (_log.isDebugEnabled()) {
		            _log.debug(methodName, "PIN: " + p_requestVO.getPin());
		        }
            if(p_requestVO.getVomsMessage()!=null && p_requestVO.getVomsMessage().equalsIgnoreCase(success)){
				            pin = VomsUtil.decryptText(p_requestVO.getPin());
			}
			if(!BTSLUtil.isNullString(pin) && !BTSLUtil.isNullString(action)){
				if(action.equalsIgnoreCase(PretupsI.VOUCHER_ENQ_ACTION_SNO)){
					sbf.append("<PIN></PIN>");
					sbf.append("<SNO>"+p_requestVO.getSerialNo()+"</SNO>");					
				}else if(action.equalsIgnoreCase(PretupsI.VOUCHER_ENQ_ACTION_PIN)){
					sbf.append("<PIN>"+pin+"</PIN>");
					sbf.append("<SNO></SNO>");					
				}else if(action.equalsIgnoreCase(PretupsI.VOUCHER_ENQ_ACTION_BOTH)){
					sbf.append("<PIN>"+pin+"</PIN>");
					sbf.append("<SNO>"+p_requestVO.getSerialNo()+"</SNO>");					
				}
			}else{
				if(null!=pin)
            sbf.append("<PIN>").append(pin).append("</PIN>");
            else
            	sbf.append("<PIN></PIN>");
            
            if(null!=p_requestVO.getSerialNo())
            sbf.append("<SNO>").append(p_requestVO.getSerialNo()).append("</SNO>");
            else
            	sbf.append("<SNO></SNO>");
			}
            
            sbf.append("<TOPUP>").append(p_requestVO.getVoucherAmount()).append("</TOPUP>");
            
            if(null!=p_requestVO.getVoucherStatus())
            sbf.append("<STATUS>").append(p_requestVO.getVoucherStatus()).append("</STATUS>");
            else
            	sbf.append("<STATUS></STATUS>");
            
            String openingPrevTag = XmlTagValueConstant.TAG_XML_LEFT_ANGULAR_BRACKET + XmlTagValueConstant.TAG_PREV_STATUS +
            		XmlTagValueConstant.TAG_XML_CLOSING_ANGULAR_BRACKET;
        	String closingPrevTag = XmlTagValueConstant.TAG_XML_RIGHT_ANGULAR_BRACKET + XmlTagValueConstant.TAG_PREV_STATUS +
            		XmlTagValueConstant.TAG_XML_CLOSING_ANGULAR_BRACKET;
           
        	if(null!=p_requestVO.getPreviousStatus()) {   	
            	sbf.append(openingPrevTag + p_requestVO.getPreviousStatus() + closingPrevTag);
            }else {
            	sbf.append(openingPrevTag + closingPrevTag);
            }
            
            sbf.append("<EXTNWCODE>"+p_requestVO.getExternalNetworkCode()+"</EXTNWCODE>");
            
            if(null!=p_requestVO.getVoucherStatus() && !p_requestVO.getVoucherStatus().equalsIgnoreCase("NA"))
            {
            	sbf.append("<STATUS_DESCRIPTION>").append(((LookupsVO)LookupsCache.getObject(VOMSI.LOOKUP_VOUCHER_STATUS, p_requestVO.getVoucherStatus())).getLookupName()).append("</STATUS_DESCRIPTION>");
            }
            else
            {
            	sbf.append("<STATUS_DESCRIPTION></STATUS_DESCRIPTION>");
            }
            if(null!=p_requestVO.getValueObject())
            {
            	vo=(VomsVoucherVO)p_requestVO.getValueObject();
            }
            
            if(p_requestVO.getExpiryDate()!=null)
            sbf.append("<VOUCHER_EXPIRY_DATE>"+BTSLUtil.getDateStringFromDate(p_requestVO.getExpiryDate())+"</VOUCHER_EXPIRY_DATE>");
            else
            	sbf.append("<VOUCHER_EXPIRY_DATE>NA</VOUCHER_EXPIRY_DATE>");
			try{
	            if(null!=vo.getConsumedOn())
	            	sbf.append("<VOUCHER_CONSUMED_DATE>"+BTSLUtil.getDateStringFromDate(vo.getConsumedOn(),PretupsI.TIMESTAMP_DDMMYYYYHHMMSS)+"</VOUCHER_CONSUMED_DATE>");
				else
					sbf.append("<VOUCHER_CONSUMED_DATE>NA</VOUCHER_CONSUMED_DATE>");
			 }catch (Exception e) {
				 _log.error(methodName, "Exception " + e);
				 _log.errorTrace(methodName,e);
					sbf.append("<VOUCHER_CONSUMED_DATE></VOUCHER_CONSUMED_DATE>");
				}
			
			try{
	            if(null!=vo.getGeneratedDateOn())
	            	sbf.append("<VOUCHER_GENERATED_DATE>"+BTSLUtil.getDateStringFromDate(vo.getGeneratedDateOn(),PretupsI.TIMESTAMP_DDMMYYYYHHMMSS)+"</VOUCHER_GENERATED_DATE>");
				else
					sbf.append("<VOUCHER_GENERATED_DATE>NA</VOUCHER_GENERATED_DATE>");
			 }catch (Exception e) {
				 _log.error(methodName, "Exception " + e);
				 _log.errorTrace(methodName,e);
					sbf.append("<VOUCHER_GENERATED_DATE></VOUCHER_GENERATED_DATE>");
				}

			try{
	            if(null!=vo.getEnabledDateOn())
	            	sbf.append("<VOUCHER_ENABLED_DATE>"+BTSLUtil.getDateStringFromDate(vo.getEnabledDateOn(),PretupsI.TIMESTAMP_DDMMYYYYHHMMSS)+"</VOUCHER_ENABLED_DATE>");
				else
					sbf.append("<VOUCHER_ENABLED_DATE>NA</VOUCHER_ENABLED_DATE>");
			 }catch (Exception e) {
				 _log.error(methodName, "Exception " + e);
				 _log.errorTrace(methodName,e);
					sbf.append("<VOUCHER_ENABLED_DATE></VOUCHER_ENABLED_DATE>");
				}

			
			if(BTSLUtil.isNullString(p_requestVO.getReceiverMsisdn())){
				sbf.append("<SUBID>NA</SUBID>");
				}else{
					sbf.append("<SUBID>"+p_requestVO.getReceiverMsisdn()+"</SUBID>");	
				}
			if(!BTSLUtil.isNullString(p_requestVO.getTalkTime()))
			sbf.append("<TALKTIME>").append(p_requestVO.getTalkTime()).append("</TALKTIME>");
			else
			sbf.append("<TALKTIME>NA</TALKTIME>");
			if(!BTSLUtil.isNullString(vo.getProductID()))
			sbf.append("<VOUCHERPROFILEID>").append(vo.getProductID()).append("</VOUCHERPROFILEID>");
			else
			sbf.append("<VOUCHERPROFILEID>NA</VOUCHERPROFILEID>");
			if(!BTSLUtil.isNullString(vo.getProductName()))
            sbf.append("<VOUCHERPROFILENAME>").append(vo.getProductName()).append("</VOUCHERPROFILENAME>");
			else
			sbf.append("<VOUCHERPROFILENAME>NA</VOUCHERPROFILENAME>");
			if(!BTSLUtil.isNullString(p_requestVO.getValidity()))
            sbf.append("<VALIDITY>").append(p_requestVO.getValidity()).append("</VALIDITY>");
			else
			sbf.append("<VALIDITY>NA</VALIDITY>");
//			if(!p_requestVO.getVomsError().equalsIgnoreCase("success"))
//	            sbf.append("<ERROR>").append(p_requestVO.getVomsError()).append("</ERROR>");
//				else
//					sbf.append("<ERROR></ERROR>");
			
			String masterSerialNo = (String)(p_requestVO.getResponseMap().get(VOMSI.MASTER_SERIAL_NO));
			if(!BTSLUtil.isNullString(masterSerialNo))
	            sbf.append("<MASTER_SERIAL_NO>").append(masterSerialNo).append("</MASTER_SERIAL_NO>");
				else
				sbf.append("<MASTER_SERIAL_NO>NA</MASTER_SERIAL_NO>");
			
			String bundleName = (String)(p_requestVO.getResponseMap().get(VOMSI.BUNDLE_NAME));
			if(!BTSLUtil.isNullString(bundleName))
	            sbf.append("<BUNDLE_NAME>").append(bundleName).append("</BUNDLE_NAME>");
				else
				sbf.append("<BUNDLE_NAME>NA</BUNDLE_NAME>");
			
			String userName = (String)(p_requestVO.getResponseMap().get(VOMSI.USER_NAME));
			if(!BTSLUtil.isNullString(userName))
	            sbf.append("<USER_NAME>").append(userName).append("</USER_NAME>");
				else
				sbf.append("<USER_NAME>NA</USER_NAME>");
			
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
        	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, classMethodName,
                PretupsErrorCodesI.P2P_ERROR_EXCEPTION, "", "", "generateVoucherEnqResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    // added for voucher query and rollback request
    /**
     * @param p_requestVO
     * @throws Exception
     *             to parse voucher rollback request
     */
    public static void parseVoucherRollBackReq(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseVoucherRollBackReq";
        final String className = "ExtAPIStringParser";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        String extNwCode = null;
        String loginId = null;
        String extRefNumber = null;
        String extCode = null;
        String voucherType = null;
        String password = null;
	 String sno = null;
        try {
        	final Map requestHashMap = new HashMap();
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            index = requestStr.indexOf("<PIN>");
            String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
            index = requestStr.indexOf("<SUBID>");
            String SUBID = requestStr.substring(index + "<SUBID>".length(), requestStr.indexOf("</SUBID>", index));
            index = requestStr.indexOf("<VTYPE>");
            if (index > 0) {
                voucherType = requestStr.substring(index + "<VTYPE>".length(), requestStr.indexOf("</VTYPE>", index));
            }

	     index=requestStr.indexOf("<SNO>");
	     if(index>0)
	     sno=requestStr.substring(index+"<SNO>".length(),requestStr.indexOf("</SNO>",index));		

	   if (BTSLUtil.isNullString(SUBID)){
        	 SUBID="0";
         }       
         pin = _operatorUtil.decryptPINPassword(pin);
         
         if (BTSLUtil.isNullString(sno)) {
         	p_requestVO.setVomsMessage(PretupsErrorCodesI.C2S_ERROR_BLANK_SNO);
			p_requestVO.setVomsError("SNO BLANK");
            throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_SNO);
         }
         if (BTSLUtil.isNullString(pin)) {
				p_requestVO.setVomsMessage(PretupsErrorCodesI.C2S_ERROR_BLANK_PIN);
				p_requestVO.setVomsError("PIN BLANK");
             throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_BLANK_PIN);
         }

            try {
                index = requestStr.indexOf("<SUBID>");
                index = requestStr.indexOf("<LOGINID>");
                loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                requestHashMap.put("LOGINID", loginId);
                index = requestStr.indexOf("<PASSWORD>");
                password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                requestHashMap.put("PASSWORD", password);
                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                index = requestStr.indexOf("<EXTNWCODE>");
                extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                index = requestStr.indexOf("<LANGUAGE1>");
                final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
                index = requestStr.indexOf("<LANGUAGE2>");
                final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
                index = requestStr.indexOf("<EXTCODE>");
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            } catch (Exception e) {
                _log.errorTrace(methodName, e);
                _log.error(methodName, "Exception e: " + e.getMessage());
            }

            parsedRequestStr =VOMSI.SERVICE_TYPE_VOUCHER_ROLLBACK+CHNL_MESSAGE_SEP+pin+CHNL_MESSAGE_SEP+SUBID+CHNL_MESSAGE_SEP+sno;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setPassword(password);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setVoucherType(voucherType);
            p_requestVO.setRequestMessageArray(PretupsBL.parsePlainMessage(parsedRequestStr));
            p_requestVO.setRequestMap((HashMap)requestHashMap);
        } catch (BTSLBaseException be) {
        	loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
            throw be;
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(className, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    // added for voucher query and rollback request
    /**
     * this is used to construct response mesage for voucher rollback
     * 
     * @param p_requestVO
     *            RequestVO
     * @return responseStr java.lang.String
     */
    public static void generateVoucherRollBackResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateVoucherRollBackResponse";
        final String classMethodName = "ExtAPIStringParser[generateVoucherRollBackResponse]";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>VOURBKRESP</TYPE>");
            sbf.append("<TXNSTATUS>").append(p_requestVO.getVomsMessage()).append("</TXNSTATUS>");
            sbf.append("<SNO>").append(BTSLUtil.NullToString(p_requestVO.getSerialNo())).append("</SNO>");
            sbf.append("<TOPUP>").append(p_requestVO.getVoucherAmount()).append("</TOPUP>");
            if(!p_requestVO.getVomsError().equalsIgnoreCase("success"))
                sbf.append("<ERROR>").append(p_requestVO.getVomsError()).append("</ERROR>");
    			else
    				sbf.append("<ERROR></ERROR>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
        	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, classMethodName,
                PretupsErrorCodesI.P2P_ERROR_EXCEPTION, "", "", "generateVoucherEnqResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    // / added for get voucher again

    /**
     * this is used to construct response mesage for voucher enq
     * 
     * @param p_requestVO
     *            RequestVO
     * @return responseStr java.lang.String
     */
    public static void generateGetVoucherRetResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateGetVoucherRetResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            String pin = p_requestVO.getEvdPin();
            pin = VomsUtil.encryptText(pin);
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>VOURETRESP</TYPE>");
            sbf.append("<TXNSTATUS>").append(p_requestVO.getVomsMessage()).append("</TXNSTATUS>");
            sbf.append("<Serial_No>").append(p_requestVO.getSerialNo()).append("</Serial_No>");
            sbf.append("<Pin>").append(pin).append("</Pin>");
            sbf.append("<VOUCHER_EXPIRY_DATE>").append(p_requestVO.getExpiryDate()).append("</VOUCHER_EXPIRY_DATE>");
            sbf.append("<State>").append(p_requestVO.getState()).append("</State>");
            sbf.append("<SUBID>").append(p_requestVO.getReceiverMsisdn()).append("</SUBID>");
            sbf.append("<TALKTIME>").append(p_requestVO.getTalkTime()).append("</TALKTIME>");
            sbf.append("<ErrorCode>").append(p_requestVO.getVomsError()).append("</ErrorCode>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
        	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "XMLStringParser[generateVoucherEnqResponse]",
                PretupsErrorCodesI.P2P_ERROR_EXCEPTION, "", "", "generateVoucherEnqResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    /**
     * @param p_requestVO
     * @throws Exception
     *             to parse voucher consumption request
     */
    public static void parseVoucherRetAgainReq(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseVoucherRetAgainReq";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        String extNwCode = null;
        String loginId = null;
        String extRefNumber = null;
        String extCode = null;
        final String voucherType = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            index = requestStr.indexOf("<SUBID>");
            final String SUBID = requestStr.substring(index + "<SUBID>".length(), requestStr.indexOf("</SUBID>", index));

            index = requestStr.indexOf("<TXNID>");
            final String TXNID = requestStr.substring(index + "<TXNID>".length(), requestStr.indexOf("</TXNID>", index));

            try {
                index = requestStr.indexOf("<LOGINID>");
                loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                index = requestStr.indexOf("<PASSWORD>");
                final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                index = requestStr.indexOf("<EXTNWCODE>");
                extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                index = requestStr.indexOf("<LANGUAGE1>");
                final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
                index = requestStr.indexOf("<LANGUAGE2>");
                final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
                index = requestStr.indexOf("<EXTCODE>");
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            } catch (Exception e) {
                _log.error(methodName, "Exception e: " + e);
            }
            parsedRequestStr = VOMSI.SERVICE_TYPE_VOUCHER_REC_AGAIN + CHNL_MESSAGE_SEP + SUBID + CHNL_MESSAGE_SEP + TXNID;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setVoucherType(voucherType);
            p_requestVO.setRequestMessageArray(PretupsBL.parsePlainMessage(parsedRequestStr));
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException("XMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    // added for Voucher Retrieval RollBack Request

    /**
     * @param p_requestVO
     * @throws Exception
     *             to parse voucher rollback request
     */
    public static void parseVoucherRetrievalRollBackReq(RequestVO p_requestVO) throws BTSLBaseException {
        final String methodName = "parseVoucherRetrievalRollBackReq";
        final String className = "ExtAPIStringParser";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String parsedRequestStr = null;
        String extNwCode = null;
        String loginId = null;
        String extRefNumber = null;
        String extCode = null;
        String voucherType = null;
        try {
            final String requestStr = p_requestVO.getRequestMessage();
            int index = requestStr.indexOf("<TYPE>");
            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
            index = requestStr.indexOf("<SUBID>");
            String SUBID = requestStr.substring(index + "<SUBID>".length(), requestStr.indexOf("</SUBID>", index));
            index = requestStr.indexOf("<TXNID>");
            String txnId = requestStr.substring(index + "<TXNID>".length(), requestStr.indexOf("</TXNID>", index));
            index = requestStr.indexOf("<VTYPE>");
            if (index > 0) {
                voucherType = requestStr.substring(index + "<VTYPE>".length(), requestStr.indexOf("</VTYPE>", index));
            }

            if (BTSLUtil.isNullString(SUBID)) {
                SUBID = "0";
            }
            if (BTSLUtil.isNullString(txnId)) {
                txnId = "0";
            }

            try {
                index = requestStr.indexOf("<SUBID>");
                index = requestStr.indexOf("<LOGINID>");
                loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                index = requestStr.indexOf("<PASSWORD>");
                final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                index = requestStr.indexOf("<EXTREFNUM>");
                extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
                index = requestStr.indexOf("<EXTNWCODE>");
                extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                index = requestStr.indexOf("<LANGUAGE1>");
                final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
                index = requestStr.indexOf("<LANGUAGE2>");
                final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
                index = requestStr.indexOf("<EXTCODE>");
                extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
            } catch (Exception e) {
                _log.errorTrace(methodName, e);
                loggerValue.setLength(0);
    			loggerValue.append(EXCEPTION);
    			loggerValue.append(e.getMessage());
    			_log.error(methodName, loggerValue);
            }

            parsedRequestStr = VOMSI.SERVICE_TYPE_VOUCHER_RETRIEVAL_ROLLBACK + CHNL_MESSAGE_SEP + SUBID + CHNL_MESSAGE_SEP + txnId;
            p_requestVO.setDecryptedMessage(parsedRequestStr);
            p_requestVO.setExternalNetworkCode(extNwCode);
            p_requestVO.setSenderExternalCode(extCode);
            p_requestVO.setSenderLoginID(loginId);
            p_requestVO.setExternalReferenceNum(extRefNumber);
            p_requestVO.setVoucherType(voucherType);
            p_requestVO.setRequestMessageArray(PretupsBL.parsePlainMessage(parsedRequestStr));
        } catch (Exception e) {
            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            throw new BTSLBaseException(className, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

    // added for Voucher Retrieval RollBack Request
    /**
     * this is used to construct response mesage for voucher retrieval rollback
     * 
     * @param p_requestVO
     *            RequestVO
     * @return responseStr java.lang.String
     */
    public static void generateVoucherRetrievalRollBackResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateVoucherRetrievalRollBackResponse";
        final String classMethodName = "ExtAPIStringParser[generateVoucherRetrievalRollBackResponse]";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        try {
            sbf = new StringBuilder(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>VOURETRBKRESP</TYPE>");
            sbf.append("<TXNSTATUS>").append(p_requestVO.getVomsMessage()).append("</TXNSTATUS>");
            sbf.append("<TXNID>").append(p_requestVO.getExternalTransactionNum()).append("</TXNID>");
            sbf.append("<ERROR>").append(p_requestVO.getVomsError()).append("</ERROR>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
        	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, classMethodName,
                PretupsErrorCodesI.P2P_ERROR_EXCEPTION, "", "", "generateVoucherEnqResponse:" + e.getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }
    /**
     * This method generates Daily Status Report Response in XML format from
     * requestVO
     * 
     * @param p_requestVO
     * @throws Exception
     * @author zeeshan.aleem
     * @Date 23/09/2016
     */
    public static void generateChannelDailyStatusReportResponse(RequestVO p_requestVO) throws Exception {
        final String methodName = "generateChannelDailyStatusReportResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuffer sbf = null;
        ArrayList channelInTransfer;
        ArrayList channelOutTransfer;
        ArrayList subscriberOutTransfer;
        try {
            sbf = new StringBuffer(1024);
            sbf.append(DOC_TYPE);
            sbf.append("<TYPE>DSRRESP</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
            }
            if (!p_requestVO.isSuccessTxn()) {
            	sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            } else {
            	channelInTransfer = (ArrayList)p_requestVO.getRequestMap().get("CHANNEL_IN_TRANSFER");
            	channelOutTransfer = (ArrayList)p_requestVO.getRequestMap().get("CHANNEL_OUT_TRANSFER");
            	subscriberOutTransfer = (ArrayList)p_requestVO.getRequestMap().get("SUBSCRIBER_OUT_TRANSFER");
            	sbf.append("<MESSAGE>");
            	sbf.append("<CHANNELIN>");
            	if(channelInTransfer!=null){
            	for(int count=0;count<channelInTransfer.size();count++){
            		sbf.append("<PRODUCTCODE>");
            		sbf.append(((ChannelTransfrsReturnsVO)channelInTransfer.get(count)).getProductCode());
            		sbf.append("</PRODUCTCODE>");
            		sbf.append("<TRANSFERS>");
            		sbf.append(((ChannelTransfrsReturnsVO)channelInTransfer.get(count)).getTransfes());
            		sbf.append("</TRANSFERS>");
            		sbf.append("<RETURNS>");
            		sbf.append(((ChannelTransfrsReturnsVO)channelInTransfer.get(count)).getReturns());
            		sbf.append("</RETURNS>");
            		}
            	}
            	sbf.append("</CHANNELIN>");
            	sbf.append("<CHANNELOUT>");
            	if(channelOutTransfer!=null){
            	for(int count=0;count<channelOutTransfer.size();count++){
            		sbf.append("<PRODUCTCODE>");
            		sbf.append(((ChannelTransfrsReturnsVO)channelOutTransfer.get(count)).getProductCode());
            		sbf.append("</PRODUCTCODE>");
            		sbf.append("<TRANSFERS>");
            		sbf.append(((ChannelTransfrsReturnsVO)channelOutTransfer.get(count)).getTransfes());
            		sbf.append("</TRANSFERS>");
            		sbf.append("<RETURNS>");
            		sbf.append(((ChannelTransfrsReturnsVO)channelOutTransfer.get(count)).getReturns());
            		sbf.append("</RETURNS>");
            		}
            	}
            	sbf.append("</CHANNELOUT>");
            	sbf.append("<SUBSCRIBEROUT>");
            	if(subscriberOutTransfer!=null){
            	for(int count=0;count<subscriberOutTransfer.size();count++){
            		sbf.append("<PRODUCTCODE>");
            		sbf.append(((ChannelTransfrsReturnsVO)subscriberOutTransfer.get(count)).getProductCode());
            		sbf.append("</PRODUCTCODE>");
            		sbf.append("<TRANSFERS>");
            		sbf.append(((ChannelTransfrsReturnsVO)subscriberOutTransfer.get(count)).getTransfes());
            		sbf.append("</TRANSFERS>");
            		sbf.append("<SERVICENAME>");
            		sbf.append(((ChannelTransfrsReturnsVO)channelOutTransfer.get(count)).getServiceName());
            		sbf.append("</SERVICENAME>");
            	}
            	}
            	sbf.append("</SUBSCRIBEROUT>");
            	sbf.append("</MESSAGE>");
            }
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "XMLStringParser[generateChannelDailyStatusReportResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChannelDailyStatusReportResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    }

	/**
	 * @param p_requestVO
	 */
	public static void generateSOSSettlementResponse(RequestVO p_requestVO) {

        final String methodName = "generateSOSSettlementResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String calendarsystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>SOSSTLRES</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), calendarsystem)).append("</DATE>");
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser[generateSOSSettlementResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateSOSSettlementResponse:" + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        }
    		
	}
	
	/**
	 * @param p_requestVO
	 */
	public static void generateSOSResponse(RequestVO p_requestVO) {

        final String methodName = "generateSOSResponse";
        StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
        String responseStr = null;
        StringBuilder sbf = null;
        final java.util.Date date = new java.util.Date();
        try {
        	String EXTERNAL_DATE_FORMAT = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
            sbf = new StringBuilder(1024);
            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
            sbf.append("<TYPE>SOSRES</TYPE>");
            if (p_requestVO.isSuccessTxn()) {
                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
            } else {
                String message = p_requestVO.getMessageCode();
                if (message.indexOf("_") != -1) {
                    message = message.substring(0, message.indexOf("_"));
                }
                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
            }

            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
            sdf.setLenient(false);
            sbf.append("<DATE>").append(sdf.format(date)).append("</DATE>");
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
            sbf.append("</COMMAND>");
            responseStr = sbf.toString();
            p_requestVO.setSenderReturnMessage(responseStr);
        } catch (Exception e) {
            _log.errorTrace(methodName, e);
            loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                "ExtAPIXMLStringParser"+methodName, PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", methodName + e
                    .getMessage());
        } finally {
        	if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: responseStr:");
             	loggerValue.append(responseStr.toString());
             	_log.debug(methodName, loggerValue);
             }
        } 		
	}
	public static void parseVASVoucherConsumptionRequest(RequestVO p_requestVO) throws Exception
	{
		final String methodName = "parseVoucherConsumptionRequest";
		StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
		String parsedRequestStr=null;
		String cellId=null;
		String extnwcode=null;
		String switchId=null;
		int out_of_bound=-1;
		try
		{
			Boolean USSD_NEW_TAGS_MANDATORY = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.USSD_NEW_TAGS_MANDATORY);
			int VOMS_PIN_MAX_LENGTH = ((Integer) (PreferenceCache
					.getSystemPreferenceValue(PreferenceI.VOMS_PIN_MAX_LENGTH)))
					.intValue();
			HashMap requestHashMap =new HashMap();
			String requestStr=p_requestVO.getRequestMessage();

			int index=0;
			if(p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW))
			{
				index=requestStr.indexOf("<EXTNWCODE>");
				extnwcode=requestStr.substring(index+"<EXTNWCODE>".length(),requestStr.indexOf("</EXTNWCODE>",index));
				requestHashMap.put("EXTNWCODE",extnwcode);
			}
			index=requestStr.indexOf("<MSISDN>");
			String msisdn1=requestStr.substring(index+"<MSISDN>".length(),requestStr.indexOf("</MSISDN>",index));
			requestHashMap.put("MSISDN",msisdn1);
			index=requestStr.indexOf("<PIN>");
			String pin=requestStr.substring(index+"<PIN>".length(),requestStr.indexOf("</PIN>",index));
			requestHashMap.put("PIN",pin);
			index=requestStr.indexOf("<LOGINID>");
			String loginId=requestStr.substring(index+"<LOGINID>".length(),requestStr.indexOf("</LOGINID>",index));
			
			requestHashMap.put("LOGINID",loginId);
			index=requestStr.indexOf("<PASSWORD>");
			String password=requestStr.substring(index+"<PASSWORD>".length(),requestStr.indexOf("</PASSWORD>",index));
			
			requestHashMap.put("PASSWORD",password);
			index=requestStr.indexOf("<EXTCODE>");
			String extCode=requestStr.substring(index+"<EXTCODE>".length(),requestStr.indexOf("</EXTCODE>",index));
			p_requestVO.setSenderExternalCode(extCode);
			requestHashMap.put("EXTCODE",extCode);
			index=requestStr.indexOf("<EXTREFNUM>");
			String extRefNumber=requestStr.substring(index+"<EXTREFNUM>".length(),requestStr.indexOf("</EXTREFNUM>",index));
			p_requestVO.setExternalReferenceNum(extRefNumber);
			requestHashMap.put("EXTREFNUM",extRefNumber);
			index=requestStr.indexOf("<MSISDN2>");
			String msisdn2=requestStr.substring(index+"<MSISDN2>".length(),requestStr.indexOf("</MSISDN2>",index));
			requestHashMap.put("MSISDN2",msisdn2);
			index=requestStr.indexOf("<AMOUNT>");
			String amount=requestStr.substring(index+"<AMOUNT>".length(),requestStr.indexOf("</AMOUNT>",index));
			requestHashMap.put("AMOUNT",amount);
			index=requestStr.indexOf("<LANGUAGE1>");
			String language1=requestStr.substring(index+"<LANGUAGE1>".length(),requestStr.indexOf("</LANGUAGE1>",index));
			requestHashMap.put("LANGUAGE1",language1);
			index=requestStr.indexOf("<LANGUAGE2>");
			String language2=requestStr.substring(index+"<LANGUAGE2>".length(),requestStr.indexOf("</LANGUAGE2>",index));
			requestHashMap.put("LANGUAGE2",language2);
			index=requestStr.indexOf("<VOUCHERCODE>");
			String vouchercode=requestStr.substring(index+"<VOUCHERCODE>".length(),requestStr.indexOf("</VOUCHERCODE>",index));			
				
			vouchercode = VomsUtil.decryptText(vouchercode);
			
			index=requestStr.indexOf("<SERIAL_NO>");
			String serialNo=requestStr.substring(index+"<SERIAL_NO>".length(),requestStr.indexOf("</SERIAL_NO>",index));			
			if(BTSLUtil.isNullString(serialNo))
			{
				serialNo="0";
			}else{
				if(BTSLUtil.isNullString(vouchercode))
				{
					throw new BTSLBaseException("USSDC2SXMLStringParser",methodName,PretupsErrorCodesI.C2S_ERROR_BLANK_VOUCHERCODE);
				}else if(vouchercode.length() < PretupsI.MIN_LENGTH_DAMAGED_PIN_VOMS && vouchercode.length() > VOMS_PIN_MAX_LENGTH)
				{
					throw new BTSLBaseException("USSDC2SXMLStringParser",methodName,PretupsErrorCodesI.C2S_ERROR_BLANK_VOUCHERCODE);
				}
			
			}
			if(BTSLUtil.isNullString(vouchercode))
			{
				throw new BTSLBaseException("ExtAPIXMLStringParser",methodName,PretupsErrorCodesI.C2S_ERROR_BLANK_VOUCHERCODE);
			}
			
			index=requestStr.indexOf("<CELLID>");
			if(index>=0) {
				cellId=requestStr.substring(index+"<CELLID>".length(),requestStr.indexOf("</CELLID>",index));
			}
			index=requestStr.indexOf("<SWITCHID>");
			if(index>=0) {
				switchId=requestStr.substring(index+"<SWITCHID>".length(),requestStr.indexOf("</SWITCHID>",index));
			}

			requestHashMap.put("CELLID",cellId);
			requestHashMap.put("SWITCHID",switchId);
			
			p_requestVO.setRequestMap(requestHashMap);

			if(BTSLUtil.isNullString(amount))
			{
				amount="0";
			}
			
			if(BTSLUtil.isNullString(pin))
			{
				pin="0";	
			}
			
			if(USSD_NEW_TAGS_MANDATORY)
			{
				try{
					if(BTSLUtil.isNullString(cellId))
					{
						throw new BTSLBaseException("ExtAPIXMLStringParser",methodName,PretupsErrorCodesI.USSD_CELLID_BLANK__ERROR);
					}
					if(BTSLUtil.isNullString(switchId))
					{
						throw new BTSLBaseException("ExtAPIXMLStringParser",methodName,PretupsErrorCodesI.USSD_SWITCHID_BLANK__ERROR);
					}
				}catch(BTSLBaseException btsle){
					throw btsle;
				}
			}
			
			parsedRequestStr=PretupsI.SERVICE_TYPE_VAS_VOUCHER_CONSUMPTION+CHNL_MESSAGE_SEP+msisdn1+CHNL_MESSAGE_SEP+vouchercode;
			if(language1!=null)
				parsedRequestStr=parsedRequestStr+CHNL_MESSAGE_SEP+language1;
			if(cellId!=null)
				parsedRequestStr=parsedRequestStr+CHNL_MESSAGE_SEP+cellId;
			if(switchId!=null)
				parsedRequestStr=parsedRequestStr+CHNL_MESSAGE_SEP+switchId;
			
			p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
			p_requestVO.setDecryptedMessage(parsedRequestStr);
			p_requestVO.setRequestMSISDN(msisdn1);
			p_requestVO.setCellId(cellId);
			p_requestVO.setSwitchId(switchId);
			p_requestVO.setExternalNetworkCode(extnwcode);
			p_requestVO.setVoucherCode(vouchercode);
			p_requestVO.setSerialNo(serialNo);
			if(p_requestVO.getRequestGatewayType().equalsIgnoreCase(PretupsI.REQUEST_SOURCE_TYPE_EXTGW))
			{
				p_requestVO.setExternalNetworkCode(extnwcode);
				p_requestVO.setSenderExternalCode(extCode);
				p_requestVO.setSenderLoginID(loginId);
				p_requestVO.setExternalReferenceNum(extRefNumber);

			}
		}
		catch(BTSLBaseException be)
		{
			loggerValue.setLength(0);
			loggerValue.append(BTSL_EXCEPTION);
			loggerValue.append(be.getMessage());
			_log.error(methodName, loggerValue);
			throw be;
		}
		catch(Exception e)
		{
			_log.errorTrace(methodName,e);
			p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
			loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
			throw new BTSLBaseException("ExtAPIXMLStringParser",methodName,PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
		}
		finally
		{
			if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting: p_requestVO:");
             	loggerValue.append(p_requestVO.toString());
             	_log.debug(methodName, loggerValue);
             }
		}
	}
	
	public static void generateVASVoucherConsumptionResponse(RequestVO p_requestVO,String p_type) throws Exception
	{
	

		final String methodName = "generateVASVoucherConsumptionResponse";
		StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
		String responseStr= null;
		StringBuilder sbf=null;
		java.util.Date date=new java.util.Date();
		try
		{
			String calendarsystem = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
			SimpleDateFormat sdf = new SimpleDateFormat (PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
			sdf.setLenient(false); // this is required else it will convert
			
			sbf=new StringBuilder(1024);
			sbf.append(DOC_TYPE);
			sbf.append("<TYPE>"+p_type+"</TYPE>");

			if(p_requestVO.isSuccessTxn()) {
				sbf.append("<TXNSTATUS>"+PretupsI.TXN_STATUS_SUCCESS+"</TXNSTATUS>");
			} else
			{
				String message = p_requestVO.getMessageCode();
				if(message.indexOf("_") != -1)
				{
					message = message.substring(0,message.indexOf("_"));
				}
				sbf.append("<TXNSTATUS>"+message+"</TXNSTATUS>");
			}

			sbf.append("<DATE>"+BTSLDateUtil.getSystemLocaleDate(sdf.format(date), calendarsystem)+"</DATE>");

			if(p_requestVO.getRequestMap() != null) {
				sbf.append("<EXTREFNUM>"+(String)p_requestVO.getRequestMap().get("EXTREFNUM")+"</EXTREFNUM>");
			} else {
				sbf.append("<EXTREFNUM></EXTREFNUM>");
			} 

			if(BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
				sbf.append("<TXNID></TXNID>");
			} else {
				sbf.append("<TXNID>"+p_requestVO.getTransactionID()+"</TXNID>");
			}
			if(!p_requestVO.isSuccessTxn()) {
				sbf.append("<MESSAGE>"+getMessage(p_requestVO.getLocale(),p_requestVO.getMessageCode(),p_requestVO.getMessageArguments())+"</MESSAGE>");
			} else {
				if(!BTSLUtil.isNullString((String)p_requestVO.getRequestMap().get("vasVoucherStatus")) && ((String)p_requestVO.getRequestMap().get("vasVoucherStatus")).equalsIgnoreCase(InterfaceErrorCodesI.VOMS_VAS_SERVICE_BUNDLE_NOT_UPDATE))
				{
					sbf.append("<MESSAGE>"+getMessage(p_requestVO.getLocale(),PretupsErrorCodesI.VOUCHER_CONSUMPTION_SUCCESS_VAS_NOTBUNDLE,p_requestVO.getMessageArguments())+"</MESSAGE>");
				}else{
				sbf.append("<MESSAGE>"+getMessage(p_requestVO.getLocale(),PretupsErrorCodesI.VOUCHER_CONSUMPTION_SUCCESS_VAS,p_requestVO.getMessageArguments())+"</MESSAGE>");
				}
			}	

			sbf.append("</COMMAND>");
			responseStr = sbf.toString();
			p_requestVO.setSenderReturnMessage(responseStr);
		}
		catch(Exception e)
		{
			_log.errorTrace(methodName,e);
			loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
			p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
			EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,methodName,PretupsErrorCodesI.XML_ERROR_EXCEPTION,"","",methodName+":"+e.getMessage());
		}
		finally
		{
			if (_log.isDebugEnabled()) {
				loggerValue.setLength(0);
				loggerValue.append("Exiting: responseStr:");
				loggerValue.append(responseStr.toString());
				_log.debug(methodName, loggerValue);
			}
		}
	

	
	}
   /**
         * Added for YABX SOS flag update response via external system.
         *
         * @param p_requestVO
         * @param p_type
         *            TODO
         * @param p_action
         * @throws Exception
         * @author akanksha.gupta
         */

        public static void generateChannelExtSOSFlagResponse(RequestVO p_requestVO, String p_type) throws Exception {
            
		final String methodName = "generateChannelExtSOSFlagResponse";
          StringBuilder loggerValue= new StringBuilder();
        printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);

            String responseStr = null;
            StringBuilder sbf = null;
            final java.util.Date date = new java.util.Date();
            try {
                final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                sdf.setLenient(false); // this is required else it will convert
                sbf = new StringBuilder(1024);
                sbf.append("<?xml version=\"1.0\"?><COMMAND>");
                sbf.append("<TYPE>").append(p_type).append("</TYPE>");
                if (p_requestVO.isSuccessTxn()) {
                    sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
                } else {
                    String message = p_requestVO.getMessageCode();
                    if (message.indexOf("_") != -1) {
                        message = message.substring(0, message.indexOf("_"));
                    }
                    sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
                }

                sbf.append("<DATE>").append(sdf.format(date)).append("</DATE>");

                if (p_requestVO.getRequestMap() != null) {
                    sbf.append("<EXTREFNUM>").append((String) p_requestVO.getRequestMap().get("EXTREFNUM")).append("</EXTREFNUM>");
                } else {
                    sbf.append("<EXTREFNUM></EXTREFNUM>");
                }

                if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
                    sbf.append("<TXNID></TXNID>");
                } else {
                    sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
                }
                
                if (!p_requestVO.isSuccessTxn()) {
                    sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
                } else {
                    sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
                }
                // sbf.append("<MESSAGE></MESSAGE>")
                sbf.append("</COMMAND>");
                responseStr = sbf.toString();
                p_requestVO.setSenderReturnMessage(responseStr);
            } catch (Exception e) {
                _log.errorTrace(methodName, e);
        		loggerValue.setLength(0);
				loggerValue.append(EXCEPTION);
				loggerValue.append(e.getMessage());
				_log.error(methodName, loggerValue);
            
                p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
                EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                    "ExtAPIXMLStringParser["+methodName+"]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", ""+methodName+":" + e
                        .getMessage());
            } finally {

			if (_log.isDebugEnabled()) {
             	loggerValue.setLength(0);
             	loggerValue.append("Exiting responseStr:");
             	loggerValue.append(responseStr);
             	_log.debug(methodName, loggerValue);
             }
            
            }
        }
        public static void gernerateVmsPinExpiryExtResponse(RequestVO p_requestVO) throws Exception {
                		final String methodName = "gernerateVmsPinExpiryExtResponse";
              StringBuilder loggerValue= new StringBuilder();
            if (_log.isDebugEnabled()) {
            	loggerValue.setLength(0);
            	loggerValue.append(ENTRY_KEY);
            	loggerValue.append(p_requestVO.toString());
            	_log.debug(methodName, loggerValue);
            }

                String responseStr = null;
                StringBuilder sbf = null;
                String messages[]=p_requestVO.getRequestMessageArray();
                final java.util.Date date = new java.util.Date();
                try {
                    final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
                    sdf.setLenient(false); // this is required else it will convert
                    sbf = new StringBuilder(1024);
                    sbf.append("<?xml version=\"1.0\"?><COMMAND>");
                    sbf.append("<TYPE>").append(BTSLUtil.NullToString(p_requestVO.getServiceType())).append("</TYPE>");
                    sbf.append("<DATE>").append(sdf.format(date)).append("</DATE>");
                    sbf.append("<EXTNWCODE>").append(p_requestVO.getExternalNetworkCode()).append("</EXTNWCODE>");
                    if (p_requestVO.isSuccessTxn()) {
                    	sbf.append("<FROM_SERIALNO>"+messages[2]+"</FROM_SERIALNO>"); 
                        sbf.append("<TO_SERIALNO>"+messages[3]+"</TO_SERIALNO>"); 
                        sbf.append("<NEW_EXPIRY_DATE>"+messages[4]+"</NEW_EXPIRY_DATE>");
                        sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
                    } else {
                        String message = p_requestVO.getMessageCode();
                        if (message.indexOf("_") != -1) {
                            message = message.substring(0, message.indexOf("_"));
                        }
                        sbf.append("<FROM_SERIALNO></FROM_SERIALNO>"); 
                        sbf.append("<TO_SERIALNO></TO_SERIALNO>"); 
                        sbf.append("<NEW_EXPIRY_DATE></NEW_EXPIRY_DATE>");
                        sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_FAIL).append("</TXNSTATUS>");
                        sbf.append("<ERRORCODE>").append(message).append("</ERRORCODE>");
                    }

                    
                 
                    if (!p_requestVO.isSuccessTxn()) {
                        sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
                    } else {
                        sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
                    }
                    sbf.append("</COMMAND>");
                    responseStr = sbf.toString();
                    p_requestVO.setSenderReturnMessage(responseStr);
                } catch (Exception e) {
                    _log.errorTrace(methodName, e);
            		loggerValue.setLength(0);
    				loggerValue.append(EXCEPTION);
    				loggerValue.append(e.getMessage());
    				_log.error(methodName, loggerValue);
                
                    p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
                    EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                        "ExtAPIXMLStringParser["+methodName+"]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", ""+methodName+":" + e
                            .getMessage());
                } finally {

    			if (_log.isDebugEnabled()) {
                 	loggerValue.setLength(0);
                 	loggerValue.append("Exiting responseStr:");
                 	loggerValue.append(responseStr);
                 	_log.debug(methodName, loggerValue);
                 }
                
                }
            }
            
            public static void parseVmsPinExpiryExt(RequestVO p_requestVO) throws Exception {
            	final String methodName = "parseVmsPinExpiryExt";
            	 StringBuilder loggerValue= new StringBuilder();
                 if (_log.isDebugEnabled()) {
                 	loggerValue.setLength(0);
                 	loggerValue.append(ENTRY_KEY);
                 	loggerValue.append(p_requestVO.toString());
                 	_log.debug(methodName, loggerValue);
                 }
                 Date currDate = new Date();
                String parsedRequestStr = null;
                // boolean tagsMandatory
                String cellId = null;
                String switchId = null;
                String[] requestMessageArray = new String[7];
            	final HashMap requestHashMap = new HashMap();
                
                try {
                	int VOMS_SERIAL_NO_MIN_LENGTH = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.VOMS_SERIAL_NO_MIN_LENGTH);
                	int VOMS_SERIAL_NO_MAX_LENGTH = (Integer) PreferenceCache.getSystemPreferenceValue(PreferenceI.VOMS_SERIAL_NO_MAX_LENGTH);
                    final String requestStr = p_requestVO.getRequestMessage();
                    int index = requestStr.indexOf("<TYPE>");
                    final String serviceType = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
                	String SystemWiseGatewayCode="";	
	                index = requestStr.indexOf("<LOGINID>");
	                final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
	                index = requestStr.indexOf("<PASSWORD>");
	                final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
	                p_requestVO.setSenderLoginID(loginId);
	                p_requestVO.setPassword(password);
	                requestHashMap.put("LOGINID", loginId);
	                requestHashMap.put("PASSWORD", password);
	                p_requestVO.setRequestMap(requestHashMap);
                    index = requestStr.indexOf("<VOUCHER_TYPE>");
                    final String vouchertype = requestStr.substring(index + "<VOUCHER_TYPE>".length(), requestStr.indexOf("</VOUCHER_TYPE>", index));
                    index = requestStr.indexOf("<FROM_SERIALNO>");
                    final String fromSerialNo = requestStr.substring(index + "<FROM_SERIALNO>".length(), requestStr.indexOf("</FROM_SERIALNO>", index));
                    index = requestStr.indexOf("<TO_SERIALNO>");
                    final String toSerialNo = requestStr.substring(index + "<TO_SERIALNO>".length(), requestStr.indexOf("</TO_SERIALNO>", index));
                    index = requestStr.indexOf("<NEW_EXPIRY_DATE>");
                    final String newExpiryDate = requestStr.substring(index + "<NEW_EXPIRY_DATE>".length(), requestStr.indexOf("</NEW_EXPIRY_DATE>", index));
                    index = requestStr.indexOf("<EXTNWCODE>");
                    final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                    index = requestStr.indexOf("<EXPIRY_CHANGE_REASON>");
                    final String expiryChangeReason = requestStr.substring(index + "<EXPIRY_CHANGE_REASON>".length(), requestStr.indexOf("</EXPIRY_CHANGE_REASON>", index));
					
					if (BTSLUtil.isNullString(extNwCode)) {
                		throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.EXTSYS_BLANK, new String[]{VOMSI.EXTERNAL_NETWORKCODE});
                	}
					
                    else if(extNwCode.length() > 2 )
                    {
                    	throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.EXTSYS_LENGTH_INVALID,extNwCode);
                    }
                    
                	p_requestVO.setExternalNetworkCode(extNwCode);
                   
                    
                	if (BTSLUtil.isNullString(serviceType)) {
            		throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.SERVICE_TYPE_BLANK);
                	}
                	if (BTSLUtil.isNullString(loginId)) {
                		throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.LOGINID_BLANK);
                	}
                	if (BTSLUtil.isNullString(password)) {
                		throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.PASSWORD_BLANK);
                	}
                	if (BTSLUtil.isNullString(vouchertype)) {
                        throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.VOUCHER_TYPE_BLANK);
                    }
                    if (BTSLUtil.isNullString(fromSerialNo)) {
                        throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.FROM_SERIAL_NO_BLANK);
                    }else{
                    	if (!fromSerialNo.matches(RegularExpression.NUMERIC)) {
                        	throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.FROM_SERIAL_NOT_NUMERIC);
                    		}
                    	else if((!BTSLUtil.isNumeric(fromSerialNo)) && fromSerialNo.length() < VOMS_SERIAL_NO_MIN_LENGTH || fromSerialNo.length() > VOMS_SERIAL_NO_MIN_LENGTH)
                            {
                            	throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.ERROR_VOMS_INVALID_REQUEST_FORMAT,fromSerialNo);
                            }
                    }
                    
                    if (BTSLUtil.isNullString(toSerialNo)) {
                        throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.TO_SERIAL_NO_BLANK);
                    }
                    else{
                    	if (!toSerialNo.matches(RegularExpression.NUMERIC)) {
                        	throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.TO_SERIAL_NOT_NUMERIC,toSerialNo);
                    		}
                    	else if((!BTSLUtil.isNumeric(toSerialNo)) && toSerialNo.length() < VOMS_SERIAL_NO_MIN_LENGTH || toSerialNo.length() > VOMS_SERIAL_NO_MIN_LENGTH)
                        {
                        	throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.ERROR_VOMS_INVALID_REQUEST_FORMAT,toSerialNo);
                        }
                    }
                    
                    
                    if (BTSLUtil.isNullString(newExpiryDate)) {
                        throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.EXPIRY_DATE_BLANK,newExpiryDate);
                    }
                    else {
                    	try{
                    		BTSLDateUtil.getSystemLocaleDateInFormat(newExpiryDate, PretupsI.DATE_FORMAT);
                    	}
                    	catch (Exception e) {
                            throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.DATE_FORMAT_INVALID,newExpiryDate);
						}
                    }
                    if(BTSLUtil.isDateBeforeReqDate(BTSLDateUtil.getGregorianDate(newExpiryDate),currDate))
                    {
                    	throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.EXTSYS_REQ_DATE_BEFORE,newExpiryDate);
                    }
                    if (BTSLUtil.isNullString(expiryChangeReason)) {
                        throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.VOUCHER_EXPIRY_CHANGE_REASON_BLANK,expiryChangeReason);
                    }
                    else if(expiryChangeReason.length() > 100 )
                    {
                    	throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.EXTSYS_LENGTH_INVALID,"expiryChangeReason");
                    }
                    if (BTSLUtil.isNullString(extNwCode)) {
                		throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.EXTSYS_REQ_EXTNWCODE_BLANK,extNwCode);
                    	}
                    else{
                    	if (!extNwCode.matches(RegularExpression.ALPHA_NUMERIC_SPECIAL_CHAR)) {
                    		throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.EXTSYS_NOT_ALFA_NUMERIC_SPECIAL,extNwCode);
                        }
                    }
                    
                    parsedRequestStr = PretupsI.SERVICE_TYPE_VMSPINEXT + P2P_MESSAGE_SEP + vouchertype+P2P_MESSAGE_SEP+fromSerialNo+P2P_MESSAGE_SEP+toSerialNo+P2P_MESSAGE_SEP+newExpiryDate;
                    p_requestVO.setServiceType(serviceType);
                    p_requestVO.setExpiryChangeReason(expiryChangeReason);
                    p_requestVO.setExternalNetworkCode(extNwCode);
                    p_requestVO.setDecryptedMessage(parsedRequestStr);
                    p_requestVO.setRequestMessageArray(PretupsBL.parsePlainMessage(parsedRequestStr));
                    p_requestVO.setSenderLoginID(loginId);
                }
                catch (BTSLBaseException btsle) {
                	p_requestVO.setSuccessTxn(false);
                	p_requestVO.setMessageCode(btsle.getMessage());
                    p_requestVO.setMessageArguments(btsle.getArgs());
                	loggerValue.setLength(0);
        			loggerValue.append(EXCEPTION);
        			loggerValue.append(btsle.getMessage());
        			_log.error(methodName, loggerValue);
                    throw btsle;
                }
                catch (Exception e) {
                	p_requestVO.setSuccessTxn(false);
                	loggerValue.setLength(0);
        			loggerValue.append(EXCEPTION);
        			loggerValue.append(e.getMessage());
        			_log.error(methodName, loggerValue);
                    throw new BTSLBaseException(CLASS_NAME, "parseVmsPinExpiryExt", PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
                } finally {
                	if (_log.isDebugEnabled()) {
                     	loggerValue.setLength(0);
                     	loggerValue.append(EXIT_KEY);
                     	loggerValue.append(p_requestVO.toString());
                     	_log.debug(methodName, loggerValue);
                     }
                }
            }

            /**
             * Added for Digital Voucher Enquiry request 
             *
             * @param p_requestVO
             * @param p_type
             *            TODO
             * @param p_action
             * @throws Exception
             * @author Yogesh.dixit
             */
            public static void parseMyVoucherEnquirySubscriberRequest(RequestVO p_requestVO) throws Exception {
            	final String methodName = "parseHistoryMessageRequest";
           	 	StringBuilder loggerValue= new StringBuilder();
                if (_log.isDebugEnabled()) {
                	loggerValue.setLength(0);
                	loggerValue.append(ENTRY_KEY);
                	loggerValue.append(p_requestVO.toString());
                	_log.debug(methodName, loggerValue);
                }
                String parsedRequestStr = null;
                try {
                    final String requestStr = p_requestVO.getRequestMessage();
                    int index = requestStr.indexOf("<MSISDN1>");
                    final String msisdn1 = requestStr.substring(index + "<MSISDN1>".length(), requestStr.indexOf("</MSISDN1>", index));
                   
                    /*index = requestStr.indexOf("<LANGUAGE1>");
                    final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));*/
                    parsedRequestStr = PretupsI.SUBSCRIBER_VOUCHER_ENQ + P2P_MESSAGE_SEP + msisdn1;
                   // p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
                    p_requestVO.setDecryptedMessage(parsedRequestStr);
                    p_requestVO.setRequestMSISDN(msisdn1);
                } 
                catch (Exception e) {
                    p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
                    loggerValue.setLength(0);
        			loggerValue.append(EXCEPTION);
        			loggerValue.append(e.getMessage());
        			_log.error(methodName, loggerValue);
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.P2P_ERROR_INVALIDMESSAGEFORMAT);
                } finally {
                	if (_log.isDebugEnabled()) {
                     	loggerValue.setLength(0);
                     	loggerValue.append(EXIT_KEY);
                     	loggerValue.append(p_requestVO.toString());
                     	_log.debug(methodName, loggerValue);
                     }
                }
            }
            
         
            public static void parseExtDigitalVouchersAvailabilityRequest(RequestVO p_requestVO) throws Exception {
                final String methodName = "parseExtDigitalVouchersAvailabilityRequest";
                StringBuilder loggerValue= new StringBuilder();
                if (_log.isDebugEnabled()) {
                	loggerValue.setLength(0);
                	loggerValue.append(ENTRY_KEY);
                	loggerValue.append(p_requestVO.toString());
                	_log.debug(methodName, loggerValue);
                }
                String parsedRequestStr = null;
                try {
                    final HashMap requestHashMap = new HashMap();
                    final String requestStr = p_requestVO.getRequestMessage();
                    final List<String> arrList = new ArrayList<String>();

                    
                    int index=requestStr.indexOf("<TYPE>");
                    String type=requestStr.substring(index+"<TYPE>".length(),requestStr.indexOf("</TYPE>",index));
                    index = requestStr.indexOf("<EXTNWCODE>");
                    final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
                    requestHashMap.put("EXTNWCODE", extNwCode);
                    index = requestStr.indexOf("<MSISDN>");
                    final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
                    requestHashMap.put("MSISDN", msisdn);
                    index = requestStr.indexOf("<PIN>");
                    final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
                    requestHashMap.put("PIN", pin);
                    index = requestStr.indexOf("<LOGINID>");
                    final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
                    requestHashMap.put("LOGINID", loginId);
                    index = requestStr.indexOf("<PASSWORD>");
                    final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
                    requestHashMap.put("PASSWORD", password);
                    index = requestStr.indexOf("<EXTCODE>");
                    final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
                    requestHashMap.put("EXTCODE", extCode);
                    index = requestStr.indexOf("<VOUCHERTYPE>");
                    final String voucherType = requestStr.substring(index + "<VOUCHERTYPE>".length(), requestStr.indexOf("</VOUCHERTYPE>", index));
                    requestHashMap.put("VOUCHERTYPE", voucherType);
                    index = requestStr.indexOf("<VOUCHERSEGMENT>");
                    final String voucherSegment = requestStr.substring(index + "<VOUCHERSEGMENT>".length(), requestStr.indexOf("</VOUCHERSEGMENT>", index));
                    requestHashMap.put("VOUCHERSEGMENT", voucherSegment);
                    index = requestStr.indexOf("<DENOMINATION>");
                    final String denomination = requestStr.substring(index + "<DENOMINATION>".length(), requestStr.indexOf("</DENOMINATION>", index));
                    requestHashMap.put("DENOMINATION", denomination);
                    index = requestStr.indexOf("<VOUCHERPROFILE>");
                    final String voucherProfile = requestStr.substring(index + "<VOUCHERPROFILE>".length(), requestStr.indexOf("</VOUCHERPROFILE>", index));
                    requestHashMap.put("VOUCHERPROFILE", voucherProfile);
                    index = requestStr.indexOf("<LANGUAGE1>");
                    final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
                    
                    parsedRequestStr = PretupsI.USER_AVAILABLE_VOUCHER_ENQ + P2P_MESSAGE_SEP + voucherType +P2P_MESSAGE_SEP+ voucherSegment +P2P_MESSAGE_SEP + denomination + P2P_MESSAGE_SEP + voucherProfile + P2P_MESSAGE_SEP + language1;
                    // Added By Diwakar on 01-MAR-2014
                    XMLStringValidation.validateExtDigitalVouchersAvailabilityRequest(p_requestVO, type, extNwCode, msisdn, pin, loginId, password, extCode, voucherType, voucherSegment, denomination, voucherProfile, language1);
                    // Ended Here
                    
                    p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
                    p_requestVO.setDecryptedMessage(parsedRequestStr);
                    p_requestVO.setRequestMSISDN(msisdn);
                    p_requestVO.setExternalNetworkCode(extNwCode);
                    p_requestVO.setSenderExternalCode(extCode);
                    p_requestVO.setSenderLoginID(loginId);
                    p_requestVO.setRequestMap(requestHashMap);// To enquire
                    // Transaction
                    // Status with
                    // External
                    // Refrence Number
                }
                // 03-MAR-2014
                catch (BTSLBaseException be) {
                    p_requestVO.setMessageCode(be.getMessageKey());
                    p_requestVO.setMessageArguments(be.getArgs());
                    throw be;
                }
                // Ended Here
                catch (Exception e) {
                    _log.errorTrace(methodName, e);
                    p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
                    loggerValue.setLength(0);
        			loggerValue.append(EXCEPTION);
        			loggerValue.append(e.getMessage());
        			_log.error(methodName, loggerValue);
                    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
                } finally {
                	if (_log.isDebugEnabled()) {
                     	loggerValue.setLength(0);
                     	loggerValue.append(EXIT_KEY);
                     	loggerValue.append(p_requestVO.toString());
                     	_log.debug(methodName, loggerValue);
                     }
                }
            }
            /**
		     * this method connstruct generateSelfVoucherSubscriberEnqResponse in XML format from
		     * requestVO
		     * 
		     * @param p_requestVO
		     *            RequestVO
		     * @return responseStr java.lang.String
		     */
		    public static void generateSelfVoucherSubscriberEnqResponse(RequestVO p_requestVO) throws Exception {
		    	   final String methodName = "generateSelfVoucherSubscriberEnqResponse";
		           StringBuilder loggerValue= new StringBuilder();
		           if (_log.isDebugEnabled()) {
		           	loggerValue.setLength(0);
		           	loggerValue.append("Entered: p_requestVO=");
		           	loggerValue.append(p_requestVO.toString());
		           	_log.debug(methodName, loggerValue);
		           }
		           ArrayList<VomsVoucherVO> vchrList=null;
		           String responseStr = null;
		           StringBuilder sbf = null;
		           SenderVO senderVO = null;
		           senderVO = (SenderVO) p_requestVO.getSenderVO();
		           if(senderVO!=null)
		           {
		           vchrList=new ArrayList<VomsVoucherVO>();
		           vchrList=senderVO.getVoList();
		           }
		           try {
		        	   Boolean SUBSCRIBER_VOUCHER_PIN_REQUIRED = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.SUBSCRIBER_VOUCHER_PIN_REQUIRED);
		               sbf = new StringBuilder(1024);
		               sbf.append(DOC_TYPE);
		               sbf.append("<TYPE>SELFVCRENQRESP</TYPE>");
		               sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
		               if (!p_requestVO.isSuccessTxn()) {
	                       sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
		               }
		               else
		               {
		               if(vchrList!=null && vchrList.size()>0)
		               {
		               Iterator itr = vchrList.iterator(); 
		             	while (itr.hasNext()) 
		             	{ 
		             	     sbf.append("<VOUCHERINFO>");   
		             		 VomsVoucherVO vcrVo = (VomsVoucherVO) itr.next();
		             		 sbf.append(" <VOUCHERDENO>").append(vcrVo.getMRP()).append("</VOUCHERDENO>");
		             		 sbf.append(" <PRODUCTNAME>").append(vcrVo.getProductName()).append("</PRODUCTNAME>");
		             		 sbf.append(" <VOUCHERTYPE>").append(vcrVo.getVoucherType()).append("</VOUCHERTYPE>");
		             		 sbf.append(" <VOUCHERSEGMENT>").append(vcrVo.getVoucherSegment()).append("</VOUCHERSEGMENT>");
		             		 if(SUBSCRIBER_VOUCHER_PIN_REQUIRED)
		             		 sbf.append(" <VOUCHERPIN>").append(vcrVo.getPinNo()).append("</VOUCHERPIN>");
		             		 sbf.append(" <USERID>").append(vcrVo.getUserID()).append("</USERID>");
		             		 sbf.append(" <SNO>").append(vcrVo.getSerialNo()).append("</SNO>");
		             		 sbf.append(" <EXPIRYDATE>").append(BTSLDateUtil.getSystemLocaleDate(vcrVo.getExpiryDate().toString())).append("</EXPIRYDATE>");
		             		 sbf.append("</VOUCHERINFO>"); 
		             	}
		               }
		               }
		               sbf.append("</COMMAND>");
		               responseStr = sbf.toString();
		               p_requestVO.setSenderReturnMessage(responseStr);
		           } catch (Exception e) {
		           	loggerValue.setLength(0);
		   			loggerValue.append(EXCEPTION);
		   			loggerValue.append(e.getMessage());
		   			_log.error(methodName, loggerValue);
		            p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
		            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "XMLStringParser[generateSelfVoucherSubscriberEnqResponse]",
		            PretupsErrorCodesI.P2P_ERROR_EXCEPTION, "", "", "generateSelfVoucherSubscriberEnqResponse:" + e.getMessage());
		           } finally {
		           	if (_log.isDebugEnabled()) {
		                	loggerValue.setLength(0);
		                	loggerValue.append("Exiting: responseStr:");
		                	loggerValue.append(responseStr.toString());
		                	_log.debug(methodName, loggerValue);
		                }
		           }
		    }

            /**
             * this method connstruct generateSelfVoucherSubscriberEnqResponse in XML format from
             * requestVO
             * 
             * @param p_requestVO RequestVO
             * @return responseStr java.lang.String
             */
            public static void userAvailableVoucherEnquiryResponse(RequestVO p_requestVO) throws Exception {
                 final String methodName = "userAvailableVoucherEnquiryResponse";
                   StringBuilder loggerValue= new StringBuilder();
                   if (_log.isDebugEnabled()) {
                	   loggerValue.setLength(0);
                	   loggerValue.append("Entered: p_requestVO=");
                	   loggerValue.append(p_requestVO.toString());
                	   _log.debug(methodName, loggerValue);
                   }
                   String responseStr = null;
                   StringBuilder sbf = null;
                   sbf = new StringBuilder(1024);
                   sbf.append(DOC_TYPE);
                   sbf.append("<TYPE>VCAVLBLREQ</TYPE>");
                   try{
                	   if(!p_requestVO.isSuccessTxn())
                	   {
                		   sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
                		   sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
                	   }
                   
                	   else{
                		   ChannelUserVO channelUserVO = (ChannelUserVO) p_requestVO.getSenderVO();
                		   ArrayList<ArrayList<String> > vchrList = (channelUserVO.getVoucherList() == null)?new ArrayList<>():channelUserVO.getVoucherList();
                		   sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
                		   if(vchrList != null && vchrList.size()>0)
                		   {
                			   sbf.append("<INFO>AVAILABLE VOUCHER DETAILS</INFO>");
                			   for(int i=0;i<vchrList.size();i++)
                			   {
                				   sbf.append("<VOUCHERINFO>");
                				   sbf.append(" <VOUCHERTYPE>").append(p_requestVO.getRequestMap().get("VOUCHERTYPE").toString()).append("</VOUCHERTYPE>");
                				   sbf.append(" <VOUCHERSEGMENT>").append(p_requestVO.getRequestMap().get("VOUCHERSEGMENT").toString()).append("</VOUCHERSEGMENT>");
                				   sbf.append(" <DENOMINATION>").append(p_requestVO.getRequestMap().get("DENOMINATION").toString()).append("</DENOMINATION>");
                				   if(!BTSLUtil.isNullString(p_requestVO.getRequestMap().get("VOUCHERPROFILE").toString()))
                					   sbf.append(" <VOUCHERPROFILE>").append(p_requestVO.getRequestMap().get("VOUCHERPROFILE").toString()).append("</VOUCHERPROFILE>");
                    		   
                				   sbf.append(" <AVAILABLE>").append(vchrList.get(i).get(vchrList.get(i).size()-1)).append("</AVAILABLE>");
                				   sbf.append("</VOUCHERINFO>");
                			   }
                		   }
                		   else
                		   {
                			   sbf.append("<VOUCHERINFO>");
                			   sbf.append(" <VOUCHERTYPE>").append(p_requestVO.getRequestMap().get("VOUCHERTYPE").toString()).append("</VOUCHERTYPE>");
                			   sbf.append(" <VOUCHERSEGMENT>").append(p_requestVO.getRequestMap().get("VOUCHERSEGMENT").toString()).append("</VOUCHERSEGMENT>");
                			   sbf.append(" <DENOMINATION>").append(p_requestVO.getRequestMap().get("DENOMINATION").toString()).append("</DENOMINATION>");
                			   if(!BTSLUtil.isNullString(p_requestVO.getRequestMap().get("VOUCHERPROFILE").toString()))
                				   sbf.append(" <VOUCHERPROFILE>").append(p_requestVO.getRequestMap().get("VOUCHERPROFILE").toString()).append("</VOUCHERPROFILE>");
                		   
                			   sbf.append(" <AVAILABLE>").append("0").append("</AVAILABLE>");
                			   sbf.append("</VOUCHERINFO>");
                		   }
                	   }
                       sbf.append("</COMMAND>");
                       responseStr = sbf.toString();
                       p_requestVO.setSenderReturnMessage(responseStr);
                   }
                   catch (Exception e) {
                	   loggerValue.setLength(0);
                       loggerValue.append(EXCEPTION);
                       loggerValue.append(e.getMessage());
                       _log.error(methodName, loggerValue);
                       p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_EXCEPTION);
                       EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "XMLStringParser[userAvailableVoucherEnquiryResponse]",
                       PretupsErrorCodesI.C2S_ERROR_EXCEPTION, "", "", "userAvailableVoucherEnquiryResponse:" + e.getMessage());
                   }
                   finally {
                	   if (_log.isDebugEnabled())
                	   {
                          loggerValue.setLength(0);
                          loggerValue.append("Exiting: responseStr:");
                          loggerValue.append(responseStr.toString());
                          _log.debug(methodName, loggerValue);
                        }
                   }
            }
            
            /**
		     * Parse DVD request
		     * @param p_requestVO
		     * @throws Exception
		     */
		    public static void parseExtDVDRequest(RequestVO p_requestVO) throws Exception {
		        final String methodName = "parseExtDVDRequest";
		        StringBuilder loggerValue= new StringBuilder();
		        if (_log.isDebugEnabled()) {
		        	loggerValue.setLength(0);
		        	loggerValue.append(ENTRY_KEY);
		        	loggerValue.append(p_requestVO.toString());
		        	_log.debug(methodName, loggerValue);
		        }
		        String parsedRequestStr = null;
		        try {
		        	Boolean VOUCHER_PROFLE_IS_OPTIONAL = (Boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.VOUCHER_PROFLE_IS_OPTIONAL);
		            final HashMap requestHashMap = new HashMap();
		            final String requestStr = p_requestVO.getRequestMessage();
		            int index = requestStr.indexOf("<TYPE>");
		            final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
		            requestHashMap.put("TYPE", type);
		            index = requestStr.indexOf("<DATE>");
		             String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
		            date = BTSLDateUtil.getGregorianDateInString(date);
		            requestHashMap.put("DATE", date);
		            index = requestStr.indexOf("<EXTNWCODE>");
		            final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
		            requestHashMap.put("EXTNWCODE", extNwCode);
		            index = requestStr.indexOf("<MSISDN>");
		            final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
		            requestHashMap.put("MSISDN", msisdn);
		            index = requestStr.indexOf("<PIN>");
		            final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
		            requestHashMap.put("PIN", pin);
		            index = requestStr.indexOf("<LOGINID>");
		            final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
		            requestHashMap.put("LOGINID", loginId);
		            index = requestStr.indexOf("<PASSWORD>");
		            final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
		            requestHashMap.put("PASSWORD", password);
		            index = requestStr.indexOf("<EXTCODE>");
		            final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
		            requestHashMap.put("EXTCODE", extCode);
		            index = requestStr.indexOf("<EXTREFNUM>");
		            final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
		            requestHashMap.put("EXTREFNUM", extRefNumber);

		            index = requestStr.indexOf("<LANGUAGE1>");
		            String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
		            String msisdn2 = null;
		            String language2 = language1;
		            /*boolean privateRechargeAllowed = ((Boolean) (PreferenceCache.getSystemPreferenceValue(PreferenceI.PRIVATE_RECHARGE_ALLOWED))).booleanValue();
		            if (privateRechargeAllowed) {
		                msisdn2 = msisdn;
		            } else {*/
		                index = requestStr.indexOf("<MSISDN2>");
		                msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
		                if (BTSLUtil.isNullString(msisdn2)) {
		                    _log.error(methodName, "Msisdn2 field is null ");
		                    throw new BTSLBaseException("parseExtDVDRequest", methodName, PretupsErrorCodesI.MSISDN2_BLANK);
		                }
		                index = requestStr.indexOf("<LANGUAGE2>");
		                language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
//		            }
		            if (BTSLUtil.isNullString(language1)) {
		            	language1 = "0";
		            }
	                if (BTSLUtil.isNullString(language2)) {
	                    language2 = "0";
	                }
		            index = requestStr.indexOf("<VOUCHERTYPE>");
		            final String voucherType = requestStr.substring(index + "<VOUCHERTYPE>".length(), requestStr.indexOf("</VOUCHERTYPE>", index));
		            index = requestStr.indexOf("<VOUCHERSEGMENT>");
		            final String voucherSegment = requestStr.substring(index + "<VOUCHERSEGMENT>".length(), requestStr.indexOf("</VOUCHERSEGMENT>", index));
		            index = requestStr.indexOf("<AMOUNT>");
		            final String amount = requestStr.substring(index + "<AMOUNT>".length(), requestStr.indexOf("</AMOUNT>", index));
		            index = requestStr.indexOf("<VOUCHERPROFILE>");
		            String voucherProfile = requestStr.substring(index + "<VOUCHERPROFILE>".length(), requestStr.indexOf("</VOUCHERPROFILE>", index));
		            if(!BTSLUtil.isNullString(voucherProfile) && "0".equals(voucherProfile)){
						throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.VOUCHER_PRODUCT_INVALID);
					}
		            else if (BTSLUtil.isNullString(voucherProfile) && VOUCHER_PROFLE_IS_OPTIONAL) {
		            	voucherProfile = "0";
		            }
		            index = requestStr.indexOf("<QUANTITY>");
		            final String quantity = requestStr.substring(index + "<QUANTITY>".length(), requestStr.indexOf("</QUANTITY>", index));
		            index = requestStr.indexOf("<SELECTOR>");
		            String selector = requestStr.substring(index + "<SELECTOR>".length(), requestStr.indexOf("</SELECTOR>", index));
		            index = requestStr.indexOf("<INFO1>");
		            if(index>0)
		            {
		            	final String info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
		            	requestHashMap.put("INFO1", info1);
		            }
		            index = requestStr.indexOf("<INFO2>");
		            if(index>0)
		            {
		            	final String info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
		            	requestHashMap.put("INFO2", info2);
		            }
		            index = requestStr.indexOf("<INFO3>");
		            if(index>0)
		            {
		            	final String info3 = requestStr.substring(index + "<INFO3>".length(), requestStr.indexOf("</INFO3>", index));
		            	requestHashMap.put("INFO3", info3);
		            }
		            index = requestStr.indexOf("<INFO4>");
		            if(index>0)
		            {
		            	final String info4 = requestStr.substring(index + "<INFO4>".length(), requestStr.indexOf("</INFO4>", index));
		            	requestHashMap.put("INFO4", info4);
		            }
		            index = requestStr.indexOf("<INFO5>");
		            if(index>0)
		            {
		            	final String info5 = requestStr.substring(index + "<INFO5>".length(), requestStr.indexOf("</INFO5>", index));
		            	requestHashMap.put("INFO5", info5);
		            }
		            
		            XMLStringValidation.validateExtDVDRequest(p_requestVO, type, date, extNwCode, msisdn, pin, loginId, password, 
		            		extCode, extRefNumber, msisdn2, amount, language1, language2, selector, voucherType, voucherSegment, 
		            		voucherProfile, quantity);
		            // Ended Here

		            if (BTSLUtil.isNullString("selector")) {
		                final ServiceSelectorMappingVO serviceSelectorMappingVO = ServiceSelectorMappingCache
		                    .getDefaultSelectorForServiceType(PretupsI.SERVICE_TYPE_CHNL_COMMON_RECHARGE);
		                if (serviceSelectorMappingVO != null) {
		                    selector = serviceSelectorMappingVO.getSelectorCode();
		                }
		            }
		            /*boolean privateRechargeAllowed = ((Boolean) (PreferenceCache.getSystemPreferenceValue(PreferenceI.PRIVATE_RECHARGE_ALLOWED))).booleanValue();
		            if (privateRechargeAllowed && selector.equals("1")) {
		                parsedRequestStr = PretupsI.SERVICE_TYPE_DVD + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + voucherType + CHNL_MESSAGE_SEP + voucherSegment + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + voucherProfile + CHNL_MESSAGE_SEP + quantity + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;
		            } else {*/
		                parsedRequestStr = PretupsI.SERVICE_TYPE_DVD + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + voucherType + CHNL_MESSAGE_SEP + voucherSegment + CHNL_MESSAGE_SEP + amount + CHNL_MESSAGE_SEP + voucherProfile + CHNL_MESSAGE_SEP + quantity + CHNL_MESSAGE_SEP + selector + CHNL_MESSAGE_SEP + language2;
//		            }
		            p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
		            p_requestVO.setReqSelector(selector);
		            p_requestVO.setDecryptedMessage(parsedRequestStr);
		            p_requestVO.setRequestMSISDN(msisdn);
		            p_requestVO.setExternalNetworkCode(extNwCode);
		            p_requestVO.setSenderExternalCode(extCode);
		            p_requestVO.setSenderLoginID(loginId);
		            p_requestVO.setRequestMap(requestHashMap);
		            p_requestVO.setExternalReferenceNum(extRefNumber);// To enquire
		            p_requestVO.setVoucherType(voucherType);
		            p_requestVO.setVoucherSegment(voucherSegment);
		            p_requestVO.setVoucherProfile(voucherProfile);
		            p_requestVO.setQuantity(quantity);
		            // Transaction
		            // Status with
		            // External
		            // Refrence Number
		        }
		        // 03-MAR-2014
		        catch (BTSLBaseException be) {
		            p_requestVO.setMessageCode(be.getMessageKey());
		            p_requestVO.setMessageArguments(be.getArgs());
		            throw be;
		        }
		        // Ended Here
		        catch (Exception e) {
		            _log.errorTrace(methodName, e);
		            p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
		            loggerValue.setLength(0);
					loggerValue.append(EXCEPTION);
					loggerValue.append(e.getMessage());
					_log.error(methodName, loggerValue);
		            throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
		        } finally {
		        	if (_log.isDebugEnabled()) {
		             	loggerValue.setLength(0);
		             	loggerValue.append(EXIT_KEY);
		             	loggerValue.append(p_requestVO.toString());
		             	_log.debug(methodName, loggerValue);
		             }
		        }
		    }
		    
		    public static void generateExtDVDResponse(RequestVO p_requestVO) throws Exception {
		        final String methodName = "generateExtDVDResponse";
		        StringBuilder loggerValue= new StringBuilder();
		        if (_log.isDebugEnabled()) {
		        	loggerValue.setLength(0);
		        	loggerValue.append("Entered: p_requestVO=");
		        	loggerValue.append(p_requestVO.toString());
		        	_log.debug(methodName, loggerValue);
		        }
		        String responseStr = null;
		        StringBuilder sbf = null;
		        final java.util.Date date = new java.util.Date();
		        try {
		            sbf = new StringBuilder(1024);
		            sbf.append(DOC_TYPE);
		            sbf.append("<TYPE>EXDVDRESP</TYPE>");
		            if (p_requestVO.isSuccessTxn()) {
		                sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
		            } else {
		                String message = p_requestVO.getMessageCode();
		                if (message.indexOf("_") != -1) {
		                    message = message.substring(0, message.indexOf("_"));
		                }
		                sbf.append("<TXNSTATUS>").append(message).append("</TXNSTATUS>");
		            }

		            final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
		            sdf.setLenient(false);
		            if (BTSLUtil.isNullString(p_requestVO.getTxnBatchId())) {
		                sbf.append("<TXNBATCHID></TXNBATCHID>");
		            } else {
		                sbf.append("<TXNBATCHID>").append(p_requestVO.getTxnBatchId()).append("</TXNBATCHID>");
		            }
					//Added for EXTGW response in English language always
					Locale  locale = new Locale("en","US");
		            if (!p_requestVO.isSuccessTxn()) {
		                sbf.append("<MESSAGE>").append(getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
		            } else {
						if(PretupsI.GATEWAY_TYPE_EXTGW.equalsIgnoreCase(p_requestVO.getRequestGatewayType())){
			                sbf.append("<MESSAGE>").append(getMessage(locale, p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
						} else {
			                sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
						}
		            }
		            sbf.append("</COMMAND>");
		            responseStr = sbf.toString();
		            p_requestVO.setSenderReturnMessage(responseStr);
		        } catch (Exception e) {
		            _log.errorTrace(methodName, e);
		            loggerValue.setLength(0);
					loggerValue.append(EXCEPTION);
					loggerValue.append(e.getMessage());
					_log.error(methodName, loggerValue);
		            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
		            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateExtDVDResponse]",
		                PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtDVDResponse:" + e.getMessage());
		        } finally {
		        	if (_log.isDebugEnabled()) {
		             	loggerValue.setLength(0);
		             	loggerValue.append("Exiting: responseStr:");
		             	loggerValue.append(responseStr.toString());
		             	_log.debug(methodName, loggerValue);
		             }
		        }
		    }
			 public static void parseVoucherO2CTransferRequest(int p_action, RequestVO p_requestVO) throws BTSLBaseException {
                String parsedRequestStr = null;
                final String methodName = "parseVoucherO2CTransferRequest";
                StringBuilder loggerValue= new StringBuilder();
                if (_log.isDebugEnabled()) {
                	loggerValue.setLength(0);
                	loggerValue.append(ENTRY_KEY);
                	loggerValue.append(p_requestVO.toString());
                	_log.debug(methodName, loggerValue);
                }
                try {
                    final Map<String, String> elementMap = new HashMap<String, String>();
                    final String requestStr = p_requestVO.getRequestMessage();
                    final List<String> arrList = new ArrayList<String>();

                    
                    int index=requestStr.indexOf("<TYPE>");
                    String type=requestStr.substring(index+"<TYPE>".length(),requestStr.indexOf("</TYPE>",index));
                    index = requestStr.indexOf("<EXTNWCODE>");
                    final String extNetworkCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));

                    index = requestStr.indexOf("<MSISDN>");
                    final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
                    elementMap.put("MSISDN", msisdn1);
                    index = requestStr.indexOf("<PIN>");
                    final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
                    elementMap.put("PIN",pin);
                    index = requestStr.indexOf("<EXTCODE>");
                    final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
                    elementMap.put("EXTCODE",extCode);
                    index = requestStr.indexOf("<EXTTXNNUMBER>");
                    final String extNumber = requestStr.substring(index + "<EXTTXNNUMBER>".length(), requestStr.indexOf("</EXTTXNNUMBER>", index));
                    elementMap.put("EXTTXNNUMBER", extNumber);

                    index = requestStr.indexOf("<EXTTXNDATE>");
                    String extDate = requestStr.substring(index + "<EXTTXNDATE>".length(), requestStr.indexOf("</EXTTXNDATE>", index));
                    extDate = BTSLDateUtil.getGregorianDateInString(extDate);
                    elementMap.put("EXTTXNDATE", extDate);

//                    index = requestStr.indexOf("<PRODUCTS>");
//                    String productsTemp = requestStr.substring(index + "<PRODUCTS>".length(), requestStr.indexOf("</PRODUCTS>", index));
//                    final String products = productsTemp.replaceAll("\r","").replaceAll("\n", "");
//                    int prdStartLength = 0;
//                    final int prdEndLength = products.length();
//                    String productCode = null;
//                    String productQty = null;
//                    String balanceTypeValue = null;
//                    Boolean isTagReq=false;
//
//                    int i = 0;
//                    int innerIndex = -1;
//
//                    while (prdStartLength < prdEndLength) {
//                        innerIndex = products.indexOf("<PRODUCTCODE>", innerIndex);
//                        productCode = products.substring(innerIndex + "<PRODUCTCODE>".length(), products.indexOf("</PRODUCTCODE>", innerIndex));
//                        prdStartLength = products.indexOf("</PRODUCTCODE>", innerIndex) + "</PRODUCTCODE>".length();
//                        arrList.add(++i, productCode);
//                         }
                    index = requestStr.indexOf("<PRODUCTCODE>");
                    final String productCode = requestStr.substring(index + "<PRODUCTCODE>".length(), requestStr.indexOf("</PRODUCTCODE>", index));
                    elementMap.put("PRODUCTCODE", productCode);
                    
                    index = requestStr.indexOf("<TRFCATEGORY>");
                    final String trfCategory = requestStr.substring(index + "<TRFCATEGORY>".length(), requestStr.indexOf("</TRFCATEGORY>", index));
                    elementMap.put("TRFCATEGORY", trfCategory);
                    
                    index = requestStr.indexOf("<FROM_SERIALNO>");
                    final String fromSerialNo = requestStr.substring(index + "<FROM_SERIALNO>".length(), requestStr.indexOf("</FROM_SERIALNO>", index));
                    elementMap.put("FROM_SERIALNO", fromSerialNo);
                    
                    index = requestStr.indexOf("<TO_SERIALNO>");
                    final String toSerialNo = requestStr.substring(index + "<TO_SERIALNO>".length(), requestStr.indexOf("</TO_SERIALNO>", index));
                    elementMap.put("TO_SERIALNO", toSerialNo);                    
                    
                    index = requestStr.indexOf("<PAYMENTDETAILS>");
                    final String payments = requestStr.substring(index + "<PAYMENTDETAILS>".length(), requestStr.indexOf("</PAYMENTDETAILS>", index));

                    index = payments.indexOf("<PAYMENTTYPE>");
                    final String paymentType = payments.substring(index + "<PAYMENTTYPE>".length(), payments.indexOf("</PAYMENTTYPE>", index));
                    elementMap.put("PAYMENTTYPE", paymentType);

                    index = payments.indexOf("<PAYMENTINSTNUMBER>");
                    final String paymentNumber = payments.substring(index + "<PAYMENTINSTNUMBER>".length(), payments.indexOf("</PAYMENTINSTNUMBER>", index));
                    elementMap.put("PAYMENTINSTNUMBER", paymentNumber);

                    index = payments.indexOf("<PAYMENTDATE>");
                     String paymentDate = payments.substring(index + "<PAYMENTDATE>".length(), payments.indexOf("</PAYMENTDATE>", index));
                     paymentDate = BTSLDateUtil.getGregorianDateInString(paymentDate);
                    elementMap.put("PAYMENTDATE", paymentDate);

                    index = requestStr.indexOf("<REMARKS>");
                    final String remarks = requestStr.substring(index + "<REMARKS>".length(), requestStr.indexOf("</REMARKS>", index));
                    elementMap.put("REMARKS", remarks);
                    
                    
                    XMLStringValidation.validateVoucherO2CTransferParsing(p_requestVO, extNetworkCode, msisdn1, pin, extCode, extNumber, extDate, productCode, 
                        trfCategory,paymentType, paymentNumber, paymentDate, remarks,fromSerialNo,toSerialNo);

                    parsedRequestStr = PretupsI.SERVICE_TYPE_VOUCHER_O2C + CHNL_MESSAGE_SEP  + pin;
                  
                    if (_log.isDebugEnabled()) {
                        _log.debug(methodName, "PIN_VALIDATION_FOR_VOUCHER_O2C Value "+Constants.getProperty("PIN_VALIDATION_FOR_VOUCHER_O2C"));
                    }

                    if(!("N".equals(Constants.getProperty("PIN_VALIDATION_FOR_VOUCHER_O2C"))) && !BTSLUtil.isNullString(msisdn1) && BTSLUtil.isNullString(pin) ){
                    	if (_log.isDebugEnabled()) {
                            _log.debug(methodName, "PIN Required but pin blank ");
                        }
                		throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.PIN_REQUIRED);            	
                    }	
        			
                    p_requestVO.setDecryptedMessage(parsedRequestStr);
                    p_requestVO.setRequestMSISDN(msisdn1);
                    p_requestVO.setExternalNetworkCode(extNetworkCode);
                    p_requestVO.setSenderExternalCode(extCode);
                    p_requestVO.setRequestMap((HashMap<String, String>) elementMap);
                }
                // 03-MAR-2014
                catch (BTSLBaseException be) {
                    p_requestVO.setMessageCode(be.getMessageKey());
                    p_requestVO.setMessageArguments(be.getArgs());
                    throw be;
                }
                // Ended Here
                catch (Exception e) {
                    throw new BTSLBaseException("ExtAPIXMLStringParser",methodName,PretupsErrorCodesI.EXTSYS_REQ_DATE_INVALID_FORMAT,e);
                }
            }

 
 public static void generateVoucherO2CTransferResponse(RequestVO p_requestVO) throws Exception {
     final String methodName = "generateVoucherO2CTransferResponse";
     StringBuilder loggerValue= new StringBuilder();
     if (_log.isDebugEnabled()) {
     	loggerValue.setLength(0);
     	loggerValue.append(ENTRY_KEY);
     	loggerValue.append(p_requestVO.toString());
     	_log.debug(methodName, loggerValue);
     }
     String responseStr = null;
     StringBuilder sbf = null;
     try {
         sbf = new StringBuilder(1024);
         sbf.append(DOC_TYPE);
         sbf.append("<TYPE>VOMSENRESP</TYPE>");
         if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
             sbf.append("<TXNID></TXNID>");
         } else {
             sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
         }
         if (p_requestVO.isSuccessTxn()) {
             sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
         } else {
             sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
         }
         if (p_requestVO.getRequestMap() != null) {
             sbf.append("<EXTTXNNUMBER>").append(p_requestVO.getRequestMap().get("EXTTXNNUMBER")).append("</EXTTXNNUMBER>");
         } else {
             sbf.append("<EXTTXNNUMBER></EXTTXNNUMBER>");
         }
         if(p_requestVO.getRequestMap()!=null) {
        	 sbf.append("<VOUCHERMRP>").append(p_requestVO.getRequestMap().get("VOUCHERMRP")).append("</VOUCHERMRP>");
             sbf.append("<VOUCHERQUANTITY>").append(p_requestVO.getRequestMap().get("VOUCHERQUANTITY")).append("</VOUCHERQUANTITY>");
             sbf.append("<TOTALAMOUNT>").append(p_requestVO.getRequestMap().get("TOTALAMOUNT")).append("</TOTALAMOUNT>");
             sbf.append("<NETPAYABLEAMNT>").append(p_requestVO.getRequestMap().get("NETPAYABLEAMNT")).append("</NETPAYABLEAMNT>"); 
         }
         else {
        	 sbf.append("<VOUCHERMRP></VOUCHERMRP>");
             sbf.append("<VOUCHERQUANTITY></VOUCHERQUANTITY>");
             sbf.append("<TOTALAMOUNT></TOTALAMOUNT>");
             sbf.append("<NETPAYABLEAMNT></NETPAYABLEAMNT>"); 
         }

         sbf.append("</COMMAND>");
         responseStr = sbf.toString();
         p_requestVO.setSenderReturnMessage(responseStr);
     } catch (Exception e) {
         _log.errorTrace(methodName, e);
         loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
         p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
         EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateChannelO2CAPIResponse]",
             PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateChannelO2CAPIResponse:" + e.getMessage());
     } finally {
     	if (_log.isDebugEnabled()) {
          	loggerValue.setLength(0);
          	loggerValue.append(EXIT_KEY);
          	loggerValue.append(p_requestVO.toString());
          	_log.debug(methodName, loggerValue);
          }
     }
 }
 
 public static void generatePackageVoucherEnquiryResponse(RequestVO p_requestVO) throws Exception {
     final String methodName = "generateVoucherEnqResponse";
     StringBuilder loggerValue= new StringBuilder();
     if (_log.isDebugEnabled()) {
     	loggerValue.setLength(0);
     	loggerValue.append("Entered: p_requestVO=");
     	loggerValue.append(p_requestVO.toString());
     	_log.debug(methodName, loggerValue);
     }
     String responseStr = null;
     StringBuilder sbf = null;
     try {
         sbf = new StringBuilder(1024);
         sbf.append(DOC_TYPE);
         sbf.append("<TYPE>VOUENQRESP</TYPE>");
         sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
         if(p_requestVO.getMessageCode().contentEquals("200")){
	         VomsVoucherVO vomsVoucherVO=null;
	         StringBuffer bundleDetailEnquiry = new StringBuffer("");
	         for(int i=0; i<p_requestVO.getEnquiryItemList().size();i++){
	        	 vomsVoucherVO=(VomsVoucherVO)p_requestVO.getEnquiryItemList().get(i);
	        	 bundleDetailEnquiry.append("(");
	        	 bundleDetailEnquiry.append(vomsVoucherVO.getSerialNo()+",");
	        	 bundleDetailEnquiry.append(vomsVoucherVO.getCurrentStatus()+",");
	        	 bundleDetailEnquiry.append(vomsVoucherVO.getExpiryDate()+",");
	        	 bundleDetailEnquiry.append(vomsVoucherVO.getMRP()+",");
	        	 bundleDetailEnquiry.append(vomsVoucherVO.getUserID()+",");
	        	 bundleDetailEnquiry.append(vomsVoucherVO.getBatchName()+",");
	        	 bundleDetailEnquiry.append(vomsVoucherVO.getMasterRetailPrice()+",");
	        	 bundleDetailEnquiry.append(vomsVoucherVO.getValidity()+",");
	        	 bundleDetailEnquiry.append(vomsVoucherVO.getMasterSerialNo()+")|");
	         }
	         bundleDetailEnquiry.deleteCharAt(bundleDetailEnquiry.lastIndexOf("|"));
	         sbf.append("<DETAILINFO>").append(bundleDetailEnquiry.toString()).append("</DETAILINFO>");
         } else {
        	 sbf.append("<ERROR>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</ERROR>");
         }
         sbf.append("</COMMAND>");
         responseStr = sbf.toString();
         p_requestVO.setSenderReturnMessage(responseStr);
     } catch (Exception e) {
     	loggerValue.setLength(0);
			loggerValue.append(EXCEPTION);
			loggerValue.append(e.getMessage());
			_log.error(methodName, loggerValue);
         p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
         EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "XMLStringParser[generateVoucherEnqResponse]",
             PretupsErrorCodesI.P2P_ERROR_EXCEPTION, "", "", "generateVoucherEnqResponse:" + e.getMessage());
     } finally {
     	if (_log.isDebugEnabled()) {
          	loggerValue.setLength(0);
          	loggerValue.append("Exiting: responseStr:");
          	loggerValue.append(responseStr.toString());
          	_log.debug(methodName, loggerValue);
          }
     }
 }

 /**
 * @param p_requestVO
 * @throws Exception
 */
public static void parseExtC2CVomsTransferRequest(RequestVO p_requestVO) throws Exception {
	final String methodName = "parseExtC2CVomsTransferRequest";
    StringBuilder loggerValue= new StringBuilder();
    printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
    String parsedRequestStr = null;
    try {
        HashMap requestHashMap = p_requestVO.getRequestMap();
        if (requestHashMap == null) {
            requestHashMap = new HashMap();
        }
        final ArrayList arrList = new ArrayList();
        final String requestStr = p_requestVO.getRequestMessage();
        int index = requestStr.indexOf("<TYPE>");
        final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
        requestHashMap.put("TYPE", type);

        index = requestStr.indexOf("<EXTNWCODE>");
        final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
        requestHashMap.put("EXTNWCODE", extNwCode);

        index = requestStr.indexOf("<MSISDN>");
        final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
        requestHashMap.put("MSISDN", msisdn1);

        
        
        
        index = requestStr.indexOf("<PAYMENTINSTCODE>");
        final String paymentInstCode = requestStr.substring(index + "<PAYMENTINSTCODE>".length(), requestStr.indexOf("</PAYMENTINSTCODE>", index));
        requestHashMap.put("PAYMENTINSTCODE", paymentInstCode);
        
        

        index = requestStr.indexOf("<PAYMENTINSTDATE>");
        final String paymentDate = requestStr.substring(index + "<PAYMENTINSTDATE>".length(), requestStr.indexOf("</PAYMENTINSTDATE>", index));
        requestHashMap.put("PAYMENTDATE", paymentDate);
        
        

        index = requestStr.indexOf("<PAYMENTINSTNUM>");
        final String paymentInstNum = requestStr.substring(index + "<PAYMENTINSTNUM>".length(), requestStr.indexOf("</PAYMENTINSTNUM>", index));
        requestHashMap.put("PAYMENTINSTNUM", paymentInstNum);
        
        
        
        index = requestStr.indexOf("<PIN>");
        final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
        requestHashMap.put("PIN", pin);

        index = requestStr.indexOf("<LOGINID>");
        final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
        requestHashMap.put("LOGINID", loginId);

        index = requestStr.indexOf("<PASSWORD>");
        final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
        requestHashMap.put("PASSWORD", password);

        index = requestStr.indexOf("<EXTCODE>");
        final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
        requestHashMap.put("EXTCODE", extCode);

        index = requestStr.indexOf("<EXTREFNUM>");
        final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
        requestHashMap.put("EXTREFNUM", extRefNumber);

        index = requestStr.indexOf("<MSISDN2>");
        final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
        requestHashMap.put("MSISDN2", msisdn2);

        index = requestStr.indexOf("<LOGINID2>");
        final String loginId2 = requestStr.substring(index + "<LOGINID2>".length(), requestStr.indexOf("</LOGINID2>", index));
        requestHashMap.put("LOGINID2", loginId2);

        index = requestStr.indexOf("<EXTCODE2>");
        final String extCode2 = requestStr.substring(index + "<EXTCODE2>".length(), requestStr.indexOf("</EXTCODE2>", index));
        requestHashMap.put("EXTCODE2", extCode2);

        index = requestStr.indexOf("<VOUCHERTYPE>");
        final String voucherType = requestStr.substring(index + "<VOUCHERTYPE>".length(), requestStr.indexOf("</VOUCHERTYPE>", index));
        requestHashMap.put("VOUCHERTYPE", voucherType);

        index = requestStr.indexOf("<VOUCHERSEGMENT>");
        final String voucherSegment = requestStr.substring(index + "<VOUCHERSEGMENT>".length(), requestStr.indexOf("</VOUCHERSEGMENT>", index));
        requestHashMap.put("VOUCHERSEGMENT", voucherSegment);
        
       
        StringBuilder voms = new StringBuilder();
        index = requestStr.indexOf("<VOUCHERDETAILS>");
        String voucherDetails = requestStr.substring(index + "<VOUCHERDETAILS>".length(), requestStr.indexOf("</VOUCHERDETAILS>", index));
        String[] voucherDetailsArr = voucherDetails.split("<VOUCHER>");

        for (String voucherDetailsArrObj : voucherDetailsArr) {
               if (voucherDetailsArrObj != null && voucherDetailsArrObj.trim().length() > 0) {
            	   if(!BTSLUtil.isNullString(voms.toString())){
            		   voms.append(",");
            	   }
            	   index = voucherDetailsArrObj.indexOf("<DENOMINATION>");
                   final String denomination = voucherDetailsArrObj.substring(index + "<DENOMINATION>".length(),
                                 voucherDetailsArrObj.indexOf("</DENOMINATION>", index));
                   
                     index = voucherDetailsArrObj.indexOf("<FROMSERIALNO>");
                     final String fromSerialNo = voucherDetailsArrObj.substring(index + "<FROMSERIALNO>".length(),
                                   voucherDetailsArrObj.indexOf("</FROMSERIALNO>", index));

                     index = voucherDetailsArrObj.indexOf("<TOSERIALNO>");
                     final String toSerialNo = voucherDetailsArrObj.substring(index + "<TOSERIALNO>".length(),
                                   voucherDetailsArrObj.indexOf("</TOSERIALNO>", index));

                     voms.append(denomination+":"+fromSerialNo+":"+toSerialNo);
               }
        }
        requestHashMap.put("VOUCHERDETAILS", voms);

        index = requestStr.indexOf("<LANGUAGE1>");
        final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
        requestHashMap.put("LANGUAGE1", language1);
        boolean channelTransferInfoRequired = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CHANNEL_TRANSFERS_INFO_REQUIRED);
        Boolean isTagReq=false;
        isTagReq=channelTransferInfoRequired;
        if(isTagReq)
        {
        	
            index = requestStr.indexOf("<REMARKS>");
            if(index>0)
            {
            	final String remarks = requestStr.substring(index + "<REMARKS>".length(), requestStr.indexOf("</REMARKS>", index));
                requestHashMap.put("REMARKS", remarks);
            }
            index = requestStr.indexOf("<INFO1>");
            if(index>0)
            {
	            final String info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
	            requestHashMap.put("INFO1", info1);
            }
            index = requestStr.indexOf("<INFO2>");
            if(index>0)
            {
	            final String info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
	            requestHashMap.put("INFO2", info2);
            }
        }
        
        
        XMLStringValidation.validateExtC2CVomsTransferRequest(p_requestVO, extNwCode, msisdn1, pin, loginId, password, extCode, extRefNumber, msisdn2, voucherType, voucherSegment, language1,voms.toString());

        parsedRequestStr = PretupsI.SERVICE_TYPE_C2C_VOMS_TRANSFERS + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + pin;

        p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
        p_requestVO.setDecryptedMessage(parsedRequestStr);
        p_requestVO.setRequestMSISDN(msisdn1);
        p_requestVO.setExternalNetworkCode(extNwCode);
        p_requestVO.setExternalReferenceNum(extRefNumber);
        p_requestVO.setSenderExternalCode(extCode);
        p_requestVO.setSenderLoginID(loginId);
        p_requestVO.setRequestMap(requestHashMap);
        p_requestVO.setReceiverMsisdn(msisdn2);
        p_requestVO.setReceiverExtCode(extCode2);
        p_requestVO.setReceiverLoginID(loginId2);

    }
    catch (BTSLBaseException be) {
        p_requestVO.setMessageCode(be.getMessageKey());
        p_requestVO.setMessageArguments(be.getArgs());
        throw be;
    }
    catch (Exception e) {
        _log.errorTrace(methodName, e);
        p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
    } finally {
    	if (_log.isDebugEnabled()) {
         	loggerValue.setLength(0);
         	loggerValue.append(EXIT_KEY);
         	loggerValue.append(p_requestVO.toString());
         	_log.debug(methodName, loggerValue);
         }
    }
    }
/**
 * @param p_requestVO
 * @param p_action
 * @throws Exception
 */
public static void generateExtC2CVomsTransferRequestResponse(RequestVO p_requestVO, int p_action) throws Exception {
    final String methodName = "generateExtC2CVomsTransferRequestResponse";
    StringBuilder loggerValue= new StringBuilder();
    if (_log.isDebugEnabled()) {
    	loggerValue.setLength(0);
    	loggerValue.append("Entered: p_requestVO=");
    	loggerValue.append(p_requestVO.toString());
    	loggerValue.append(" p_action=");
    	loggerValue.append(p_action);
    	_log.debug(methodName, loggerValue);
    }
    String responseStr = null;
    StringBuilder sbf = null;
    final java.util.Date date = new java.util.Date();
    try {
        sbf = new StringBuilder(1024);

        sbf.append("<?xml version=\"1.0\"?><COMMAND>");
        if (p_action == ParserUtility.ACTION_C2C_VOMS_TRF) {
            sbf.append("<TYPE>C2CVOMSTRF</TYPE>");
        }

        final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
        sdf.setLenient(false);
        String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

        if (p_requestVO.isSuccessTxn()) {
            sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
        } else {
            sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
        }

       /* if (BTSLUtil.isNullString(p_requestVO.getExternalReferenceNum())) {
            sbf.append("<EXTREFNUM></EXTREFNUM>");
        } else {
            sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
        }*/

        if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
            sbf.append("<TXNID></TXNID>");
        } else {
            sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
        }
        String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
        String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
        final Locale locale = new Locale(defaultLanguage, defaultCountry);
        sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
        sbf.append("</COMMAND>");
        responseStr = sbf.toString();
        p_requestVO.setSenderReturnMessage(responseStr);
    } catch (Exception e) {
        _log.errorTrace(methodName, e);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
        EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
            "ExtAPIXMLStringParser[generateExtC2CVomsTransferRequestResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtC2CVomsTransferRequestResponse:" + e.getMessage());
    } finally {
    	printExitLogger(methodName, loggerValue, responseStr);
    }
}

/**
 * @param p_requestVO
 * @throws Exception
 */
public static void parseExtC2CVomsInitiateRequest(RequestVO p_requestVO) throws Exception {
	final String methodName = "parseExtC2CVomsInitiateRequest";
    StringBuilder loggerValue= new StringBuilder();
    printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
    String parsedRequestStr = null;
    try {
        HashMap requestHashMap = p_requestVO.getRequestMap();
        if (requestHashMap == null) {
            requestHashMap = new HashMap();
        }
        final String requestStr = p_requestVO.getRequestMessage();
        int index = requestStr.indexOf("<TYPE>");
        final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
        requestHashMap.put("TYPE", type);

        index = requestStr.indexOf("<EXTNWCODE>");
        final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
        requestHashMap.put("EXTNWCODE", extNwCode);

        index = requestStr.indexOf("<MSISDN>");
        final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
        requestHashMap.put("MSISDN", msisdn1);

        
        
        index = requestStr.indexOf("<PAYMENTINSTCODE>");
        final String paymentInstCode = requestStr.substring(index + "<PAYMENTINSTCODE>".length(), requestStr.indexOf("</PAYMENTINSTCODE>", index));
        requestHashMap.put("PAYMENTINSTCODE", paymentInstCode);
        
        

        index = requestStr.indexOf("<PAYMENTINSTDATE>");
        final String paymentDate = requestStr.substring(index + "<PAYMENTINSTDATE>".length(), requestStr.indexOf("</PAYMENTINSTDATE>", index));
        requestHashMap.put("PAYMENTDATE", paymentDate);
        
        

        index = requestStr.indexOf("<PAYMENTINSTNUM>");
        final String paymentInstNum = requestStr.substring(index + "<PAYMENTINSTNUM>".length(), requestStr.indexOf("</PAYMENTINSTNUM>", index));
        requestHashMap.put("PAYMENTINSTNUM", paymentInstNum);
        
        
        index = requestStr.indexOf("<PIN>");
        final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
        requestHashMap.put("PIN", pin);

        index = requestStr.indexOf("<LOGINID>");
        final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
        requestHashMap.put("LOGINID", loginId);

        index = requestStr.indexOf("<PASSWORD>");
        final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
        requestHashMap.put("PASSWORD", password);

        index = requestStr.indexOf("<EXTCODE>");
        final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
        requestHashMap.put("EXTCODE", extCode);

        index = requestStr.indexOf("<EXTREFNUM>");
        final String extRefNumber = requestStr.substring(index + "<EXTREFNUM>".length(), requestStr.indexOf("</EXTREFNUM>", index));
        requestHashMap.put("EXTREFNUM", extRefNumber);

        index = requestStr.indexOf("<MSISDN2>");
        final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
        requestHashMap.put("MSISDN2", msisdn2);

        index = requestStr.indexOf("<LOGINID2>");
        final String loginId2 = requestStr.substring(index + "<LOGINID2>".length(), requestStr.indexOf("</LOGINID2>", index));
        requestHashMap.put("LOGINID2", loginId2);

        index = requestStr.indexOf("<EXTCODE2>");
        final String extCode2 = requestStr.substring(index + "<EXTCODE2>".length(), requestStr.indexOf("</EXTCODE2>", index));
        requestHashMap.put("EXTCODE2", extCode2);
        
        index = requestStr.indexOf("<VOUCHERTYPE>");
        final String voucherType = requestStr.substring(index + "<VOUCHERTYPE>".length(), requestStr.indexOf("</VOUCHERTYPE>", index));
        requestHashMap.put("VOUCHERTYPE", voucherType);

        index = requestStr.indexOf("<VOUCHERSEGMENT>");
        final String voucherSegment = requestStr.substring(index + "<VOUCHERSEGMENT>".length(), requestStr.indexOf("</VOUCHERSEGMENT>", index));
        requestHashMap.put("VOUCHERSEGMENT", voucherSegment);
        
       
        StringBuilder voms = new StringBuilder();
        index = requestStr.indexOf("<VOUCHERDETAILS>");
        String voucherDetails = requestStr.substring(index + "<VOUCHERDETAILS>".length(), requestStr.indexOf("</VOUCHERDETAILS>", index));
        String[] voucherDetailsArr = voucherDetails.split("<VOUCHER>");

        for (String voucherDetailsArrObj : voucherDetailsArr) {
               if (voucherDetailsArrObj != null && voucherDetailsArrObj.trim().length() > 0) {
            	   if(!BTSLUtil.isNullString(voms.toString())){
            		   voms.append(",");
            	   }
            	   index = voucherDetailsArrObj.indexOf("<DENOMINATION>");
                   final String denomination = voucherDetailsArrObj.substring(index + "<DENOMINATION>".length(),
                                 voucherDetailsArrObj.indexOf("</DENOMINATION>", index));
                   
                     index = voucherDetailsArrObj.indexOf("<QUANTITY>");
                     final String quantity = voucherDetailsArrObj.substring(index + "<QUANTITY>".length(),
                                   voucherDetailsArrObj.indexOf("</QUANTITY>", index));

                     voms.append(denomination+":"+quantity);
               }
        }
        requestHashMap.put("VOUCHERDETAILS", voms);

        index = requestStr.indexOf("<LANGUAGE1>");
        final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
        requestHashMap.put("LANGUAGE1", language1);
        boolean channelTransferInfoRequired = (boolean) PreferenceCache.getSystemPreferenceValue(PreferenceI.CHANNEL_TRANSFERS_INFO_REQUIRED);
        Boolean isTagReq=false;
        isTagReq=channelTransferInfoRequired;
        if(isTagReq)
        {
        	
            index = requestStr.indexOf("<REMARKS>");
            if(index>0)
            {
            	final String remarks = requestStr.substring(index + "<REMARKS>".length(), requestStr.indexOf("</REMARKS>", index));
                requestHashMap.put("REMARKS", remarks);
            }
            index = requestStr.indexOf("<INFO1>");
            if(index>0)
            {
	            final String info1 = requestStr.substring(index + "<INFO1>".length(), requestStr.indexOf("</INFO1>", index));
	            requestHashMap.put("INFO1", info1);
            }
            index = requestStr.indexOf("<INFO2>");
            if(index>0)
            {
	            final String info2 = requestStr.substring(index + "<INFO2>".length(), requestStr.indexOf("</INFO2>", index));
	            requestHashMap.put("INFO2", info2);
            }
        }
        
        
        XMLStringValidation.validateExtC2CVomsTransferRequest(p_requestVO, extNwCode, msisdn1, pin, loginId, password, extCode, extRefNumber, msisdn2, voucherType, voucherSegment, language1,voms.toString());

        parsedRequestStr = PretupsI.SERVICE_TYPE_C2C_VOMS_INITIIATE + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + pin;

        p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
        p_requestVO.setDecryptedMessage(parsedRequestStr);
        p_requestVO.setRequestMSISDN(msisdn1);
        p_requestVO.setExternalNetworkCode(extNwCode);
        p_requestVO.setExternalReferenceNum(extRefNumber);
        p_requestVO.setSenderExternalCode(extCode);
        p_requestVO.setSenderLoginID(loginId);
        p_requestVO.setRequestMap(requestHashMap);
        p_requestVO.setReceiverMsisdn(msisdn2);
        p_requestVO.setReceiverExtCode(extCode2);
        p_requestVO.setReceiverLoginID(loginId2);
    }
    catch (BTSLBaseException be) {
        p_requestVO.setMessageCode(be.getMessageKey());
        p_requestVO.setMessageArguments(be.getArgs());
        throw be;
    }
    catch (Exception e) {
        _log.errorTrace(methodName, e);
        p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
    } finally {
    	if (_log.isDebugEnabled()) {
         	loggerValue.setLength(0);
         	loggerValue.append(EXIT_KEY);
         	loggerValue.append(p_requestVO.toString());
         	_log.debug(methodName, loggerValue);
         }
    }
    }
/**
 * @param p_requestVO
 * @param p_action
 * @throws Exception
 */
public static void generateExtC2CVomsInitiateRequestResponse(RequestVO p_requestVO, int p_action) throws Exception {
    final String methodName = "generateExtC2CVomsInitiateRequestResponse";
    StringBuilder loggerValue= new StringBuilder();
    if (_log.isDebugEnabled()) {
    	loggerValue.setLength(0);
    	loggerValue.append("Entered: p_requestVO=");
    	loggerValue.append(p_requestVO.toString());
    	loggerValue.append(" p_action=");
    	loggerValue.append(p_action);
    	_log.debug(methodName, loggerValue);
    }
    String responseStr = null;
    StringBuilder sbf = null;
    final java.util.Date date = new java.util.Date();
    try {
        sbf = new StringBuilder(1024);

        sbf.append("<?xml version=\"1.0\"?><COMMAND>");
        if (p_action == ParserUtility.ACTION_C2C_VOMS_INI) {
            sbf.append("<TYPE>C2CVOMSTRFINI</TYPE>");
        }
        final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
        sdf.setLenient(false);
        String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

        if (p_requestVO.isSuccessTxn()) {
            sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
        } else {
            sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
        }

       /* if (BTSLUtil.isNullString(p_requestVO.getExternalReferenceNum())) {
            sbf.append("<EXTREFNUM></EXTREFNUM>");
        } else {
            sbf.append("<EXTREFNUM>").append(p_requestVO.getExternalReferenceNum()).append("</EXTREFNUM>");
        }*/

        if (BTSLUtil.isNullString(p_requestVO.getTransactionID())) {
            sbf.append("<TXNID></TXNID>");
        } else {
            sbf.append("<TXNID>").append(p_requestVO.getTransactionID()).append("</TXNID>");
        }
        String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
        String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
        final Locale locale = new Locale(defaultLanguage, defaultCountry);
        sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
        sbf.append("</COMMAND>");
        responseStr = sbf.toString();
        p_requestVO.setSenderReturnMessage(responseStr);
    } 
    catch (Exception e) {
        _log.errorTrace(methodName, e);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
        EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
            "ExtAPIXMLStringParser[generateExtC2CVomsInitiateRequestResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtC2CVomsInitiateRequestResponse:" + e.getMessage());
    } finally {
    	printExitLogger(methodName, loggerValue, responseStr);
    }
}
public static void parseChannelUserDetailsRequest(RequestVO p_requestVO) throws BTSLBaseException {
    final String methodName = "parseChannelUserDetailsRequest";
    StringBuilder loggerValue= new StringBuilder();
    printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
    String parsedRequestStr = null;
    HashMap requestHashMap = p_requestVO.getRequestMap();
    try {
         if (requestHashMap == null) {
             requestHashMap = new HashMap();
         }
        final String requestStr = p_requestVO.getRequestMessage();
        String type = null;
        int index=requestStr.indexOf("<TYPE>");
        type=requestStr.substring(index+"<TYPE>".length(),requestStr.indexOf("</TYPE>",index));
        requestHashMap.put("TYPE", type);
		String extnwcode = "";
		index=requestStr.indexOf("<EXTNWCODE>");
		extnwcode=requestStr.substring(index+"<EXTNWCODE>".length(),requestStr.indexOf("</EXTNWCODE>",index));
		requestHashMap.put("EXTNWCODE", extnwcode);
        index = requestStr.indexOf("<MSISDN>");
        final String msisdn1 = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
        requestHashMap.put("MSISDN", msisdn1);
        index = requestStr.indexOf("<PIN>");
        final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
        requestHashMap.put("PIN", pin);
        index = requestStr.indexOf("<MSISDN2>");
        final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
        requestHashMap.put("MSISDN2", msisdn2);
        index = requestStr.indexOf("<LANGUAGE1>");
        final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
        requestHashMap.put("LANGUAGE1", language1);
        index = requestStr.indexOf("<LOGINID>");
        final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
        requestHashMap.put("LOGINID", loginId);
        index = requestStr.indexOf("<PASSWORD>");
        String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
        requestHashMap.put("PASSWORD", password);
        index = requestStr.indexOf("<EXTCODE>");
        String  extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
        requestHashMap.put("EXTCODE", extCode);
        if(BTSLUtil.isNullString(type)){
     	   throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);	
        }
       if(BTSLUtil.isNullString(extnwcode)){
    	   throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);	
        }
       if(BTSLUtil.isNullString(msisdn1) && BTSLUtil.isNullString(loginId) && BTSLUtil.isNullString(extCode) ){
    	   throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
       }
       if(!BTSLUtil.isNullString(msisdn1) &&  BTSLUtil.isNullString(pin) ){
   		throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.PIN_REQUIRED);            	
       }
       if(!BTSLUtil.isNullString(loginId) &&  BTSLUtil.isNullString(password) ){
    	   throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_MISSING_MANDATORY_FIELD);
       }
       if(BTSLUtil.isNullString(msisdn2)){
    	   throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.MSISDN_INVALID_OR_BLANK);
       }
      
        parsedRequestStr = PretupsI.CHANNEL_USER_DETAILS + CHNL_MESSAGE_SEP + msisdn1 + CHNL_MESSAGE_SEP + pin + CHNL_MESSAGE_SEP + msisdn2 + CHNL_MESSAGE_SEP + language1 + CHNL_MESSAGE_SEP + pin;		
        p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
        p_requestVO.setExternalNetworkCode(extnwcode);
        p_requestVO.setRequestMSISDN(msisdn1);
        p_requestVO.setSenderExternalCode(extCode);
        p_requestVO.setSenderLoginID(loginId);
        p_requestVO.setPin(pin);
        p_requestVO.setDecryptedMessage(parsedRequestStr);
        p_requestVO.setRequestMap(requestHashMap);
    }catch (BTSLBaseException be) {
        p_requestVO.setMessageCode(be.getMessageKey());
        p_requestVO.setMessageArguments(be.getArgs());
        throw be;
    } 
    catch (Exception e) {
        _log.errorTrace(methodName, e);
        p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
    } finally {
    	if (_log.isDebugEnabled()) {
         	loggerValue.setLength(0);
         	loggerValue.append(EXIT_KEY);
         	loggerValue.append(p_requestVO.toString());
         	_log.debug(methodName, loggerValue);
         }
    }
}
/**
* @param p_requestVO
* @param p_action
* @throws Exception
*/
public static void generateChannelUserDetailsResponse(RequestVO p_requestVO, int p_action) throws Exception {
   final String methodName = "generateChannelUserDetailsResponse";
   StringBuilder loggerValue= new StringBuilder();
   if (_log.isDebugEnabled()) {
   	loggerValue.setLength(0);
   	loggerValue.append("Entered: p_requestVO=");
   	loggerValue.append(p_requestVO.toString());
   	loggerValue.append(" p_action=");
   	loggerValue.append(p_action);
   	_log.debug(methodName, loggerValue);
   }
   String responseStr = null;
   StringBuilder sbf = null;
   final java.util.Date date = new java.util.Date();
   try {
       sbf = new StringBuilder(1024);
       HashMap<String,String> respMap= p_requestVO.getRequestMap();
       sbf.append("<?xml version=\"1.0\"?><COMMAND>");
       sbf.append("<TYPE>USERDETAILSRESP</TYPE>");
       final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
       sdf.setLenient(false);
       String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
       sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

       if (p_requestVO.isSuccessTxn()) {
           sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
       } else {
           sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
       }
       if(respMap != null){
       if (BTSLUtil.isNullString(respMap.get("USERNAMEPREFIX"))) {
               sbf.append("<USRNAMEPREFIX></USRNAMEPREFIX>");
       } else {
               sbf.append("<USRNAMEPREFIX>").append(respMap.get("USERNAMEPREFIX")).append("</USRNAMEPREFIX>");
       }
       if (BTSLUtil.isNullString(respMap.get("FIRSTNAME"))) {
           sbf.append("<FISTNAME></FISTNAME>");
       } else {
           sbf.append("<FISTNAME>").append(respMap.get("FIRSTNAME")).append("</FISTNAME>");
       }
       if (BTSLUtil.isNullString(respMap.get("LASTNAME"))) {
           sbf.append("<LASTNAME></LASTNAME>");
       } else {
           sbf.append("<LASTNAME>").append(respMap.get("LASTNAME")).append("</LASTNAME>");
       }
       if (BTSLUtil.isNullString(respMap.get("CATEGORYNAME"))) {
           sbf.append("<CATEGORYNAME></CATEGORYNAME>");
       } else {
           sbf.append("<CATEGORYNAME>").append(respMap.get("CATEGORYNAME")).append("</CATEGORYNAME>");
       }
       if (BTSLUtil.isNullString(respMap.get("CATEGORYCODE"))) {
           sbf.append("<CATEGORYCODE></CATEGORYCODE>");
       } else {
           sbf.append("<CATEGORYCODE>").append(respMap.get("CATEGORYCODE")).append("</CATEGORYCODE>");
       }
       }
       if(p_requestVO.getMessageCode()!=null && !BTSLUtil.isNullString(p_requestVO.getMessageCode())){
    	   String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
           String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
	       final Locale locale = new Locale(defaultLanguage, defaultCountry);
	       sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
       } else {
    	   sbf.append("<MESSAGE></MESSAGE>");
       }
       sbf.append("</COMMAND>");
       responseStr = sbf.toString();
       p_requestVO.setSenderReturnMessage(responseStr);
   } 
   catch (Exception e) {
       _log.errorTrace(methodName, e);
       loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
       p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
       EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
           "ExtAPIXMLStringParser[generateExtC2CVomsInitiateRequestResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtC2CVomsInitiateRequestResponse:" + e.getMessage());
   } finally {
   	if (_log.isDebugEnabled()) {
        	loggerValue.setLength(0);
        	loggerValue.append("Exiting: responseStr:");
        	loggerValue.append(responseStr.toString());
        	_log.debug(methodName, loggerValue);
        }
   }
}

public static void generateTotalTnxCountResponse(RequestVO p_requestVO, int p_action) throws Exception{
final String methodName = "generateTotalTnxCountResponse";
StringBuilder loggerValue= new StringBuilder();
if (_log.isDebugEnabled()) {
	loggerValue.setLength(0);
	loggerValue.append("Entered: p_requestVO=");
	loggerValue.append(p_requestVO.toString());
	loggerValue.append(" p_action=");
	loggerValue.append(p_action);
	_log.debug(methodName, loggerValue);
}
String responseStr = null;
StringBuilder sbf = null;
final java.util.Date date = new java.util.Date();
try {
    sbf = new StringBuilder(1024);
    HashMap<String,String> respMap= p_requestVO.getRequestMap();
    sbf.append("<?xml version=\"1.0\"?><COMMAND>");
    sbf.append("<TYPE>TOTOALTNXCOUNT</TYPE>");
    final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
    sdf.setLenient(false);
    String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
    sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

    if (p_requestVO.isSuccessTxn()) {
        sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
    } else {
        sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
    }
    if(respMap != null){
    if (BTSLUtil.isNullString(p_requestVO.getMessageCode())) {
            sbf.append("<TOTALTNXCOUNT>").append(p_requestVO.getC2sTotaltxnCount()).append("</TOTALTNXCOUNT>");
    } else {
            sbf.append("<TOTALTNXCOUNT>").append(p_requestVO.getC2sTotaltxnCount()).append("</TOTALTNXCOUNT>");
    }
    }
    if(p_requestVO.getMessageCode()!=null && !BTSLUtil.isNullString(p_requestVO.getMessageCode())){
    	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
        String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
    final Locale locale = new Locale(defaultLanguage, defaultCountry);
    sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
    } else {
    sbf.append("<MESSAGE></MESSAGE>");
    }
    sbf.append("</COMMAND>");
    responseStr = sbf.toString();
    p_requestVO.setSenderReturnMessage(responseStr);
} 
catch (Exception e) {
    _log.errorTrace(methodName, e);
    loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
    p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
    EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
        "ExtAPIXMLStringParser[generateExtC2CVomsInitiateRequestResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtC2CVomsInitiateRequestResponse:" + e.getMessage());
} finally {
	if (_log.isDebugEnabled()) {
     	loggerValue.setLength(0);
     	loggerValue.append("Exiting: responseStr:");
     	loggerValue.append(responseStr.toString());
     	_log.debug(methodName, loggerValue);
     }
}
}


public static void parseC2STotalTxnNoReq(RequestVO p_requestVO) throws Exception {
	final String methodName = "parseC2STotalTxnNoReq";
    StringBuilder loggerValue= new StringBuilder();
    printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
    String parsedRequestStr = null;
    try {
        HashMap requestHashMap = p_requestVO.getRequestMap();
        if (requestHashMap == null) {
            requestHashMap = new HashMap();
        }
        final ArrayList arrList = new ArrayList();
        final String requestStr = p_requestVO.getRequestMessage();
        int index = requestStr.indexOf("<TYPE>");
        final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
        requestHashMap.put("TYPE", type);

      
        index = requestStr.indexOf("<EXTNWCODE>");
        final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
        requestHashMap.put("EXTNWCODE", extNwCode);

        index = requestStr.indexOf("<PIN>");
        final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
        requestHashMap.put("PIN", pin);

        
        index = requestStr.indexOf("<LANGUAGE1>");
        final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
        requestHashMap.put("LANGUAGE1", language1);
        
        index = requestStr.indexOf("<LANGUAGE2>");
        final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
        requestHashMap.put("LANGUAGE2", language2);
        
	   
        index = requestStr.indexOf("<MSISDN>");
        final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
        requestHashMap.put("MSISDN", msisdn);
        
	
        
        index = requestStr.indexOf("<LOGINID>");
        final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
        requestHashMap.put("LOGINID", loginId);
        
        index = requestStr.indexOf("<FROMDATE>");
        final String fromdate = requestStr.substring(index + "<FROMDATE>".length(), requestStr.indexOf("</FROMDATE>", index));
        requestHashMap.put("FROMDATE", fromdate);
        
        index = requestStr.indexOf("<TODATE>");
        final String todate = requestStr.substring(index + "<TODATE>".length(), requestStr.indexOf("</TODATE>", index));
        requestHashMap.put("TODATE", todate);
        
        
        
        ChannelUserVO  channelUserVO = new ChannelUserVO();
        
        parsedRequestStr = PretupsI.SERVICE_TYPE_UPUSRHRCHY + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + loginId +CHNL_MESSAGE_SEP+pin;
        
        p_requestVO.setDecryptedMessage(parsedRequestStr);
        p_requestVO.setPin(pin);
        p_requestVO.setRequestMSISDN(msisdn);
        p_requestVO.setExternalNetworkCode(extNwCode);
        p_requestVO.setSenderVO(channelUserVO);
        p_requestVO.setSenderLoginID(loginId);
        p_requestVO.setRequestMap(requestHashMap);

    }
    catch (Exception e) {
        _log.errorTrace(methodName, e);
        p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
    } finally {
    	if (_log.isDebugEnabled()) {
         	loggerValue.setLength(0);
         	loggerValue.append(EXIT_KEY);
         	loggerValue.append(p_requestVO.toString());
         	_log.debug(methodName, loggerValue);
         }
    }
    }

/**
 * @param p_requestVO
 * @throws Exception
 */
public static void parseTxnCountDetails(RequestVO p_requestVO,int p_action) throws Exception {
	final String methodName = "parseC2sServiceDetails";
    StringBuilder loggerValue= new StringBuilder();
    printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
    String parsedRequestStr = null;
    try {
        HashMap requestHashMap = p_requestVO.getRequestMap();
        if (requestHashMap == null) {
            requestHashMap = new HashMap();
        }
        final String requestStr = p_requestVO.getRequestMessage();
        int index = requestStr.indexOf("<TYPE>");
        final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
        requestHashMap.put("TYPE", type);

        index = requestStr.indexOf("<EXTNWCODE>");
        final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
        requestHashMap.put("EXTNWCODE", extNwCode);

        index = requestStr.indexOf("<MSISDN>");
        final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
        requestHashMap.put("MSISDN", msisdn);
        
        index = requestStr.indexOf("<PIN>");
        final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
        requestHashMap.put("PIN", pin);

        index = requestStr.indexOf("<LANGUAGE1>");
        final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
        requestHashMap.put("LANGUAGE1", language1);
        
        index = requestStr.indexOf("<LOGINID>");
        final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
        requestHashMap.put("LOGINID", loginId);
        
        index = requestStr.indexOf("<PASSWORD>");
        final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
        requestHashMap.put("PASSWORD", msisdn);
        
        index = requestStr.indexOf("<EXTCODE>");
        final String extcode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
        requestHashMap.put("EXTCODE", extcode);
        
        index = requestStr.indexOf("<FROMDATE>");
        final String fromdate = requestStr.substring(index + "<FROMDATE>".length(), requestStr.indexOf("</FROMDATE>", index));
        requestHashMap.put("FROMDATE", fromdate);
        
        index = requestStr.indexOf("<TODATE>");
        final String todate = requestStr.substring(index + "<TODATE>".length(), requestStr.indexOf("</TODATE>", index));
        requestHashMap.put("TODATE", todate);
        
        index = requestStr.indexOf("<SERVICETYPE>");
        final String serviceType = requestStr.substring(index + "<SERVICETYPE>".length(), requestStr.indexOf("</SERVICETYPE>", index));
        requestHashMap.put("SERVICETYPE", serviceType);

        if(p_action == ParserUtility.C2S_N_PROD_TXN_DETAILS){
        	index = requestStr.indexOf("<TOPPRODUCTS>");
            final String topProducts = requestStr.substring(index + "<TOPPRODUCTS>".length(), requestStr.indexOf("</TOPPRODUCTS>", index));
            requestHashMap.put("TOPPRODUCTS", topProducts);
            XMLTagValueValidation.validateTopProductFlag(topProducts, true, "TOPPRODUCTS");
            
            index = requestStr.indexOf("<NUMBEROFPRODORDENO>");
            final String noOfProd = requestStr.substring(index + "<NUMBEROFPRODORDENO>".length(), requestStr.indexOf("</NUMBEROFPRODORDENO>", index));
            requestHashMap.put("NUMBEROFPRODORDENO", noOfProd);
            XMLTagValueValidation.validateNoOfProd(noOfProd, true, "NUMBEROFPRODORDENO");
        }
        XMLStringValidation.validateExtAllTxnCountRequest(p_requestVO, extNwCode, msisdn, pin, loginId, password, extcode, fromdate, todate, serviceType, language1);
        
        ChannelUserVO  channelUserVO = new ChannelUserVO();
        
        parsedRequestStr = type + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + loginId +CHNL_MESSAGE_SEP+pin;
        
        p_requestVO.setDecryptedMessage(parsedRequestStr);
        p_requestVO.setPin(pin);
        p_requestVO.setRequestMSISDN(msisdn);
        p_requestVO.setExternalNetworkCode(extNwCode);
        p_requestVO.setSenderVO(channelUserVO);
        p_requestVO.setSenderLoginID(loginId);
        p_requestVO.setRequestMap(requestHashMap);

    }
    catch (BTSLBaseException be) {
        p_requestVO.setMessageCode(be.getMessageKey());
        p_requestVO.setMessageArguments(be.getArgs());
        throw be;
    } 
    catch (Exception e) {
        _log.errorTrace(methodName, e);
        p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
    } finally {
    	if (_log.isDebugEnabled()) {
         	loggerValue.setLength(0);
         	loggerValue.append(EXIT_KEY);
         	loggerValue.append(p_requestVO.toString());
         	_log.debug(methodName, loggerValue);
         }
    }
    }

/**
 * @param p_requestVO
 * @throws Exception
 */
public static void parsePassbookViewDetailsRequest(RequestVO p_requestVO) throws Exception {
	final String methodName = "parsePassbookViewDetailsRequest";
    StringBuilder loggerValue= new StringBuilder();
    printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
    String parsedRequestStr = null;
    try {
        HashMap requestHashMap = p_requestVO.getRequestMap();
        if (requestHashMap == null) {
            requestHashMap = new HashMap();
        }
        final String requestStr = p_requestVO.getRequestMessage();
        int index = requestStr.indexOf("<TYPE>");
        final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
        requestHashMap.put("TYPE", type);

        index = requestStr.indexOf("<EXTNWCODE>");
        final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
        requestHashMap.put("EXTNWCODE", extNwCode);

        index = requestStr.indexOf("<MSISDN>");
        final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
        requestHashMap.put("MSISDN", msisdn);
        
        index = requestStr.indexOf("<PIN>");
        final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
        requestHashMap.put("PIN", pin);

        index = requestStr.indexOf("<LANGUAGE1>");
        final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
        requestHashMap.put("LANGUAGE1", language1);
        
        index = requestStr.indexOf("<LOGINID>");
        String loginId = null;
        if(index > 0)
        {
        loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
        requestHashMap.put("LOGINID", loginId);
        }
        
        index = requestStr.indexOf("<PASSWORD>");
        if(index>0)
        {
        final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
        requestHashMap.put("PASSWORD", msisdn);
        }
        
        index = requestStr.indexOf("<EXTCODE>");
        if(index>0)
        {
        final String extcode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
        requestHashMap.put("EXTCODE", extcode);
        }
        
        index = requestStr.indexOf("<FROMDATE>");
        final String fromdate = requestStr.substring(index + "<FROMDATE>".length(), requestStr.indexOf("</FROMDATE>", index));
        requestHashMap.put("FROMDATE", fromdate);
        
        index = requestStr.indexOf("<TODATE>");
        final String todate = requestStr.substring(index + "<TODATE>".length(), requestStr.indexOf("</TODATE>", index));
        requestHashMap.put("TODATE", todate);

        
        ChannelUserVO  channelUserVO = new ChannelUserVO();
        
        parsedRequestStr = PretupsI.SERVICE_TYPE_PASSBOOKVIEW + CHNL_MESSAGE_SEP + fromdate + CHNL_MESSAGE_SEP + todate + CHNL_MESSAGE_SEP+pin;
        
        p_requestVO.setDecryptedMessage(parsedRequestStr);
        p_requestVO.setPin(pin);
        p_requestVO.setRequestMSISDN(msisdn);
        p_requestVO.setExternalNetworkCode(extNwCode);
        p_requestVO.setSenderVO(channelUserVO);
        p_requestVO.setSenderLoginID(loginId);
        p_requestVO.setRequestMap(requestHashMap);

    }
  
    catch (Exception e) {
        _log.errorTrace(methodName, e);
        p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
    } finally {
    	if (_log.isDebugEnabled()) {
         	loggerValue.setLength(0);
         	loggerValue.append(EXIT_KEY);
         	loggerValue.append(p_requestVO.toString());
         	_log.debug(methodName, loggerValue);
         }
    }
    }

public static void parseC2STotalTnxCountReq(RequestVO p_requestVO) throws Exception{
final String methodName = "parseC2STotalTnxCount";
StringBuilder loggerValue= new StringBuilder();
if (_log.isDebugEnabled()) {
	loggerValue.setLength(0);
	loggerValue.append(ENTRY_KEY);
	loggerValue.append(p_requestVO.toString());
	_log.debug(methodName, loggerValue);
}
String parsedRequestStr = null;
try {
    HashMap requestHashMap = p_requestVO.getRequestMap();
    if (requestHashMap == null) {
        requestHashMap = new HashMap();
    }
    final ArrayList arrList = new ArrayList();
    final String requestStr = p_requestVO.getRequestMessage();
    int index = requestStr.indexOf("<TYPE>");
    final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
    requestHashMap.put("TYPE", type);

  
    index = requestStr.indexOf("<EXTNWCODE>");
    final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
    requestHashMap.put("EXTNWCODE", extNwCode);

    index = requestStr.indexOf("<PIN>");
    final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
    requestHashMap.put("PIN", pin);

    
    index = requestStr.indexOf("<LANGUAGE1>");
    final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
    requestHashMap.put("LANGUAGE1", language1);
    
    index = requestStr.indexOf("<LANGUAGE2>");
    final String language2 = requestStr.substring(index + "<LANGUAGE2>".length(), requestStr.indexOf("</LANGUAGE2>", index));
    requestHashMap.put("LANGUAGE2", language2);
    
   
    index = requestStr.indexOf("<MSISDN>");
    final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
    requestHashMap.put("MSISDN", msisdn);
    

    
    index = requestStr.indexOf("<LOGINID>");
    final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
    requestHashMap.put("LOGINID", loginId);
    
    index = requestStr.indexOf("<FROMDATE>");
    final String fromdate = requestStr.substring(index + "<FROMDATE>".length(), requestStr.indexOf("</FROMDATE>", index));
    requestHashMap.put("FROMDATE", fromdate);
    
    index = requestStr.indexOf("<TODATE>");
    final String todate = requestStr.substring(index + "<TODATE>".length(), requestStr.indexOf("</TODATE>", index));
    requestHashMap.put("TODATE", todate);
    
    
    
    ChannelUserVO  channelUserVO = new ChannelUserVO();
    
    parsedRequestStr = PretupsI.C2S_TOTAL_NO_OF_TRANSACTION + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + loginId +CHNL_MESSAGE_SEP+pin;
    
    p_requestVO.setDecryptedMessage(parsedRequestStr);
    p_requestVO.setPin(pin);
    p_requestVO.setRequestMSISDN(msisdn);
    p_requestVO.setExternalNetworkCode(extNwCode);
    p_requestVO.setSenderVO(channelUserVO);
    p_requestVO.setSenderLoginID(loginId);
    p_requestVO.setRequestMap(requestHashMap);

}
catch (Exception e) {
    _log.errorTrace(methodName, e);
    p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
    loggerValue.setLength(0);
	loggerValue.append(EXCEPTION);
	loggerValue.append(e.getMessage());
	_log.error(methodName, loggerValue);
    throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
} finally {
	if (_log.isDebugEnabled()) {
     	loggerValue.setLength(0);
     	loggerValue.append(EXIT_KEY);
     	loggerValue.append(p_requestVO.toString());
     	_log.debug(methodName, loggerValue);
     }
}
}


/**
 * @param p_requestVO
 * @throws Exception
 */
public static void generateTxnCountDetailsResponse(RequestVO p_requestVO,int p_action) throws Exception {
    final String methodName = "generateTxnCountDetailsResponse";
    StringBuilder loggerValue= new StringBuilder();
    printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
    String responseStr = null;
    StringBuilder sbf = null;
    final java.util.Date date = new java.util.Date();
    try {
        sbf = new StringBuilder(1024);
        sbf.append(DOC_TYPE);
       
        if(p_action == ParserUtility.C2S_N_PROD_TXN_DETAILS)
        {
        	sbf.append("<TYPE>C2SNPRODTXNDETAILSRESP</TYPE>");
        }else{
        	sbf.append("<TYPE>C2SPRODTXNDETAILSRESP</TYPE>");
        }
        final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
        sdf.setLenient(false);
        String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

        if (p_requestVO.isSuccessTxn()) {
            sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
        } else {
            sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
        }
        if (p_requestVO.getResponseMap() != null && p_requestVO.getResponseMap().get("RESPONSE") != null) {
			String response = p_requestVO.getResponseMap().get("RESPONSE").toString();
			sbf.append(response);
		}        
        if(p_requestVO.getMessageCode()!=null && !BTSLUtil.isNullString(p_requestVO.getMessageCode())){
        	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
        final Locale locale = new Locale(defaultLanguage, defaultCountry);
        sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
        } else {
        sbf.append("<MESSAGE></MESSAGE>");
        }
        sbf.append("</COMMAND>");
        responseStr = sbf.toString();
        p_requestVO.setSenderReturnMessage(responseStr);
    } catch (Exception e) {
        _log.errorTrace(methodName, e);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
        EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
            "ExtAPIXMLStringParser[generateTxnCountDetailsResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateTxnCountDetailsResponse:" + e
                .getMessage());
    } finally {
    	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
	}
}


public static void generatePassbookDetailsViewResponse(RequestVO p_requestVO) throws Exception {
    final String methodName = "generatePassbookDetailsViewResponse";
    StringBuilder loggerValue= new StringBuilder();
    printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
    String responseStr = null;
    StringBuilder sbf = null;
    final java.util.Date date = new java.util.Date();
    try {
        sbf = new StringBuilder(1024);
        sbf.append(DOC_TYPE);
        sbf.append("<TYPE>PASBDETRESP</TYPE>");
        final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
        sdf.setLenient(false);
        String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

        if (p_requestVO.isSuccessTxn()) {
            sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
        } else {
            sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
        }
        if (p_requestVO.getResponseMap() != null && p_requestVO.getResponseMap().get("RESPONSE") != null) {
			String response = p_requestVO.getResponseMap().get("RESPONSE").toString();
			sbf.append(response);
		}        
        if(p_requestVO.getMessageCode()!=null && !BTSLUtil.isNullString(p_requestVO.getMessageCode())){
        	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
        final Locale locale = new Locale(defaultLanguage, defaultCountry);
        sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
        } else {
        sbf.append("<MESSAGE></MESSAGE>");
        }
        sbf.append("</COMMAND>");
        responseStr = sbf.toString();
        p_requestVO.setSenderReturnMessage(responseStr);
    } catch (Exception e) {
        _log.errorTrace(methodName, e);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
        EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
            "ExtAPIXMLStringParser[generatePassbookDetailsViewResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateTxnCountDetailsResponse:" + e
                .getMessage());
    } finally {
    	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
	}
}

/**
 *PARSER  FOR EXTERNAL GATEWAY RESPONSE FOR TOTAL TRANSACTION DETAILED VIEW RESPONSE API
 * @param p_requestVO
 * @param p_action
 * @throws Exception
 */
public static void generateTotalTnxDetailedResponse(RequestVO p_requestVO,int p_action) throws Exception {
    final String methodName = "generateTotalTxnCountDetailedViewResponse";
    StringBuilder loggerValue= new StringBuilder();
    if (_log.isDebugEnabled()) {
    	loggerValue.setLength(0);
    	loggerValue.append(ENTRY_KEY);
    	loggerValue.append(" p_action=");
    	loggerValue.append(p_action);
    	loggerValue.append(p_requestVO.toString());
    	_log.debug(methodName, loggerValue);
    }
    String responseStr = null;
    StringBuilder sbf = null;
    final java.util.Date date = new java.util.Date();
    try {
        sbf = new StringBuilder(1024);
        sbf.append(DOC_TYPE);
        sbf.append("<TYPE>TOTTRANSDETAIL</TYPE>");
        final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
        sdf.setLenient(false);
        String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

        if (p_requestVO.isSuccessTxn()) {
            sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
        } else {
            sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
        }
        if (p_requestVO.getResponseMap() != null && p_requestVO.getResponseMap().get("RESPONSE") != null) {
			String response = p_requestVO.getResponseMap().get("RESPONSE").toString();
			sbf.append(response);
		}        
        if(p_requestVO.getMessageCode()!=null && !BTSLUtil.isNullString(p_requestVO.getMessageCode())){
        	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
        final Locale locale = new Locale(defaultLanguage, defaultCountry);
        sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
        } else {
        sbf.append("<MESSAGE></MESSAGE>");
        }
        sbf.append("</COMMAND>");
        responseStr = sbf.toString();
        p_requestVO.setSenderReturnMessage(responseStr);
    } catch (Exception e) {
        _log.errorTrace(methodName, e);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
        EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
            "ExtAPIXMLStringParser[generateTotalTxnCountDetailedViewResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateTotalTxnCountDetailedViewResponse:" + e
                .getMessage());
    } finally {
    	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
	}
}

/**
 * Parser for calculating total commission API
 * @param p_requestVO
 * @param p_action
 * @throws Exception
 */

public static void generateCommissionCalculatorResponse(RequestVO p_requestVO,int p_action) throws Exception {
    final String methodName = "generateCommissionCalculatorResponse";
    StringBuilder loggerValue= new StringBuilder();
    if (_log.isDebugEnabled()) {
    	loggerValue.setLength(0);
    	loggerValue.append(ENTRY_KEY);
    	loggerValue.append(" p_action=");
    	loggerValue.append(p_action);
    	loggerValue.append(p_requestVO.toString());
    	_log.debug(methodName, loggerValue);
    }
    String responseStr = null;
    StringBuilder sbf = null;
    final java.util.Date date = new java.util.Date();
    try {
        sbf = new StringBuilder(1024);
        sbf.append(DOC_TYPE);
        sbf.append("<TYPE>COMMISIONCALCULATOR</TYPE>");
        final SimpleDateFormat sdf = new SimpleDateFormat(PretupsI.TIMESTAMP_DDMMYYYYHHMMSS);
        sdf.setLenient(false);
        String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(sdf.format(date), externalDateFormat)).append("</DATE>");

        if (p_requestVO.isSuccessTxn()) {
            sbf.append("<TXNSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</TXNSTATUS>");
        } else {
            sbf.append("<TXNSTATUS>").append(p_requestVO.getMessageCode()).append("</TXNSTATUS>");
        }
        if (p_requestVO.getResponseMap() != null && p_requestVO.getResponseMap().get("RESPONSE") != null) {
			String response = p_requestVO.getResponseMap().get("RESPONSE").toString();
			sbf.append(response);
		}        
        if(p_requestVO.getMessageCode()!=null && !BTSLUtil.isNullString(p_requestVO.getMessageCode())){
        	String defaultLanguage = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_LANGUAGE);
            String defaultCountry = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.DEFAULT_COUNTRY);
        final Locale locale = new Locale(defaultLanguage, defaultCountry);
        sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");
        } else {
        sbf.append("<MESSAGE></MESSAGE>");
        }
        sbf.append("</COMMAND>");
        responseStr = sbf.toString();
        p_requestVO.setSenderReturnMessage(responseStr);
    } catch (Exception e) {
        _log.errorTrace(methodName, e);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
        EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
            "ExtAPIXMLStringParser[generateCommissionCalculatorResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateTotalTxnCountDetailedViewResponse:" + e
                .getMessage());
    } finally {
    	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
	}
}    

/**
 * PARSER  FOR EXTERNAL GATEWAY RESPONSE FOR TOTAL TRANSACTION DETAILED VIEW REQUEST API
 * @param p_requestVO
 * @throws Exception
 */

public static void totalTrnxDetailReq(RequestVO p_requestVO) throws Exception {
	final String methodName = "totalTrnxDetailReq";
    StringBuilder loggerValue= new StringBuilder();
    printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
    String parsedRequestStr = null;
    try {
        HashMap requestHashMap = p_requestVO.getRequestMap();
        if (requestHashMap == null) {
            requestHashMap = new HashMap();
        }
        final String requestStr = p_requestVO.getRequestMessage();
        int index = requestStr.indexOf("<TYPE>");
        final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
        requestHashMap.put("TYPE", type);

        index = requestStr.indexOf("<EXTNWCODE>");
        final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
        requestHashMap.put("EXTNWCODE", extNwCode);

        index = requestStr.indexOf("<MSISDN>");
        final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
        requestHashMap.put("MSISDN", msisdn);
        
        index = requestStr.indexOf("<PIN>");
        final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
        requestHashMap.put("PIN", pin);
        
        index = requestStr.indexOf("<LOGINID>");
        final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
        requestHashMap.put("LOGINID", loginId);
        
        index = requestStr.indexOf("<PASSWORD>");
        final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
        requestHashMap.put("PASSWORD", msisdn);
        
        index = requestStr.indexOf("<EXTCODE>");
        final String extcode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
        requestHashMap.put("EXTCODE", extcode);
        
        index = requestStr.indexOf("<FROMDATE>");
        final String fromdate = requestStr.substring(index + "<FROMDATE>".length(), requestStr.indexOf("</FROMDATE>", index));
        requestHashMap.put("FROMDATE", fromdate);
        
        index = requestStr.indexOf("<TODATE>");
        final String todate = requestStr.substring(index + "<TODATE>".length(), requestStr.indexOf("</TODATE>", index));
        requestHashMap.put("TODATE", todate);
        
        index = requestStr.indexOf("<FROMROW>");
        final String fromRow = requestStr.substring(index + "<FROMROW>".length(), requestStr.indexOf("</FROMROW>", index));
        requestHashMap.put("FROMROW", fromRow);
        
        index = requestStr.indexOf("<TOROW>");
        final String toRow = requestStr.substring(index + "<TOROW>".length(), requestStr.indexOf("</TOROW>", index));
        requestHashMap.put("TOROW", toRow);
        
        index = requestStr.indexOf("<STATUS>");
        final String status = requestStr.substring(index + "<STATUS>".length(), requestStr.indexOf("</STATUS>", index));
        requestHashMap.put("STATUS", status);
        
        index = requestStr.indexOf("<MSISDN2>");
        final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
        requestHashMap.put("MSISDN2", msisdn2);
        
        index = requestStr.indexOf("<TRANSACTIONID>");
        final String transactionId = requestStr.substring(index + "<TRANSACTIONID>".length(), requestStr.indexOf("</TRANSACTIONID>", index));
        requestHashMap.put("TRANSACTIONID", transactionId);
        XMLStringValidation.validateExtTotalTxnDetailRequest(p_requestVO, extNwCode, msisdn, pin, loginId, password, extcode, fromdate, todate,status,msisdn2);
        
        ChannelUserVO  channelUserVO = new ChannelUserVO();
        
        parsedRequestStr = PretupsI.TRANSACTION_DETAILED_VIEW + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + loginId +CHNL_MESSAGE_SEP+pin;
        
        p_requestVO.setDecryptedMessage(parsedRequestStr);
        p_requestVO.setPin(pin);
        p_requestVO.setRequestMSISDN(msisdn);
        p_requestVO.setExternalNetworkCode(extNwCode);
        p_requestVO.setSenderVO(channelUserVO);
        p_requestVO.setSenderLoginID(loginId);
        p_requestVO.setRequestMap(requestHashMap);
        

    }catch (BTSLBaseException be) {
        p_requestVO.setMessageCode(be.getMessageKey());
        p_requestVO.setMessageArguments(be.getArgs());
        throw be;
    } 
    catch (Exception e) {
        _log.errorTrace(methodName, e);
        p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
    } finally {
    	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
    }
}    

/**
 * @param p_requestVO
 * @throws Exception
 */
public static void parseTotalIncomeDetailsViewRequest(RequestVO p_requestVO) throws Exception {
	final String methodName = "parseTotalIncomeDetailsViewRequest";
    StringBuilder loggerValue= new StringBuilder();
    printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
    String parsedRequestStr = null;
    try {
        HashMap requestHashMap = p_requestVO.getRequestMap();
        if (requestHashMap == null) {
            requestHashMap = new HashMap();
        }
        final String requestStr = p_requestVO.getRequestMessage();
        int index = requestStr.indexOf("<TYPE>");
        final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
        requestHashMap.put("TYPE", type);

        index = requestStr.indexOf("<EXTNWCODE>");
        final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
        requestHashMap.put("EXTNWCODE", extNwCode);

        index = requestStr.indexOf("<MSISDN>");
        final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
        requestHashMap.put("MSISDN", msisdn);
        
        index = requestStr.indexOf("<PIN>");
        final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
        requestHashMap.put("PIN", pin);

        index = requestStr.indexOf("<LANGUAGE1>");
        final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
        requestHashMap.put("LANGUAGE1", language1);
        
        index = requestStr.indexOf("<LOGINID>");
        String loginId = null;
        if(index > 0)
        {
        loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
        requestHashMap.put("LOGINID", loginId);
        }
        
        index = requestStr.indexOf("<PASSWORD>");
        if(index>0)
        {
        final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
        requestHashMap.put("PASSWORD", password);
        }
        
        index = requestStr.indexOf("<EXTCODE>");
        if(index>0)
        {
        final String extcode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
        requestHashMap.put("EXTCODE", extcode);
        }
        
        index = requestStr.indexOf("<FROMDATE>");
        final String fromdate = requestStr.substring(index + "<FROMDATE>".length(), requestStr.indexOf("</FROMDATE>", index));
        requestHashMap.put("FROMDATE", fromdate);
        
        index = requestStr.indexOf("<TODATE>");
        final String todate = requestStr.substring(index + "<TODATE>".length(), requestStr.indexOf("</TODATE>", index));
        requestHashMap.put("TODATE", todate);

        
        ChannelUserVO  channelUserVO = new ChannelUserVO();
        
        parsedRequestStr = PretupsI.USER_INCOME_DETAILS_VIEW + CHNL_MESSAGE_SEP + fromdate + CHNL_MESSAGE_SEP + todate + CHNL_MESSAGE_SEP+pin;
        
        p_requestVO.setDecryptedMessage(parsedRequestStr);
        p_requestVO.setPin(pin);
        p_requestVO.setRequestMSISDN(msisdn);
        p_requestVO.setExternalNetworkCode(extNwCode);
        p_requestVO.setSenderVO(channelUserVO);
        p_requestVO.setSenderLoginID(loginId);
        p_requestVO.setRequestMap(requestHashMap);

    }
  
    catch (Exception e) {
        _log.errorTrace(methodName, e);
        p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        throw new BTSLBaseException(CLASS_NAME, methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
    } finally {
    	if (_log.isDebugEnabled()) {
         	loggerValue.setLength(0);
         	loggerValue.append(EXIT_KEY);
         	loggerValue.append(p_requestVO.toString());
         	_log.debug(methodName, loggerValue);
         }
    }
    }
/**
 * generateTotalIcomeDetailsViewResponse
 * Response of C2C transfer request from the external system.e
 * 
 * @param p_requestVO
 * @throws Exception
 * @author yogesh.dixit
 */
public static void generateTotalIcomeDetailsViewResponse(RequestVO p_requestVO) throws Exception {
    final String methodName = "generateTotalIcomeDetailsViewResponse";
    StringBuilder loggerValue= new StringBuilder();
    printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
    String responseStr = null;
    StringBuilder sbf = null;
    try {
        sbf = new StringBuilder(1024);
        sbf.append("<?xml version=\"1.0\"?><COMMAND>");
        sbf.append("<TYPE>USRINCVIEWRESP</TYPE>");
        if (p_requestVO.isSuccessTxn()) {
            sbf.append("<REQSTATUS>").append(PretupsI.TXN_STATUS_SUCCESS).append("</REQSTATUS>");
        } else {
            sbf.append("<REQSTATUS>").append(p_requestVO.getMessageCode()).append("</REQSTATUS>");
            sbf.append("<MESSAGE>").append(getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments())).append("</MESSAGE>");

        }
        boolean targetBasedBaseCommission = ((Boolean) (PreferenceCache.getSystemPreferenceValue(PreferenceI.TARGET_BASED_BASE_COMMISSION))).booleanValue();
        boolean targetBasedCommission = ((Boolean) (PreferenceCache.getSystemPreferenceValue(PreferenceI.TARGET_BASED_COMMISSION))).booleanValue();
        String externalDateFormat = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.EXTERNAL_DATE_FORMAT);
        sbf.append("<DATE>").append(BTSLDateUtil.getSystemLocaleDate(getDateTime(null, null), externalDateFormat)).append("</DATE>");     
        final HashMap requestHashMap = p_requestVO.getResponseMap();
        if (requestHashMap!=null ) {
        		TotalUserIncomeDetailsVO totalIncomeDetailsViewVO = (TotalUserIncomeDetailsVO) requestHashMap.get("detailedinfo");
        		LinkedList<TotalDailyUserIncomeResponseVO> deatiledInfoList =totalIncomeDetailsViewVO.getDetailedInfoList();
        		sbf.append("<TXNDETAILS>");
        		sbf.append("<DETAILDINFO>");
            if (deatiledInfoList != null && !deatiledInfoList.isEmpty()) {
            	int lastTransferLists=deatiledInfoList.size();
                for (int i = 0; i < lastTransferLists; i++) {
                    final TotalDailyUserIncomeResponseVO totalDailyUserIncomeResponseVO = (TotalDailyUserIncomeResponseVO) deatiledInfoList.get(i);
                    if (totalDailyUserIncomeResponseVO != null) {
                        sbf.append("<INCOMEDETAILS>");
                        sbf.append("<DATE>").append(totalDailyUserIncomeResponseVO.getDate()).append("</DATE>");
                        sbf.append("<INCOME>").append(totalDailyUserIncomeResponseVO.getTotalIncome()).append("</INCOME>");
                        sbf.append("<BASECOMMISSION>" +totalDailyUserIncomeResponseVO.getBaseCommission()).append("</BASECOMMISSION>");
                        if(targetBasedBaseCommission) {
                        sbf.append("<CBC>").append(totalDailyUserIncomeResponseVO.getCbc()).append("</CBC>");
                        }
                        sbf.append("<ADDBASECOMMISSION>").append(totalDailyUserIncomeResponseVO.getAdditionalCommission()).append("</ADDBASECOMMISSION>");
                        if(targetBasedCommission) {
						sbf.append("<CAC>").append(totalDailyUserIncomeResponseVO.getCac()).append("</CAC>");}
                        sbf.append("</INCOMEDETAILS>");
                    }
                }  
             }            	

            sbf.append("</DETAILDINFO>");
            sbf.append("<TOTALINCOME>").append(PretupsBL.getDisplayAmount(totalIncomeDetailsViewVO.getTotalIncome1())).append("</TOTALINCOME>");
            sbf.append("<TOTALBASECOMMISSION>").append(PretupsBL.getDisplayAmount(totalIncomeDetailsViewVO.getTotalBaseCom()) + " </TOTALBASECOMMISSION>");
            sbf.append("<TOTALADDBASECOMMISSION>").append(PretupsBL.getDisplayAmount(totalIncomeDetailsViewVO.getTotalAdditionalBaseCom())).append("</TOTALADDBASECOMMISSION>");
            if(targetBasedBaseCommission) 
            sbf.append("<TOTALCBC>").append(PretupsBL.getDisplayAmount(totalIncomeDetailsViewVO.getTotalCbc())+ "</TOTALCBC>");
            if(targetBasedCommission) 
            sbf.append("<TOTALCAC>").append(PretupsBL.getDisplayAmount(totalIncomeDetailsViewVO.getTotalCac())).append("</TOTALCAC>");
            sbf.append("<PREVTOTALINCOME>").append(PretupsBL.getDisplayAmount(totalIncomeDetailsViewVO.getPreviousTotalIncome())).append("</PREVTOTALINCOME>");
            sbf.append("<PREVTOTALBASECOMMISSION>").append(PretupsBL.getDisplayAmount(totalIncomeDetailsViewVO.getPreviousTotalBaseComm())+ "</PREVTOTALBASECOMMISSION>");
            sbf.append("<PREVTOTALADDBASECOMMISSION>").append(PretupsBL.getDisplayAmount(totalIncomeDetailsViewVO.getPreviousTotalAdditionalBaseCom())).append("</PREVTOTALADDBASECOMMISSION>");
            if(targetBasedBaseCommission) 
            sbf.append("<PREVTOTALCBC>").append(PretupsBL.getDisplayAmount(totalIncomeDetailsViewVO.getPreviousTotalCbc())).append("</PREVTOTALCBC>");
            if(targetBasedCommission) 
            sbf.append("<PREVTOTALCAC>").append(PretupsBL.getDisplayAmount(totalIncomeDetailsViewVO.getPreviousTotalCac())).append("</PREVTOTALCAC>");
            sbf.append("<FROMDATE>").append(requestHashMap.get("fromDate")).append("</FROMDATE>");
            sbf.append("<TODATE>").append(requestHashMap.get("toDate")).append("</TODATE>");
            sbf.append("<PREVFROMDATE>" +requestHashMap.get("previousFromDate")).append("</PREVFROMDATE>");
            sbf.append("<PREVTODATE>").append(requestHashMap.get("previousToDate")).append("</PREVTODATE>");
            sbf.append("</TXNDETAILS>");
        }
        sbf.append("</COMMAND>");
        responseStr = sbf.toString();
        p_requestVO.setSenderReturnMessage(responseStr);
    } catch (Exception e) {
        _log.errorTrace(methodName, e);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
        EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL, "ExtAPIXMLStringParser[generateExtLastXTrfResponse]",
            PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateExtLastXTrfResponse:" + e.getMessage());
    } finally {
    	printExitLogger(methodName, loggerValue, responseStr);
    }
}

/**
 * Request for commission calculator
 * @param p_requestVO
 * @throws Exception
 */
public static void commissionCalculatorReq(RequestVO p_requestVO) throws Exception {
	final String methodName = "commissionCalculatorReq";
    StringBuilder loggerValue= new StringBuilder();
    printEnterExitLogger(methodName, loggerValue, ENTRY_KEY,  p_requestVO);
    String parsedRequestStr = null;
    try {
        HashMap requestHashMap = p_requestVO.getRequestMap();
        if (requestHashMap == null) {
            requestHashMap = new HashMap();
        }
        final String requestStr = p_requestVO.getRequestMessage();
        int index = requestStr.indexOf("<TYPE>");
        final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
        requestHashMap.put("TYPE", type);

        index = requestStr.indexOf("<EXTNWCODE>");
        final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
        requestHashMap.put("EXTNWCODE", extNwCode);

        index = requestStr.indexOf("<MSISDN>");
        final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
        requestHashMap.put("MSISDN", msisdn);
        
        index = requestStr.indexOf("<PIN>");
        final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
        requestHashMap.put("PIN", pin);
        
        index = requestStr.indexOf("<LOGINID>");
        final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
        requestHashMap.put("LOGINID", loginId);
        
        index = requestStr.indexOf("<PASSWORD>");
        final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
        requestHashMap.put("PASSWORD", msisdn);
        
        index = requestStr.indexOf("<EXTCODE>");
        final String extcode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
        requestHashMap.put("EXTCODE", extcode);
        
        index = requestStr.indexOf("<FROMDATE>");
        final String fromdate = requestStr.substring(index + "<FROMDATE>".length(), requestStr.indexOf("</FROMDATE>", index));
        requestHashMap.put("FROMDATE", fromdate);
        
        index = requestStr.indexOf("<TODATE>");
        final String todate = requestStr.substring(index + "<TODATE>".length(), requestStr.indexOf("</TODATE>", index));
        requestHashMap.put("TODATE", todate);
        
        index = requestStr.indexOf("<MSISDN2>");
        final String msisdn2 = requestStr.substring(index + "<MSISDN2>".length(), requestStr.indexOf("</MSISDN2>", index));
        requestHashMap.put("MSISDN2", msisdn2);
        
        XMLStringValidation.validateCommissionCalculatorRequest(p_requestVO, extNwCode, msisdn, pin, loginId, password, extcode, fromdate, todate,msisdn2);
        
        ChannelUserVO  channelUserVO = new ChannelUserVO();
        
        parsedRequestStr = PretupsI.COMMISSION_CALCULATOR + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + msisdn + CHNL_MESSAGE_SEP + loginId +CHNL_MESSAGE_SEP+pin;
        
        p_requestVO.setDecryptedMessage(parsedRequestStr);
        p_requestVO.setPin(pin);
        p_requestVO.setRequestMSISDN(msisdn);
        p_requestVO.setExternalNetworkCode(extNwCode);
        p_requestVO.setSenderVO(channelUserVO);
        p_requestVO.setSenderLoginID(loginId);
        p_requestVO.setRequestMap(requestHashMap);
        

    }catch (BTSLBaseException be) {
        p_requestVO.setMessageCode(be.getMessageKey());
        p_requestVO.setMessageArguments(be.getArgs());
        throw be;
    } 
    catch (Exception e) {
        _log.errorTrace(methodName, e);
        p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
        loggerValue.setLength(0);
		loggerValue.append(EXCEPTION);
		loggerValue.append(e.getMessage());
		_log.error(methodName, loggerValue);
        throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_ERROR_INVALIDMESSAGEFORMAT);
    } finally {
    	printEnterExitLogger(methodName, loggerValue, EXIT_KEY,  p_requestVO);
    }
} 

	/**
	 * To write the Enter/Exit logger for parse request
	 * @param methodName Name of method called for logging
	 * @param loggerValue Buffer object in which logging
	 * @param enterExitKey Enter or Exit value for logging
	 * @param p_requestVO RequestVO for logging
	 */
	private static void printEnterExitLogger(String methodName, StringBuilder loggerValue, String enterExitKey, RequestVO p_requestVO){
		if (_log.isDebugEnabled()) {
	    	loggerValue.setLength(0);
	    	loggerValue.append(enterExitKey);
	    	loggerValue.append(p_requestVO.toString());
	    	_log.debug(methodName, loggerValue);
	    }
	}
	
	/**
	 * To write the response logger for Exit
	 * @param methodName   Name of method called for logging
	 * @param loggerValue  Buffer object in which logging 	
	 * @param responseStr  Response value 
	 */
	private static void printExitLogger(String methodName, StringBuilder loggerValue, String responseStr){
		if (_log.isDebugEnabled()) {
         	loggerValue.setLength(0);
         	loggerValue.append(EXIT_KEY_RES);
         	loggerValue.append(responseStr.toString());
         	_log.debug(methodName, loggerValue);
         }
	}
	
	 public static void parseSubscriberThresholdEnqRequest(RequestVO p_requestVO) throws Exception
		{
		 final String methodName = "parseSubscriberThresholdEnqRequest";
			if( _log.isDebugEnabled())
				 _log.debug(methodName,"Entered p_requestVO="+p_requestVO.toString());
//			BTSLMessages btslMessages=null;
			int index=0;
			HashMap requestData=null;
			String[] tagName = new String[2];
			//String MESSAGE_SEP=SystemPreferences.P2P_PLAIN_SMS_SEPARATOR;
			 String MESSAGE_SEP = (String) PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_PLAIN_SMS_SEPARATOR);
			try
			{
				requestData=new HashMap();
				String requestStr=p_requestVO.getRequestMessage();

				//Validate whether <COMMAND> & </COMMAND> is coming in the request or not.
				tagName[0]="<COMMAND>";
				tagName[1]="</COMMAND>";
				if((requestStr.indexOf(tagName[0])==-1) || (requestStr.indexOf(tagName[1])==-1))
					throw new BTSLBaseException("XMLStringParser",methodName,PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT,tagName);

				//Request Type
				tagName[0]="<TYPE>";
				tagName[1]="</TYPE>";
				index=requestStr.indexOf(tagName[0]);
				if(index!=-1)
				{
					String type=requestStr.substring(index+tagName[0].length(),requestStr.indexOf(tagName[1],index));
					requestData.put("TYPE",type);
				}
				else
					throw new BTSLBaseException("XMLStringParser",methodName,PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT,tagName);

				//External  Network Code
				tagName[0]="<EXTNWCODE>";
				tagName[1]="</EXTNWCODE>";
				index=requestStr.indexOf(tagName[0]);
				if(index!=-1)
				{
					String extNetworkCode=requestStr.substring(index+"<EXTNWCODE>".length(),requestStr.indexOf(tagName[1],index));
					requestData.put("EXTNWCODE",extNetworkCode);
					p_requestVO.setExternalNetworkCode(extNetworkCode);
				}
				else
					throw new BTSLBaseException("XMLStringParser",methodName,PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT,tagName);

				//MSISDN Of Requester
				tagName[0]="<MSISDN>";
				tagName[1]="</MSISDN>";
				index=requestStr.indexOf(tagName[0]);
				if(index!=-1)
				{
					String msisdn=requestStr.substring(index+tagName[0].length(),requestStr.indexOf(tagName[1],index));
					requestData.put("MSISDN",msisdn);
					p_requestVO.setReceiverMsisdn(msisdn);
					p_requestVO.setRequestMSISDN(msisdn);
				}
				else
					throw new BTSLBaseException("XMLStringParser",methodName,PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT,tagName);

				//ProfileID (service class)
				tagName[0]="<PROFILEID>";
				tagName[1]="</PROFILEID>";
				index=requestStr.indexOf(tagName[0]);
				if(index!=-1)
				{
					String profileID=requestStr.substring(index+tagName[0].length(),requestStr.indexOf(tagName[1],index));
					requestData.put("PROFILEID",profileID);
					p_requestVO.setReceiverServiceClassId(profileID);
				}
				else
					throw new BTSLBaseException("XMLStringParser",methodName,PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT,tagName);

				if(BTSLUtil.isNullString(p_requestVO.getExternalNetworkCode()))
					throw new BTSLBaseException("XMLStringParser",methodName,PretupsErrorCodesI.EXTSYS_REQ_EXTNWCODE_BLANK,"");

				if(BTSLUtil.isNullString(p_requestVO.getRequestMSISDN()))
					throw new BTSLBaseException("XMLStringParser",methodName,PretupsErrorCodesI.EXTSYS_REQ_PRIMARY_MSISDN_BLANK,"");

				if(BTSLUtil.isNullString(p_requestVO.getReceiverServiceClassId()))
					throw new BTSLBaseException("XMLStringParser",methodName,PretupsErrorCodesI.P2P_SUBSCRIBER_PROFILEID_NULL,"");

				String parsedRequestStr = PretupsI.P2P_SUBS_THRSHOLD_ENQ+MESSAGE_SEP+p_requestVO.getRequestMSISDN()+MESSAGE_SEP+p_requestVO.getReceiverServiceClassId();
				p_requestVO.setDecryptedMessage(parsedRequestStr);
				p_requestVO.setRequestMap(requestData);
			}
			catch(BTSLBaseException be)
			{
				p_requestVO.setMessageCode(be.getMessageKey());
				p_requestVO.setMessageArguments(be.getArgs());
				p_requestVO.setSuccessTxn(false);
				String errorMessage = BTSLUtil.getMessage(p_requestVO.getLocale(),p_requestVO.getMessageCode(),p_requestVO.getMessageArguments());
				if( _log.isDebugEnabled())
					 _log.debug(methodName,"Exiting Error message= "+errorMessage.split(":")[1]);
				throw be;
			}
			catch(Exception e)
			{
				 _log.errorTrace(methodName, e);
				p_requestVO.setMessageCode(PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT);
				p_requestVO.setMessageArguments(tagName);
				p_requestVO.setSuccessTxn(false);
				 _log.error(methodName,"Exception e: "+e);
				throw new BTSLBaseException("XMLStringParser",methodName,PretupsErrorCodesI.EXTSYS_REQ_INVALID_FORMAT,tagName);
			}
			finally
			{
				if( _log.isDebugEnabled())
					 _log.debug(methodName,"Exiting p_requestVO="+p_requestVO.toString());
			}
		}
	 //ANKIT 

		/** Method to generate Response of subscriber threshold enquiry
		 * @name generateResponseSubscriberThresholdEnquiry
		 * @param p_requestVO
		 * @throws Exception
		 */

		public static void generateResponseSubscriberThresholdEnquiry(RequestVO p_requestVO) throws Exception
		{
			final String methodName = "generateResponseSubscriberThresholdEnquiry";
			if( _log.isDebugEnabled())
				 _log.debug(methodName,"Entered p_requestVO: "+p_requestVO.toString());
			String responseStr= null;
			StringBuffer sbf=null;
			Date currentdate = new Date();
			SenderVO senderVO = null;
			String dailySuccTransCount = null;
			String weeklySuccTransCount = null;
			String monthlySuccTransCount = null;
			String minResidualBalance = null;
			HashMap preferenceMap = null;
			PreferenceDAO preferenceDAO = null;
			PreferenceTxnDAO preferenceTxnDAO=null;
			PreferenceCacheVO preferenceCacheVO = null;
			String noValue = "0";
			try
			{
				if(p_requestVO.isSuccessTxn())
				{
					if(p_requestVO.getModule().equals(PretupsI.P2P_MODULE))
					{
						senderVO=(SenderVO)p_requestVO.getSenderVO();
					}
					preferenceTxnDAO = new PreferenceTxnDAO();
					preferenceMap = preferenceTxnDAO.loadPreferenceByServiceClassId(senderVO.getNetworkCode(), senderVO.getServiceClassID());
				}
				sbf=new StringBuffer(1024);
				sbf.append("<?xml version=\"1.0\"?><!DOCTYPE COMMAND PUBLIC \"-//Ocam//DTD XML Command 1.0//EN\" \"xml/command.dtd\"><COMMAND>");
				sbf.append("<TYPE>SUBTEQRESP</TYPE>");
				sbf.append("<DATE>"+BTSLUtil.getDateStringFromDate(currentdate)+"</DATE>");
				sbf.append("<MSISDN>"+p_requestVO.getReceiverMsisdn()+"</MSISDN>");
				if(p_requestVO.isSuccessTxn())
				{
					sbf.append("<SUBTYPE>"+senderVO.getSubscriberType()+"</SUBTYPE>");
					sbf.append("<PROFILEID>"+p_requestVO.getReceiverServiceClassId()+"</PROFILEID>");
					sbf.append("<DSUBTXNCNT>"+String.valueOf(senderVO.getDailyTransferCount())+"</DSUBTXNCNT>");
					sbf.append("<DSUBTXNAMT>"+String.valueOf(senderVO.getDailyTransferAmount())+"</DSUBTXNAMT>");
					sbf.append("<WSUBTXNCNT>"+String.valueOf(senderVO.getWeeklyTransferCount())+"</WSUBTXNCNT>");
					sbf.append("<WSUBTXNAMT>"+String.valueOf(senderVO.getWeeklyTransferAmount())+"</WSUBTXNAMT>");
					sbf.append("<MSUBTXNCNT>"+String.valueOf(senderVO.getMonthlyTransferCount())+"</MSUBTXNCNT>");
					sbf.append("<MSUBTXNAMT>"+String.valueOf(senderVO.getMonthlyTransferAmount())+"</MSUBTXNAMT>");
					sbf.append("<DMAXTRF>"+String.valueOf(senderVO.getDailyMaxTransCountThreshold())+"</DMAXTRF>");
					// Daily Success Transaction Count
					preferenceCacheVO = (PreferenceCacheVO)preferenceMap.get(PreferenceI.P2P_DAILY_SUCCESS_TXN_ALLOWED_COUNT+"_"+senderVO.getNetworkCode()+"_"+senderVO.getServiceClassID());
					if(preferenceCacheVO !=null)
						dailySuccTransCount = preferenceCacheVO.getValue();
					if(BTSLUtil.isNullString(dailySuccTransCount))
						dailySuccTransCount= String.valueOf((Long)PreferenceCache.getSystemPreferenceValue(PreferenceI.P2P_DAILY_SUCCESS_TXN_ALLOWED_COUNT));
					sbf.append("<DSUCTRN>"+dailySuccTransCount+"</DSUCTRN>");
					sbf.append("<DMAXTRFAMT>"+String.valueOf(senderVO.getDailyMaxTransAmtThreshold())+"</DMAXTRFAMT>");


					sbf.append("<WMAXTRF>"+String.valueOf(senderVO.getWeeklyMaxTransCountThreshold())+"</WMAXTRF>");
					//Weekly Success Transaction Count
					preferenceCacheVO = (PreferenceCacheVO)preferenceMap.get(PreferenceI.WE_SUCTRAN_ALLWD_P2P+"_"+senderVO.getNetworkCode()+"_"+senderVO.getServiceClassID());
					if(preferenceCacheVO !=null)
						weeklySuccTransCount = preferenceCacheVO.getValue();
					if(BTSLUtil.isNullString(weeklySuccTransCount))
						weeklySuccTransCount= String.valueOf((Long)PreferenceCache.getSystemPreferenceValue(PreferenceI.WE_SUCTRAN_ALLWD_P2P));
					sbf.append("<WSUCTRN>"+weeklySuccTransCount+"</WSUCTRN>");
					sbf.append("<WMAXTRFAMT>"+String.valueOf(senderVO.getWeeklyMaxTransAmtThreshold())+"</WMAXTRFAMT>");


					sbf.append("<MMAXTRF>"+String.valueOf(senderVO.getMonthlyMaxTransCountThreshold())+"</MMAXTRF>");
					//Monthly Success Transaction Count
					preferenceCacheVO = (PreferenceCacheVO)preferenceMap.get(PreferenceI.MO_SUCTRAN_ALLWD_P2P+"_"+senderVO.getNetworkCode()+"_"+senderVO.getServiceClassID());
					if(preferenceCacheVO !=null)
						monthlySuccTransCount = preferenceCacheVO.getValue();
					if(BTSLUtil.isNullString(monthlySuccTransCount))
						monthlySuccTransCount= String.valueOf((Long)PreferenceCache.getSystemPreferenceValue(PreferenceI.MO_SUCTRAN_ALLWD_P2P));
					sbf.append("<MSUCTRN>"+monthlySuccTransCount+"</MSUCTRN>");
					sbf.append("<MMAXTRFAMT>"+String.valueOf(senderVO.getMonthlyMaxTransAmtThreshold())+"</MMAXTRFAMT>");

					//Minimum Residual Balance threshold
					preferenceCacheVO= (PreferenceCacheVO)preferenceMap.get(PreferenceI.MIN_RESIDUAL_BAL_CODE+"_"+senderVO.getNetworkCode()+"_"+senderVO.getServiceClassID());
					if(preferenceCacheVO !=null)
						minResidualBalance= preferenceCacheVO.getValue();
					if(BTSLUtil.isNullString(minResidualBalance))
					{
						minResidualBalance = String.valueOf((Long)PreferenceCache.getSystemPreferenceValue(PreferenceI.MIN_RESIDUAL_BAL_CODE));
						minResidualBalance =PretupsBL.getDisplayAmount(Long.valueOf(minResidualBalance));
					}
					sbf.append("<MINRESBAL>"+minResidualBalance+"</MINRESBAL>");
				}
				else
				{
					sbf.append("<SUBTYPE>"+noValue+"</SUBTYPE>");
					sbf.append("<PROFILEID>"+noValue+"</PROFILEID>");
					sbf.append("<DSUBTXNCNT>"+noValue+"</DSUBTXNCNT>");
					sbf.append("<DSUBTXNAMT>"+noValue+"</DSUBTXNAMT>");
					sbf.append("<WSUBTXNCNT>"+noValue+"</WSUBTXNCNT>");
					sbf.append("<WSUBTXNAMT>"+noValue+"</WSUBTXNAMT>");
					sbf.append("<MSUBTXNCNT>"+noValue+"</MSUBTXNCNT>");
					sbf.append("<MSUBTXNAMT>"+noValue+"</MSUBTXNAMT>");
					sbf.append("<DMAXTRF>"+noValue+"</DMAXTRF>");
					sbf.append("<DSUCTRN>"+noValue+"</DSUCTRN>");
					sbf.append("<DMAXTRFAMT>"+noValue+"</DMAXTRFAMT>");
					sbf.append("<WMAXTRF>"+noValue+"</WMAXTRF>");
					sbf.append("<WSUCTRN>"+noValue+"</WSUCTRN>");
					sbf.append("<WMAXTRFAMT>"+noValue+"</WMAXTRFAMT>");
					sbf.append("<MMAXTRF>"+noValue+"</MMAXTRF>");
					sbf.append("<MSUCTRN>"+noValue+"</MSUCTRN>");
					sbf.append("<MMAXTRFAMT>"+noValue+"</MMAXTRFAMT>");
					sbf.append("<MINRESBAL>"+noValue+"</MINRESBAL>");
				}
				if(p_requestVO.isSuccessTxn())
					sbf.append("<TXNSTATUS>"+PretupsI.TXN_STATUS_SUCCESS+"</TXNSTATUS>");
				else
					sbf.append("<TXNSTATUS>"+p_requestVO.getMessageCode()+"</TXNSTATUS>");
				sbf.append("</COMMAND>");
				responseStr = sbf.toString();
				p_requestVO.setSenderReturnMessage(responseStr);
			}
			catch(Exception e)
			{
				 _log.errorTrace(methodName, e);
				 _log.error(methodName,"Exception e: "+e);
				p_requestVO.setMessageCode(PretupsErrorCodesI.P2P_ERROR_EXCEPTION);
				EventHandler.handle(EventIDI.SYSTEM_ERROR,EventComponentI.SYSTEM,EventStatusI.RAISED,EventLevelI.FATAL,"XMLStringParser[generateResponseSubscriberThresholdEnquiry]",PretupsErrorCodesI.P2P_ERROR_EXCEPTION,"","","generateResponseSubscriberThresholdEnquiry:"+e.getMessage());
			}
			finally
			{
				if( _log.isDebugEnabled())
					 _log.debug(methodName,"Exiting responseStr: "+responseStr);
			}
		}
		
		
		
		
	    public static void generateLastLoanEnqResponse(RequestVO p_requestVO) {
	    	final String methodName = "generateLastLoanEnqResponse";
	    	if(_log.isDebugEnabled()) {
	    		_log.debug(methodName, "Entered p_requestVO: ", p_requestVO.toString());
	    	}
	    	
	    	StringBuilder sbf = null;
	    	String responseStr = null;
	    	
	    	try {
	    		
	            sbf = new StringBuilder(1024);
	            sbf.append("<?xml version=\"1.0\"?><COMMAND>");
	            sbf.append("<TYPE>LSTLOANENQRESP</TYPE>");
	            if(!p_requestVO.isSuccessTxn()) {
	            	sbf.append("<TXNSTATUS>" + p_requestVO.getMessageCode() + "</TXNSTATUS>");
	            	sbf.append("<MESSAGE>" + getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments()) + "</MESSAGE>");
	            }
	            else {
	            	sbf.append("<TXNSTATUS>" + PretupsErrorCodesI.TXN_STATUS_SUCCESS + "</TXNSTATUS>");
	            	sbf.append("<MESSAGE>" + getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments()) + "</MESSAGE>");
	            
	            	sbf.append("<LASTLOANDETAILS>");
	                final HashMap requestHashMap = p_requestVO.getRequestMap();
	                if(requestHashMap !=null) {
	                	
	                	ArrayList<UserLoanVO> userLoanList = (ArrayList)requestHashMap.get("userLoanList");
	                	
	                	if(userLoanList == null || userLoanList.size() == 0) {
	                		sbf.append("<LOANDETAILS>");
	                		sbf.append("<PRODUCTCODE></PRODUCTCODE>");
	                		sbf.append("<LOANAMOUNT></LOANAMOUNT>");
							sbf.append("<LOANTHRESHOLD></LOANTHRESHOLD>");
	                		sbf.append("<LASTLOANAMOUNT></LASTLOANAMOUNT>");
	                		sbf.append("<DATEANDTIME></DATEANDTIME>");
	                		sbf.append("<SETTLEMENTSTATUS></SETTLEMENTSTATUS>");
	                		sbf.append("<PREMIUM></PREMIUM>");
	                		sbf.append("<TOTALAMOUNTDUE></TOTALAMOUNTDUE>");
	                		sbf.append("<LOANELIGIBILITY></LOANELIGIBILITY>");
	                		sbf.append("</LOANDETAILS>");
	                	}
	                	else {
	                		for(UserLoanVO vo: userLoanList) {
	                    		sbf.append("<LOANDETAILS>");
	                    		sbf.append("<PRODUCTCODE>"+ vo.getProduct_code() +"</PRODUCTCODE>");
	                    		sbf.append("<LOANAMOUNT>"+ vo.getLoan_amount() +"</LOANAMOUNT>");
								sbf.append("<LOANTHRESHOLD>"+ vo.getLoan_threhold() +"</LOANTHRESHOLD>");
	                    		sbf.append("<LASTLOANAMOUNT>" +vo.getLoan_given_amount() +"</LASTLOANAMOUNT>");
	                    		if(vo.getLast_loan_date()== null)
	                    			sbf.append("<DATEANDTIME></DATEANDTIME>");
	                    		else
	                    			sbf.append("<DATEANDTIME>" +vo.getLast_loan_date() +"</DATEANDTIME>");
	                    		
	                    		sbf.append("<SETTLEMENTSTATUS>" + vo.getSettlementStatus() +"</SETTLEMENTSTATUS>");
	                    		sbf.append("<PREMIUM>" + vo.getCalculatedPremium() +"</PREMIUM>");
	                    		sbf.append("<TOTALAMOUNTDUE>" + vo.getTotalAmountDue() +"</TOTALAMOUNTDUE>");
	                    		sbf.append("<LOANELIGIBILITY>" + vo.getLoanEligibility() +"</LOANELIGIBILITY>");
	                    		sbf.append("</LOANDETAILS>");
	                		}
	                  	}
	                }
	                sbf.append("</LASTLOANDETAILS>");
	            
	            }
	            
	            sbf.append("</COMMAND>");
	            responseStr = sbf.toString();
	            p_requestVO.setSenderReturnMessage(responseStr);
	    		}
	    	catch (Exception e) {
	            _log.errorTrace(methodName, e);
	            _log.error(methodName, "Exception e: " + e);
	            p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
	            EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
	                            "ExtAPIXMLStringParser[generateLastLoanEnqResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "",methodName+":"+ e.getMessage());
	    	} finally {
	            if (_log.isDebugEnabled()) {
	                    _log.debug(methodName, "Exiting responseStr: " + responseStr);
	            }
	    	}
	    }
		
		        /**
	     * @param p_requestVO
	     */
	    public static void generateLoanOptInOptOutResponse(RequestVO p_requestVO) {

	    final String methodName = "generateLoanOptInOptOutResponse";
	    if (_log.isDebugEnabled()) {
	        _log.debug(methodName, "Entered p_requestVO: " + p_requestVO.toString());
	    }
	    String responseStr = null;
	    StringBuilder sbf = null;
	    final java.util.Date date = new java.util.Date();
	    try {
	        sbf = new StringBuilder(1024);
	        sbf.append("<?xml version=\"1.0\"?><COMMAND>");
	        
	        if(ParserUtility.SERVICE_LOAN_OPTIN_REQ.equals(p_requestVO.getServiceType())){
	        	 sbf.append("<TYPE>LOANOPTINRES</TYPE>");
						
			}
			else if(ParserUtility.SERVICE_LOAN_OPTOUT_REQ.equals(p_requestVO.getServiceType())){
				 sbf.append("<TYPE>LOANOPTOUTRES</TYPE>");
				
			}
	        String message = p_requestVO.getMessageCode();
	        if (message.indexOf("_") != -1) {
	            message = message.substring(0, message.indexOf("_"));
	        }
	        if (p_requestVO.isSuccessTxn()) {
	            sbf.append("<TXNSTATUS>" + PretupsI.TXN_STATUS_SUCCESS + "</TXNSTATUS>");
	        } else {
	          
	            sbf.append("<TXNSTATUS>" + message + "</TXNSTATUS>");
	        }

	        final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
	        sdf.setLenient(false);
	        sbf.append("<DATE>" + sdf.format(date) + "</DATE>");
	        if(ParserUtility.SERVICE_LOAN_OPTIN_REQ.equals(p_requestVO.getServiceType())){
	        	if(p_requestVO.getResponseMap()!=null &&p_requestVO.getResponseMap().containsKey("LoanThreshold")) {
	        		sbf.append("<LOANTHRESHOLD>" + p_requestVO.getResponseMap().get("LoanThreshold") + "</LOANTHRESHOLD>");
	        	}
	        	else {
	        		sbf.append("<LOANTHRESHOLD></LOANTHRESHOLD>");
	        	}
	        	if(p_requestVO.getResponseMap()!=null &&p_requestVO.getResponseMap().containsKey("LoanAmount")) {
	        		sbf.append("<LOANAMOUNT>" + p_requestVO.getResponseMap().get("LoanAmount") + "</LOANAMOUNT>");
	        	}
	        	else {
	        		sbf.append("<LOANAMOUNT></LOANAMOUNT>");
	        	}
						
			}
	        
	        sbf.append("<MESSAGECODE>" + message + "</MESSAGECODE>");
	        sbf.append("<MESSAGE>" + getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments()) + "</MESSAGE>");
	        sbf.append("</COMMAND>");
	        responseStr = sbf.toString();
	        p_requestVO.setSenderReturnMessage(responseStr);
	    } catch (Exception e) {
	        _log.errorTrace(methodName, e);
	        _log.error(methodName, "Exception e: " + e);
	        p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
	        EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
	            "ExtAPIXMLStringParser[generateSOSSettlementResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "", "generateSOSSettlementResponse:" + e
	                .getMessage());
	    } finally {
	        if (_log.isDebugEnabled()) {
	            _log.debug(methodName, "Exiting responseStr: " + responseStr);
	        }
	    }

	    }
	    
	    public static void parseSelfChannelUserBarRequest(RequestVO p_requestVO) throws Exception {
	        final String methodName = "parseSelfChannelUserBarRequest";
	        if (_log.isDebugEnabled()) {
	            _log.debug(methodName, "Entered p_requestVO: " + p_requestVO.toString());
	        }
	        
	        String parsedRequestStr = null;
	        
	        try {
	        	
				ExtAPIStringParser.parseExtStringRequest(p_requestVO);
				p_requestVO.setRequestMSISDN((String)p_requestVO.getRequestMap().get("MSISDN"));
				 if (!BTSLUtil.isNullString((String) p_requestVO.getRequestMap().get("PIN"))) {
	                 p_requestVO.setPin((String) p_requestVO.getRequestMap().get("PIN"));
	             }
				p_requestVO.setExternalNetworkCode((String)p_requestVO.getRequestMap().get("EXTNWCODE"));
				final String requestStr = p_requestVO.getRequestMessage();
				int index = requestStr.indexOf("<PARENTMSISDN>");
	            final String parentMsisdn = requestStr.substring(index + "<PARENTMSISDN>".length(), requestStr.indexOf("</PARENTMSISDN>", index));
	            index = requestStr.indexOf("<BALANCE>");
	            final String userBalance = requestStr.substring(index + "<BALANCE>".length(), requestStr.indexOf("</BALANCE>", index));
	            index = requestStr.indexOf("<PRODUCTCODE>");
	            final String productCode = requestStr.substring(index + "<PRODUCTCODE>".length(), requestStr.indexOf("</PRODUCTCODE>", index));
	            
	        	HashMap requestHashMap = p_requestVO.getRequestMap();
	            if (requestHashMap == null) {
	                requestHashMap = new HashMap();
	            }
	            
	            requestHashMap.put("parentMsisdn", parentMsisdn);
	            requestHashMap.put("userBalance", userBalance);
	            requestHashMap.put("productCode", productCode);
	            
	            p_requestVO.setRequestMap(requestHashMap);
	            
	        	
	        }
	    	catch(Exception ex) {
	    		_log.errorTrace(methodName, ex);
	    		p_requestVO.setMessageCode(PretupsErrorCodesI.ERROR_INVALID_REQUESTFORMAT);
	    		_log.error(methodName, "Exception ex: " + ex);
	    		throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.ERROR_INVALID_REQUESTFORMAT);
	    	}
	        finally {
	        	if(_log.isDebugEnabled()) {
	        		_log.debug(methodName, "Exiting");
	        	}
	        }
	    }
	    /**
         * Added for Last N Days EVD transaction details via external system.
         *
         * @param p_requestVO
         * @throws Exception
         * @author siddharth
         */
        public static void parseExtEVDLastNTxnRequest(RequestVO p_requestVO) throws Exception{
        	final String methodName = "parseExtEVDLastNTxnRequest";
        	if(_log.isDebugEnabled()) {
        		_log.debug(methodName, "Entered p_requestVO: ", p_requestVO.toString());
        	}
        	
        	String parsedRequestStr = null;
        	
        	try {
        		final HashMap requestHashMap = new HashMap();
        		final String requestStr = p_requestVO.getRequestMessage();
        		
        		int index = requestStr.indexOf("<TYPE>");
        		final String type = requestStr.substring(index + "<TYPE>".length(), requestStr.indexOf("</TYPE>", index));
        		requestHashMap.put("TYPE", type);
        		
        		index = requestStr.indexOf("<DATE>");
        		final String date = requestStr.substring(index + "<DATE>".length(), requestStr.indexOf("</DATE>", index));
        		requestHashMap.put("DATE", date);
        		
        		index = requestStr.indexOf("<EXTNWCODE>");
        		final String extNwCode = requestStr.substring(index + "<EXTNWCODE>".length(), requestStr.indexOf("</EXTNWCODE>", index));
        		requestHashMap.put("EXTNWCODE", extNwCode);
        		
        		index = requestStr.indexOf("<MSISDN>");
        		final String msisdn = requestStr.substring(index + "<MSISDN>".length(), requestStr.indexOf("</MSISDN>", index));
        		requestHashMap.put("MSISDN", msisdn);
        		
        		index = requestStr.indexOf("<PIN>");
        		final String pin = requestStr.substring(index + "<PIN>".length(), requestStr.indexOf("</PIN>", index));
        		requestHashMap.put("PIN", pin);
        		
        		index = requestStr.indexOf("<LOGINID>");
        		final String loginId = requestStr.substring(index + "<LOGINID>".length(), requestStr.indexOf("</LOGINID>", index));
        		requestHashMap.put("LOGINID", loginId);
        		
        		index = requestStr.indexOf("<PASSWORD>");
        		final String password = requestStr.substring(index + "<PASSWORD>".length(), requestStr.indexOf("</PASSWORD>", index));
        		requestHashMap.put("PASSWORD", password);
        		
        		index = requestStr.indexOf("<EXTCODE>");
        		final String extCode = requestStr.substring(index + "<EXTCODE>".length(), requestStr.indexOf("</EXTCODE>", index));
        		requestHashMap.put("EXTCODE", extCode);
        		
        		index = requestStr.indexOf("<SERIALNUMBER>");
        		String serialno = null;
        		if(index > 0) {
            		serialno = requestStr.substring(index + "<SERIALNUMBER>".length(), requestStr.indexOf("</SERIALNUMBER>", index));
            		requestHashMap.put("SERIALNUMBER", serialno);       			
        		}

        		index = requestStr.indexOf("<DENOMINATION>");
        		String denomination = null;
        		if(index > 0) {
            		denomination = requestStr.substring(index + "<DENOMINATION>".length(), requestStr.indexOf("</DENOMINATION>", index));
            		requestHashMap.put("DENOMINATION", denomination);
        		}
        		
        		index = requestStr.indexOf("<LANGUAGE1>");
        		final String language1 = requestStr.substring(index + "<LANGUAGE1>".length(), requestStr.indexOf("</LANGUAGE1>", index));
        		requestHashMap.put("LANGUAGE1", language1);
        		

        		
        		
        		parsedRequestStr = PretupsI.SERVICE_TYPE_LST_N_EVD_TRF + CHNL_MESSAGE_SEP + serialno + CHNL_MESSAGE_SEP + denomination;
        		
        		p_requestVO.setRequestMap(requestHashMap);
        		p_requestVO.setExternalNetworkCode(extNwCode);
        		p_requestVO.setRequestMSISDN(msisdn);
        		p_requestVO.setSenderLoginID(loginId);
        		p_requestVO.setSenderExternalCode(extCode);
        		p_requestVO.setSenderLocale(LocaleMasterCache.getLocaleFromCodeDetails(language1));
        		p_requestVO.setDecryptedMessage(parsedRequestStr);
        		
        	}

        	
        	catch(Exception ex) {
        		_log.errorTrace(methodName, ex);
        		p_requestVO.setMessageCode(PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT);
        		_log.error(methodName, "Exception ex: " + ex);
        		throw new BTSLBaseException("ExtAPIXMLStringParser", methodName, PretupsErrorCodesI.C2S_INVALID_MESSAGE_FORMAT);
        	}
        	
        }
        /**
         * Added for Last N Days EVD transaction details response via external system.
         *
         * @param p_requestVO
         * @throws Exception
         * @author siddharth
         */
        public static void generateExtEVDLastNTxnResponse(RequestVO p_requestVO) {
        	final String methodName = "generateExtEVDLastNTxnResponse";
        	if(_log.isDebugEnabled()) {
        		_log.debug(methodName, "Entered p_requestVO: ", p_requestVO.toString());
        	}
        	
        	StringBuilder sbf = null;
        	String responseStr = null;
        	try {
                sbf = new StringBuilder(1024);
                sbf.append("<?xml version=\"1.0\"?><COMMAND>");
                sbf.append("<TYPE>EXTLSTNEVDTRFRESP</TYPE>");
                if(p_requestVO.isSuccessTxn()) {
                	sbf.append("<TXNSTATUS>" + PretupsErrorCodesI.TXN_STATUS_SUCCESS + "</TXNSTATUS>");
                }
                else {
                	sbf.append("<TXNSTATUS>" + p_requestVO.getMessageCode() + "</TXNSTATUS>");
                }
                
                sbf.append("<MESSAGE>" + getMessage(p_requestVO.getLocale(), p_requestVO.getMessageCode(), p_requestVO.getMessageArguments()) + "</MESSAGE>");
                
                
                sbf.append("<TXNDETAILS>");
                final HashMap requestHashMap = p_requestVO.getRequestMap();
                if (requestHashMap != null) {
                    final ArrayList lastTransferList = (ArrayList) requestHashMap.get("TRANSFERLIST");
                    if (lastTransferList != null && !lastTransferList.isEmpty()) {
                        for (int i = 0; i < lastTransferList.size(); i++) {
                            final TransferVO transferVO = (TransferVO) lastTransferList.get(i);
                            if (transferVO != null) {
                                sbf.append("<TXNDETAIL>");
                                sbf.append("<TXNDATE>" + transferVO.getTransferDateStr() + "</TXNDATE>");
                                sbf.append("<SERIALNUMBER>" + transferVO.getSerialNumber() + "</SERIALNUMBER>");
                                sbf.append("<DENOMINATION>" + transferVO.getTransferValueStr() + "</DENOMINATION>");
                                sbf.append("</TXNDETAIL>");
                            }
                        }
                    } else {
                        sbf.append("<TXNDETAIL>");
                        sbf.append("<TXNDATE></TXNDATE>");
                        sbf.append("<SERIALNUMBER></SERIALNUMBER>");
                        sbf.append("<DENOMINATION></DENOMINATION>");
                        sbf.append("</TXNDETAIL>");
                    }
                }
                sbf.append("</TXNDETAILS></COMMAND>");
                
                
 
                responseStr = sbf.toString();
                p_requestVO.setSenderReturnMessage(responseStr);
        	}catch (Exception e) {
                _log.errorTrace(methodName, e);
                _log.error(methodName, "Exception e: " + e);
                p_requestVO.setMessageCode(PretupsErrorCodesI.XML_ERROR_EXCEPTION);
                EventHandler.handle(EventIDI.SYSTEM_ERROR, EventComponentI.SYSTEM, EventStatusI.RAISED, EventLevelI.FATAL,
                                "ExtAPIXMLStringParser[generateExtEVDLastNTxnResponse]", PretupsErrorCodesI.XML_ERROR_EXCEPTION, "", "",methodName+":"+ e.getMessage());
        } finally {
                if (_log.isDebugEnabled()) {
                        _log.debug(methodName, "Exiting responseStr: " + responseStr);
                }
        	}
        }		
}
